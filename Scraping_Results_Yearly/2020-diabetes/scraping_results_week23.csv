"{'location': 'delhi', 'stats_list': [['3', '          followers'], ['4', '          following'], ['0']], 'contributions': '23 contributions\n        in the last year', 'description': ['diabetes\nlogistic reg model\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\ndata = pd.read_csv(\'diabetes2.csv\', header = 0)\nprint(data.head(5))\nprint(data.tail(5))\ndata.info()\ndata.corr()\nY=data[\'Outcome\']\nX=data.drop(\'Outcome\',axis=1)\nX = pd.get_dummies(X, drop_first = True)\nX.head()\nsns.pairplot(data,kind=\'reg\')\nplt.show()\nsns.heatmap(data.corr())\nplt.show()\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7 , test_size=0.3, random_state=10)\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(solver = \'liblinear\', class_weight=""balanced"")\nlog_reg.fit(X_train,y_train)\ny_pred = log_reg.predict(X_test)\nprint(y_pred)\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score, roc_curve, auc, roc_auc_score,confusion_matrix,classification_report\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(\'Accuracy is  :\' ,accuracy)\nprint(\'Precision is  :\',precision)\nprint(\'Recall is  :\',recall)\nprint(\'Roc Auc is  :\',roc_auc)\nprint(\'Confusion Matrix is  :\\n\',cm)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nplt.plot(false_positive_rate, true_positive_rate)\nplt.plot([0,1],[0,1],\'y--\')\n#plt.xlim([0,1])\n#plt.ylim([0,1])\nplt.title(\'Receiver Operating Characteristic\')\nplt.ylabel(\'True Positive Rate(Sensitivity)\')\nplt.xlabel(\'False Positive Rate(1-Specificity)\')\nplt.show()\nprint(""Area under the curve: "",round(auc(false_positive_rate, true_positive_rate),3))\n'], 'url_profile': 'https://github.com/Pallavi7597', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/suhaibmuneeb', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'Chicago, IL', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '11 contributions\n        in the last year', 'description': ['diabetes\nDSC 540 Project\n'], 'url_profile': 'https://github.com/salikhussaini', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'İstanbul', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '38 contributions\n        in the last year', 'description': ['The objective of the dataset (stats.csv) is to diagnostically predict whether or not a patient has diabetes,\nbased on certain diagnostic measurements included in the dataset.\n--> Epoch Progress\n\n--> Accuracy\n\n--> Variables\n\n'], 'url_profile': 'https://github.com/ahmetgiraybayturk', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'São Paulo - Brasil', 'stats_list': [['8', '          followers'], ['48', '          following'], ['5']], 'contributions': '117 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/diogenesjup', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'Karachi, Pakistan.', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/TheShahrukh', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'Israel', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '216 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/roipolanitzer', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes-Milletus-Prediction\nPredicts diabetes milletus\n'], 'url_profile': 'https://github.com/anandkumarsaw37', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'Python', 'Updated Jun 19, 2020', 'HTML', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 9, 2020', 'Jupyter Notebook', 'Updated Jun 19, 2020', 'Updated Jun 2, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['diabetes-prediction\n'], 'url_profile': 'https://github.com/varshith772', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/heyitsamulya', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'Ludhiana, Punjab', 'stats_list': [['5', '          followers'], ['1', '          following'], ['0']], 'contributions': '89 contributions\n        in the last year', 'description': ['It is a diabetes prediction notebook. Just load your dataset to your google drive, mount that drive to colab notebook and just run the notebook to get the desired results.\n'], 'url_profile': 'https://github.com/tech-mayank', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '103 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nI am going to use PIMA diabetes data for the diabetes prediction\n\\nwork in progress\n'], 'url_profile': 'https://github.com/preetam99', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '23 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/tugasm', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['7']], 'contributions': '22 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/csouflis', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'Chandigarh', 'stats_list': [['2', '          followers'], ['45', '          following'], ['0']], 'contributions': '21 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nDiabetes is a chronic condition in which the body develops a resistance to insulin, a hormone which converts food into glucose. Diabetes affect many people worldwide and is normally divided into Type 1 and Type 2 diabetes. Both have different characteristics. This article intends to analyze and create a model on the PIMA Indian Diabetes dataset to predict if a particular observation is at a risk of developing diabetes, given the independent factors. This article contains the methods followed to create a suitable model, including EDA along with the model.\nAbout Dataset\nThe dataset can be found on the Kaggle website. This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and can be used to predict whether a patient has diabetes based on certain diagnostic factors. Starting off, I use Python 3.3 to implement the model. It is important to perform some basic analysis to get an overall idea of the dataset.\nTask\n1)Exploratory Data Analysis (EDA)\n2)Checking for Multi collinearity\n3)Treating Outliers and Non-Normality\n4)Splitting the dataset into Training and Test data\n5)Model Fitting\nConclusion\nBased on the feature importance\n1)Glucose is the most important factor in determining the onset of diabetes followed by BMI and Age.\n2)Other factors such as Diabetes Pedigree Function, Pregnancies, Blood Pressure, Skin Thickness and Insulin also contributes to the prediction.\n'], 'url_profile': 'https://github.com/MuskanChaddha', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'Indore -> Delhi', 'stats_list': [['3', '          followers'], ['4', '          following'], ['0']], 'contributions': '69 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ShashwatShah24', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['3', '          following'], ['14']], 'contributions': '75 contributions\n        in the last year', 'description': ['PIMA-DIABETES\n'], 'url_profile': 'https://github.com/Anindya-Kumar-Patro', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '17 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Nuha123', 'info_list': ['Updated Jun 5, 2020', 'R', 'Updated Jun 14, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', '1', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', '1', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Jun 5, 2020']}"
"{'location': 'pune', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nA web application for diabetes prediction using Machine Learning with Kaggle Dataset.\nGetting Started\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\nInstallation\nFollow the instructions to run the system on your local machine :\nFirst, clone the project :\nhttps://github.com/pranoti-p/Diabetes-Predictor.git\nInstall the virtual environment by\npip install virtualenv\n\nThen,\nvirtualenv dpenv\n\nActivating virtual environment:\nsource dpenv/bin/activate\n\nInstalling dependencies\npip install -r requirement.txt\n\nRunning the project:\npython manage.py runserver\n\nBuilt With\npip : Dependancy Management\ndjango : Web Framework\n\nDeveloped by\nPranoti Panchwadkar\n\n'], 'url_profile': 'https://github.com/pranoti-p', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['5', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['Projeto-Diabetes\nPrevendo o diagnóstico da diabetes a partir dos dados disponibilizados pela VIGITEL - Vigilância de fatores de risco e proteção para doenças crônicas por Inquérito Telefônico, em todas as capitais brasileiras e no Distrito Federal, a partir dos microdados da pesquisa.\nSite para acesso aos dados: https://saude.gov.br/saude-de-a-z/vigitel\n'], 'url_profile': 'https://github.com/Badugi30', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'Aligarh', 'stats_list': [], 'contributions': '47 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/tieincred', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['1']], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes Classification\nThe objective of the project is to diagnostically predict whether patient has diabetes or not, based on certain diagnostic measurements included in the dataset.\nThis program builds a classifier for Pima Indians Diabetes dataset - https://www.kaggle.com/uciml/pima-indians-diabetes-database. It is a binary (2-class) classification problem. There are 768 observations with 8 input variables and 1 output variable.\nPhases of the project\n\nData Exploration\nData Cleaning\nModel Selection\nModel Parameter Tuning\nEvaluation\nConclusion\n\n'], 'url_profile': 'https://github.com/Amishi-Panwar', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'Pune', 'stats_list': [['1', '          follower'], ['3', '          following'], ['0']], 'contributions': '15 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nThe project is built using python(3.5 and above) and uses machine learning algorithms to get various accuracies and predict whether a person is prone to diabetes or not.\n'], 'url_profile': 'https://github.com/mariam2610', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'Goleta, CA', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '46 contributions\n        in the last year', 'description': ['Diabetes Forecasting\nBased on certain diagnostic measurements like BMI, blood pressure, and glucose levels, would one be able to predict whether an individual has diabetes or not? Being able to identify and predict this disease would be the first step towards stopping its progression and recommending preventative measures for those of highest risk.\nIn this project I test classification methods of SVM with linear and radial kernels, logistic regression, and kNN to predict diabetes diagnosis based on data from the National Institute of Diabetes and Digestive and Kidney Diseases\nConclusion\nOur final model was a logistic regression fit with probability threshold 0.29 and test error of 0.2844. In our limited testing set only 71.5596% predicted a diabetes diagnosis accurately. Since all the models performed comparably, we can conclude the main lack of accuracy is from the data itself, and tweaking hyperparameters would only go so far to improve each model. The diagnosis is likely linearly separable because the linear SVM performed better than the radial SVM. The final model was highly interpretable as logistic regression showed us how significant certain predictors were to others. Some of the challenges that negatively affected our ability to fit a better model included:\n\nSize: This is a relatively small dataset with only 768 original observations and after removing observations due to missing data only 724 observations remained. With a 70/30 test/train split we only had 537 training observations and 231 test observations.\nMissing Data: The original dataset contained 8 numerical predictions; however, two of these SkinThick- ness and Insulin were missing from a large number of observations. Therefore listwise would’ve resulted in a far smaller dataset, so we elected instead to remove the variables. These variables could have been significant in a diabetes diagnosis so it contributed to a weaker model.\nNumber of variables: With the complexities of the human body, it is almost impossible to use only 6 measurements to diagnose diabetes. Perhaps there would have been other measurements that could have greatly improved our accuracy rate.\nThis classifier indicated the closest linked variables to diabetes are glucose and BMI. These specific predictors can be focused on to find a physiological link; meanwhile, this classifier could be used to indicate risk of possible diabetes diagnosis.\n\n'], 'url_profile': 'https://github.com/philipyoon', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '13 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/acely-dev', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'Odense, Denmark', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '202 contributions\n        in the last year', 'description': [""Diabetes classification\nThe dataset contains 8 medical conditions features (X) :\nPregnancies, Glucose, BloodPressure, SkinThickness, Insulin,\nBMI, DiabetesPedigreeFunction, Age\nOutcome is present a binary target (y) label\n\n0 : Diabetes False\n\n\n1 : Diabetes True\n\ndimension of diabetes data: (768, 9)\n\nDataset is small but well labeled. There are no null values present.\nvery suitable to supervised machine learning formulation.\nThis is a binary classification problem, where we have 2 classes in the target (y) (i.e.df['Outcome']) and the medical conditions can be used as the feature (X).\n\n\nMachine-Learning Models\nI have used 8 different machine learning classifiers to diabetes classfication :\n\nK-Nearest Neighbors (kNN)\nLogistic regression\nDecision Tree\nRandom Forest\nGradient Boosting\nSupport Vector Machine (SVM)\nNeural Networks (Multi-level Perceptron : MLP)\nXGBoost\n\nResults are Shown below\n\nConfusion Matricies\n\nConclusion\n\nLogistic regression and Neural Netowrks seems to provide the best performance based on 10-fold cross validation of the dataset. Logistic regression achieves a higher F1-score as well, which is better metric for model evalution.\nFrom the confusion matricies, decision tree has the highest success in detecting the diabetes.\nFeature selection suggests the Glucose is the most crucial factor for the successful prediction of diabetes.\n\nDashboard\n\n\n""], 'url_profile': 'https://github.com/Vikasdubey0551', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'NONE', 'stats_list': [['8', '          followers'], ['0', '          following'], ['0']], 'contributions': '116 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/eklavyabhatia', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}","{'location': 'Delhi', 'stats_list': [['1', '          follower'], ['6', '          following'], ['3']], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shlokabhardwaj', 'info_list': ['HTML', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Aug 7, 2020', 'Python', 'Updated Jun 7, 2020', 'R', 'Updated Jun 13, 2020', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 8, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '45 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sanudas22', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/henry-sabogal', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'Clemson, SC', 'stats_list': [], 'contributions': '40 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bipinsharma236', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '153 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sdixit1998', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'Recife, Pernambuco, Brazil', 'stats_list': [['3', '          followers'], ['0', '          following'], ['4']], 'contributions': '66 contributions\n        in the last year', 'description': ['sklearn_elasticnet_diabetes\n'], 'url_profile': 'https://github.com/saulo2', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'India, willing to relocate.', 'stats_list': [['0', '          followers'], ['2', '          following'], ['12']], 'contributions': '1,716 contributions\n        in the last year', 'description': ['Diabetes-Prediction-With-Keras\nDiabetes prediction with keras, by following the tutorial\nSections\n\nLoad Data\nDefine Keras Model\nCompile Keras Model\nFit Keras Model\nEvaluate Keras Model\nTie It All Together\nMake Predictions\n\nNotes\n\n\nWrite as much code as you can in CPU before running it all in a GPU\n\n\nInstall tensorflow and keras\n!pip install tensorflow\n!pip install tensorflow-gpu\n!pip install keras\n\n\nCheck versions\nprint(tf.__version__)\n\n\nCheck for presence of GPU. Turn off GPU when not in use.\ndevice_name = tf.test.gpu_device_name()\nif device_name != \'/device:GPU:0\':\nraise SystemError(""GPU device not found"")\nprint(f\'Found GPU at: {device_name}\')\n\n\nDownload dataset using !wget -cq link\n!wget -cq https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\n\n\nImport modules, such as joblib and keras layers and models\nimport tensorflow as tf\nfrom numpy import loadtxt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom joblib import load\nfrom joblib import dump\n\n\nLoad dataset\ndataset = loadtxt(\'pima-indians-diabetes.data.csv\', delimiter=\',\')\nx = dataset[:,0:8]\ny = dataset[:,8]\n\n\nDefine the model.\n\nCreate a sequential class object\nFirst layer is the input layer, so nodes={input_dim+4}. Set the input dimension there as well. Also, set activation function as Relu\nDefine the second layer as nodes={input_dim+4}\nDefine output layer with sigmoid function\n\nmodel = Sequential()\nmodel.add(Dense(12,input_dim=8, activation=\'relu\'))\nmodel.add(Dense(8, activation=\'relu\'))\nmodel.add(Dense(1, activation=\'sigmoid\'))\n\n\nCompile the model using loss function, optimizer, and metrics to evaluate for each epoch\nmodel.compile(loss=\'binary_crossentropy\', optimizer=\'adam\', metrics=[\'accuracy\'])\n\n\nTrain model on GPU\nmodel.fit(x,y, epochs=150, batch_size=10)\n\n\nEvaluate model and print accuracy\n_, accuracy = model.evaluate(x,y)\nprint(f\'Accuracy: {accuracy*100}\')\n\n\nMake predictions using model. Without a test set this just tests recall\ny_pred = model.predict(x)\ny_pred = [1 if i>=0.5 else 0 for i in y_pred]\n\n\nCalculate statistics\ntotal = 0\ncorrect = 0\nwrong = 0\nfor i in range(len(y_pred)):\ntotal = total + 1\nif y_pred[i] == y[i]:\n    correct = correct + 1\nelse:\n    wrong = wrong + 1\n\n\nPipeline model\n\nDump model\nLoad model\nEvaluate model and print accuracy\nMake predictions using model. Without a test set this just tests recall\nCheck if they match previous stats in step 13.\n\ndump(model, \'model.sav\')\ntest_model = load(\'model.sav\')\n_, accuracy = test_model.evaluate(x,y)\nprint(f\'Accuracy: {accuracy*100}\')\ntest_y_pred = test_model.predict(x)\ntest_y_pred = [1 if i>=0.5 else 0 for i in test_y_pred]\ntest_total = 0\ntest_correct = 0\ntest_wrong = 0\nfor i in range(len(test_y_pred)):\ntest_total = test_total + 1\nif test_y_pred[i] == y[i]:\n    test_correct = test_correct + 1\nelse:\n    test_wrong = test_wrong + 1\nprint(f""Loaded Model: \\n Total: {test_total} \\n Correct: {test_correct} \\n Wrong: {test_wrong}"")\n\n\nOutput\nAccuracy: 76.953125\nLoaded Model:\n Total: 768\n Correct: 591\n Wrong: 177\nProject status\nProject has been completed successfully\n'], 'url_profile': 'https://github.com/D-Bhatta', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'Azerbaijan', 'stats_list': [['167', '          followers'], ['2', '          following'], ['38']], 'contributions': '357 contributions\n        in the last year', 'description': ['Classifying Diabetes using Artificial Neural Networks\nThis dataset is used to predict whether or not a patient has diabetes, based on given features/diagnostic measurements.\nOnly female patients are considered with at least 21 years old of Pima Indian heritage.\nInputs:\nPregnancies: Number of times pregnant\nGlucosePlasma: glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkin: ThicknessTriceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)^2)\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutputs:\nDiabetes or no diabetes (0 or 1)\nAcknowledgements Smith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). Using the ADAP learning algorithm to forecast the onset of diabetes mellitus. In Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). IEEE Computer Society Press.\n'], 'url_profile': 'https://github.com/NijatZeynalov', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'Boston', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '24 contributions\n        in the last year', 'description': ['Diabetes_Prediction_Analysis\n'], 'url_profile': 'https://github.com/RashmiAyas95', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '70 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/VipinSingh001', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['Diabetes Prediction Using KNN Algorithm\n'], 'url_profile': 'https://github.com/prajjwalshrivastava', 'info_list': ['Jupyter Notebook', 'Updated Jun 5, 2020', 'PHP', 'Updated Jun 10, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Python', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 8, 2020', 'Python', 'MIT license', 'Updated Jun 17, 2020', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020']}"
"{'location': 'Pune', 'stats_list': [['1', '          follower'], ['15', '          following'], ['5']], 'contributions': '22 contributions\n        in the last year', 'description': ['Diabetes_PIMA_Prediction\nMy Analysis for Diabetes PIMA dataset\nIt is based on firstly the data analysis or feature Engineering so as to choose among the most impacting variables.\nVarious Machine Learning models are trained and correlation is made using corrilation matrix.\nVarious others classification paramters like F1 Score, Accuracy score, Confusion matrix are compared and a final decision is based on all these parameters.\n'], 'url_profile': 'https://github.com/rohit10tiwari', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'New York', 'stats_list': [], 'contributions': '12 contributions\n        in the last year', 'description': ['vapi-tools CLI\nThis set of tools is a collection of tools developed to drive the PowerAI Vision API for test\npurposes. Each tool is small and directed at a specific API endpoint. Since testing the API\nendpoints was the primary purpose of the tools, most have very little if any validation of inputs\nand the ""create"" tools usually require JSON for the input. This approach was chosen so that\nit would be easy to drive invalid input to the endpoints and to provide raw JSON to validate\nendpoint output.\nUnfortunately, this approach does not make them very user friendly. Not only are parameters\nnot validated, but tools are not task based. For example, deplopyed models are\nmanipulated/managed via the *WebApi tools. To deploy a model, the createWebApi tool is used.\nEven though the tools have usability shortcomings, they are being shared at this time to provide\nexamples of how the API can be accessed using Python.\nThe API documentation is included in this repo in the file vision/docs/powerai-vision-api.html or\nat this Link\nto get the rendered html.\nUsage\nSetup\nThe tools require the Python requests package. Other than that, all other packages are part\nof the base Python installation.\nYou must set PYTHONPATH to include the directory containing vapi_core.py as this file is\nimported by all commands.\nConfiguration\nThere are 2 required pieces of configuration -- one for the server hosting PowerAI Vision and\none for user authentication information.\nIn release 1.1.1.0 mutli-user support was added. This capability requires a token be passed\ninstead of user authentication. The token can be obtained via the getVisionTokenPass\ncommand. Once obtained, the token must be saved in the exported environment variable VAPI_TOKEN.\nThe toolset is setup to look for the VAPI_TOKEN environment variable first. If found,\nthe toolset will use the multi-user authentication method. If the VAPI_TOKEN is not set,\nthe toolset will look for the authentication information in the config file described below.\nA JSON config file is used to obtain the server information (as well as other optional\nconfiguration information). The config file provides the following information:\n\nhostname  -- identifies the powerai-vision server to contact. This parameter is required.\nAuth      -- used for release 1.1.0.0 authentication\nlogLevel  -- indicates the level of logging detail. See the Logging section below for\nmore details.\n\nFor example:\n{\n    ""hostname"" : ""powerai-vision-server.mycompany.com"",\n    ""Auth""    : [ ""user1"", ""MyPassw0rd"" ],\n    ""logLevel"": 40\n}\n\nNote that the attribute for authentication information is Capitalized and will only be used\nif the VAPI_TOKEN environment variable (described previously) is not found.\nThe file path to the config file can be identified via the VAPI_CFG environment variable or the file\n$HOME/vapi.cfg is the default file path. Use of the envirnment variable makes it easier to access different\nPowerAI Vision Servers.\nLogging\nThe tools use the Pthon logging facility. The level is controled via an optional field in the\nVAPI_CFG file. This field is logLevel and values must be numeric.\n\nDEBUG -- 10\nINFO  -- 20\nWARN  -- 30\nERROR -- 40\nCRITICAL -- 50 (this level is not used in the tools)\n\nCurrently logging goes to STDERR which can be redirected on the command line.\nNote that to see more details about the interaction the API endpoints, setting logLevel to 10.\nInput Limitations for Creating Objects\nIn the current form, each ""create"" command requires a JSON string as input. This string\ncontains the information to be sent to the API. This approach was chosen because it was\nthe easiest to code in Python and it also allows a way to provide invalid input with\nwhich to test the API.\nNote that for some of the commands, argument flags are now supported.\nTry the command with no parameters or with --help to get a usage statement.\nTools of Special Note\ngetVisionTokenPass\ngetVisionTokenPass is the tool that will get an access token given a user name\nand password as input. As mentioned previously, a token is required to access the\nPowerAI Vision API endpoints in versions 1.1.1.0 and later.\nInference Tools\nMore information and documentation on doing inferences is being worked. For now, the best\nexample for inferences is the classify_dir script which will classify all images in a given\ndirectory and summarize the results into a CSV file.\nAn object detection script will be added in the future.\neventMonitor\neventMonitor can be used to monitor the SSE events for a particular user.\nWith the introduction of multi-user support in version 1.1.1.0, events are generated\non a user by user basis such that ""userA"" will not see ""userB""\'s events and vice\nversa.\nNon-API Commands\ncleanPropJson\nThis command can be used to cleanup the prop.json file found in dataset export zip files.\nExamples\ncreate a dataset\nuser@my-mac:~/projects/vision/tools$ ./createDataset \'{""name"":""newDataset"", ""scenario"":""other""}\'\n{\n  ""dataset_id"": ""cd020043-852c-4452-af36-8ec411bb9aa7"", \n  ""result"": ""success""\n}\n\nget list of datasets\nuser@my-mac:~/projects/vision/tools$ ./getDatasets\n[\n  {\n    ""locked"": 0, \n    ""name"": ""Carls new Dataset"", \n    ""scenario"": ""bcarl Test"", \n    ""created_at"": 1519423636017, \n    ""total_file_count"": 0, \n    ""updated_at"": 1519423636017, \n    ""owner"": ""admin"", \n    ""usage"": ""generic"", \n    ""_id"": ""fc57acb4-1a05-4cc6-9998-0ec48d7f5724"", \n    ""type"": 0\n  }, \n  {\n    ""locked"": 0, \n    ""name"": ""newDataset"", \n    ""scenario"": ""bcarl Test"", \n    ""created_at"": 1519423218372, \n    ""total_file_count"": 0, \n    ""updated_at"": 1519423259434, \n    ""owner"": ""admin"", \n    ""usage"": ""generic"", \n    ""_id"": ""cd020043-852c-4452-af36-8ec411bb9aa7"", \n    ""type"": 0\n  }\n]\n\nUpload a File\nThere are 2 ways to upload files. Using uploadFile allows uploading a single file.\nThis tool was the original written to do uploads. The second method is uploadFiles.\nIt supports uploading multiple files at a time. Both of these tools now support\ninput args.\nSample usage:\nuser@my-mac:~/projects/vision$ uploadFiles --help\nusage: uploadFiles [-h] --dsid DSID [--catid CATID] [--catname CATNAME]\n                   filepaths [filepaths ...]\n\nTool to upload files to powerai vision\n\npositional arguments:\n  filepaths          space separated list of paths to upload.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --dsid DSID        ID of the dataset to upload into\n  --catid CATID      ID of the category to which the file belon\n\nuploadFiles example:\nuser@my-mac:~/projects/vision/tools$ ./uploadFiles --dsid fc57acb4-1a05-4cc6-9998-0ec48d7f5724 $HOME/projects/vision/images/IMG_0023.jpg\n{""result"":""success"",""id"":""5f6b2958-c0d6-47b0-a053-ecb1a6927650"",""dataset_id"":""fc57acb4-1a05-4cc6-9998-0ec48d7f5724""}\n\nChange File Category\nuser@my-mac:~/projects/vision/tools$ ./chgFileCategory fc57acb4-1a05-4cc6-9998-0ec48d7f5724 5f6b2958-c0d6-47b0-a053-ecb1a6927650 37d390a9-d975-4e25-accf-c9c8bb22fea3\n{\n  ""dataset_id"": ""fc57acb4-1a05-4cc6-9998-0ec48d7f5724"", \n  ""category_id"": ""37d390a9-d975-4e25-accf-c9c8bb22fea3"", \n  ""result"": ""success"", \n  ""id"": ""5f6b2958-c0d6-47b0-a053-ecb1a6927650""\n}\n\nListing Files\nListing files is done via the getFiles script. Different data will\nbe included in the resulting json depending upon the type of file\n(e.g. video files, photos, video frames).\nuser@my-mac:~/projects/vision/tools$ ./getFiles fc57acb4-1a05-4cc6-9998-0ec48d7f5724\n[\n  {\n    ""category_id"": """", \n    ""file_name"": ""5f6b2958-c0d6-47b0-a053-ecb1a6927650.jpg"", \n    ""created_at"": 1519424311974, \n    ""label_file_key"": ""fc57acb4-1a05-4cc6-9998-0ec48d7f5724IMG_0023"", \n    ""meta_data"": {\n      ""width"": 1600, \n      ""height"": 1200\n    }, \n    ""dataset_id"": ""fc57acb4-1a05-4cc6-9998-0ec48d7f5724"", \n    ""_id"": ""5f6b2958-c0d6-47b0-a053-ecb1a6927650"", \n    ""category_name"": """"\n  }\n]\n\nSaving Labels\nWhen saving labels to a file, PowerAI Vision requires that all labels associated with\nthe file be specified in the save operation. In other words, PowerAI Vision cannot\n""add"" one or more labels to an existing set of labels.\nThis requirement means that if one wants to add an additional label to an existing set,\nthey have perform the following sets\n\nGet the current labels for the file from PowerAI Vision (via getFileLabels).\nAdd the new label(s) to that returned set of labels (either via a script or\nhand editing the returned data.\nSave the now complete set of labels back to PowerAI Vision (via saveFileLabels).\nNote that only the array of labels need be in the file passed to saveFileLabels.\n\nGetting file labels\n$ ./getFileLabels b0e03bdf-3bf1-4927-9753-a8b9ecaaebba ""0c0a0dbb-6bbb-4917-83f2-39fada2c092c""\n\n{\n  ""_id"": ""00fedee0-6d5b-493b-adec-43a0d8b0b021"",\n  ""created_at"": 1534226686220,\n  ""dataset_id"": ""b0e03bdf-3bf1-4927-9753-a8b9ecaaebba"",\n  ""label_file_key"": ""0c0a0dbb-6bbb-4917-83f2-39fada2c092c"",\n  ""labels"": [\n    {\n      ""name"": ""white car"",\n      ""bndbox"": {\n        ""xmin"": 596,\n        ""ymin"": 221,\n        ""xmax"": 757,\n        ""ymax"": 342\n      },\n      ""generate_type"": ""manual""\n    },\n    {\n      ""name"": ""black car"",\n      ""bndbox"": {\n        ""xmin"": 312,\n        ""ymin"": 192,\n        ""xmax"": 439,\n        ""ymax"": 284\n      },\n      ""generate_type"": ""manual""\n    }\n  ]\n}\n\nUpdating the label list\nEdit the saved labels to add (in this case) the new label(s). The resulting file should should\nonly contain the label array as shown below.\n [\n    {\n      ""name"": ""white car"",\n      ""bndbox"": {\n        ""xmin"": 596,\n        ""ymin"": 221,\n        ""xmax"": 757,\n        ""ymax"": 342\n      },\n      ""generate_type"": ""manual""\n    },\n    {\n      ""name"": ""black car"",\n      ""bndbox"": {\n        ""xmin"": 312,\n        ""ymin"": 192,\n        ""xmax"": 439,\n        ""ymax"": 284\n      },\n      ""generate_type"": ""manual""\n    }\n    {\n      ""name"": ""black car"",\n      ""bndbox"": {\n        ""xmin"": 500,\n        ""ymin"": 200,\n        ""xmax"": 600,\n        ""ymax"": 250\n      }\n    } \n]\n\nSaving the updated label list\nUse the saveFileLabels tool to save the modified label list.\n$ ./saveFileLabels --ds  b0e03bdf-3bf1-4927-9753-a8b9ecaaebba --file ""0c0a0dbb-6bbb-4917-83f2-39fada2c092c"" --lab /tmp/labels\n{\n  ""result"": ""success""\n}\n\nChecking that the labels are saved\nFor peace of mind, you can get the labels again to ensure that they have been updated.\n16:51 $ ./getFileLabels b0e03bdf-3bf1-4927-9753-a8b9ecaaebba ""0c0a0dbb-6bbb-4917-83f2-39fada2c092c""\n{\n  ""_id"": ""00fedee0-6d5b-493b-adec-43a0d8b0b021"",\n  ""created_at"": 1534226686220,\n  ""dataset_id"": ""b0e03bdf-3bf1-4927-9753-a8b9ecaaebba"",\n  ""label_file_key"": ""0c0a0dbb-6bbb-4917-83f2-39fada2c092c"",\n  ""labels"": [\n    {\n      ""name"": ""white car"",\n      ""bndbox"": {\n        ""xmin"": 596,\n        ""ymin"": 221,\n        ""xmax"": 757,\n        ""ymax"": 342\n      },\n      ""generate_type"": ""manual""\n    },\n    {\n      ""name"": ""black car"",\n      ""bndbox"": {\n        ""xmin"": 312,\n        ""ymin"": 192,\n        ""xmax"": 439,\n        ""ymax"": 284\n      },\n      ""generate_type"": ""manual""\n    },\n    {\n      ""name"": ""black car"",\n      ""bndbox"": {\n        ""xmin"": 500,\n        ""ymin"": 200,\n        ""xmax"": 600,\n        ""ymax"": 250\n      },\n      ""generate_type"": ""manual""\n    }\n  ]\n}\n\nTODOS\n\nAdd command line parameter processing to ease creation of objects and to allow the use\nof object names instead of IDs.\nAdd the ability to better manage the logging facility in the config file.\nAdd more base commands to cover each of the operations available on each of the\nAPI endpoints.\nCreate an API library that can be used to build more complex operations\nAdd more complex operations (e.g. object dection on a directory of files,\nor a multiple stage inference example)\nDevelop basic test suite for the API.\n\nSuggestions and Getting Help\nSuggestions and recommendations are welcome. Please use Git Hub issues on the\npowerai repo to report suggestions, recommendations, and problems.\n'], 'url_profile': 'https://github.com/ProshantaSaha', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'Lucknow', 'stats_list': [['4', '          followers'], ['25', '          following'], ['45']], 'contributions': '57 contributions\n        in the last year', 'description': ['Diabetic_Kaggle_NN\nDiabetes dataset analysis using Neural Networks.\nDataset can be downloaded from :-\nhttps://www.kaggle.com/saurabh00007/diabetescsv\n'], 'url_profile': 'https://github.com/vaibhavxlr', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'Bengaluru', 'stats_list': [['1', '          follower'], ['4', '          following'], ['18']], 'contributions': '37 contributions\n        in the last year', 'description': ['Linear-Regression-on-Diabetes-dataset\nDiabetes dataset is one of the datasets available in sklearn. The diabetes dataset consists of 10 physiological variables (age, sex, weight, blood pressure) measure on 442 patients, and an indication of disease progression after one year.\n'], 'url_profile': 'https://github.com/adiagarwalrock', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'New Delhi, India', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '39 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Rishabhgaur1998', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '13 contributions\n        in the last year', 'description': ['Pima_Indians_Diabetes-Logistic_regression\n'], 'url_profile': 'https://github.com/Rohithraj98', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['3', '          following'], ['1']], 'contributions': '112 contributions\n        in the last year', 'description': ['Does pregnancies lead to diabetes?\n\n\nThis study was carried out to investigate the significance of health-related predictors of diabetes in Pima Indian Women.\n\n\nMany types of research by the U.S health department show that Native Americans are at more risk of getting diabetes than any other racial group.\n\n\nThis dataset contains patient details who are of Pima Indians/Native American origin and are females of at least 21 years old.\n\n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and the variables of this dataset are selected based on certain criteria from a larger dataset.\n\n\nData Source: https://www.kaggle.com/uciml/pima-indians-diabetes-database\n\n\n Business Objective \n\nIdentify if the number of times a female is pregnant has any impact on diabetes\n\n  Why is this question important?\n\nThis exploration is worthy as researches have shown that women of Native American(Pima Indian Origin), White or Asian origin are at more risk of getting Diabetes called Gestational Diabetes when they are pregnant. For most of them this Diabetes converts to type 2 diabetes after the pregnancy goes away.\n\n Method Used \nLogit - Binary Logistic regression\n'], 'url_profile': 'https://github.com/vidhigandhi94', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['5']], 'contributions': '66 contributions\n        in the last year', 'description': ['Diabetes-Classification-ML-Models-WebApp\nA simple Web App to learn and Visualize various Classification Models and understand their parameters.\n\ninstall pipenv : pip install pipenv\nrun pipenv shell: pipenv shell\ninstall dependencies: pipenv install\nrun project: streamlit run app.py\n\nIt will open in your deafault browser.\n'], 'url_profile': 'https://github.com/Vageshwar', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'New Delhi', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '84 contributions\n        in the last year', 'description': ['Comparison-of-classification-algo-for-Diabetes-prediction\nA comparison of classification algorithm for diabetes prediction\nAbout the Dataset : https://www.kaggle.com/uciml/pima-indians-diabetes-database\nClassification Algorithms used : SVM, Random Forest, Naive Bayes\n'], 'url_profile': 'https://github.com/DebBiswas07', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['3', '          following'], ['17']], 'contributions': '45 contributions\n        in the last year', 'description': ['Diabetes-Prediction-models-comparison-with-Gui\nThis python file will compare accuracy of different ML and AI models on the Pima Indian Diabetes dataset and a small GUI to make predictions from the logistic regression model. This project was done as a part of Mini project for my sem 4 Engineering SE- IT\n\n'], 'url_profile': 'https://github.com/Zorrat', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jun 3, 2020', 'Jupyter Notebook', 'Updated Sep 3, 2020', '1', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'Jupyter Notebook', 'Updated Jun 7, 2020', 'HTML', 'Updated Jun 10, 2020', 'Python', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 5, 2020']}"
"{'location': 'Germany', 'stats_list': [['1', '          follower'], ['18', '          following'], ['9']], 'contributions': '44 contributions\n        in the last year', 'description': ['PIMA-Indian-Diabetes-Prediction-by-AV\nMachine learning withPrima Indian Diabetis Dataset\nWorking with Google Colab\nContext\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nContent\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nAcknowledgements\nSmith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). Using the ADAP learning algorithm to forecast the onset of diabetes mellitus. In Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). IEEE Computer Society Press.\nInspiration\nCan you build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\nSource of the dataset\nhttps://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/andresvivancov', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '25 contributions\n        in the last year', 'description': ['comparative-analysis-on-classification-algorithm-on-pima-Indian-Diabetes\n'], 'url_profile': 'https://github.com/Likidha', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '18 contributions\n        in the last year', 'description': ['comparative-analysis-on-classification-algorithm-on-pima-Indian-Diabetes\n'], 'url_profile': 'https://github.com/Rasikaa-S', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['COMPARATIVE-ANALYSIS-OF-CLASSIFICATION-ALGORITHM-ON-PIMA-INDIAN-DIABETES\n'], 'url_profile': 'https://github.com/Pavithrapaneerselvam', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'Chicago, IL', 'stats_list': [['12', '          followers'], ['20', '          following'], ['89']], 'contributions': '1,118 contributions\n        in the last year', 'description': ['Support Vector Machine\nUsing Support Vector Machine for classification on diabetes data and regression on red wine quality. This code explores ways of using SVM and other discriminant analysis methods.\nSetup\n\n\nNeeded\n\n\nscipy\n\n\nnumpy\n\n\nmatplotlib\n\n\nscikit-learn\n\n\njupyter\n\n\n'], 'url_profile': 'https://github.com/SansBasnet', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '201 contributions\n        in the last year', 'description': ['UTSA-Health-Science-2020\nMotivation and Essential Understandings\nPima Indians living in Mexico have a diabetes prevalence of about 8%, whereas those who have emigrated to the USA, where the lifestyle is more sedentary and access to energy dense (fatty) food is easier, have a diabetes prevalence of about 50% respectively. The N.I.H. believes that if it can understand why the Pima are so obese it can better understand obesity in the rest of us.\n•\tIs Type 2 Diabetes Mellitus caused by a person’s environment (i.e., from obesity caused by overnutrition) or by their genetic makeup?\nContext and Dataset\nStudents in Life & Health Sciences will interpret visualizations using data from the Pima Indian dataset based on a population of women who were at least 21 years old, of Pima Indian heritage and living near Phoenix, Arizona. This population was tested for diabetes according to World Health Organization criteria. Students will use this information to suggest a public health campaign.\nLearning Objectives\nStudents will be able to:\n•\tDescribe the Pima Indian population in terms of historical health data\n•\tExplore correlations associated with diabetes\n•\tUse data visualizations to explain predictors for diabetes\n•\tApply analysis in the context of creating a public health plan\nData Science Concepts and Skills\n\nSummary statistics\nExploratory data analysis; Static data visualization\nData wrangling\nHypothesis testing\nPredictive modeling with Decision tree; Logistic Regression\n\nStudents\nThis lesson is for late undergraduate students. Students should be familiar with statistical concepts, basic data visualizations, and have worked in Excel.\nTime to Teach this Lesson\nThis lesson can be taught in 2 sessions using a worksheet\n'], 'url_profile': 'https://github.com/generationai', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'India', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '144 contributions\n        in the last year', 'description': ['LinearRegression_Using_SystemML\nPerform some mathematical operation and Linear Regression on Diabetes data using system ml\n'], 'url_profile': 'https://github.com/Rudresh99', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'Patiala,India', 'stats_list': [['11', '          followers'], ['84', '          following'], ['100']], 'contributions': '210 contributions\n        in the last year', 'description': ['GWO-Implementation\nDiagnosis of diabetes using optimized fuzzy rule set by grey wolf optimization\n'], 'url_profile': 'https://github.com/prinzuchoudhury', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['IJRASET28917\nPredictive Analysis on Diabetes, Liver and Kidney Diseases Using Machine Learning.\nHealthcare data analysis is becoming one of the most promising research areas. Diabetes, Liver Disease and Chronic Kidney Disease combinedly affects a mass of world’s population.\nThe objective of this project is to assess the efficiency and accuracy of the used Machine Learning models for the prediction of these three diseases. It focuses on structured data and for the best possible output classification and prediction, advanced machine learning algorithms like Random Forest, Decision Tree, Naive Bayes Classification, XGBoost Classifier, Kernel Support Vector Classification and Logistic Regression has been used.\nFor more details, refer to https://www.ijraset.com/archive-detail.php?AID=106 S.no 373, Title: Predictive Analysis on Diabetes, Liver and Kidney Diseases using Machine Learning.\n'], 'url_profile': 'https://github.com/shrutikatiyar', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}","{'location': 'India', 'stats_list': [], 'contributions': '164 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sasikirankaye', 'info_list': ['Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 7, 2020', 'Python', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 6, 2020', 'Updated Jun 6, 2020', 'Python', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 5, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'MATLAB', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Jun 6, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '7,593 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/NumtraCG', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['9', '          following'], ['2']], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetic-Retinopathy\nDatabase for this challenge is taken from IDRiD (Indian Diabetic Retinopathy Image Dataset). The aim of the project is to evaluate algorithms for automated detection and grading of diabetic retinopathy and diabetic macular edema using retinal fundus images.\n'], 'url_profile': 'https://github.com/walt1702', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}","{'location': 'Salem, Tamilnadu, India', 'stats_list': [['2', '          followers'], ['3', '          following'], ['0']], 'contributions': '15 contributions\n        in the last year', 'description': ['Healthcare_NIDDK\nNIDDK (National Institute of Diabetes and Digestive and Kidney Diseases) research creates knowledge about and treatments for the most chronic, costly, and consequential diseases.The dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.Build a model to accurately predict whether the patients in the dataset have diabetes or not.\n'], 'url_profile': 'https://github.com/iamgokhu', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': [""SVM\nImplementing SVM using different gradient methods (mini-batch, stochastic, etc.) to predict if a person has or doesn't have diabetes.\nTo estimate the w, b of the soft margin SVM, we can minimize the loss function:\n\n\n\nIn order to minimize the function, we first obtain the gradient with respect to wj, the jth item in the vector w, as follows:\n\n\n\nwhere:\n\n\n\nAs well as the gradient with respect to b:\n\n\n\nwhere:\n\n\n\nCommand line to run the program: python3 SVM_gradient_descent.py data.txt\nData\nData.txt contains the data description (first 13 lines of the file), and a matrix with 9 columns and 760 rows. Columns 1-8 are input features, and column 9 is the class label. The features present in the dataset are the following: number of times pregnant, plasma glucose concentration a 2 hours in an oral glucose tolerance test, diastolic blood pressure (mm Hg), triceps skin fold thickness (mm), 2-Hour serum insulin (mu U/ml), body mass index (weight in kg/(height in m)^2), diabetes pedigree function, age (years), class (-1 tested negative, +1 tested positive).\nAlgorithms\nBatch Gradient Descent\n\n\n\nwhere,\nk is the number of iterations,\nn is the dimensions of w,\nη is the learning rate of the gradient descent, and\n∇wj J(w, b) and ∇bJ(w, b) are the values computed from both equations given above.\nThe convergence criteria for the above algorithm is ∆%cost < ε, where\n\n\n\nJk(w,b) is the value of the loss function at kth iteration and the convergence criteria is computed at the end of the while loop.\nInitialize w = 0, b = 0 and compute J0(w, b) with these values.\nFor this method, it is recommended to use η = 0.000000001 and ε = 0.04, or you can adjust these hyperparameters by yourself until you obtain reasonable results.\nStochastic Gradient Descent\n\n\n\nThe convergence criteria for the above algorithm is ∆%cost < ε, where\n\n\n\nFor this method, it is recommended to use η = 0.00000001,ε = 0.0003, or you can adjust these hyperparameters by yourself until you obtain reasonable results.\nMini Batch Gradient Descent\n\n\n\nThe convergence criteria for the above algorithm is ∆%cost < ε, where\n\n\n\nFor this method, it is recommended to use η = 0.00000001, ε = 0.004, batch size = 4, or you can adjust these hyperparameters by yourself until you obtain reasonable results.\nTasks\nImplement the different algorithms, run them on the given dataset and plot the value of the cost function Jk(w,b) vs. the number of iterations (k). Report the total time taken for convergence by each of the gradient descent techniques.\nResults\n\n\n\nTime batch gradient descent (in sec): 0.00840 \nTime stochastic gradient descent (in sec): 0.2467 \nTime mini gradient descent (in sec): 0.07650 \n\n\n\nClass project for Machine Learning - Spring 2020\n""], 'url_profile': 'https://github.com/mpchiari', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}","{'location': 'Chhattisgarh', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '116 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/satishsharmaapo', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}","{'location': 'Dhaka, Bangladesh', 'stats_list': [['6', '          followers'], ['13', '          following'], ['46']], 'contributions': '256 contributions\n        in the last year', 'description': [""Predicting heart disease using machine learning\nThis notebook looks into using various Python-based machine learning and data science libraries in an attempt to build a machine learning model capable of predicting whether or not someone has heart disease based on their medical attributes. We're going to take the following approach:\n\nProblem definition\nData\nEvaluation\nFeatures\nModelling\nExperimentation\n\nHow to use?\n-Clone the repository\nGit clone https://github.com/tanvirakibul/heart-disease-project.git\nOpen with:\nJupyter Notebook / Google Colab\n""], 'url_profile': 'https://github.com/tanvirakibul', 'info_list': ['Jupyter Notebook', 'Updated Jun 4, 2020', '1', 'Jupyter Notebook', 'Updated Jun 6, 2020', 'Jupyter Notebook', 'Updated Jun 1, 2020', 'Python', 'Updated Jun 13, 2020', '1', 'Java', 'Updated Jun 5, 2020', '2', 'Jupyter Notebook', 'Updated Sep 8, 2020']}",,,,
