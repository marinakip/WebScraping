"{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/muim1', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes Prediction using Machine Learning.\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features like Number of Pregnancies, Insulin Level, Age, BMI.The data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not.""\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project . If you are looking for all the following points in this repo then i have not covered all in this repo. I\'m working on blog about this mini project and I\'ll update the link of blog about all the points in details later . (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displyed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\n\nRUN\n\nExecute the command: python app.py\n\nBug Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nTeam\nSarvesh Kumar Sharma\nLICENSE\n-GNU GENERAL PUBLIC LICENSE Version 3\n'], 'url_profile': 'https://github.com/rampraveenreddy1', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'Thessaloniki', 'stats_list': [['3', '          followers'], ['4', '          following'], ['3']], 'contributions': '133 contributions\n        in the last year', 'description': ['This repo contains python code to analyze the pima indians diabetes data.\nThe datasets can be accesed here kaggle.com.\nAt the same location there is also a description of the data.\nThis repo is mainly focussed on feature selection.\n'], 'url_profile': 'https://github.com/foukonana', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'Malaysia', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '53 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hafizamer', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes Prediction:\n      Diabetes is considered as one of the deadliest and chronic diseases which \n      cause an increase in blood sugar.Many complications occur if diabetes remains\n      untreated and unidentified. The tedious identifying process results in visiting\n      of a patient to a diagnostic centre and consulting doctor. But the rise in machine learning \n      approaches solves this critical problem. \n\nProblem statement:\n            Problem statement was to predict whether or not a given female patient will\n            contract diabetes based on feature such as BMI, age, and number of pregnancies.\n            A target value of 0 indicates that the patient doesnot have diabetes, while a value\n            of 1 indicates that the patient does have diabetes using Decision Tree algorithm.\n\nDataset creation:\n         For data collection I used PIMA Indian Dataset. The dataset consists of \n         following parameters:\n\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable/Outcome (0 or 1)\n\nAlgorithm:\n           Decision Tree is a Supervised learning technique that can be used for\n           both classification and Regression problems, but mostly it is preferred \n           for solving Classification problems. It is a tree-structured classifier,\n           where internal nodes represent the features of a dataset, branches represent\n           the decision rules and each leaf node represents the outcome. \n                       In a Decision tree, there are two nodes, which are the Decision Node and \n           Leaf Node. Decision nodes are used to make any decision and have multiple branches,\n           whereas Leaf nodes are the output of those decisions and do not contain any further \n           branches. The decisions or the test are performed on the basis of features of the \n           given dataset.\n\nSoftware and Python libraries:\n\nPython 2.7\nNumPy\nPandas\nscikit-learn\nmatplotlib\nos\n\nConclusion:\n             In this project, I have demonstrated a machine learning approach to predict whether\n             or not a given female patient will contract diabetes using Decision Tree Algorithm\n             Result shows accuracy of around 80%.\n\n'], 'url_profile': 'https://github.com/CodeTech97', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['DiabetesPrediction\n'], 'url_profile': 'https://github.com/rampraveenreddy1', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['1', '          following'], ['2']], 'contributions': '409 contributions\n        in the last year', 'description': ['DiabetesHelperOTF\n'], 'url_profile': 'https://github.com/Bowtie8904', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '34 contributions\n        in the last year', 'description': ['dataset : https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008\n'], 'url_profile': 'https://github.com/msd8991', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'Python', 'Updated Feb 5, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Java', 'MIT license', 'Updated Oct 18, 2020', 'Python', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Sep 1, 2020', 'Updated Aug 26, 2020']}"
"{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['SPS-3982-Diabetes-Prediction-using-Machine-Learning\nDiabetes Prediction using Machine Learning\ndocumentation:\nstep1: first of all I compared logistic and nearest neighbour accuracy\nstep2: then I imported libraries\nstep 3: then I imported dataset\nstep4: then I checked the data information there were no null values\nstep 5: then I analysed the shape of data that how many rows are there or how many colomns so there were 768 rows and 9 coloumn\nstep 6:then I checked the heat map\nstep 7: then I crecked outlets and droped them\nstep 8:then I created visiulization\nthe visualization that I created are listed below\n1 DIST PLOT\n2 SCATTER PLOT\n3 COUNT PLOT\n4 PAIR PLOT\nstep 9: then I did trining and testing of data\nstep 10: then I did data splitting\nstep 11: then I did comparision\nstep 12: then I used logistic regression to check the accuracy and the accuracy was 79%\nstep 13: then I used nearest neighbour to check the accuracy and the accuracy was 74%\nconclusion :\nFOR DIABETES PREDICTION LOGISTIC REGRESSION WORKS MORE ACCURATLY IN COMPARISION TO NEAREST NEIGHBOUR\n'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '32 contributions\n        in the last year', 'description': ['diabetes_pred\nDiabetes is one of deadliest diseases in the world. As per the existing system, patients have to visit a diagnostic center, consult their doctor and wait for a day or more to get their result. Moreover, every time they want to get their diagnosis report, they have to waste their money in vain. But with the rise of Machine Learning approaches, we have been able to find a solution to this problem using data mining. Data mining is one of the key areas of Machine learning. It plays a significant role in diabetes research because it has the ability to extract hidden knowledge from a huge amount of diabetes related data. The aim of this research is to develop a system which can predict whether the patient has diabetes or not. Furthermore, predicting the disease early leads to treatment of the patients before it becomes critical. Currently, the models give accuracy of 79% for Logistic Regression.\n'], 'url_profile': 'https://github.com/Tilakrao', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['2']], 'contributions': '58 contributions\n        in the last year', 'description': ['Diabetes-Prediction\n'], 'url_profile': 'https://github.com/shubhanginidey', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'Dallas, Texas', 'stats_list': [], 'contributions': '22 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nHaving taken a small diabetes data set, I trained and tested several machine learning models to choose a best model and predict on a test data set.\n'], 'url_profile': 'https://github.com/saradhar5', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '168 contributions\n        in the last year', 'description': ['Diabetes Prediction using Machine Learning\n'], 'url_profile': 'https://github.com/sethiTushar-007', 'info_list': ['Updated Sep 1, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Updated Aug 30, 2020', 'Updated Aug 26, 2020', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020']}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '168 contributions\n        in the last year', 'description': ['Diabetes Prediction using Machine Learning\n'], 'url_profile': 'https://github.com/sethiTushar-007', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['Assingment_Diabetes\n'], 'url_profile': 'https://github.com/Abbott2409', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '41 contributions\n        in the last year', 'description': ['Diabetes_Prediction\n'], 'url_profile': 'https://github.com/nrarifahmed', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['4']], 'contributions': '29 contributions\n        in the last year', 'description': ['Diabetes_patients\nAnalysis of factors related to readmission as well as other outcomes pertaining to patients with diabetes.\nAs the html file is too big to open it in github, please use this following link to open it in preview mode:\nhttps://htmlpreview.github.io/?https://raw.githubusercontent.com/Darwin22/Diabetes_patients/master/report.html\n'], 'url_profile': 'https://github.com/Darwin22', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '31 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/anoohya23', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'Uruguay', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': ['Daily-Diabetes\nAplicación en Flutter que permite llevar el control de la diabetes y la insulina a diario\n#Dart\n#Flutter\n#Moore database\n'], 'url_profile': 'https://github.com/ivan-fer', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['Diabetes-predictor\n'], 'url_profile': 'https://github.com/Manan128', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes_ML\n'], 'url_profile': 'https://github.com/Kruthika8722', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '33 contributions\n        in the last year', 'description': ['Diabetes-prediction\nThis project adress the problem of diabetes condition. Using classical machine learning algorithms, diabetic condition of person is predicted. This might help people to keep healthy lifestyle.\n'], 'url_profile': 'https://github.com/PujaSonawane', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['24', '          following'], ['18']], 'contributions': '36 contributions\n        in the last year', 'description': ['Classification-Diabetes\n'], 'url_profile': 'https://github.com/JayeshAbhishek', 'info_list': ['Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 24, 2020', 'HTML', 'Updated Sep 16, 2020', 'Python', 'Updated Aug 24, 2020', '1', 'Dart', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020']}"
"{'location': 'Noida', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nDiabetes prediction using Random Forest Classifier\n'], 'url_profile': 'https://github.com/akshay0717', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Pooja-DataScientist', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nDeveloped a model using  machine learning techniques in python for Prima Indian Diabetes Dataset to predict    diabetes in female patients.\n'], 'url_profile': 'https://github.com/Goutham3', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetes-prediction\nThe aim was is to predict whether a person has diabetes or not based on the skin thickness,BMI, Glucose level and other parameters.\nthe models used in this project are Logistic regression and KNN.\nBased on the confusion matrix the best model has been decided.\n'], 'url_profile': 'https://github.com/Akshaymitra', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'Poland, Warsaw', 'stats_list': [], 'contributions': '21 contributions\n        in the last year', 'description': ['pima_diabetes\nThis is simple ML project for classification whether pima indians are diabetees or not based on their health condition data\n'], 'url_profile': 'https://github.com/PatrycyD', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['18', '          following'], ['19']], 'contributions': '154 contributions\n        in the last year', 'description': [""Diabetes Classification Model using Logistic Regression\nIt is estimated that 415 million people are living with diabetes in the world, which is estimated to be 1 in 11 of the world's adult population. 46% of people with diabetes are undiagnosed.\nAs part of the Coders of Colour Computer Vision course we were taught about many different machine learning algorithms and how they can be used to solve real world problems. For the classification practical I chose to explore a diabetes dataset containing the most common symptoms of a diabetic. My model was able to figure out that 'Polyuria' and 'Polydisia' were the most common indicators of having diabetes and use that information to balance the dataset. It was then able to predict whether someone was diabetes with an accuracy of 78%.\nThe approach I took to solve this task was:\n\nRetrieve my dataset.\nPreprocess and Visualize data.\nApply Logistic Regression model.\nProduce model, and see how well it predicts using metrics such as confusion matrix.\n\nThe python libraries I used were pandas, numpy, sklearn, seaborn and matplotlib.\nDataset\nData uploaded to AWS S3 - https://diabetes-data-mka.s3.eu-west-2.amazonaws.com/diabetes_data_upload.csv\nSetup\nAll requirements are within the Jupyter Notebook. You just have to have a pytorch virtual environment setup, or can load the notebook into Google Colabs.\n""], 'url_profile': 'https://github.com/munakaghamelu', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'Pune', 'stats_list': [['0', '          followers'], ['1', '          following'], ['4']], 'contributions': '64 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nClassification Problem.\nHandled missing values.\nUsed various Machine Learning Algorithms like Logistic Regression, K-Nearest Neighbors ,Random Forest.\n'], 'url_profile': 'https://github.com/AtharvGanpatye', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '46 contributions\n        in the last year', 'description': ['diabetes_web\n'], 'url_profile': 'https://github.com/johancar991', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'Bengaluru, Karnataka, India', 'stats_list': [['8', '          followers'], ['53', '          following'], ['113']], 'contributions': '222 contributions\n        in the last year', 'description': ['Diabetes Detection\n'], 'url_profile': 'https://github.com/nischayggowda105', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}","{'location': 'Delhi,India', 'stats_list': [['26', '          followers'], ['18', '          following'], ['31']], 'contributions': '475 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/manan-bedi2908', 'info_list': ['Python', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Jan 11, 2021', 'Jupyter Notebook', 'Updated Feb 8, 2021', 'Jupyter Notebook', 'Updated Aug 24, 2020', 'HTML', 'Updated Aug 30, 2020', 'Updated Aug 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020']}"
"{'location': 'Bengaluru, Karnataka, India', 'stats_list': [['8', '          followers'], ['53', '          following'], ['113']], 'contributions': '222 contributions\n        in the last year', 'description': ['Diabetes Detection\n'], 'url_profile': 'https://github.com/nischayggowda105', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [['11', '          followers'], ['1', '          following'], ['29']], 'contributions': '46 contributions\n        in the last year', 'description': ['machineLearning-for-diabetes\npython机器学习-糖尿病数据挖掘：http://dwz.date/bwen\npython机器学习生物信息学：http://dwz.date/b9vw\n@author:231469242@qq.com\n微信公众号：pythonEducation\n作者介绍\nToby，持牌照金融公司担任模型验证专家,国内最大医药数据中心数据挖掘部门负责人！和重庆儿科医院，中科院教授，赛柏蓝保持慢病数据挖掘项目合作！管理过欧美日中印巴西等国外药典数据库，马丁代尔数据库，FDA溶解度数据库，临床试验数据库，WHO药物预警等数据库。QQ：231469242，微信公众号：pythonEducation\n课程概述\npython机器学习实战糖尿病数据挖掘，运用多种回归算法在年龄，性别，体重指数BMI，血压, 和六个血清指标中挖掘哪个因子是最重要致病因子。这些变量有何关联。课程建立模型综合表现显著高于互联网其他课程。\n课程特点\n平民价格，非纯商业化价格，让贫困学生也学的起国外最先进流行知识。不需要花费几千上万报天价学习班，自学也可成长。\n参考文献：https://www.cnblogs.com/webRobot/p/13261086.html\n课程目录\n课时1我的所有课程介绍\n课时2讲师介绍-二十个医药数据库负责人\n课时3糖尿病分类_特征_预防概述\n课时4机器学习模型预测糖尿病患者血糖指标\n章节2python编程环境搭建\n课时5Anaconda快速入门指南\n课时6Anaconda下载安装\n课时7python第三方包安装(pip和conda install)\n章节3糖尿病数据挖掘\n课时8建立糖尿病预测线性回归模型（linear regression）\n课时9下载糖尿病数据方法(原始数据和清洗后数据)\n课时10线性回归和误差\n课时11模型验证：均方差和中值绝对误差\n课时12多算法比较，模型性能提高2倍\n课时13原始数据和处理后数据建模性能对比\n课时14糖尿病致病因子量化分析_性别，年龄，血压，BMI指数\n课时15变量相关性分析-原来s1和s2血清检测呈现高相关性\n课时16长寿之道-这课程是你一生财富\n课时17BMI指数python自动化计算脚本\n章节4附录\n课时18糖尿病中英单词汇总\n课时19糖尿病患者更容易感染新冠病毒吗？\n课时20最小角度回归预测糖尿病论文LeastAngleRegression\n'], 'url_profile': 'https://github.com/toby0077', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['5']], 'contributions': '64 contributions\n        in the last year', 'description': [""Pima-Indians-Diabetes-prediction\nThe dataset for this programe was taken from kaggel, you can dwonload the dataset from here\nAbout the dataset\nThe dataset is a '.csv' file containing the features and outcome/target variable which is 0/1 depending on whether the person has diabetes or not.\nOur task is to make a model to predict for some test data whether the person has diabetes or not.\nIf you have a look at the dataset, the data is very less with only around 768 examples and 8 features for the feature variable. So we will train our model only on 760 examples and test on the remaining 8 data samples.\nAbout the made model\nThe model code that you see in the jupyter notebook was written using the 'PyTorch' Framework. You can refer to the docs of PyTorch (https://pytorch.org/docs/stable/index.html).\nIn the model I have only used 3 layers(1-input, 1-hidden and 1-output layer). The model is trained on 760 training examples and is validated on the remaining 8 examples.\nIf you have a look the model is trained for 1000 'EPOCHS;. Now when you predict the output for a given input, the output predicted by the model is the probability score for the input(in the range 0 to 1). Now I considered if the probability is greater than 0.5(50%) then the 'target' will be '1' else it will be '0'.\nNow this threshold value that was 50% for me you can change this to any value(Say 0.9 for 90% confidence depending).\nI first caluclated the training accuracy which was some where around '92%', Then i validated the model over the test data and the accuray was around '87.5%'.\nI saved this model with the name 'Model1.pth' which is the pytorch format of saving a model for future use. The last code of the notebook shows how you can load the saved model.\nI have also uploaded the 'Model1.pth' in this repo as well.\n""], 'url_profile': 'https://github.com/nerdylabs', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '26 contributions\n        in the last year', 'description': [""Early_Stage_Diabetes_Prediction\nIntroduction\nThis project aim to demonstrate addressing labeled structured dataset, from initial assesment of the data till training (with hyperparameters tuning) and feature importance measuring.\nThe dataset is the diabetes_data_upload.csv file, which was taken from the next link:\nhttps://archive.ics.uci.edu/ml/datasets/Early+stage+diabetes+risk+prediction+dataset\nProjects steps\nImporting Data\nImport dataset in csv format to pandas dataframe.\nEDA\nConducting basic exploratory data analysis in order to have am initial understanding on data quality and integrity.\nThe following charecterizations of the data are explored by a function (EDA.py)- data types, missing data and the informativeness per column.\n\n\nThe column 'Age' is the numeric column in the dataset so describe function returns results on it.\nAll other Y/N columns were examined with regards to the balance between the values, especially to see that the columns are informative or balanced (in the classification column).\n\nBalance between the classes was examined: \n\nDistribution of ages between the two classes: \n\nPreprocessing\nEven though in the tested dataset there's no missing data, as a step a function to replace nulls is run.\nIn addition, there's only one numeric column 'Age' and the data  in it is binned via the function 'Data_Binning'.\n\nAs preparation for training models, the string values are replaced by a numeric values by a function.\n\n\nAll of the functions are listed in Preprocessing.py file.\nModels\nTwo models were chosen for the specific dataset - Naive Bayes and Random Forest, with metrics to test their results.\nRandom forest modeling was explored further by:\n\nhyperparameter tuning with GridSearch\ncomparing metrics between the models\ncomparing feature importance, either by RandomForestClassifier.feature_importances_ attribute and by Boruta.\n\nTwo GridSearch were conducted, both held these parameters:\n'bootstrap': [True],\n'max_depth': [2, 4, 6, 8],\n'min_samples_leaf': [3, 4, 5],\n'min_samples_split': [8, 10, 12],\n'n_estimators': [10, 20, 30]\n\nBut the difference between was with 'max_features' parameter:\n\n[2, 3]\n['auto','log2']\n\nModels' metrics comparison\nThe metrics were mostly improving from model to model, as follow:\n\n\n\nModel\nAccuracy\nPrecision\nRecall\n\n\n\n\nNaïve Bayes\n91.54%\n92.94%\n94.05%\n\n\nRandom Forest\n88.46%\n87.91%\n95.24%\n\n\nRandom Forest best_estimator - numeric max_features\n96.15%\n97.59%\n96.43%\n\n\nRandom Forest best_estimator - auto as max_features\n96.92%\n100%\n95.24%\n\n\n\nComparing the different models shows that the best model was with the next parameters:\n'bootstrap': True,\n 'max_depth': 8,\n 'max_features': 'auto',\n 'min_samples_leaf': 4,\n 'min_samples_split': 8,\n 'n_estimators': 10\n\nFeatures Importance:\nComparing between the models and with boruta, reveal that top 3 features are Polyuria (excessive urination volume), Polydipsia (excessive thirst) and Gender.\n\n""], 'url_profile': 'https://github.com/OsnatMel', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [['9', '          followers'], ['17', '          following'], ['4']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/banghid', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'Cincinnati, OH', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '30 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/prachirathod99', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ankitmishra0104', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'Hyderabad,India', 'stats_list': [['1', '          follower'], ['3', '          following'], ['1']], 'contributions': '136 contributions\n        in the last year', 'description': ['model_deployment_diabetes_prediction\nhttps://deploy-diabetes-prediction.herokuapp.com/\n'], 'url_profile': 'https://github.com/CSBanerjee', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '48 contributions\n        in the last year', 'description': ['Diabetes-prediction-using-R\n'], 'url_profile': 'https://github.com/jerryadamsfranklin', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 26, 2020', '1', 'Python', 'Updated Aug 27, 2020', '1', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Oct 7, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'R', 'Updated Aug 25, 2020']}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['1']], 'contributions': '364 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Kshitij879', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['4', '          following'], ['0']], 'contributions': '31 contributions\n        in the last year', 'description': ['Diabetes-Prediction-using-ML\nAccuracy rates of different Classification models are compared to find what is the most accurate model for the dataset and a small analysis using clustering methods.\n'], 'url_profile': 'https://github.com/Sreevathsan7', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nujovich', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'New York', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kllychn3', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '48 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Rohit8376', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['HTML', 'Updated Nov 27, 2020', 'Jupyter Notebook', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 25, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 27, 2020', 'Updated Aug 24, 2020', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes-Management-Application\nAuthors - Hirantha Waas / Navidu Avishka\n'], 'url_profile': 'https://github.com/NavinduAvishka', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'Nagpur, Maharashtra, India', 'stats_list': [['1', '          follower'], ['3', '          following'], ['0']], 'contributions': '22 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/risx3', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['10', '          following'], ['16']], 'contributions': '27 contributions\n        in the last year', 'description': ['About Dataset\nPima Indian Diabetes dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nSource: https://www.kaggle.com/uciml/pima-indians-diabetes-database\nGuide\nAll insights and script are all in the jupyter notebook. For further question please email erishaaryanti@gmail.com\n'], 'url_profile': 'https://github.com/erishaaryanti', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Equipo salud-paanda-diabetes\nDescripcion\nInstalacion\nEste repo esta echo con flutter para ello es necesario descargar primero descargar el sdk de flutter una vez instalado es necesario hacer lo siguiente:\n# change to beta stage\nflutter channel beta\n\n# enable web\nflutter config --enable-web\nBuild\nPara contruir el proyecto solo es necesario:\nflutter build web --release\nDespues solo es necesario ir a la carpeta build y abrir el archivo index.html con su navegador preferido.\n'], 'url_profile': 'https://github.com/tomatovalley', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['SoniDiabetesCare_clinic\n'], 'url_profile': 'https://github.com/Soni-web-code', 'info_list': ['C#', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020', 'Dart', 'MIT license', 'Updated Aug 29, 2020', 'Updated Aug 27, 2020']}"
"{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['1', '          following'], ['0']], 'contributions': '48 contributions\n        in the last year', 'description': [""UCI-Diabetes-Data\nA classifier built on the 'Early stage diabetes risk prediction dataset' from the UCI repository\n""], 'url_profile': 'https://github.com/jjevans25', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '94 contributions\n        in the last year', 'description': ['Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n'], 'url_profile': 'https://github.com/YinmiAlas', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Oct 5, 2020', 'Updated Aug 28, 2020', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Jupyter Notebook', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}"
"{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Soni-web-code', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['9']], 'contributions': '127 contributions\n        in the last year', 'description': ['Diabetes-Outcome-Prediction\nAnalysis and Prediction of Diabetes Outcome with machine learning and deep learning approach\nObjective\nTo correclty (or atleast some times) predict diabetes outcome for a person or a patient given some of their medical attributes which is listed in selected in the report (included in this repo as .md file). The data set used in this analysis was already a clean data set with the recquired schema and thus need no or minimal data tidying or cleaning, the report consists of the statistical methods used to select different features from the complete data set.\nThe Machine Learning Approach\nAfter some exploratory analysis with the selected attributes from the dataset, I applied some common ML algoritms (widely used for classification problems), though the models perform well and can be used for inference and base level predictions but a deep learning approach is neccesary as it can help us infere more about the data and give much better predicitions (more real world predictions)\nThe Deep Learning Approach\nThe dataset which is used in this problem contains only 768 instances (ie, rows or records), so it is sufficient for a machine learning problem but is very small for a deep learning problems as the data will be splitted further into test and train sets and for correct evalutation of the model we would be left with a very small test set which wont give us good or highly significant metrics for our model. So eradicate this problem to a acceptable level we can use K Folds Cross validation method to train and evalusate our model so that even with such a small data we can get pretty good and most important ""significant"" metrics for our model.\nThe choice of model is also very simple due to data limitation and so we will use a model with only 2 layers, the model schema is summarized below:\nINPUT LAYER    : 8 UNITS SHAPE(5,), ACTIVATION = ""RELU""\n#1 HIDDEN LAYER 1 : 8 UNITS, ACTIVATION = ""RELU""\n#2 OUTPUT LAYER 2 : 1 UNIT , ACTIVATION = ""SIGMOID"" (FOR BINARY CLASSIFICATION PROBLEM)\nLOSS FUNCTION : BINARY_CROSSENTROPY\nOPTIMIZER     : STOCHASTIC GRADIENT DESCENT (SGD)\nMETRICS       : ACCURACY (HOW MANY LABELS DID WE CORRECTLY PREDICT FROM TEST SET)\nVALIDATION METHOD : K FOLDS CROSS VALIDATION WITH 3 FOLDS\nNOTE : Also tweaked and tried 10 folds as well as 5 folds but the final metrics did not have any significant or drastics changes so chose 3 Folds\nResults:\n\n'], 'url_profile': 'https://github.com/aashay15', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 24, 2020', 'Updated Aug 27, 2020', '1', 'Updated Aug 24, 2020', 'Updated Aug 28, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 28, 2020']}"
"{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'US', 'stats_list': [['1', '          follower'], ['4', '          following'], ['16']], 'contributions': '76 contributions\n        in the last year', 'description': ['Machine-Learning-Classification-Project\n'], 'url_profile': 'https://github.com/kahramanmurat', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'Bangalore, Karnataka, India', 'stats_list': [['1', '          follower'], ['2', '          following'], ['5']], 'contributions': '88 contributions\n        in the last year', 'description': ['Decision-Tree-on-Diabetes-dataset\nPIMA Indian Dataset from UCI\nThis problem is comprised of 768 observations of medical details for Pima indians patents. The records describe instantaneous measurements taken from the patient such as their age, the number of times pregnant and blood workup. All patients are women aged 21 or older. All attributes are numeric, and their units vary from attribute to attribute.\nEach record has a class value that indicates whether the patient suffered an onset of diabetes within 5 years of when the measurements were taken (1) or not (0).\nThe goal is to predict whether or not a given female patient will contract diabetes based on features such as BMI, age, and number of pregnancies. Therefore, it is a binary classification problem. A target value of 0 indicates that the patient does not have diabetes, while a value of 1 indicates that the patient does have diabetes.\nThere may be some missing values with which you have to deal with.\nBuild a prediction Algorithm using Decision Tree.\nNOTE: If .ipynb is not accessible, try to open that notebook using nbviewer online, just click on the link below.\nhttps://nbviewer.jupyter.org/github/SoniyaN/Decision-Tree-on-Diabetes-dataset/blob/master/Diabetes_DecisionTree.ipynb\n'], 'url_profile': 'https://github.com/SoniyaN', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vaibhavkondabathini', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}","{'location': 'Montreal, QC, Canada', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '83 contributions\n        in the last year', 'description': ['Diabetes-Readmission-Prediction-for-Patients\nAbstract\nA 10 years of diabetic clinical dataset is used to identify the patients who are in risk for readmission to the hospital by using predictive models.  A supervised learning approach for 3-class classification problem will be applied to identify the patients of target classes are the patients readmitted before 30 days (Class 0) , after 30 days (Class 1) or did not admit at all (Class 2) after discharge from hospital. The Logistic Regression (LR), Decision Tree (DT) and Random Forest (RF) algorithms will be used to fit the relationship. We will also evaluate the performance among the algorithms to pick best one. Python, scikit-learn machine learning library, pandas dataframe will be utilized to build the models.\nIntroduction\nWhen a patient is admitted again into a hospital within a certain interval of time after discharge from hospital is called hospital readmission. It is very important as hospital readmission rate can be a major indicator of patient’s health and life, hospital quality and cost of treatment. For example, if a patient was never been re-admitted, it’s a very good sign. Whereas if the patient is re-admitted within the 30 days of discharge represents a possibility of inappropriate treatment. On the other hand, getting readmitted after 30 days can indicate both the quality of treatment given and/or the state of the patient.\nThe complex relationship between readmission and potential risk factors makes readmission prediction a difficult task. However, it is very important to know which patients are more vulnerable for readmissions, because it helps to reduce of admission rate. It has been argued that up to two-thirds of the readmissions are preventable; therefore, advances in patient readmission prediction are worth the investment [3, 4]. Readmission prediction has been tackled with diverse statistical approaches [5, 6] such as logistic regression [7, 8] and survival analysis [9].\nEach day, hospital produce enormous amount of data around the world and now a day data science has ability to deal with these massive data set due to improvement of computing power and technology which facilitated to apply different prediction models to get results rapidly and efficiently. Recently, huge attention has been given to reduce hospital readmission rate using predictive machine learning approaches, such as a binary classification problem [8, 10], support vector machines (SVM) [4, 11, 12], deep learning [13, 14], artificial neural network [7], and Naïve Bayes [5, 15].\nDespite this long history of studies about hospital readmission for adult patients such as for stoke [7], emergency patients [8, 9, 10], heart failure [5, 11], pediatric patients [2, 15]. There are a few studies devoted to readmission of diabetic patients [1, 12, 16], although diabetics patients have more tendency to readmit in the hospital which is around 9.3% of the total patients in US and 28% of which are undiagnosed [17, 18]. SVM and a very small amount of data has been used in [12, 16] for analysis, but for large dataset SVM is bad choice as it is computationally expensive. Other work [1] was paid attention was the importance of a specific feature (HbA1c).\nIn this project, we will use 10 years diabetic data sets to model the patients who are most likely to readmit to hospital. Our tools will facilitate the identification of patients potentially at high risk to reduce readmission rate so that resources can be used more efficiently in terms of cost-benefit.\nDetails of data set and methods have been described in the material and methods section. In the Result and discussion, we explain performance of each model for both balance and imbalance data set. After that a short conclusion and future work will be presented. Last section will be references.\nMaterials and Methods\nData Description\nA 10 years of clinical care diabetic dataset, over the period between 1999 to 2008 throughout 130 USA hospitals, has been used in this project. It was collected by the Health Facts database (CERNER Corporation, Kansas City, MO). As the actual data is gathered by integrated delivery network health systems, so it includes all patient’s information. So, for specific interest it was required to extract new dataset from the database following some specific criteria. It will not be done in this project as our data source already done it.\nThere are 101766 encounters with total feature 50 containing both numerical and categorical in types.  We have three target class: the patients readmitted before 30 days (Class 0), after 30 days (Class 1) or did not admit at all (Class 2) after discharge from hospital.\nDetails of dataset can be found in [1] and available in online https://www.hindawi.com/journals/bmri/2014/781670/ (as a Supplementary Material) and UCI Machine Learning Repository  (https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008).\nData Preprocessing\nThe database contains missing value, irrelevant and noisy information which is normal in any real-world data, therefore all the features and encounters will be used to make model.\nThe identifier feathers such as encounter_id and patient_nbr will be avoided. We have put a 30% threshold of missing value, so any features having more than 30% missing values will not be escaped from feature list. Features having more than 30% missing values have been filled with 0.  The features weight (97%), payer code (40%), and medical specialty (47%) were removed since it had a high percentage of missing values.  Some features (examide, citoglipton and glimepiride-pioglitazone) have only one value, as constant value does not contribute to predict anything, so we avoided those features also.\nIn our dataset some patients were transferred to another unit or department in same hospital and so they were encountered several times although their patient_nbr remain same.  Thus, multiple inpatient visitors from our dataset will not be considered to follow statistically independence of the data. Therefore, only first encounter per patient will be kept. Additionally, we have removed all encounters are either expired or discharge to a hospice to avoid biasing our analysis.\nFinally, we will have 69973 encounters with 42 features.\nAs we already mentioned that we have some features having values in text, so we have encoded those categorical data to numerical data. We have also found that frequency of the values some features are just 1 or small and we used binning to reduce those noise from features.  Our data has been scaled by standardization scaling. As the dataset is imbalanced, thus oversampling technique has been applied to make data balanced.\nTechnologies and algorithms\nThe language for this project would be Python and the most widely used, flexible and user-friendly scikit-learn machine learning library and pandas dataframe will be utilized to build the models. The Logistic Regression (LR), Decision Tree (DT) and Random Forest (RF) algorithms will be used for prediction. As dataset of this project fits the memory adequately, so we go for Scikit learn library instead of Spark or Dask framework. LR, DT and RDF are the best choice in data science community, which inspired us to pick those three. SVM is also accurate but it is very expensive computationally and additionally SVM has a poor performance with imbalanced dataset due to its soft margin optimization problem.\nResults and Discussion\nDataset have been split in to 70% to train the models and 30% to evaluate model performance.  The results from both balanced and imbalanced datasets will be present and explained. The hyperparameters of models have been calculated using k-fold cross validation process, where k is selected as 5. Same parameters for individual model are used for both cases.\nTo measure model performance, we apply 6 types of metrics: best_cv_score, mean_cv_score, accuracy_score, recall_score, precision_score and f1_score.  We have also used Confusion Matrix (CM) to analysis class wise accuracy.\nImbalanced Data\n\nTable 1 shows the accuracy from k-fold cross validation of the models. First and second rows are the score form the best parameters and mean accuracy among 5 folds respectively. For both DT and RDF, k-fold suggested ‘max_depth = 10’.\n\nTable 2 represents training and test accuracy of the models. It seems that all the models have an average performance and no significant difference are observed among the models.\n\n\n\nThese three figures represent confusion matrix of test dataset when ‘max_depth’ depth is 10.  We observe that all the model performs poorly for Class 0, even in RDF there is no prediction for Class 0.  We also see a slightly better prediction for Class 1 compare to Class 0, which tells us that the overall accuracy mostly depends on Class 2, so it is clearly due to imbalanced dataset because the results are biased on Class 2.\nIn our datasets, the ratio between Class 0: Class 1: Class 2 is 1.0 : 3.4: 6.6.  Data resample may apply to improve the performance as both DT and RDF support data resampling. Before making data resampling, we have made a try first to change max_depth from 10 to 30 for DT and RDF to see if it can help to improve our model accuracy.\n\n\nThese are figures are showing confusion matrix for DT and RDF with ‘max_depth = 30’. It seems  increasing max_depth did not help at too much.\n\nHowever, the accuracy Table gives the interesting information where training accuracy are really promising which are above 95% in both DT and RDF model, on the other hand test performance is still disappointing. This information suggests us that the results are overfitting. We can avoid overfitting; by adding more data into dataset or by adding regularization term in the model. Thus, in both cases, imbalanced and overfitting, data resample can be applied to overcome the problems.\nBalanced Data\nOur second approach is resampling dataset. We use upscale resampling technique as it is straight forward to make data balanced. After resampling our current ratio is Class 0: Class 1: Class 2 = 0.9 : 0.9 : 1.0.\n\n\n\n\nAfter analyzing both table and confusion matrix, it suggests that resampling is giving us mixed results. For Logistic regression model, it seems performance went downward which around 42% in all the metrics.  On the other hand, Decision Tree has made satisfactory progress (77%) but seems still have reasonable overfitting issue but can be resolve by regularization or by using other resampling techniques. However, Random Forest is showing very encouraging outcome and has also handled those two issues adequately.  Random Forest has scored over 85% of accuracy and therefore, it can be the best choice to select model to predict the patient’s class.\nConclusion and Future Work\nReadmission rate is an indicator of patient’s health and life, hospital quality and cost of treatment. In this project, we started our journey with 10 years of diabetic clinical dataset to identify who are the most likely to readmit after discharge from hospital. We have used a supervised learning approach for 3-class classification problem and applied Logistic Regression (LR), Decision Tree (DT) and Random Forest (RDF) classifiers as prediction models.  We have taken care of over 100K samples with 50 features. We have avoided some of the features and samples which were irrelevant to make our prediction model.  We have also encoded categorical features, bucketed, rescaled and resampled of our dataset.  The model performance for individual patient’s class was not satisfactory due to imbalanced dataset and resampling technique was applied to make dataset balanced.  After analyzing all the accuracy tables and confusion matrix among the models, Random Forest would be the best choice to select model to predict the patient’s class.\nWe have used data duplication technique for oversampling but can be applied more standard and reliable techniques such as SMOTE. Although, there was no computational difficulty to run the model due to our data size but can be extended to cluster and parallel computing framework such as Apache and Dask for faster processing when data size will grow bigger. We will also apply more accurate and updated algorithm such as Deep learning and Artificial neural network.\nAcknowledgment\nThanks to Professor for his advice and comments both the class and online about the course and the project.  Also thanks all the TA’s and their Lab session was great that helped me to write the code for this project. Moreover, we enjoyed and learned a lot from this course.\nReferences\n[1] https://www.hindawi.com/journals/bmri/2014/781670/ \n[2] https://www.hindawi.com/journals/bmri/2019/8532892/ \n[3]https://www.healthaffairs.org/doi/full/10.1377/hlthaff.2014.0041url_ver=Z39.882003&rfr_id=ori%3Arid%3Acrossref.org&rfr_dat=cr_pub%3Dpubmed& \n[4] https://www.sciencedirect.com/science/article/pii/S1532046415000969 \n[5] https://jamanetwork.com/journals/jama/fullarticle/1104511 \n[6] https://www.sciencedirect.com/science/article/abs/pii/S0169260717313998?via%3Dihub \n[7] https://www.sciencedirect.com/science/article/abs/pii/S089543560100395X \n[8] https://www.tandfonline.com/doi/full/10.1080/01969722.2016.1276772 \n[9] https://www.sciencedirect.com/science/article/abs/pii/S0925231219304564 \n[10] https://link.springer.com/article/10.1007/s00521-017-3242-y \n[11] https://www.sciencedirect.com/science/article/abs/pii/S0957417415003085 \n[12] https://www.sciencedirect.com/science/article/abs/pii/S0169260718308083 \n[13] https://www.sciencedirect.com/science/article/abs/pii/S0010482518302567 \n[14] https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0195024 \n[15] https://link.springer.com/chapter/10.1007/978-3-319-21009-4_51 \n[16] http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.259.3757&rep=rep1&type=pdf \n[17] https://www.cdc.gov/diabetes/data/statistics/statistics-report.htmlCDC_AA_refVal=https%3A%2F%2Fwww.cdc.gov%2Fdiabetes%2Fdata%2Fstatistics%2F2014statisticsreport.html \n[18] https://clindiabetesendo.biomedcentral.com/articles/10.1186/s40842-016-0040-x\n'], 'url_profile': 'https://github.com/rokibMcGill', 'info_list': ['Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 25, 2020', 'Updated Aug 29, 2020', 'Updated Aug 29, 2020', 'Updated Aug 26, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 29, 2020']}"
"{'location': 'Westport, CT', 'stats_list': [], 'contributions': '32 contributions\n        in the last year', 'description': ['Diabetes Indicators in Pima Indian and German (Dutch) Women\nby Debbie Pappas\nIntroduction to the Pima Indians\n\nThe Pima are a group of Native Americans living in an area consisting of what is now central and southern Arizona.\nThe Keli Akimel O\'odham and the Onk Akimel O\'odham communities have various environmentally based health issues related to the decline of their traditional economy and farming. They have the highest prevalence of type 2 diabetes in the world, much more than is observed in other U.S. populations. While they do not have a greater risk than other tribes, the Pima people have been the subject of intensive study of diabetes, in part because they form a homogeneous group.\n(Reference: https://en.wikipedia.org/wiki/Pima_people)\n(Notes: Pima Indians live in the Keli Akimel O\'odham and the Onk Akimel O\'odham communities)\n\nIntroduction to People from Frankfurt, Germany\n\nThe city of Frankfurt is culturally and ethnically diverse, with 51.2% of the population having an immigrant background in 2015. For the first time in the city\'s history, the majority of its residents had a non-German background. What\'s more, three-quarters of children under six had immigrant backgrounds, and 27.7% of those living in the city had foreign citizenship. Home to as many as 180 nationalities, Frankfurt is very much a multicultural city.\n(Reference: https://worldpopulationreview.com/world-cities/frankfurt-population/)\nGerman health benefits are very generous. And there\'s usually little or no wait to get elective surgery or diagnostic tests, such as MRIs. It\'s one of the world\'s best health care systems, visible in little ways that most Germans take for granted.\n(Reference: https://www.npr.org/templates/story/story.php?storyId=91971406 )\n\nIntroduction to Diabetes\n\nDiabetes is a disease that occurs when your blood glucose, also called blood sugar, is too high.Insulin, a hormone made by the pancreas, helps glucose from food get into your cells to be used for energy.\n\nDictionary  ( Both datasets contain the same variables)\nPima Indian dataset (2016)\nFrankfurt, Germany (also refered to as Dutch in the analysis) dataset (2018)\n\nPredictor Variables:\n\n\npregnancies Number of times pregnant (preg)\nglucose Plasma glucose concentration a 2 hours in an oral glucose tolerance test (plas)\n(Note: Normal range is less than 140mg/dL )\nblood_pressure Diastolic blood pressure in mm Hg (pres)\n(Note: Normal range is less than 80)\nskin_thickness Triceps skin fold thickness in mm (skin) - there is some relationship between measurements of subcutaneous fat in skinfolds, such as the triceps skinfold, and deep body fat.\n(Note: Normal measurement around 23mm)\ninsulin 2-Hour serum insulin in mu U/ml (insu)\n(Note: This test measures the amount of insulin for glucose absorption. Normal range is 16 - 166 mu U/ml)\nBMI Body mass index measured as weight in kg/(height in m)^2(mass)\n(Note: BMI correlates with the amount of body fat. Normal range is 18.5 - 24.9)\ndiabetes_pedigree_function Diabetes pedigree function (pedi)\n(Note: This function is a measure of genetic influence one might have with the onset of diabetes.\nThe higher the proportion the more genetic influence there is. )\nAge in years\nethnicity (Pima or Dutch)\n\n\nTraget Variable:\n\n\nOutcome\n(Note: \'0\' implies \'no diabetes\' and \'1\' implies \'diabetes\')\n\nAssessing the Data\n\nThe files \'pima_diabetes.csv\' and \'germany_diabetes.csv\' are loaded.\n\n# import all packages and set plots to be embedded inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# filter warnings\nimport warnings\nwarnings.filterwarnings(""ignore"")\n%matplotlib inline\n# load the Pima Indian dataset\ndf_pima = pd.read_csv(\'pima_diabetes.csv\',engine=\'python\')\n# look at the first few lines of the Pima dataset\ndf_pima.head(3)\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n\n\n# check number of rows and columns\n# there are 768 rows and 9 columns\ndf_pima.shape\n(768, 9)\n\n# load the Germany dataset\ndf_germany = pd.read_csv(\'germany_diabetes.csv\',engine=\'python\')\n# look at the first few lines of the Germany dataset\ndf_germany.head(3)\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n2\n138\n62\n35\n0\n33.6\n0.127\n47\n1\n\n\n1\n0\n84\n82\n31\n125\n38.2\n0.233\n23\n0\n\n\n2\n0\n145\n0\n0\n0\n44.2\n0.630\n31\n1\n\n\n\n\n# the germany dataset has 2000 rows and 9 columns\ndf_germany.shape\n(2000, 9)\n\n# add columns of ethnicity to the Pima dataset\ndf_pima[\'ethnicity\'] = \'pima\'\n# check for sum of all null values in dataframe\n# there are zero null values for all columns\ndf_pima.isnull().sum()\nPregnancies                 0\nGlucose                     0\nBloodPressure               0\nSkinThickness               0\nInsulin                     0\nBMI                         0\nDiabetesPedigreeFunction    0\nAge                         0\nOutcome                     0\nethnicity                   0\ndtype: int64\n\n# check the datatypes for the Pima dataset\ndf_pima.dtypes\nPregnancies                   int64\nGlucose                       int64\nBloodPressure                 int64\nSkinThickness                 int64\nInsulin                       int64\nBMI                         float64\nDiabetesPedigreeFunction    float64\nAge                           int64\nOutcome                       int64\nethnicity                    object\ndtype: object\n\n# add column of ethnicity for the Germany dataset\ndf_germany[\'ethnicity\'] = \'dutch\'\n# check for sum of all null values in dataframe\ndf_germany.isnull().sum()\nPregnancies                 0\nGlucose                     0\nBloodPressure               0\nSkinThickness               0\nInsulin                     0\nBMI                         0\nDiabetesPedigreeFunction    0\nAge                         0\nOutcome                     0\nethnicity                   0\ndtype: int64\n\ndf_germany.dtypes\nPregnancies                   int64\nGlucose                       int64\nBloodPressure                 int64\nSkinThickness                 int64\nInsulin                       int64\nBMI                         float64\nDiabetesPedigreeFunction    float64\nAge                           int64\nOutcome                       int64\nethnicity                    object\ndtype: object\n\n# rename columns for both df_pima and df_germany for clarity\ndf_pima.rename(columns={\'Pregnancies\':\'pregnancies\',\'Glucose\':\'glucose\',\'BloodPressure\':\'blood_pressure\',\\\n              \'SkinThickness\':\'skin_thickness\',\'Insulin\':\'insulin\',\\\n               \'DiabetesPedigreeFunction\':\'diabetes_pedigree_function\',\'Age\':\'age\',\'Outcome\':\'outcome\'},inplace=True)\ndf_germany.rename(columns={\'Pregnancies\':\'pregnancies\',\'Glucose\':\'glucose\',\'BloodPressure\':\'blood_pressure\',\\\n              \'SkinThickness\':\'skin_thickness\',\'Insulin\':\'insulin\',\\\n               \'DiabetesPedigreeFunction\':\'diabetes_pedigree_function\',\'Age\':\'age\',\'Outcome\':\'outcome\'},inplace=True)                                                                          \n                                                                         \n# statistics of the Pima dataset\ndf_pima.describe()\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\n\n\n\n\ncount\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n\n\nmean\n3.845052\n120.894531\n69.105469\n20.536458\n79.799479\n31.992578\n0.471876\n33.240885\n0.348958\n\n\nstd\n3.369578\n31.972618\n19.355807\n15.952218\n115.244002\n7.884160\n0.331329\n11.760232\n0.476951\n\n\nmin\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.078000\n21.000000\n0.000000\n\n\n25%\n1.000000\n99.000000\n62.000000\n0.000000\n0.000000\n27.300000\n0.243750\n24.000000\n0.000000\n\n\n50%\n3.000000\n117.000000\n72.000000\n23.000000\n30.500000\n32.000000\n0.372500\n29.000000\n0.000000\n\n\n75%\n6.000000\n140.250000\n80.000000\n32.000000\n127.250000\n36.600000\n0.626250\n41.000000\n1.000000\n\n\nmax\n17.000000\n199.000000\n122.000000\n99.000000\n846.000000\n67.100000\n2.420000\n81.000000\n1.000000\n\n\n\n\n# statistics of the Germany dataset\ndf_germany.describe()\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\n\n\n\n\ncount\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n2000.000000\n\n\nmean\n3.703500\n121.182500\n69.145500\n20.935000\n80.254000\n32.193000\n0.470930\n33.090500\n0.342000\n\n\nstd\n3.306063\n32.068636\n19.188315\n16.103243\n111.180534\n8.149901\n0.323553\n11.786423\n0.474498\n\n\nmin\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.078000\n21.000000\n0.000000\n\n\n25%\n1.000000\n99.000000\n63.500000\n0.000000\n0.000000\n27.375000\n0.244000\n24.000000\n0.000000\n\n\n50%\n3.000000\n117.000000\n72.000000\n23.000000\n40.000000\n32.300000\n0.376000\n29.000000\n0.000000\n\n\n75%\n6.000000\n141.000000\n80.000000\n32.000000\n130.000000\n36.800000\n0.624000\n40.000000\n1.000000\n\n\nmax\n17.000000\n199.000000\n122.000000\n110.000000\n744.000000\n80.600000\n2.420000\n81.000000\n1.000000\n\n\n\n\n# combined dataset of Pima and Dutch women\ndf_combined_orig = df_pima.append(df_germany, ignore_index=True)\nDataset Structure\n\nBoth the Pima Indian and Germany dataset have ten variables which are as follows :\n\'pregnancies\', \'glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\n\'BMI\', \'diabetes_pedigree_function\', \'age\', \'outcome\', and \'ethnicity\'.\n\n\nThe combined rows of these datasets are 2768 ( 768 rows in Pima dataset and 2000 rows in Germany dataset).\n\n\nThe predictor variables are \'pregnancies\', \'glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\n\'BMI\', \'diabetes_pedigree_function\', and \'age\'.\n\n\nThe target variable is \'outcome\' where the value \'1\' implies \'diabetes\' and the value \'0\' implies \'no diabetes\'.\n\nData Wrangling Conclusion\n\n1. To explore the combined Pima and Germany datasets a column named \'ethnicity\' was created.\n2. All \'0\' values for \'glucose\',\'BMI,\'blood_pressure\',\'insulin\', and \'skin_thickness\' do not make sense\nand are replaced by NaN. The graphs shown below are plotted with \'NaN\' values that were originnally \'0\'.\n\nDataset Investigation\n\n1. What predictor variables among the Pima and Dutch women are most likely to result in diabetes (outcome variable equal to 1) ?\n2. How are the predictor variables related to each other for the combined Pima and Germany datasets.\n**3. Given that the most important variables for diabetes outcome are \'glucose\' and \'insulin\', how do these variables relate to each other ? **\n4. Given the small sample sizes for the Pima Indian women (786) and the Dutch women (2000), Pima women are more likely to get diabetes (mean of \'outcome\' variable is larger) than Dutch women but is there a significant mean difference ?\n\nDataset Structure to Support Investigation\n\nThe following features in the dataset will be explored for the Dataset Investigation:\n\n\n1. The mean values of both the Pima and Germany datasets for all the predictor variables and target variables.\n2. \'Glucose\' and \'insulin\' are the most important variables to investigate.\n3. Compare the \'outcome\' variable mean of 0.342 for the Germany dataset versus the mean of 0.349 for the Pima dataset and if these two means are significantly different.\n\nUnivariate Exploration\nNote: The following Univariate plots are based on the combined datasets of Pima Indian and Dutch women.\ndf_pima.head(2)\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\nethnicity\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\npima\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\npima\n\n\n\n\ndf_germany.head(2)\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\nethnicity\n\n\n\n\n0\n2\n138\n62\n35\n0\n33.6\n0.127\n47\n1\ndutch\n\n\n1\n0\n84\n82\n31\n125\n38.2\n0.233\n23\n0\ndutch\n\n\n\n\n#plt.figure(figsize=(20,10))\nsns.distplot(df_combined_orig[\'glucose\'],bins=20)\nplt.title(\'Oral glucose tolerance test results\',fontsize=15, fontweight=\'bold\')\nplt.xlabel(\'Glucose (140mg/dL)\', fontweight=\'bold\')\nplt.xlim(0,None)\n#plt.text(x,y,\'text\')\ntextstr = ""Plot Analysis: The plot above shows the glucose distribution of combined Pima and Germany datasets.""\ntextstr2 = ""Largest spikes are around 110 and 130. Readings of glucose more than 140 indicate diabetes. Values of zero are erroneous""\nplt.gcf().text(0, -0.2, textstr, fontsize=14, fontweight=\'bold\')\nplt.gcf().text(0, -0.3, textstr2, fontsize=14, fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows the glucose distribution of combined Pima and Germany datasets. Largest spikes are around 110 and 130.\nReadings of glucose more than 140 indicate diabetes. There are also errorneous values of \'0\'.\nsns.distplot(df_combined_orig[\'blood_pressure\'],bins=20)\nplt.xlim(0,None)\nplt.xlabel(\'Blood pressure (mm Hg)\',fontweight=\'bold\')\nplt.title(\'Diastolic blood pressure readings\',fontsize=15, fontweight=\'bold\')\ntextstr = ""Plot Analysis: The plot above shows the blood pressure distribution of combined Pima and Germany datasets.""\ntextstr2 = ""Largest spikes are around 70 and 80. Readings of blood pressure more than 80 indicate high blood pressure. Values of zero are erroneous""\nplt.gcf().text(0, -0.2, textstr, fontsize=14, fontweight=\'bold\')\nplt.gcf().text(0, -0.3, textstr2, fontsize=14, fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows the blood pressure distribution of combined Pima and Germany datasets. Largest spikes are around 70 and 80.\nReadings of blood pressure more than 80 indicate high blood pressure. There are also errorneous values of \'0\'.\nsns.distplot(df_combined_orig[\'skin_thickness\'],bins=20)\nplt.xlim(0,None)\nplt.xlabel(\'Skin thickness (mm)\',fontweight=\'bold\')\nplt.title(\'Triceps skin fold thickness\',fontsize=15, fontweight=\'bold\')\ntextstr = ""Plot Analysis: The plot above shows skin fold thickness of combined Pima and Germany datasets.""\ntextstr2 = ""Largest spikes are around 30 mm. Normal measurements are around 23. Values of zero are erroneous""\nplt.gcf().text(0, -0.2, textstr, fontsize=14, fontweight=\'bold\')\nplt.gcf().text(0, -0.3, textstr2, fontsize=14, fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows skin fold thickness of combined Pima and Germany datasets. Largest spikes are around 30 mm. Normal measurements are around 23. There are also errorneous values of \'0\'.\nsns.distplot(df_combined_orig[\'insulin\'],bins=20)\nplt.xlim(0,None)\nplt.xlabel(\'Serum insulin mu U/ml\',fontweight=\'bold\')\nplt.title(\'Serum insulin test results in mu U/ml\',fontsize=15, fontweight=\'bold\')\ntextstr = ""Plot Analysis: The plot above shows the insulin test results of combined Pima and Germany datasets.""\ntextstr2 = ""Largest spikes are less than 50. Normal range is 16-166 mu U/ml. High insulin indicates diabetes. Values of zero are erroneous""\nplt.gcf().text(0, -0.2, textstr, fontsize=14, fontweight=\'bold\')\nplt.gcf().text(0, -0.3, textstr2, fontsize=14, fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows the serum insulin distribution for combined Pima and Germany datasets. Largest spikes are less than 50. The normal range is around 16-166 mu U/ml. High insulin levels indicate diabetes. There are also errorneous values of \'0\'\nsns.distplot(df_combined_orig[\'BMI\'],bins=20)\nplt.xlim(0,None)\nplt.xlabel(\'BMI (kg/m2)\',fontweight=\'bold\')\nplt.title(\'Body mass index\',fontsize=15, fontweight=\'bold\')\ntextstr = ""Plot Analysis: The plot above shows the body mass index (BMI) for combined Pima and Germany datasets.""\ntextstr2 = ""Largest spikes are around 35 to 38. The normal range is 19-25. High values indicate overweight women. Values of zero are erroneous""\nplt.gcf().text(0, -0.2, textstr, fontsize=14, fontweight=\'bold\')\nplt.gcf().text(0, -0.3, textstr2, fontsize=14, fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows the body mass index (BMI) for combined Pima and Germany datasets. Largest spikes are around 35 to 38. The normal range is around 18.5 - 24.9. High BMI levels indicate overweight women. There are also errorneous values of \'0\'\nNOTE: The distribution of predictor variables \'glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\', and \'BMI\' have outliers of value \'0\'. These \'0\' values are invalid since they are not humanly possible and will be replaced by NaN. The plots that follow contain the same Pima Indian and Germany datasets however the \'0\' values of the listed variables are replaced by NaN.\n# from the descriptive statistics minimum values of \'0\' do not make sense and are not valid \n# the variables from df_pima that have minimum of \'0\' are glucose, blood_pressure, skin_thickness, \n# insulin and BMI\ncol_list = [\'glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\'BMI\']\nfor col in col_list:\n    pima_var_bool = df_pima[col] == 0\n    pima_var_sum = pima_var_bool.sum()\n    print(f""{col} : {pima_var_sum}"")\n \nglucose : 5\nblood_pressure : 35\nskin_thickness : 227\ninsulin : 374\nBMI : 11\n\n# from the descriptive statistics in df_germany a minimum value of \'0\' for the following variables \n# do not make sense : glucose, blood_pressure, skin_thickness, insulin and BMI\ncol_list = [\'glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\'BMI\']\nfor col in col_list:\n    germany_var_bool = df_germany[col] == 0\n    germany_var_sum = germany_var_bool.sum()\n    print(f""{col} : {germany_var_sum}"")\n        \nglucose : 13\nblood_pressure : 90\nskin_thickness : 573\ninsulin : 956\nBMI : 28\n\n# make copy of df_pima\ndf_pima_clean = df_pima.copy()\n# make copy of df_pima\ndf_germany_clean = df_germany.copy()\n# replace \'0\' values for the glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\'BMI\' variables\n# with NaN for the df_pima dataset\ndf_pima_clean[[\'glucose\', \'skin_thickness\', \'insulin\', \'BMI\', \'blood_pressure\']] = \\\ndf_pima_clean[[\'glucose\', \'skin_thickness\', \'insulin\', \'BMI\', \'blood_pressure\']].replace(0, np.nan)\n# replace df_pima \'0\' values for the glucose\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\'BMI\' variables\n# with NaN\ndf_germany_clean[[\'glucose\', \'skin_thickness\', \'insulin\', \'BMI\', \'blood_pressure\']] = \\\ndf_germany_clean[[\'glucose\', \'skin_thickness\', \'insulin\', \'BMI\', \'blood_pressure\']].replace(0, np.nan)\n# combined dataset of Pima and Dutch women\ndf_combined_clean = df_pima_clean.append(df_germany_clean, ignore_index=True)\ndf_combined_clean.head()\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\nethnicity\n\n\n\n\n0\n6\n148.0\n72.0\n35.0\nNaN\n33.6\n0.627\n50\n1\npima\n\n\n1\n1\n85.0\n66.0\n29.0\nNaN\n26.6\n0.351\n31\n0\npima\n\n\n2\n8\n183.0\n64.0\nNaN\nNaN\n23.3\n0.672\n32\n1\npima\n\n\n3\n1\n89.0\n66.0\n23.0\n94.0\n28.1\n0.167\n21\n0\npima\n\n\n4\n0\n137.0\n40.0\n35.0\n168.0\n43.1\n2.288\n33\n1\npima\n\n\n\n\n# number of nondiabetic women\nno_diab = (df_combined_clean[\'outcome\'] == 0).sum()\nno_diab\n1816\n\n# number of nondiabetic women\ndiab = (df_combined_clean[\'outcome\'] == 1).sum()\ndiab\n952\n\n# show countplot of outcome for df_pima_clean\n#sns.countplot(x=\'outcome\', data=df_pima_clean\nax = sns.countplot(x=\'outcome\', data=df_combined_clean)\nax.set_xticklabels([""No Diabetes"",""Diabetes""], fontweight=\'bold\')\nplt.title(\'Count of nondiabetic and diabetic women for Pima and Dutch women\',fontsize=15, fontweight=\'bold\')\nax.set_xlabel(\'\\nThe plot above shows 1816 nondiabetic and 952 diabetic women. \\n\\nThere is a higher percentage of nondiabetic versus diabetic women however the women in the dataset are mostly between 20 to 30 years old.\',fontsize=14, fontweight=\'bold\' )\nax.set_ylabel(\'Count\',fontweight=\'bold\')\ntextstr = ""Plot Analysis: The plot above shows 1816 nondiabetic and 952 diabetic women.""\ntextstr2 = ""There is a higher percentage of nondiabetic versus diabetic women however the women in the dataset are mostly between 20 to 30 years old.""\n\nPlot Analysis: The plot above shows 1816 nondiabetic and 952 diabetic women.There is a higher percentage of nondiabetic versus diabetic women however the women in the dataset are mostly between 20 to 30 years old.\n# show countplot of ages for combined database\nplt.figure(figsize=(20,5))\nax = sns.countplot(x=\'age\', data=df_combined_clean)\nax.set_xlabel(\'Age \\n\\nThe plot above shows a wide range of age groups. \\nThe age groups with the highest counts are between 20 and 30. \\nIn the Bivariate Section below the age category will be plotted against the diabetes outcome\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Count\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Age groups of Pima and Dutch women\',fontweight=\'bold\', fontsize=15)\nplt.xticks(rotation=90)\nplt.show()\n\nPlot Analysis: The plot above shows a wide range of age groups among the Pima Indian and Germany datasets. The age groups with the highest counts are between 20 and 30. In the Bivariate Section below the \'age\' category will be plotted against the \'diabetes outcome\'\n# show countplot of pregnancies for combined database\nplt.figure(figsize=(20,5))\nax = sns.countplot(x=\'pregnancies\', data=df_combined_clean)\nax.set_xlabel(\'Pregnancies \\n\\nThe plot above shows the number of pregnancies between zero and four.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Count\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Number of pregnancies for Pima and Dutch women\',fontweight=\'bold\', fontsize=15)\nplt.xticks(rotation=90)\nplt.show()\n\nPlot Analysis: The plot above shows the number of pregnancies between zero and four.\ndf_combined_clean.describe()\n\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n</style>\n\n\n\n\npregnancies\nglucose\nblood_pressure\nskin_thickness\ninsulin\nBMI\ndiabetes_pedigree_function\nage\noutcome\n\n\n\n\ncount\n2768.000000\n2750.000000\n2643.000000\n1968.000000\n1438.000000\n2729.000000\n2768.000000\n2768.000000\n2768.000000\n\n\nmean\n3.742775\n121.895273\n72.404086\n29.289634\n154.237830\n32.596665\n0.471193\n33.132225\n0.343931\n\n\nstd\n3.323801\n30.600655\n12.268576\n10.711518\n113.339578\n7.154020\n0.325669\n11.777230\n0.475104\n\n\nmin\n0.000000\n44.000000\n24.000000\n7.000000\n14.000000\n18.200000\n0.078000\n21.000000\n0.000000\n\n\n25%\n1.000000\n99.000000\n64.000000\n22.000000\n76.250000\n27.500000\n0.244000\n24.000000\n0.000000\n\n\n50%\n3.000000\n117.000000\n72.000000\n29.000000\n126.000000\n32.400000\n0.375000\n29.000000\n0.000000\n\n\n75%\n6.000000\n141.000000\n80.000000\n36.000000\n190.000000\n36.800000\n0.624000\n40.000000\n1.000000\n\n\nmax\n17.000000\n199.000000\n122.000000\n110.000000\n846.000000\n80.600000\n2.420000\n81.000000\n1.000000\n\n\n\n\nBivariate Exploration\nBivariate exploration of the data will consist primarily of exploring the glucose and insulin variables.\nThe following statement is stated on the diabetes.org website (https://www.diabetes.org/diabetes-risk/prevention/high-blood-sugar):\n""Understanding how sugar (glucose) and insulin work in your body is the foundation for knowing how diabetes works. By knowing what can affect your blood sugar levels, you can better manage it.""\n# plot of glucose and insulin in the blood. You would expect as the glucose levels go up the body needs\n# to produce more insulin for glucose absorption. For high glucose and low insulin you would expect diabetes. \n# the dataframe used is \'df_glucose_insulin\' which is filtered for NaN values\n#If your insulin levels were too high, it may mean you have type 2 diabetes\nax = sns.regplot(x=\'glucose\', y=\'insulin\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a strong correlation between insulin and glucose. \\nThe calcuated correlation coefficient is 0.5663.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Insulin\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and insulin\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a strong correlation between insulin and glucose. The calcuated correlation coefficient is 0.5663 .\n# correlation between glucose and insulin is positive.\n# Corr method excludes nan values\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'insulin\'])\n0.5663347094761794\n\nax = sns.regplot(x=\'glucose\', y=\'pregnancies\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a weak correlation between pregnancies and glucose. \\nThe calculated correlation coefficient is 0.1234.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Pregnancies\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and pregnancies\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a weak correlation between pregnancies and glucose. The calculated correlation coefficient is 0.1234 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'pregnancies\'])\n0.12341942099679325\n\nax = sns.regplot(x=\'glucose\', y=\'blood_pressure\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a moderate correlation between blood pressure and glucose. \\nThe calculated correlation coefficient is 0.2093.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Blood pressure\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and blood pressure\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a moderate correlation between blood pressure and glucose. The calculated correlation coefficient is 0.2093 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'blood_pressure\'])\n0.2092747919896563\n\nax = sns.regplot(x=\'glucose\', y=\'skin_thickness\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a moderate correlation between skin thickness and glucose. \\nThe calculated correlation coefficient is 0.2416.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Skin thickness\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and skin thickness\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a moderate correlation between skin thickness and glucose. The calculated correlation coefficient is 0.2416 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'skin_thickness\'])\n0.24160327448100427\n\nax = sns.regplot(x=\'glucose\', y=\'BMI\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a moderate correlation between BMI and glucose. \\nThe calculated correlation coefficient is 0.2341\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'BMI\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and BMI\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a moderate correlation between BMI and glucose. The calculated correlation coefficient is 0.2341 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'BMI\'])\n0.23413632723713854\n\nax = sns.regplot(x=\'glucose\', y=\'diabetes_pedigree_function\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a weak correlation between diabetes pedigree function and glucose. \\nThe calculated correlation coefficient is 0.1279.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Diabetes pedigree fn\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and diabetes pedigree function\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a weak correlation between diabetes pedigree function and glucose. The calculated correlation coefficient is 0.1279 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'diabetes_pedigree_function\'])\n0.12792794186747322\n\nax = sns.regplot(x=\'glucose\', y=\'age\', data=df_combined_clean)\nax.set_xlabel(\'Glucose \\n\\nThe plot above shows a moderate correlation between age and glucose. \\nThe calculated correlation coefficient is 0.2622.\', fontweight=\'bold\', fontsize=15)\nax.set_ylabel(\'Age\', fontweight=\'bold\', fontsize=15)\nplt.title(\'Correlation between glucose and age\',fontweight=\'bold\', fontsize=15)\nplt.show()\n\nPlot Analysis: The plot above shows a moderate correlation between age and glucose. The calculated correlation coefficient is 0.2622 .\ndf_combined_clean[\'glucose\'].corr(df_combined_clean[\'age\'])\n0.2621845332783859\n\ncol_list = [\'pregnancies\', \'blood_pressure\', \'skin_thickness\', \'insulin\',\\\n       \'BMI\', \'diabetes_pedigree_function\', \'age\']\nfor col in col_list:\n    correlation = df_combined_clean[\'glucose\'].corr(df_combined_clean[col])\n    print(f""{col} vs glucose : {correlation}"")\n        \npregnancies vs glucose : 0.12341942099679325\nblood_pressure vs glucose : 0.2092747919896563\nskin_thickness vs glucose : 0.24160327448100427\ninsulin vs glucose : 0.5663347094761794\nBMI vs glucose : 0.23413632723713854\ndiabetes_pedigree_function vs glucose : 0.12792794186747322\nage vs glucose : 0.2621845332783859\n\nNote: The variables \'blood_pressure\', \'skin_thickness\', \'insulin\', \'BMI\', and \'age\' have the highest correlations with \'glucose\' (larger than 0.2).\n# boxplot of \'glucose\' versus \'outcome\'\nax = sns.boxplot(data=df_combined_clean, x=\'outcome\', y=\'glucose\')\nplt.title(\'Distribution of nondiabetic versus diabetic women and their glucose levels\',fontsize=15, fontweight=\'bold\')\nax.set_xlabel(\'\\n\\nThe plot above shows that glucose levels are higher for diabetic women than for nondiabetic women.\',fontsize=15, fontweight=\'bold\')\nax.set_ylabel(\'Glucose\',fontweight=\'bold\')\nax.set_xticklabels([""No Diabetes"",""Diabetes""], fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows that glucose levels are higher for diabetic women than for nondiabetic women.\n# boxplot of \'glucose\' versus \'ethnicity\'\nax = sns.boxplot(data=df_combined_clean, x=\'ethnicity\', y=\'glucose\')\nplt.title(\'Distribution of Pima Indians versus Dutch women and their glucose levels\',fontsize=15, fontweight=\'bold\')\nax.set_xlabel(\'\\n\\nThe plot above shows that glucose levels are roughly the same for Pima Indian versus Dutch women.\',fontsize=15, fontweight=\'bold\')\nax.set_ylabel(\'Glucose\',fontweight=\'bold\')\nax.set_xticklabels([""Pima Indians"",""Dutch""], fontweight=\'bold\')\nplt.show()\n\nPlot Analysis: The plot above shows that glucose levels are roughly the same for Pima Indian versus Dutch women.\nMultivariate Exploration\n# similar graph as above comparing glucose with insulin grouped by ethnicity\nax = sns.lmplot(x=\'glucose\', y=\'insulin\', data=df_combined_clean, fit_reg=True, hue=\'ethnicity\',\\\n               markers=[""o"", ""x""],scatter_kws={\'alpha\': 0.3}, legend=False)\nplt.title(\'Correlation of glucose and insulin grouped by ethnicity\',fontsize=15, fontweight=\'bold\')\nplt.xlabel(\'Glucose \\n\\nFrom the plot shown above, the Pima women have slightly higher correlation data points \\nbetween glucose and insulin than the Dutch women.\',fontweight=\'bold\', fontsize=15)\nplt.ylabel(\'Insulin\',fontweight=\'bold\', fontsize=15)\nlegend_properties = {\'weight\':\'bold\', ""size"":15}\nplt.legend([""Pima Indian"", ""Dutch""], prop=legend_properties)\nplt.show()\n\nNote:  From the plot shown above, the Pima women have slightly higher correlation data points between glucose and insulin than the Dutch women.\n# how do the predictor variables correlate with each other for both pima and dutch women\nsns.set(font_scale=1.2)\nsns.heatmap(df_combined_clean.corr(),cmap=""YlGnBu"", linecolor=\'white\', linewidths=1)\nplt.title(\'Correlation of numerical variables for combined Pima Indian and Germany datasets\',fontsize=20,\\\n          fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.6, \'From the heatmap shown above, the variables glucose, insulin and BMI are \\nmore correlated with diabetic outcome than the other variables in the dataset.\', fontsize=20, fontweight=\'bold\')\nplt.show()\n\nNote:  From the heatmap shown above, \'glucose\', \'insulin\' and \'BMI\' are more correlated with diabetic \'outcome\' than the other variables in the dataset.\n# catplot of ethnicity as x-value and each of the eight variables to find which variable is most\n# likely contributes to the fact that the mean of the diabetes outcomes is greater for the Pima \n# women than that for the Ductch women\nfig, axs = plt.subplots(2,4,figsize=(15,10))\n\nsns.catplot(data=df_combined_clean, x=\'ethnicity\', y=\'pregnancies\', kind=\'point\', ax=axs[0,0])\nsns.catplot(data=df_combined_clean[df_combined_clean.glucose.notnull()],x=\'ethnicity\', y=\'glucose\', \\\n            kind=\'point\', ax=axs[0,1]) \nsns.catplot(data=df_combined_clean[df_combined_clean.blood_pressure.notnull()], x=\'ethnicity\', y=\'blood_pressure\',\\\n            kind=\'point\', ax=axs[0,2])\nsns.catplot(data=df_combined_clean[df_combined_clean.skin_thickness.notnull()], x=\'ethnicity\', y=\'skin_thickness\',\\\n            kind=\'point\', ax=axs[0,3])\nsns.catplot(data=df_combined_clean[df_combined_clean.insulin.notnull()], x=\'ethnicity\', y=\'insulin\',\\\n            kind=\'point\', ax=axs[1,0])\nsns.catplot(data=df_combined_clean[df_combined_clean.BMI.notnull()], x=\'ethnicity\', y=\'BMI\',\\\n            kind=\'point\', ax=axs[1,1])\nsns.catplot(data=df_combined_clean, x=\'ethnicity\', y=\'diabetes_pedigree_function\', kind=\'point\', ax=axs[1,2])\nsns.catplot(data=df_combined_clean, x=\'ethnicity\', y=\'age\', kind=\'point\', ax=axs[1,3])\nfig.suptitle(\'Mean of numerical variables grouped by Pima and Dutch categories\', fontsize=20, fontweight=\'bold\')\nplt.close(2)\nplt.close(3)\nplt.close(4)\nplt.close(5)\nplt.close(6)\nplt.close(7)\nplt.close(8)\nplt.close(9)\nplt.close(10)\nfig.tight_layout()\n\nNote:  In the group of subplots labeled \'Mean of numerical variables grouped by Pima and Dutch categories\', it can be seen that the variables with the largest mean differences are glucose, skin thickness, insulin, BMI, and age.\nPima has higher mean for pregnancies, insulin, and age. There is a slight higher mean for diabetes pedigree function.  This might help explain why the diabetic outcome mean for Pima is higher than that for Dutch women as shown in the plot below.\nsns.catplot(data=df_combined_clean, x=\'ethnicity\', y=\'outcome\', kind=\'point\')\nplt.title(\'Mean of diabetic outcomes grouped by Pima and Dutch categories\', fontsize=20, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.1, \'The diabetic outcome mean for Pima is slightly higher than that for Dutch women as shown in the plot above.\', fontsize=16, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.2,\'Mean of diabetic outcome for Pima Indian women is 0.349 (34.9%)\',fontsize=16, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.3,\'Mean of diabetic outcome for Dutch women is 0.342 (34.2%).\',fontsize=16, fontweight=\'bold\')\nplt.show()\n\nNote:  The diabetic outcome mean for Pima is slightly higher than that for Dutch women as shown in the plot above.\nmean_pima = round(df_pima_clean[\'outcome\'].mean(),3)\nmean_pima\n0.349\n\nNote: Mean of diabetic outcome for Pima Indian women is 0.349 (34.9%)\nmean_germany = df_germany_clean[\'outcome\'].mean()\nmean_germany\n0.342\n\nNote:  Mean of diabetic outcome for Dutch women is 0.342  (34.2%).\nmean_difference = mean_pima - mean_germany\nprint(round(mean_difference, 3))\n0.007\n\npima_list = df_pima_clean[\'outcome\'].tolist()\ndutch_list = df_germany_clean[\'outcome\'].tolist()\nall_values = pima_list + dutch_list\nlen(all_values)\n2768\n\n# To simulate rerunning the study, we randomly reassign each data point (outcome) to either group A (Pima women)\n# or group B (Dutch women).\nimport numpy\nmean_differences = []\nfor x in range(1000):\n    group_a = []\n    group_b = []\n    for y in all_values:\n        value = numpy.random.rand()\n        if value >= 0.5:\n            group_a.append(y)\n        else:\n            group_b.append(y)\n    #mean_group_b = round(np.mean(df_pima[\'outcome\']),3)\n    mean_group_b = np.mean(df_pima_clean[\'outcome\'])\n    mean_group_a = np.mean(df_germany_clean[\'outcome\'])\n    iteration_mean_difference = mean_group_b - mean_group_a\n    mean_differences.append(iteration_mean_difference)\nplt.hist(mean_differences)\nplt.title(\'Mean differences of diabetic outcome for Pima and Dutch women\', fontsize=20, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.1,\'From the plot shown above, we can conclude that the diabetic outcome mean differences are close to 0 and \\nthat the Pima and Dutch women are roughly equally diabetic.\',fontsize=15, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.3,\'The null hypothesis test is that there is NO difference in diabetic means between Pima and Dutch women. \\nThe alternative hypothesis is that there is a difference.\',fontsize=15, fontweight=\'bold\')\nplt.gcf().text(-0.2, -0.4,\'Since p-value of 0.686 is greater than alpha of 0.05 (confidence interval or 95%), we accept the null hypothesis.\',fontsize=15, fontweight=\'bold\') \nplt.show()\n\nPlot Analysis:  From the plot shown above, we can conclude that the diabetic outcome mean differences are close to \'0\' and that the Pima and Dutch women are roughly equally diabetic.\nfrom scipy import stats\n\nstats.ttest_1samp(pima_list, 0.342)\nTtest_1sampResult(statistic=0.40430743910226374, pvalue=0.686099368413374)\n\nNote:  The null hypothesis test is that there is NO difference in diabetic means between Pima and Dutch women.\nThe alternative hypothesis is that there is a difference.\nSince p-value of 0.686 is greater than alpha of 0.05 (confidence interval or 95%), we accept the null hypothesis.\n\n'], 'url_profile': 'https://github.com/debbiepappas', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'Kolkata, West Bengal, India', 'stats_list': [['2', '          followers'], ['2', '          following'], ['13']], 'contributions': '129 contributions\n        in the last year', 'description': ['Diabetes-Diagnosis-with-Artificial-Neural-Network\nThe model analyses if an individual have Diabetes or not based on the his/her Age, BMI, Blood Pressure, Blood Glucose, Insulin Level, Number of Pregnancies(if patient is female),  Diabetes Pedigree Function and Skin Thickness\n'], 'url_profile': 'https://github.com/Prithivi2000', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '202 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Deon67', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'Hyderabad', 'stats_list': [['2', '          followers'], ['0', '          following'], ['3']], 'contributions': '149 contributions\n        in the last year', 'description': ['Keras-Practice-with-ANN-using-Diabetes-dataset\ngoing to use the Pima Indians onset of diabetes dataset. This is a standard machine learning dataset from the UCI Machine Learning repository. It describes patient medical record data for Pima Indians and whether they had an onset of diabetes within five years.\n'], 'url_profile': 'https://github.com/MadanMaram', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'Maryland, DC metro area', 'stats_list': [['5', '          followers'], ['1', '          following'], ['1']], 'contributions': '40 contributions\n        in the last year', 'description': [""Diabetes Drug Testing\nContext: You are a data scientist for an exciting unicorn healthcare startup that has created a groundbreaking diabetes drug that is ready for Phase III clinical trial testing. It is a very unique and sensitive drug that requires administering and screening the drug over at least 5-7 days of time in the hospital with frequent monitoring/testing and patient medication adherence training with a mobile application. You have been provided a patient dataset from a client partner and are tasked with building a predictive model that can identify which type of patients the company should focus their efforts testing this drug on. Target patients are people that are likely to be in the hospital for this duration of time and will not incur significant additional costs for administering this drug to the patient and monitoring.\nIn order to achieve your goal you must build a regression model that can predict the estimated hospitalization time for a patient and use this to select/filter patients for your study.\nExpected Hospitalization Time Regression Model: Utilizing a synthetic dataset(denormalized at the line level augmentation) built off of the UCI Diabetes readmission dataset, students will build a regression model that predicts the expected days of hospitalization time and then convert this to a binary prediction of whether to include or exclude that patient from the clinical trial.\nThis project will demonstrate the importance of building the right data representation at the encounter level, with appropriate filtering and preprocessing/feature engineering of key medical code sets. This project will also require students to analyze and interpret their model for biases across key demographic groups.\nDataset\nDue to healthcare PHI regulations (HIPAA, HITECH), there are limited number of publicly available datasets and some datasets require training and approval. So, for the purpose of this exercise, we are using a dataset from UC Irvine that has been modified for this course. Please note that it is limited in its representation of some key features such as diagnosis codes which are usually an unordered list in 835s/837s (the HL7 standard interchange formats used for claims and remits).\n\nhttps://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\n\nGetting Started\nFollow the instructions in starter_code/student_project.ipynb and be sure to set up your Anaconda environment to get started!\nDependencies\nUsing Anaconda consists of the following:\n\nInstall miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nCreate and activate * a new conda environment.\n\n* Each time you wish to work on any exercises, activate your conda environment!\n\n1. Installation\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2. Create and Activate the Environment\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nGit and version control\nThese instructions also assume you have git installed for working with Github from a terminal window, but if you do not, you can download that first with the command:\nconda install git\n\nIf you'd like to learn more about version control and using git from the command line, take a look at our free course: Version Control with Git.\nNow, we're ready to create our local environment!\n\nClone the repository, and navigate to the downloaded folder. This may take a minute or two to clone due to the included image data.\n\ngit clone https://github.com/udacity/nd320-c1-emr-data-starter.git\ncd nd320-c1-emr-data-starter/project/\n\n\n\nCreate (and activate) a new environment, named udacity-ehr-env with Python 3.7. If prompted to proceed with the install (Proceed [y]/n) type y.\n\nLinux or Mac:\n\nconda create -n udacity-ehr-env python=3.7\nsource activate udacity-ehr-env\n\n\nWindows:\n\nconda create --name udacity-ehr-env python=3.7\nactivate udacity-ehr-env\n\nAt this point your command line should look something like: (udacity-ehr-env) <User>:USER_DIR <user>$. The (udacity-ehr-env) indicates that your environment has been activated, and you can proceed with further package installations.\n\n\nInstall a few required pip packages, which are specified in the requirements text file. Be sure to run the command from the project root directory since the requirements.txt file is there. I also added a line for installing the environment in your notebook in case this is new for you. You should be able to now look for the environment when you select the kernel.\n\n\npip install -r requirements.txt\nipython3 kernel install --name udacity-ehr-env --user\n\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md\n""], 'url_profile': 'https://github.com/korotulea', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '66 contributions\n        in the last year', 'description': ['EDA-and-Naive-Bayes-on-Pima-Indian-Diabetes-Dataset\n'], 'url_profile': 'https://github.com/sidd7936', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '197 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/chaitanyaiitg', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['4']], 'contributions': '359 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pranshul2112', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['3']], 'contributions': '48 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/riya2514', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': [""CDI-Project\nFor this project, my goal was to conduct Data Cleaning and Exploratory Data Analysis for the CDC's Chronic Disease Indicators (CDI): Diabetes dataset.\nData set is found here: https://chronicdata.cdc.gov/Chronic-Disease-Indicators/U-S-Chronic-Disease-Indicators-Diabetes/f8ti-h92k\nSummary:\nDiabetes is a major public health crisis in the United States, and I wanted to use the CDI dataset to study diabetes health outcomes. First, I performed data cleaning to remove unwanted columns/data and identify questions to answer. Then, I investigated two questions by conducting exploratory data analysis and researching diabetes epidemiology/health outcomes:\n\nThe role of gender and ethnicity differences in diabetes health ouctomes\nThe relationship between diabetes, high blood pressure, and high cholesterol\nFinally, I summarized my findings from these investigations and presented it to Medium:\n\nData Cleaning for the Chronic Disease Indicators: Diabetes Dataset\nhttps://medium.com/@zainab.haider/data-cleaning-for-the-chronic-disease-indicators-diabetes-dataset-876f46a68cb3\nExploring Gender and Ethnicity Differences in Diabetes Health Outcomes from the CDI Dataset\nhttps://medium.com/@zainab.haider/exploring-gender-and-ethnicity-differences-in-diabetes-health-outcomes-from-the-cdi-dataset-1bc95da826ac\nExploring the Relationship between Diabetes, High Blood Pressure, and High Cholesterol in the CDI Diabetes Dataset\nhttps://towardsdatascience.com/exploring-the-relationship-between-diabetes-high-blood-pressure-and-high-cholesterol-in-the-cdi-16f15fc80b73\n""], 'url_profile': 'https://github.com/zainabhaider', 'info_list': ['Jupyter Notebook', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'HTML', 'Updated Sep 11, 2020', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', 'Python', 'Updated Aug 27, 2020', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Aug 30, 2020']}"
"{'location': 'Munich', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '94 contributions\n        in the last year', 'description': ['Grid Search for hyper-parameter tuning\nHyper-parameter tuning using grid search method on Pima Indians Diabetes Database.\nSearched parameters\n\nNumber of neurons in Dense layers\nLearning Rate\nActivation Function\nKernel Initializer\nEpochs\nBatch Size\n\nTotal 5184 combinations were tried to find the best combination. KFold validation, using five folds, was used making total 25920 fits.\nModels used\n\nGridSearchCV\nKFold\n\n'], 'url_profile': 'https://github.com/asad200', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '5 contributions\n        in the last year', 'description': ['Please navigate to the URL below in order to view this jupyter notebook project in its correct format:\nhttps://nbviewer.jupyter.org/github/elijoos/KNearestNeighbors/blob/master/KNearestNeighbors.ipynb\nPurpose of this project:\nUsing the KNearestNeighbors Machine Learning algorithm to analyze whether or not a patient has diabetes.\n'], 'url_profile': 'https://github.com/elijoos', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'Delhi', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '312 contributions\n        in the last year', 'description': ['DIABITIES-CLASSIFICATION-PROJECT \nTable of Content\n\nDemo\nOverview\nMotivation\nTechnical Aspect\nInstallation\nRun\nDeployement on Heroku\nDirectory Tree\nTo Do\nBug / Feature Request\nTechnologies Used\nTeam\nLicense\nCredits\n\nDemo\nLink: https://diabities-app.herokuapp.com/:\nOverview\nIn this project, our objective is to predict whether the patient has diabetes or not based on various features like Glucose level, Insulin, Age, BMI. We will perform all the steps from Data gathering to Model deployment. During Model evaluation, we compare various machine learning algorithms on the basis of accuracy_score metric and find the best one. Then we create a web app using Streamlit which is a python macro framework.\nMotivation\nWhat could be a perfect way to utilize unfortunate lockdown period? Like most of you, I spend my time in cooking, Netflix, coding and reading some latest research papers on weekends. The idea of classifying indian currency struck to me when I was browsing through some research papers. I couldn\'t find any relevant research paper (and of course dataset!) associated with it. And that led me to collect the images of Indian currency to train a deep learning model using this amazing tool.\nTechnical Aspect\nThis project is divided into two part:\n\n\nTraining a deep learning model using Keras. (Not covered in this repo. I\'ll update the link here once I make it public.)\n\n\nBuilding and hosting a Streamlit web app on Heroku.\n\nA user can choose image from a device or capture it using a pre-built camera.\nUsed Amazon S3 Bucket to store the uploaded image and predictions.\nUsed CSRF Token to protect against CSRF attacks.\nUsed Sentry to catch the exception on the back-end.\nAfter uploading the image, the predictions are displayed on a Bar Chart.\n\nInstallation\n\n\nThe Code is written in Python 3.7. If you don\'t have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nRun\n\nSTEP 1\n\nLinux and macOS User\nOpen .bashrc or .zshrc file and add the following credentials:\nexport AWS_ACCESS_KEY=""your_aws_access_key""\nexport AWS_SECRET_KEY=""your_aws_secret_key""\nexport ICP_BUCKET=\'your_aws_bucket_name\'\nexport ICP_BUCKET_REGION=\'bucket_region\'\nexport ICP_UPLOAD_DIR=\'bucket_path_to_save_images\'\nexport ICP_PRED_DIR=\'bucket_path_to_save_predictions\'\nexport ICP_FLASK_SECRET_KEY=\'anything_random_but_unique\'\nexport SENTRY_INIT=\'URL_given_by_sentry\'\nNote: SENTRY_INIT is optional, only if you want to catch exceptions in the app, else comment/remove the dependencies and code associated with sentry in app/main.py\nWindows User\nSince, I don\'t have a system with Windows OS, here I collected some helpful resource on adding User Environment Variables in Windows.\nAttention: Please perform the steps given in these tutorials at your own risk. Please don\'t mess up with the System Variables. It can potentially damage your PC. You should know what you\'re doing.\n\nhttps://www.tenforums.com/tutorials/121855-edit-user-system-environment-variables-windows.html\nhttps://www.onmsft.com/how-to/how-to-set-an-environment-variable-in-windows-10\n\n\nSTEP 2\n\nTo run the app in a local machine, shoot this command in the project directory:\ngunicorn wsgi:app\nDeployement on Heroku\nSet the environment variable on Heroku as mentioned in STEP 1 in the Run section. [Reference]\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nDirectory Tree\n├── app \n│\xa0\xa0 ├── __init__.py\n│\xa0\xa0 ├── main.py\n│\xa0\xa0 ├── model\n│\xa0\xa0 ├── static\n│\xa0\xa0 └── templates\n├── config\n│\xa0\xa0 ├── __init__.py\n├── processing\n│\xa0\xa0 ├── __init__.py\n├── requirements.txt\n├── runtime.txt\n├── LICENSE\n├── Procfile\n├── README.md\n└── wsgi.py\n\nTo Do\n\nConvert the app to run without any internet connection, i.e. PWA.\nAdd a better vizualization chart to display the predictions.\n\nBug / Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nTechnologies Used\n\n\n\n \n\nTeam\n[SANYAM GUJRAL]\nLicense\n\nCopyright 2020 Rohit Swami\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\nCredits\n\nGoogle Images Download - This project wouldn\'t have been possible without this tool. It saved my enormous amount of time while collecting the data. A huge shout-out to its creator.\n\n'], 'url_profile': 'https://github.com/gujralsanyam22', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['MODY GENES\n\nThis repository contains all code and scripts used to perform the analyses described in the paper ""Pathogenic variants in actionable MODY genes associate with type 2 diabetes"".\nThe repository includes both bioinformatics and biostatistics analyses.\nNote: the code has not been tested outside of its original environment and depends on data not publicly available.\nBioinformatics\nThe bioinformatics analysis was performed using the scripts in the bioinformatics directory.\nThe different analysis steps are listed in the plain text file bioinformatics/template_analysis, which is provided to the bioinformatics/start_multiserveur.pl script.\nThen the bioinformatics/start_sample.pl script is launched with all the different steps of the analysis.\nAll the different scripts to perform each steps can be found in the bioinformatics/Include directory.\nThese scripts use local databases:\n\nMySQL databases with informations about the different samples (e.g., sample ID, sex, demultiplexing index and lane, raw data path) and the dbSNP annotations (version 135).\nA MongoDB database with the dbNSFP annotations (version 3.0).\nA Redis database with mutation counting informations.\n\nTools, captures and sequencing adaptors paths can be passed by the files in the bioinformatics/Config directory.\nPerl version used is Perl 5, version 16, subversion 3 (v5.16.3) on CentOS Linux 7 (Core, x86_64).\nBiostatistics\nThe statistical analyses were performed using the scripts in the biostatistics directory.\nAll scripts are numbered according to the order of use.\nThe directory biostatistics/utils contains additional scripts needed in the analyses.\nThe R version used is the 3.6.3 (2020-02-29) on Debian GNU/Linux 9 (stretch, x86_64) available as a Docker image (umr1283/stat:R363).\nContact\nFor questions and other discussion, please contact the authors.\n'], 'url_profile': 'https://github.com/umr1283', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'Haryana, India', 'stats_list': [['1', '          follower'], ['3', '          following'], ['2']], 'contributions': '194 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Abhushan01', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'Hoboken, NJ', 'stats_list': [['4', '          followers'], ['7', '          following'], ['1']], 'contributions': '86 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/DeepikaVadlamudi', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '127 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pooja2893', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '127 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pooja2893', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}","{'location': 'Boston, MA', 'stats_list': [['8', '          followers'], ['50', '          following'], ['154']], 'contributions': '128 contributions\n        in the last year', 'description': ['Heart-Failure-Prediction\nCardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.\nHeart failure is a common event caused by CVDs and this dataset contains 12 features that can be used to predict mortality by heart failure. Most cardiovascular diseases can be prevented by addressing behavioural risk factors such as tobacco use, unhealthy diet and obesity, physical inactivity and harmful use of alcohol using population-wide strategies.\nPeople with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n'], 'url_profile': 'https://github.com/ashwinjohn3', 'info_list': ['Jupyter Notebook', 'MIT license', 'Updated Nov 3, 2020', '1', 'Jupyter Notebook', 'Updated Aug 27, 2020', 'Jupyter Notebook', 'Updated Dec 13, 2020', 'Perl', 'GPL-3.0 license', 'Updated Aug 28, 2020', 'Python', 'Updated Aug 26, 2020', 'MATLAB', 'Updated Aug 25, 2020', 'Updated Aug 24, 2020', 'Updated Aug 29, 2020', 'MIT license', 'Updated Aug 28, 2020']}",
