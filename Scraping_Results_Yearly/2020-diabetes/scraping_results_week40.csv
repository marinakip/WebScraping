"{'location': 'Varanasi, India', 'stats_list': [['16', '          followers'], ['29', '          following'], ['32']], 'contributions': '192 contributions\n        in the last year', 'description': ['Diabetes-detection-using-Python\n'], 'url_profile': 'https://github.com/devtechnocode', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Belkatux', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'Bengaluru', 'stats_list': [['0', '          followers'], ['3', '          following'], ['1']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ManjiriMudvedkar', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/mail2rajc', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/tabraizyaseen', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SarahMarquesofc', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '206 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Mano181', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'New York, New York', 'stats_list': [['2', '          followers'], ['2', '          following'], ['3']], 'contributions': '226 contributions\n        in the last year', 'description': ['Mod-3-Project\nBen Inoyatov\nIntroduction\n\nUnder represented groups suffer more from disease and illness in America than others. This project will focus on predicting diabetes in Pima Native American Woman Can we accurately predict diabetes in minority groups? We will use patient statistics like glucose level, insulin level, age, BMI, family history, blood pressure and others.\n\nData comes from Kaggle (link).\nMost visualizations were done using seaborn and matplotlib. For regression I used sklearn, pandas and numpy.\n\nFor more detailed visualizations and exploratory analysis refer to workbook.\nSelect Observations/Findings and Conclusions\n\n\n\nThis pair plot shows relation to glucose level, an important factor to diabetes. You can clearly see the difference between outcomes.\n\n\n\nSimiliar results for insulin levels. Note: insulin values were among most of the missing values. Imputation will make our models more biased but numbers were imputed keeping the original distributions in mind.\n\n\n\nTarget variable- diabetes\n\n\n\nThe best model and its coefficients\n\n\n\nParameters for the Random Forest\n\nRecommendations\n\n\nDiabetes is one of the worldâ€™s leading contributors to heart disease, the leading cause of death in the world. Yet, medicine does not exactly know the relationship between diabetes and heart disease. Under-represented groups suffer from these diseases even worse\nHigh sugar levels and high insulin will predict diabetes especially when interacted with BMI and age\n\nLinks\n\n\nGoogle Slides Presentation: https://tinyurl.com/y5xz89dj\n\n\nData: https://www.kaggle.com/uciml/pima-indians-diabetes-database\n\n\n'], 'url_profile': 'https://github.com/saltaro', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '66 contributions\n        in the last year', 'description': ['diabetesPredictionknn\n'], 'url_profile': 'https://github.com/shubhamrana30', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/deepbluewebtech', 'info_list': ['3', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'Updated Oct 1, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Nov 11, 2020', 'Python', 'Updated Sep 30, 2020', 'Objective-C', 'Updated Sep 28, 2020']}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['11']], 'contributions': '127 contributions\n        in the last year', 'description': ['App_Diabetes_NaiveBayes_C45\n'], 'url_profile': 'https://github.com/FOSSALGO', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Jeffmon431', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Botucatu, SP, Brazil', 'stats_list': [['0', '          followers'], ['7', '          following'], ['1']], 'contributions': '81 contributions\n        in the last year', 'description': ['OcGenesisDiabetes\nOsteoclastogenesis genes in diabetes\nData sets\nGSE54154\n\nBMGM_2: Diabetes do tipo 2 diferenciados com GM-CSF (BMGM);\nBMGM_db: NÃ£o diabeticos diferenciados com M-CSF (BMMC);\nBMMC_2: Diabetes do tipo 2 diferenciados com M-CSF (BMMC);\nBMMC_db: NÃ£o diabeticos diferenciados com GM-CSF (BMGM);\n\nGM-CSF usado para diferenciar em macrÃ³fago do tipo 1 (M1);\nM-CSF usado para diferenciar em macrÃ³fago do tipo 2 (M2);\nConstrastes analisados\nA anÃ¡lise de expressÃ£o diferencial foi realizada utilizando o pacote edgeR.\nConstrastes:\nBMMC_db_vs_BMGM_db = BMMC_db - BMGM_db #M2 vs M1 - Controle\nBMMC_2_vs_BMGM_2 = BMMC_2 - BMGM_2 #M2 vs M1 - Diabetes tipo 2\nBMGM_db_vs_BMGM_2 = BMGM_db - BMGM_2 #M1 controle vs M1 diabetes tipo 2\nBMMC_db_vs_BMMC_2 = BMMC_db - BMMC_2 #M2 controle vs M2 diabetes tipo 2\nArquivo DEGs contem os genes diferencialmente expressos baseados nos contrastes. |LogFC| >= 1.5 & p.valor < .01.\nAnÃ¡lise se encontra no notebook em Markdown/AnaliseDEGsGSE54154.Rmd\nE-GEOD-54779\n'], 'url_profile': 'https://github.com/marceelrf', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '21 contributions\n        in the last year', 'description': [""Nirogyanstory(wip)\nnirogyanstory using JavaScript, Html, CSS\nhow to edit / build /use\ncd to folder in cli\n'npm install' in the cli\n'npm run start' for testing via webpack-dev-server\n'npm run build' for production via webpack\n""], 'url_profile': 'https://github.com/Kartiktyagi3', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'VIT,VELLORE', 'stats_list': [['4', '          followers'], ['11', '          following'], ['16']], 'contributions': '244 contributions\n        in the last year', 'description': [""Diabetes-Prediction\nTable of Content\n\nDemo\nDirectory Tree\nOverview\nMotivation\nInstallation\nAdvantages\nSteps\nDeployement on Heroku\nResult/Summary\nFuture scope of project\n\nDemo\nLink: https://diabetes-predictor-webapp.herokuapp.com/\n\n\n\nDirectory Tree\nâ”œâ”€â”€ static\nâ”‚ â”œâ”€â”€ css\nâ”œâ”€â”€ template\nâ”‚ â”œâ”€â”€ home.html\nâ”œâ”€â”€ Procfile\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ app.py\nâ”œâ”€â”€ diabetes_model.pkl\nâ”œâ”€â”€ requirements.txt\nOverview / What is it ??\n\n\nThis is a simple Flask web app which predicts whether a patient is having diabetes or not.\n\n\nDiabetes is a chronic condition in which the body develops a resistance to insulin, a hormone which converts food into glucose & affect many people worldwide and is normally divided into Type 1 and Type 2 diabetes & considered as one of the deadliest and chronic diseases which causes an increase in blood sugar.\n\n\nMotivation / Why / Reason ??\n\n\nWhat to do when you are at home due to this pandemic situation? I started to learn Machine Learning model to get most out of it. I came to know mathematics behind all unsupervised models. Finally it is important to work on application (real world application) to actually make a difference.\n\n\nBut the rise in machine learning approaches solves this critical problem. The motive of this study is to design a model which can prognosticate the likelihood of diabetes in patients with maximum accuracy.\n\n\nAnalyzed & explored dataset , perform EDA and create a model to predict if a particular observation is at a risk of developing diabetes, given the independent factors & performances of all the three algorithms are evaluated on various measures like Precision, Accuracy, F-Measure, and Recall. Accuracy is measured over correctly and incorrectly classified instances.\n\n\nInstallation / Tech Used\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository\npip install -r requirements.txt\nUsed two datasets, Train data and Test data from Kaggle\nLanguage â€“ Python, Anaconda\nOther libraries for analyzing & visualization: Pandas, Numpy, Matplotlib, Seaborn\nAI/ML : Scikit-Learn , ML models\nWeb Frameworks : Flask\nHosting: Heroku (side projects & demos)\nTracking & SC: GitHub\n\n\n\n\n\nAdvantages\n\n\nhelp to show early diseases of diabetic\n\n\nGlucose Monitoring Systems: Machine learning algorithms recommend optimal insulin dosages to maintain balanced glucose levels\n\n\nMachine learning algorithms help automate the process of monitoring blood sugar levels and recommend adjustments in care.\n\n\nNutrition Coaching: To help recommend meal options based on the specific diet criteria of the user.\n\n\nPhases - Timeline\n1). Data Collection - Importing Dataset\n2). EDA - Feature Engeneering( Dividing data into features and labels), Selection, Explore dataset, Data Cleaning, Convert categorical data into numerical, Concatenate both catagorical and numerical data\n3 ). ML Models Selection - Building Supervised Machine Learning Models => Xgboost, Random Forest, KNN, Gradientboost\n4). Evaluation - Used in a 10-fold cross-validation procedure to train the aforementioned ML models. The performance indices used to compare the models are the prediction\naccuracy (% - MSE between the desired and predicted prices) and the time in seconds, needed to train each model.\n5). Deployment - Deployed on Heroku using Flask framework\nProcess\n\n\nSince data is in form of excel file we have to use pandas read_excel to load the data\n\n\nWe will be using train and test data. We can do some data pre-processing and remove variables which are not needed\n\n\nAfter loading it is important to check the complete information of data as it can indication many of the hidden infomation such as null values in a column or a row. Next step is Feature generation, here we mainly work on the data and do some transformations to extract unknown variables or create different bons of particular columns and clean the messy data.\n\n\nCheck whether any null values are there or not. if it is present then following can be done:\nImputing data using Imputation method in sklearn\nFilling NaN values with mean, median and mode using fillna() method\nDescribe data, which can give statistical analysis\n\n\nMainly work on the data set and do some transformation like creating different bins of particular columns ,clean the messy data so that it can be used in our ML model . This step is very important because for a high prediction score you need to continuously make changes in it\n\n\nDo some EDA, analysis & data visualisation to understand the relationship between different independent variables and the relationship between the independent variables and the dependent variables\n\n\nPrepare categorical variables for model using label encoder - convert categorical text data into model-understandable numerical data\n\n\nDivide the data set into test and train - all our data is numerical after label encoding so we split the data into test and train & predict the price with our test data set\n\n\nBuilding Model - measure the performance of a better and more tuned algorithm, & using different Classifier Technique and comparing them to see which algorithm is giving better performance. Evaluated various models for computing expected future prices and classifying whether this is the best time to buy the ticket. Finally after the above steps. Predict the air tickets prices, and the performance of the models is compared to each other. Later deployed the model and evaluate the efficiency of the predictions.\n\n\nUNSUPERVISED TMODELS USED: Random Forest Classifier: 90.04% KNN : 75.7% Xgboost : 87.48% Gradientboost : 87.59% ACCURACY SCORE : 93:14%\n\n\nDeployement on Heroku\n\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\n\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\n\nResult / Summary\n\n\nDeveloped end-to-end full fleged ML-WebApp to display price accurate predictions with Random Forest 87% accuracy & deployd on heroku\n\n\nApplied all various high performance ML models & compared their best f1, recall, precision, ROC, support score to predict the diabetes\n\n\nEvaluated 4 unsupervised classifier models Xgboost, Random Forest, KNN, Gradientboost & improved & optimized the Model by HPT Cross validation, GridSearchCV\n\n\nDemonstrated EDA, handling categorical data, feature selection & scaling, dimensionality reduction & feature transformation using PCA Bias-Variance tradeoff, Performance Metrics, Splitting data into train and test set, evaluated random forest classifier confusion matrix(y_test,y_pred), performed GRidSearchCV to optimize model,cross validated k-fold, trained model using Random Forest Regressor\n\n\nRecommended Random Forest Classifier, with presicion = 83% , recall = 83% , f1score = 83% , support = 154,ROC score = 0.81% accuracy = 90.04% on test data, model HP Tuning using Cross validation, mean = 0.7167451503781488 , SD = 0.05709939039060164, GRidSearchCV with best accuracy score = 0.755700325732899\n\n\nFuture Scope\nUse multiple Algorithms.\nOptimize Flask app.py.\nFront-End.\n""], 'url_profile': 'https://github.com/akashkam559', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Canada', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '396 contributions\n        in the last year', 'description': [""Early-stage diabetes risk prediction:\n\nimage source\n\n\nAccording to the world health organization. There was a significant rise in the number of people with diabetes from 108 million to 422 million between 1980 and 2014. Additionally, there was about a 5% increase in premature death from diabetes in the last 16 years.\n\n\nA logistic regression model to predict whether a person is likely to develop diabetes given age, sex, and other features such as sudden weight loss, visual blurring, etc. Since the data has some imbalance, SMOTE was used.  Recursive feature elimination was performed to determine the most important features and remove features that don't improve the model. The accuracy, precision, and recall before and after removing those features were compared. To automate the data analysis, a pipeline for data scaling and modeling was built. For reproducibility, I used a docker was to share the containerized app.\n\n\n\nClone the repo localy\nGo to the root of the repo folder\nTo build the image run the following command:\ndocker build -t early_detector .\nRun the following commans to creat the container\ndocker run -p 9999:8888 early_detector\nTo access the notebook, open this file in a browser with the given link in the broswer,it wll be something like this\nhttp://127.0.0.1:8888/?token=xxxxx, only chnage the 8888 portion to 9999\nTo stop the browser, press crtl+ c in the terminal that has thee browser running\nMake sure to remove the container docker rm [container id], to access the container id, you can list the runnig container by docker ps or those who stopped using docker ps -a, then proceed to remove the image using docker rmi [image id], and to get the image id, you can simpy run docker images\n\n""], 'url_profile': 'https://github.com/dataubc', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nIt is a simple Diabetes prediction model that finds the best models for the dataset among logistics regression, Decision Tree, Random forest, SVC and uses that for prediction.\nDataset is taken from kaggle and read from github\nThe model is implemented in colab, but can be run from local respiratory too\n'], 'url_profile': 'https://github.com/Hhamid97', 'info_list': ['2', 'Java', 'GPL-3.0 license', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Updated Sep 28, 2020', 'HTML', 'MIT license', 'Updated Oct 7, 2020', 'JavaScript', 'Updated Oct 1, 2020', 'Updated Sep 28, 2020', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020', '1', 'Jupyter Notebook', 'Updated Sep 30, 2020']}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '13 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/johncarloluna', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['6', '          following'], ['3']], 'contributions': '47 contributions\n        in the last year', 'description': ['Diabetes-Dataset\n'], 'url_profile': 'https://github.com/FurkanAhmed2', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'Islamabad, Pakistan', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '92 contributions\n        in the last year', 'description': ['Diabetes_prediction\nThis notebook basically goes through the process of training a linear classifier and a dense neural network classifier to predict if the person has diabetes or not according to certain variables and data. With both models having a rather similar evaluation metrics, we can choose either model. You can play around with the model features to get different results.\nThe data was processed before training the model and some visualized to show some certain variables and results of our model training\n'], 'url_profile': 'https://github.com/Muneeb97', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '47 contributions\n        in the last year', 'description': ['Diabetes-Prediction\n'], 'url_profile': 'https://github.com/Divyanshu-12', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'Kanpur', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '18 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nIn this particular project, I have used data from Kaggle of diabetes patients. In this dataset, I have 2000 readings and 9 columns. First I have divided it into dependent and independent variables. At initially I used the Logistic Regression model, and I got 78.2% accuracy for the training set. As I started improving my model by using Logit function from the statsmodels module with all variables (i.e. with 8 variables) I got 77.4% accuracy for testing dataset. Again tried to improve the model by using the backward elimination method. Eliminated variable ""SkinThickness"" with 0.5 as a threshold value, as it has the highest \'p\' value. I got 77.8% accuracy for the testing dataset. Now plotted the ROC (Receiver Operating Characteristic) curve and tried to improve the roc_auc_score. At last, I was able to achieve 0.75 roc_auc_score and accuracy was 76%, which is good enough. I compromised with the accuracy so that I can get a minimum value of False Negative. False Negative value is the number of patients who have Diabetes but my model is predicting them as non-diabetic patients.\n'], 'url_profile': 'https://github.com/soorykant', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'Ghaziabad,UP', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/akash-dotcom', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'IIT Kharagpur', 'stats_list': [['0', '          followers'], ['2', '          following'], ['1']], 'contributions': '187 contributions\n        in the last year', 'description': ['diabetes_prediction\nPima Indians Diabetes Database Predict the onset of diabetes based on diagnostic measures. This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n'], 'url_profile': 'https://github.com/priyasinha1', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['4']], 'contributions': '13 contributions\n        in the last year', 'description': ['diabetes_Swami\n'], 'url_profile': 'https://github.com/Swaminathan1976', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['21', '          following'], ['5']], 'contributions': '585 contributions\n        in the last year', 'description': ['UCI Diabetes Dataset EDA and ML\nDiabetes 130-US hospitals for years 1999-2008\nSource: https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008#\nResults\n\nPandas profiling report: https://github.com/datorresb/uci_diabetes/blob/main/diabetic_report.html\nNotebook: https://github.com/datorresb/uci_diabetes/blob/main/Diabetes_Study_Predictions_David_Torres.ipynb\nNotebook HTML: https://github.com/datorresb/uci_diabetes/blob/main/Diabetes_Study_Predictions_David_Torres.html\n\n'], 'url_profile': 'https://github.com/datorresb', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '13 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Balakumar632', 'info_list': ['Jupyter Notebook', 'Updated Oct 20, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 5, 2020', 'Python', 'Updated Oct 3, 2020', 'HTML', 'Updated Oct 2, 2020', 'Python', 'Updated Jan 31, 2021', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'Updated Oct 4, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020']}"
"{'location': 'Algeria', 'stats_list': [['2', '          followers'], ['2', '          following'], ['2']], 'contributions': '165 contributions\n        in the last year', 'description': ['Diabetes Prediction\nUsing various machine learning algorithms to get the best prediction accuracy if possible for the Pima Indians dataset.\nThe best result was found with GradientBoosting with an accuracy of 83%.\nInstall\n\xa0\xa0\xa0 Python version used in this project: 3.6.6\n\xa0\xa0\xa0 Libraries used:\n\n\nPandas 0.23.4\nNumpy 1.15.3\nMatplotlib 2.2.2\nScikit-learn 0.20.0\nScipy 1.1.0\n\n\nHow to Run\nTo run this project you will need some software, like Anaconda.\nFrom Anaconda just set as working directory the folder of the project, open the .py file you want from Models folder and run this file or press F5.\n'], 'url_profile': 'https://github.com/SouadHenane', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Zoher123', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/itsfinch', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '47 contributions\n        in the last year', 'description': ['diabetes_page\n'], 'url_profile': 'https://github.com/unnmesh20', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/victormendes1', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '34 contributions\n        in the last year', 'description': ['Diabetes_Prediction\n'], 'url_profile': 'https://github.com/rohi221b', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': ' INDIA', 'stats_list': [['4', '          followers'], ['6', '          following'], ['5']], 'contributions': '101 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vaibhavthapli', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'Edinburgh, UK', 'stats_list': [['0', '          followers'], ['0', '          following'], ['5']], 'contributions': '34 contributions\n        in the last year', 'description': ['DIABETES PREDICTION (CAPSTONE PROPOSAL)\nThis project is a requirement to graduate from the Machine Learning Engineer Nanodegree Programme offered by Udacity. It sought to build a model that could predict the risk of an individual being diabetic using vitals such as blood glucose concentration and bmi.\nIt includes a jupyter notebook named diabetes_prediction_proposal.ipynb, a pdf version of it named proposal.pdf and the diabetes dataset diabetes.csv to be used for the project.\nThe project gives the following;\n\nA background of the diabetes issue at hand.\nA problem statement.\nA brief description of the dataset including some sample code.\nA solution statement which clearly states what models would be trained.\nA Sample code for creating a dummy or baseline model to be use as a benchmark.\nThe kind of evaluation metrics to be used to evaluate the model.\nHow the model will be deployed.\nReferences.\nAcknowledgements.\n\nThis Proposal was accepted by Udacity.\nMIT License\nCopyright (c) 2020 Emmanuel Kwasi Fiagbedzi\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'], 'url_profile': 'https://github.com/ekfiagbedzi', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'Aalborg, Denmark', 'stats_list': [['2', '          followers'], ['3', '          following'], ['0']], 'contributions': '78 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ViktorsLV', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}","{'location': 'Ahmedabad, India', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '74 contributions\n        in the last year', 'description': ['A-Diabetes-Prediction-System\nThis dataset is an interesting one and aims at predicting the probability of the onset of diabetes. I, as an Indian was interested in this dataset and this is my take on this dataset. The objective of this project is to build a predictive machine learning model to predict based on diagnostic measurements whether a patient has diabetes. This is a binary (2-class) classification project with supervised learning.\n'], 'url_profile': 'https://github.com/panchiwalashivani', 'info_list': ['1', 'Python', 'Updated Oct 3, 2020', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'HTML', 'Updated Oct 1, 2020', 'JavaScript', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'HTML', 'GPL-3.0 license', 'Updated Sep 29, 2020', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 11, 2020', 'CSS', 'Updated Oct 4, 2020', 'Updated Oct 4, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['Diabetes-EDA-Predictive-Modeling\nExploratory data analysis and predictive modeling using the Pima Diabetes Dataset\n'], 'url_profile': 'https://github.com/renzak31', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'Mysore', 'stats_list': [['3', '          followers'], ['2', '          following'], ['4']], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/a1shverma', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['11']], 'contributions': '1,111 contributions\n        in the last year', 'description': ['Framework-for-Diabetes-Prediction-\nAll the results reported in the literature were produced using the following version Python and Python API:\npython 3.6.5\nnumpy 1.18.1\npandas 1.0.0\nmatplotlib 3.1.2\nseaborn 0.10.0\nscikit-learn 0.22.1\nPyXGBoost 1.0.9\nxgboost 0.90\nscipy 1.4.1\nThe more details of the proposed framework are available in the following Journal-\nhttps://ieeexplore.ieee.org/document/9076634\n'], 'url_profile': 'https://github.com/mahesh122000', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['1', '          following'], ['0']], 'contributions': '79 contributions\n        in the last year', 'description': ['EDA-of-Diabetes-dataset\n'], 'url_profile': 'https://github.com/prasrahul', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'Seattle, WA', 'stats_list': [['9', '          followers'], ['44', '          following'], ['4']], 'contributions': '340 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sjb3', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'San Francisco, CA', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '186 contributions\n        in the last year', 'description': ['\n\n\nUnknown Diabetes Risk: What to Do with Missing Data Values\nCode Caviar Story: https://www.bingyune.com/blog/diabetes-risk-missing\nProject Overview\nMissing data (or missing values) is defined as the data value that is not stored for a variable in the observation of interest. The problem of missing data is relatively common in almost all data science problems and can have a significant effect on the conclusions that can be drawn from machine learning models. Most datasets have missing values, and the likelihood of having missing values increases with the size of the dataset. In general, there are three types of missing data: 1) Missing completely at random (i.e. not systematic, missing data is just a random subset of the data); 2) Missing at Random (i.e. systematic, missing data is conditional on another observed variable); and 3) Missing Not at Random (i.e. non-ignorable and problematic, missing data mechanism has to be modeled). The first step in diagnosing randomness of the missing data is to use your substantive scientific knowledge of the data and your field. The second step is knowing how to identify, remove, and impute missing values as needed.\nThe goal of this project is to provide a Quick Guide on best practices to handle data with missing values. The project makes use of the Pima Indians Diabetes Database from Kaggle. The dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The dataset was created to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. A key constraint of the dataset is that all patients identify as female at least 21 years old of Pima Indian heritage. There are a total of 768 observations and 9 variables\nSummary:\nIn real world data, there are often cases where a particular observation is missing because of various reasons, such as invalid or corrupt values. The handling of missing data is very important during the preprocessing of the dataset as many machine learning algorithms do not support missing values. When it comes to machine learning with Python, missing values can be handled in many different ways (each with its own pros and cons). For instance, deleting the rows or columns having null values is a simple technique, but you also lose a lot of information. Alternatively, columns in the dataset with numeric continuous values can be replaced with the mean, median, or a constant of remaining values in the column. When the missing values are from categorical columns (string), the missing values can be replaced with the most frequent category in the column. More advanced methods use either a classification or regression model to predict missing values depending on nature of the feature having a missing value. Lastly, having a domain knowledge about the dataset is also important because making the right decision on how to handle missing values generates more robust data models and better conclusions.\nGetting Started\nCloning the git repository and installing the provided packages will help you get a copy of the project up and running on your local machine. The analysis for this project was performed using Jupyter Notebook (.ipynb) and the packages were managed using the Anaconda platform.\ngit clone https://github.com/codecaviar/diabetes_risk_missing.git\nconda env create -f environment.yml\n\nFile Description:\n\nenvironment.yml - packages used to perform this analysis\ndiabetes.csv -  Pima Indians Diabetes Database from Kaggle\nnotebook_diabetes_risk_missing.ipynb - Jupyter Notebook for this project including examples and explanations\n\nAuthors\n\nBingYune Chen - LinkedIn\nBingYune & Co - GitHub\n\nLicense\nThe project is licensed under the MIT License - see the LICENSE file for details.\nAcknowledgments\nThe project referenced the following resources:\n\nhttps://towardsdatascience.com/7-ways-to-handle-missing-values-in-machine-learning-1a6326adf79e\nhttps://towardsdatascience.com/easy-data-science-with-r-and-python-diabetes-among-the-pima-indians-an-exploratory-analysis-d7bc321d0fa7\nhttps://machinelearningmastery.com/handle-missing-data-python/\nhttps://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-017-0442-1\n\n\nThe Code Caviar is a digital magazine about data science and analytics that dives deep into key topics, so you can experience the thrill of solving at scale.\n'], 'url_profile': 'https://github.com/codecaviar', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""DiscoverAD\nDiscover Atypical Diabetes (DiscoverAD) was developed for identifying and clustering endotypes of atypical diabetes. DiscoverAD is a data mining framework with a two-step filtering process to first exclude participants who meet definitions of typical type 1 diabetes (T1D) or type 2 diabetes (T2D) and then include participants with certain pre-specified AD characteristics. This is followed by robust and unsupervised cluster analysis to discover novel endotypes of AD within the filtered group. We purposefully developed DiscoverAD to permit flexibility and efficiency so it can be applicable for various clinical settings with different types of large cohort datasets.\nDiscoverAD is written in the R statistical programming language. A tutorial is available here as well as in Rmarkdown format or as plain R Code. Additionally, we've included sample files for the tutorial:\n\nExample dataset format - an example dataset to demonstrate the format used for DiscoverAD.\nExample variable type defintion file - a file including the statistical data type of each variable included in the example dataset.\n\n""], 'url_profile': 'https://github.com/USF-HII', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'Nilai', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Kutcher1945', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'Pune,Maharashtra,India', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '132 contributions\n        in the last year', 'description': ['Diabetes_prediction_deployment\n'], 'url_profile': 'https://github.com/debapriyo-rc', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}","{'location': 'Kolkata', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '39 contributions\n        in the last year', 'description': ['Diabetes_Predictor_ML_App\nIt helps anyone to detect their diabetes based on symptoms.\n'], 'url_profile': 'https://github.com/soumyabrataroy', 'info_list': ['HTML', 'Updated Oct 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 6, 2020', 'Jupyter Notebook', 'Updated Dec 8, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 9, 2020', 'R', 'Updated Jan 27, 2021', 'Python', 'GPL-3.0 license', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Python', 'Updated Oct 24, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""DiscoverAD\nDiscover Atypical Diabetes (DiscoverAD) was developed for identifying and clustering endotypes of atypical diabetes. DiscoverAD is a data mining framework with a two-step filtering process to first exclude participants who meet definitions of typical type 1 diabetes (T1D) or type 2 diabetes (T2D) and then include participants with certain pre-specified AD characteristics. This is followed by robust and unsupervised cluster analysis to discover novel endotypes of AD within the filtered group. We purposefully developed DiscoverAD to permit flexibility and efficiency so it can be applicable for various clinical settings with different types of large cohort datasets.\nDiscoverAD is written in the R statistical programming language. A tutorial is available here as well as in Rmarkdown format or as plain R Code. Additionally, we've included sample files for the tutorial:\n\nExample dataset format - an example dataset to demonstrate the format used for DiscoverAD.\nExample variable type defintion file - a file including the statistical data type of each variable included in the example dataset.\n\n""], 'url_profile': 'https://github.com/USF-HII', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '101 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/adamsh231', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Gwalior', 'stats_list': [['9', '          followers'], ['17', '          following'], ['6']], 'contributions': '97 contributions\n        in the last year', 'description': ['Pima-Indian-Diabetes-Prediction - Kaggle Dataset\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nUsing the particular database, I have predicted the outcome using Boosting and Stacking technique.\nNote : My next work will be on Malaria Dataset. My aim is to work on atleaat 5 disease dataset and then I will be creating Web app using Flask where user can check whether they are suffering from those diseases or not. After completing the web app, I will deploy it on Heroku and code can be accessed from GitHub.\n'], 'url_profile': 'https://github.com/Rishabhdhyani', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['139', '          followers'], ['0', '          following'], ['2']], 'contributions': '176 contributions\n        in the last year', 'description': ['Diabetes-Onset-Detection\nIn this diabetes-onset-detection project, we will learn how to use the scikit-learn grid search capability.\nHTML page with step by step view is also available.\n'], 'url_profile': 'https://github.com/AnanyaTripathy', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['3', '          following'], ['14']], 'contributions': '15 contributions\n        in the last year', 'description': ['deneme\n'], 'url_profile': 'https://github.com/rolmez', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Mumbai', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['Predication-of-Diabetes-\nThis Project is to Predict weather a person has Diabetes or not.\nThe Root Mean Square Error of the data is: 44.86%\nAnd the Model Accuracy is around 79.87%\n'], 'url_profile': 'https://github.com/Tanishq60', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Dehradun, Jalandhar', 'stats_list': [['4', '          followers'], ['4', '          following'], ['6']], 'contributions': '222 contributions\n        in the last year', 'description': ['Type-1-Diabetes-REST-API\nREST API for Type 1 Diabetes Project\n'], 'url_profile': 'https://github.com/priyanshu-panwar', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes-machine-learning\n'], 'url_profile': 'https://github.com/n1-KO', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'New delhi, delhi', 'stats_list': [['5', '          followers'], ['14', '          following'], ['5']], 'contributions': '69 contributions\n        in the last year', 'description': ['HealthStory generator\nGenrate Dynamic HealtStory report for diabetes.\nHow to run the code\n1. install the a local live server extention for your code editor\nOpen your code editor e.g vscode goto extention search for live server and install the extention\n2. open index.html with live server\nIn your code editor goto index.html, right click, go to open with live server. This will open the page on your default browser.\n3. Change Sample file\nGoto js folder open main,js goto line number 4 and replace sample1 to sample2 or sample3 .. upto sample6\n'], 'url_profile': 'https://github.com/zishanjawed', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}","{'location': 'Lisbon', 'stats_list': [['40', '          followers'], ['70', '          following'], ['83']], 'contributions': '199 contributions\n        in the last year', 'description': ['knn-diabetes-prediction\nPracticing some data science skills with KNN algorithm\n'], 'url_profile': 'https://github.com/gmaragao', 'info_list': ['R', 'Updated Jan 27, 2021', 'Python', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Sep 29, 2020', 'HTML', 'Updated Oct 27, 2020', 'Jupyter Notebook', 'Updated Oct 1, 2020', 'Jupyter Notebook', 'Updated Oct 4, 2020', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'JavaScript', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']}"
"{'location': 'New delhi, delhi', 'stats_list': [['5', '          followers'], ['14', '          following'], ['5']], 'contributions': '69 contributions\n        in the last year', 'description': ['HealthStory generator\nGenrate Dynamic HealtStory report for diabetes.\nHow to run the code\n1. install the a local live server extention for your code editor\nOpen your code editor e.g vscode goto extention search for live server and install the extention\n2. open index.html with live server\nIn your code editor goto index.html, right click, go to open with live server. This will open the page on your default browser.\n3. Change Sample file\nGoto js folder open main,js goto line number 4 and replace sample1 to sample2 or sample3 .. upto sample6\n'], 'url_profile': 'https://github.com/zishanjawed', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'Thessaloniki, Greece', 'stats_list': [], 'contributions': '241 contributions\n        in the last year', 'description': ['Software Engineering Bootcamp\nJava & Angular\npowered by Pfizer\nSacchon\nA Diabetes Management\nWeb Application\nSoftware Requirements Specification Document\nSeptember 2020\nAbstract\nThe final deliverable in the Software Engineering Bootcamp is the group project\nsoftware, Sacchon, a diabetes management web application. Each team will create\ntheir own implementation based on a Software Requirements Specification (SRS)\ndocument. The SRS is common to all, but each team can follow their own\nassumptions and approaches. Sacchon is divided into two distinct subsystems, the\nSacchon Rest-API which is the backend and the Sacchon Angular App, which is\nthe frontend. To the end user, the web app consists of three major components:\nthe Repository of Medical Data (MediDataRepo), the Doctor Advice Services\nSystem (DoctorAdvice), and the Reporting Services (Reporter).\nMediDataRepo keeps track of the usersâ€™ blood glucose level, daily consumed\ncarbohydrates, and medication intake. In the DoctorAdvice section a team of\ndoctors provide advice to patients on a per-call basis. Reporter provides a series\nof aggregation operations for creating tables and charts. Further details on the\nbusiness requirements of each component will be discussed in the class.\nTable of Contents\n\n1 Introduction\n2 Project scope\n3 Deliverables\n4 Functional Requirements\n\n4.1 Overview\n4.2 MediDataRepo\n4.3 DoctorAdvice\n4.4 Reporter\n\n\n5 Non-Functional Requirements\n\n5.1 Sacchon app\n\nPerformance\nVersion control\nMicrodesign\n\n\n5.2 Sacchon application code\n\nDevelopment environment\nSoftware interfaces\nTesting\nLogging\nException handling\nDeliverables\n\n\n\n\n\n1 Introduction\nThis Software Requirements Specification (SRS) document gives an overview of\nSacchon, a diabetes management web application. It names what is required to be\nanalyzed, designed, implemented, tested, and presented. It also describes the\nhigh-level requirements of the stakeholders based on their needs and\nexpectations, i.e. the desired product features.\n2 Project scope\nThe project aim is to develop the Sacchon app and deliver it ready to be released.\nThe requirements are given by the Sacchon Consulting Enterprise (a fictional\ncompany).\nThe information system must contain\n\nA User Interface to submit and view medical data by the patients and\ndoctors.\nAn Administration Console with user management, monitoring, and\nreporting capabilities of the system usage.\n\nFor the above features to be considered complete, the following functionality must\nbe provided\n\nFrom the backend view, a corresponding call with a valid JSON object\ncontaining all needed information must be available, according to the\nspecification of each case.\nFrom the frontend view, a corresponding page consuming the service from\nthe backend and presenting the suitable information must be available.\n\n3 Deliverables\nThe deliverable of this project is the integrated platform of the back and the front\nsystem of the Sacchon. This means that the following three subsystems must be\ndelivered:\n\nMediDataRepo, the Repository of Medical Data)\nDoctorAdvice, the Doctor Advice Services System\nReporter, the Reporting Services\n\nIn the following sections, all needed functionality for each subsystem is defined.\n4 Functional Requirements\n4.1 Overview\nThe patient uses the system to store their data at any time. After a month of data\nrecording has elapsed, a doctor can review this data and provide advice to the\npatient for the next month. This process is repeated until the patient or the doctor\nunregisters from the system.\nThe Chief Doctor is an officer who can view reports which monitor the activity of\npatients and doctors in the system.\nThe following sections list the functionality needed to be present for the system to\nbe considered complete.\n4.2 MediDataRepo\nThe patient can\nmanage their account\nsign up for an account\nremove the account\nstore their data\nblood glucose level (date, time, measured in mg/dL)\ncarb intake (measured in grams)\nview\ntheir average daily blood glucose level over a user- specified period\ntheir average carb intake over a user-specified period\nthe current and past consultations from doctors\nupdate\nmodify incorrect submitted data\ndelete incorrect submitted data\n4.3 DoctorAdvice\nThe doctor can\nmanage their account\nsign up for an account\nremove the account\nview patient record\nbrowse the data for a single patient (patient data and\nconsultations)\nsearch\nfind patients that have not had a consultation in the last month\nconsult\nprovide advice to a patient for the upcoming month (name of\nmedication and dosage)\nupdate\nmodify a consultation to a patient\nInitially a patient has not doctor consulting them. As soon as a month of data\nrecording has passed, the patient is ready to be consulted by a doctor.\nDoctors search for patients for which advice is pending. Each doctor can see all\nthe patients that they consult and the patients that are new in the system.\nDoctors cannot see patients that are consulted by other doctors. All doctors can\nsee the new patients.\nWhen a doctor selects to consult a new patient, the patient becomes managed by\nthis doctor exclusively.\nWhen a doctor leaves the system, their patients become available again for other\ndoctors to consult. Past consultations of these patients continue to refer to the\ndoctor who is leaving the system.\nIf a doctor modifies a consultation, the patient must see a warning as soon as\nthey enter the system, so that they know that some important information must\nbe reviewed.\nA month is the period from the day of consultation to the same date next month\n(say, from the 15th of June to the 14th of July). It is not a calendar month. The\nnext month for a patient starts as soon as a doctor has provided a consultation.\nUntil the new consultation arrives, the previous one is considered valid.\n4.4 Reporter\nThis section is available only to the Chief Doctors in the application. The reports\navailable are:\n\nThe information submissions (personal monitor data) of a patient over a\ntime range\nThe information submissions (consultations) of a doctor over a time\nrange\nThe list of the patients who are waiting for a consultation and the time\nelapsed since they needed to have one\nThe list of the patients with no activity over a time range\nThe list of the doctors with no activity over a time range\n\n5 Non-Functional Requirements\n5.1 Sacchon app\nThe Sacchon app must be able to run in any current major web browser.\nPerformance\nTo guarantee a good user experience, all calls to the backend must have a\nmaximum response time of 1 second (excluding network response time).\nVersion control\nAll code must make use of the Git version control system. Each team must create\nits own single GitHub code repository.\nUser interface\nA basic UI design with open source images will be used.\n5.2 Sacchon application code\nDevelopment environment\nThe following set up is required:\n\nThe backend part of the system must be developed in Java 8 or greater.\nAny IDE can be used for the implementation; JetBrains IntelliJ IDEA is\npreferred (but not required).\nThe frontend will be developed using the Angular Framework.\nThe underlying database system must be the Microsoft SQL Server\nDeveloper Edition.\nMaven must be the tool to manage dependencies and the software\ndevelopment lifecycle.\n\nSoftware interfaces\nAll functionality must be implemented by using HTTP calls returning information\nin JSON format.\nA software interface document must be created. This is to be read by external\nsoftware developers who may want to interface with the system. The document\nmust provide the following information:\n\nGive the list of communications including the description of the data that is\nbeing exchanged.\nSpecify any constraints.\nDescribe application or other software interface characteristics, including\ncomponent names and versions, databases, operating systems, libraries,\ntools, etc. that must be known to the developers.\n\nTesting\nThe system must be fully backed up by unit tests.\nFor testing the REST calls, a third-party tool should be utilized. Postman\n(https://www.getpostman.com) is recommended as a commonly-used tool in this\narea. Swagger can also interface with the deliverable for testing. Automating REST\ncalls testing is highly recommended.\nLogging\nA well-defined logging policy maintaining all information produced by the\nsoftware when running is mandatory. The logging policy must be documented\n(e.g. name the specific log files, directories, the rotation policy etc.).\nException handling\nWhen handling software exceptions, every call must be guaranteed to return a\nvalid JSON document. This includes the cases where something went wrong in the\nbackend execution due to either development bugs or system causes. The end-\nuser must never see default error pages on the web browser. Depending on the\ntype of the call (the various CRUD actions), the proper HTTP code must be always\nreturned from the backend for further processing up front.\nDeliverables\nThe application code must be delivered in a single project repository on GitHub,\non the master branch of the project. The required software interface document\nmust be included as project documentation in the same repository.\n'], 'url_profile': 'https://github.com/mich-ch', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['8']], 'contributions': '45 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AndeeKool', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'B.Tech Final Year Student', 'stats_list': [['1', '          follower'], ['5', '          following'], ['0']], 'contributions': '41 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nDiabetes Prediction Using ML\n'], 'url_profile': 'https://github.com/NikhilKakkar22', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '18 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mmonsiva1234', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '30 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AbdullahGhauri', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'Thessaloniki, Greece', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '110 contributions\n        in the last year', 'description': ['\nSacchon app\nAbout the project\nThe project aim is to develop the Sacchon app and deliver it ready to be released. The  requirements are  given by the Sacchon  Consulting Enterprise (a fictional company).\nThe information system must contain:\n\nA User Interface to submit and view medical data by the patients and doctors.\nAn Administration Console with user management, monitoring, and reporting capabilities of the system usage.\n\nFor the above features to be considered complete, the following functionality must be provided:\n\nFrom  the  backend view, a corresponding  call with a  valid  JSON  object containing  all  needed  information must be  available, according to the specification of each case.\nFrom the frontend view, a corresponding page consuming the service from the backend and presenting the suitable information must be available.\n\nOverview\nThe patient uses the system to store their data at any time. \nAfter a month of data recording  has  elapsed,  a  doctor can  review  this  data  and  provide  advice  to  the patient for the next month.This process is repeated until the patient or the doctor unregisters from the system.The Chief Doctor is an officer who can view reports which monitor the activity of patients and doctors in the system.\n\nFunctionallity of user roles:\nMediDataRepo\nThe patient can:\n\nmanage their account\n\nsign up for an account\nremove the account\n\n\nstore their data\n\nblood glucose level (date, time, measured in mg/dL)\ncarb intake (measured in grams)\n\n\nview\n\ntheir average daily blood glucose level over a user specified period\ntheir average carb intake over a user  specified period\nthe current and past consultations from doctors\n\n\nupdate\n\nmodify incorrect submitted data\ndelete incorrect submitted data\n\n\n\nDoctor advice\nThe doctor can:\n\nmanage their account\n\nsign up for an account\nremove the account\n\n\nview patient record\n\nbrowse the data for a single patient(patients data and consultations)\n\n\nsearch\n\nfind patients that have not had a consultation in the last month\n\n\nconsult\n\nprovide advice to a patient for the upcoming month (name of medication and dosage)\n\n\nupdate\n\nmodify a consultation to a patient\n\n\n\nReporter\nThis section is available only to the Chief Doctors in the application. The reports available are:\n\nThe information submissions(personal monitor data) of a patient over a time range\nThe information submissions (consultations) of a doctor over a time range\nThe list of the patients who are waiting for a consultation and the time elapsed since they needed to have one\nThe list of the patients with no activity over a timerange\nThe list of the doctors with no activity over a time range\n\nThe user story of the application\nInitially a patient has not doctor consulting them. As soon as a month of data recording has passed, the patient is ready to be consulted by a doctor.\nDoctors search for patients for which advice is pending. Each doctor can see all the patients that they consult and the patients that are new in the system. Doctors cannot see patients that are consulted by other doctors. All doctors can see the new patients.\nWhen a doctor selects to consult a new patient, the patient becomes managed by this doctor exclusively.\nWhen a doctor leaves the system, their patients become available again for other doctors to consult. Past consultations of these patients continue to refer to the doctor who is leaving the system. If a doctor modifies a consultation, the patient must see a warning as soon as they enter the system, so that they know that some important information must be reviewed.\nA month is the period from the day of consultation to the same date next month (say, from the 15th of June to the 14th of July).It is not a calendar month. The next month for a patient starts as soon as a doctor has provided a consultation. Until the new consultation arrives, the previous one is considered valid.\n\nThe development process for the application\n\nDevide the main project into subprojects (BackEnd - FrontEnd)\nModel the entities\nFind the endpoints of the application. We create all necessary breakpoint for the connection with app.\nAll calls can sent and get data in JSON formatting. So in upgraded version of this app, can used by IoT devices.\nImplement the functionality of the project in backend\nCreate the database of project and connect it with backend of the application\nTest the HTTP calls with POSTMAN\nImplement the functionality of endpoints in FrontEnd using Angular Framework and CSS Bootstrap Framework\n\nInstallation guide\nFor the backend\n\nJetBrains IntelliJ IDEA\nMicrosoft SQL Server 2019\nJava 8 (or greater)\nLombok depedency\nMaven (To manage depedencies and the software development lifecycle)\nHibernate\nRestlet Framework\n\nFor the FrontEnd\n\nAngular Framework\nHTML SCSS\nBootstrap framework\nVisual Studio Code\nOpen source images\nChart JS\n\nFor testing REST calls\n\nPostman\n\nVersion control\n\nGit\nGithub repository\n\nGuide to run the project\n\n\nCopy this link Sacchon app\n\n\nClone the project in to your system \n$ git clone https://github.com/codehub-learn/pfizer-se-team1.git \n\n\nCreate a new database named Sacchon\n\n\nOpen the backend folder with (Intellij)\n\n\nChange the update database to create in persistence.xml to create the tables in the database\n  <property name=""hibernate.hbm2ddl.auto"" value=""update"" />\n\n\nPress Shift + F10 to RUN the project\n\n\nChange the previous line to update\n\n\nOpen the FrontEnd folder with Visual Studio Code\n\n\nOpen a new terminal and redirect to the FrontEnd folder\n\n\nPress the command npm install to install npm packages\n\n\nPress the command ng serve\n\n\nNow open a browser tab into url: localhost:4200\n\n\nNow you can use the application\n\nYou do not have entries in your database\nYou can register a new patient or doctor, submit and then view their data.\n\nThis project was imlemented during the software engineering bootcamp, organized by Pfizer and Codehub.\nThis application created by:\nChristos Siopis\nEirini Kelidou\nGeorgios Stathis\nVasilis Paraskevas\n'], 'url_profile': 'https://github.com/SiopisChristos', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['4', '          following'], ['0']], 'contributions': '63 contributions\n        in the last year', 'description': ['pfizer-se-team4\nSoftware Interface Document for Diabetes Management Web Application\n\npowered by Pfizer\nDescription of the Project\nThis is the final deliverable in the Software Engineering BootCamp. The project was implemented\nby Anestis Almaliotis, Kostas Chatziathanasiou and Kyriaki Karypidou. The project is divided into two distinct subsystems, the REST-API which is the backend, and the Angular app which is the frontend. To the end user, the web app consists of three major components:\n\nThe repository of Medical Data (MediDataRepo)\nThe doctor advice services system (DoctorAdvice)\nThe reporting services (Reporter)\n\nThe MediDataRepo keeps track of the users\' blood glucose level, daily consumed carbohydrates,\nand medication intake. In the DoctorAdvice section a team of doctors provide advice to patients\nafter the patient has completed a month of recording metadata. The reporter provides a series of aggregation operations for creating tables and charts.\nThe List of Communications\nIn order for the client (Website) to communicate with the server (Backend), angular requests are taking place for each function. The type of requests that were used in order to implement the REST API are: GET, PUT, POST, DELETE. The service in the back sends valid JSON objects for fulfilling every request from the frontend view. There are three types of users (patient, doctor, chief doctor-reporter). Every user has a role in the system which is assigned to him differently. Doctors and chief doctors can\'t sign up and are assigned manually to the MySQL database.\nSign up\nIn order for a patient to sign up in the system a request of this format is exchanged:\nhttp://localhost:9000/v1/register (POST)\n\nThe JSON format of the request including all the user\'s properties are the following:\n\n{""username"": ""petros_iakwvidis19"",  \n ""password"": ""12934dasda"",\n ""role"": ""patient"",\n ""address"": ""Agiwn Pantwn 27"",\n ""city"": ""Thessaloniki"",\n ""dob"": ""1953-03-12"",\n ""email"": ""petros@yahoo.com"",\n ""firstName"": ""Petros"",\n ""lastName"": ""Iakwvidis"",\n ""phoneNumber"": ""69xxxxxxxx"",\n ""zipCode"": ""12634""}\nThe patient gets added to the database with all the info he submitted, with the role of the patient and with an autogenerated id. The response of the request is below, although the frontend\ndoes not consume all this information.\n{\n    ""username"": ""petros_iakwvidis19"",\n    ""password"": ""12934dasda"",\n    ""role"": ""patient"",\n    ""firstName"": ""Petros"",\n    ""lastName"": ""Iakwvidis"",\n    ""email"": ""petros@yahoo.com"",\n    ""address"": ""Agiwn Pantwn 27"",\n    ""city"": ""Thessaloniki"",\n    ""zipCode"": ""12634"",\n    ""phoneNumber"": ""69xxxxxxxx"",\n    ""dob"": -530409600000,\n    ""creationDate"": 1601618236631,\n    ""id"": 0\n}\nLoggin\nThe loggin is available for all the users, and is consumed using this endpoint:\n\nhttp://localhost:9000/v1/login  (POST)\n\nThe backend checks if the user exists in the database, the required\nJSON data to be received is this:\n{\n ""username"": ""petros_iakwvidis19"",  \n ""password"": ""12934dasda""\n}\n\nAn important thing to mention is that each time someones login, two values are returned, one is the role of the user, because we need it to change the options of each user. Each user depending on his role, can view different things. Also, a boolean value is getting returned that shows if the doctor has made a change to the last consultation.\n\nUpdate\n\nThe user can update his profile data.\n[v1/update] [PlDb] (PUT)\nBefore that, the profile data should be received, so the form will not be empty.\n[v1/get-user] [PlDb] (GET)\n\nRemove\n\nv1/remove-account (DELETE)\n\nPatient functions\nStoring data\nThe patient can store his medical data using this endpoint:\n\nhttp://localhost:9000/v1/medidata (POST)\n\nThe data sent are glucose and carb. The measured date is saved automatically using the\ncurrent date, assuming the measurement of the diabetic patient happened at the time of adding\nthe data.\nViewing data\nThe patient can view all his medical data:\n\nv1/medidata (GET)\n\nBefore updating a medidata, the medidata has to be loaded, so a medidata can be viewed\nindependently with this endpoint:\n\n/medidata/{id} (GET)\n\nThe user can view his daily average blood glucose level or carb over a user specified period.\nThe endpoint follows this format:\n\nv1/medidata/{datatype}/{fromdate}/{todate} (GET)\n\nThe datatype can either be glucose or carb and the from and to date is the specified period.\nAlso, there is another endpoint, for viewing the current and past consultations from doctors.\n\nv1/consultations (GET)\n\n\nMedidata for a specific consultation can be seen.\n\n\n/medidata-consultation/{cid} (GET)\n\nUpdating data\nThe patient can modify incorrect submitted data in his medical data recordings.\n\nv1/medidata/{id} (PUT)\n\nDeleting data\nThe patient can delete a medical data.\n\nv1/medidata/{id} (DELETE)\n\nDoctor functions\nViewing data\n\nA doctor can browse through the patient list of the patients he consults using this endpoint:\n\n\nv1/my-patients (GET)\n\n\nAlso, he can view the available patients, that either are new or currently aren\'t having one.\n\n\nv1/patients (GET)\n\n\nThe patients that are not taken care by a doctor currently, can be chosen by a doctor:\n\n\nv1/consult-patient/{pid} (GET)\n\n\nAlso, it is possible to distinquish which patients have not had a consultation in the last month.\n\n\nv1/patients/no-consultation(GET)\n\nConsultations\n\nA consultation can be added to the clients that have not had one for this month.\n\n\nv1/add-consultation/{pid} (POST)\n\n\nHe can browse the consultations for each patient.\n\n\nv1/consultations/{pid} (GET)\n\n\nThe medidata of a patient that has consultations.\n\n\nv1/all-medidata/{pid} (GET)\n\n\nHe can modify a consultation.\n\n\nv1/consultation/{cid} (PUT)\n\n\n(Everytime a consultation gets modified. A field on the database is getting changed to true. A seperate request is called when the user sees the warning.)\n\n\nAn important thing to mention is that patients can be chosen by a doctor if they don\'t have\na doctor id. Also, doctors can provide a consultation to a patient only if a month of data recording has been passed.\n\nReporter functions\n\nThe reporter can monitor the information submissions of a patient over a time range. In order\nfor all the patients (with a doctor or without) to load, first we call the following endpoint.\n\n\n/v1/my-patients/ (GET)\n\n\nThen in order to view the medidata in a specified period, the below endpoint is used.\n\n\nv1/patient/{pid}/medidata/{fromdate}/{todate} (GET)\n\n\nThe information submissions (consultations) of a doctor over a time range. In order to get all the doctors first, and then view the consultations, the following endpoint is used:\n\n\nv1/inactive-doctors (GET)\n\n\nThen in order to get the consultations.\n\n\n/doctor/{did}/consultation/{fromdate}/{todate} (GET)\n\n\nThe previous endpoint can also be called in this form:\n\n\n/inactive-doctors/{fromdate}/{todate} (GET)\n\n\nIn the latter form though, the usage is completely different. It is used for returning\nthe doctors with no activity in the specified date.\n\n\nThe list of the patients who are waiting for a consultation and the time elapsed since they needed to have one.\n\n\nv1/patients/consultation-pending  (GET)\n\n\nThe list of the patients with no activity over a time range.\n\n\nv1/patients/{fromdate}/{todate}  (GET)\n\nRequired Libraries to install in Angular\nIn order for the all the components to work, the below libraries should be installed:\n\n\n\nPlugin\nREADME\nCommand\n\n\n\n\nMaterial Design Bootstrap\nhttps://mdbootstrap.com/\nnpm i mdbootstrap\n\n\nChart.js\nhttps://www.chartjs.org/\nnpm install chart.js --save\n\n\n\nRequired Tools\n\nMaven\nHibernate Framework\nMySQL database\n\n'], 'url_profile': 'https://github.com/kirki333', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'Bangalore', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '48 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/deepshikharbhardwaj', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}","{'location': 'Rathmalana, Colombo,, Sri Lanka', 'stats_list': [['9', '          followers'], ['7', '          following'], ['16']], 'contributions': '1,906 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nazhimkalam', 'info_list': ['JavaScript', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'Python', 'MIT license', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Python', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Java', 'Updated Oct 4, 2020', 'TypeScript', 'Updated Oct 4, 2020', 'Updated Sep 30, 2020', '1', 'Python', 'Updated Oct 1, 2020']}"
"{'location': 'HYDERABAD, INDIA', 'stats_list': [['3', '          followers'], ['1', '          following'], ['0']], 'contributions': '172 contributions\n        in the last year', 'description': ['Diabetes-ML-prediciton-end-to-end-project\nDiabetes-ML-prediciton-end to end project created web app in flask and deployeed in Heroku\nHere, I have developed a Diabetes disease predicting web app which using the concept of machine learning makes predictions.\nDataset Name : pima diabetes dataset\nTools used for this project: Python (3.8 version), Fask, pandas, numpy, sklearn, HTML, Flask, Heroku\nMachine Learning pip line:\n\nData Gathering - https://www.kaggle.com/uciml/pima-indians-diabetes-database\nFeature Engeneering - Handle missing values, Outliers\nFeature Selection - Hyperparameteization RandomizedSearchCV\nModel creation - RandomForestClassifier\nModel Deployment - Flask, Heroku\n\nThe whole project is deployed on Heroku Cloud.\nHere is the link where you can access the project live :https://diabeticsapp.herokuapp.com\nThank you!\n'], 'url_profile': 'https://github.com/devaraju-123', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'Saudi Arabia', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '12 contributions\n        in the last year', 'description': [""AI for Healthcare Nanodegree program - Udacity\nProject 3\nDiabetes Drug Testing\nContext: You are a data scientist for an exciting unicorn healthcare startup that has created a groundbreaking diabetes drug that is ready for Phase III clinical trial testing. It is a very unique and sensitive drug that requires administering and screening the drug over at least 5-7 days of time in the hospital with frequent monitoring/testing and patient medication adherence training with a mobile application. You have been provided a patient dataset from a client partner and are tasked with building a predictive model that can identify which type of patients the company should focus their efforts testing this drug on. Target patients are people that are likely to be in the hospital for this duration of time and will not incur significant additional costs for administering this drug to the patient and monitoring.\nIn order to achieve your goal you must build a regression model that can predict the estimated hospitalization time for a patient and use this to select/filter patients for your study.\nExpected Hospitalization Time Regression Model: Utilizing a synthetic dataset(denormalized at the line level augmentation) built off of the UCI Diabetes readmission dataset, students will build a regression model that predicts the expected days of hospitalization time and then convert this to a binary prediction of whether to include or exclude that patient from the clinical trial.\nThis project will demonstrate the importance of building the right data representation at the encounter level, with appropriate filtering and preprocessing/feature engineering of key medical code sets. This project will also require students to analyze and interpret their model for biases across key demographic groups.\nDataset\nDue to healthcare PHI regulations (HIPAA, HITECH), there are limited number of publicly available datasets and some datasets require training and approval. So, for the purpose of this exercise, we are using a dataset from UC Irvine that has been modified for this course. Please note that it is limited in its representation of some key features such as diagnosis codes which are usually an unordered list in 835s/837s (the HL7 standard interchange formats used for claims and remits).\n\nhttps://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\n\nGetting Started\nFollow the instructions in starter_code/student_project.ipynb and be sure to set up your Anaconda environment to get started!\nDependencies\nUsing Anaconda consists of the following:\n\nInstall miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nCreate and activate * a new conda environment.\n\n* Each time you wish to work on any exercises, activate your conda environment!\n\n1. Installation\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2. Create and Activate the Environment\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nGit and version control\nThese instructions also assume you have git installed for working with Github from a terminal window, but if you do not, you can download that first with the command:\nconda install git\n\nIf you'd like to learn more about version control and using git from the command line, take a look at our free course: Version Control with Git.\nNow, we're ready to create our local environment!\n\nClone the repository, and navigate to the downloaded folder. This may take a minute or two to clone due to the included image data.\n\ngit clone https://github.com/udacity/nd320-c1-emr-data-starter.git\ncd nd320-c1-emr-data-starter/project/\n\n\n\nCreate (and activate) a new environment, named udacity-ehr-env with Python 3.7. If prompted to proceed with the install (Proceed [y]/n) type y.\n\nLinux or Mac:\n\nconda create -n udacity-ehr-env python=3.7\nsource activate udacity-ehr-env\n\n\nWindows:\n\nconda create --name udacity-ehr-env python=3.7\nactivate udacity-ehr-env\n\nAt this point your command line should look something like: (udacity-ehr-env) <User>:USER_DIR <user>$. The (udacity-ehr-env) indicates that your environment has been activated, and you can proceed with further package installations.\n\n\nInstall a few required pip packages, which are specified in the requirements text file. Be sure to run the command from the project root directory since the requirements.txt file is there. I also added a line for installing the environment in your notebook in case this is new for you. You should be able to now look for the environment when you select the kernel.\n\n\npip install -r requirements.txt\nipython3 kernel install --name udacity-ehr-env --user\n\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md\n""], 'url_profile': 'https://github.com/Raghad-Alharbi', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'Khulna', 'stats_list': [['9', '          followers'], ['72', '          following'], ['5']], 'contributions': '85 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Tanim-Ahmed', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'Hyderabad', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['PIMA-DIABETES-PREDICTION---RANDOM-FOREST-CLASSIFIER\nPIMA indian Diabetes prediction using random forest classifier with hyper parameter tuning using randomized cross validation.\n'], 'url_profile': 'https://github.com/chakridhar17', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'New Delhi, India', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['EDA-Process\n'], 'url_profile': 'https://github.com/Rajitha1324', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'Uruguay', 'stats_list': [['2', '          followers'], ['3', '          following'], ['0']], 'contributions': '23 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/JuanAndresRodriguez', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '8 contributions\n        in the last year', 'description': ['Sugar-Control-Diary-Express\nAn app To help people who are at least 18 years of age with diagnosis of Type II Diabetes to improve diabetes management.\nThe app will include the following functions:\n\nFood diary, carbs intake recording and photos capturing\nMedications list and reminders\nReminders of glucose check (morning, before and after meals & bedtime)\nAnalysis of daily, weekly and monthly glucose control\nReminders of physical check up with primary care provider every 3-6 months, annual visit to podiatrist, ophthalmologist and other specialists\nBMI calculation and recommended individualized daily calories and carbs intake based on BMI\n\nYou may install the app via app store.\nHave a question? Email us: mchang121201@gmail.com, gaven004@hotmail.com\n'], 'url_profile': 'https://github.com/gaven004', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'Mumbai', 'stats_list': [], 'contributions': '80 contributions\n        in the last year', 'description': ['PGP DS Capstone\nPredictive modeling for PIMA Indians Diabetes Dataset with KNN, Logistic Regression and ANN\nThe PIMA Indians diabetes dataset is one of the most popular machine\nlearning quests for data scientists. It was introduced by Kaggle,\ncourtesy of UCI Machine Learning Repository. The original dataset\nwas collated by the National Institute of Diabetes and Digestive and\nKidney Diseases. The task in hand is to build a model to accurately\npredict whether the patients in the dataset have diabetes or not, based\non specific medical diagnostic measurements.\n'], 'url_profile': 'https://github.com/kashamcrash', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '101 contributions\n        in the last year', 'description': ['dbcare\nA new Flutter project.\nGetting Started\nThis project is a starting point for a Flutter application.\nA few resources to get you started if this is your first Flutter project:\n\nLab: Write your first Flutter app\nCookbook: Useful Flutter samples\n\nFor help getting started with Flutter, view our\nonline documentation, which offers tutorials,\nsamples, guidance on mobile development, and a full API reference.\n'], 'url_profile': 'https://github.com/adamsh231', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Vijeet', 'info_list': ['Jupyter Notebook', 'Updated Oct 8, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Jupyter Notebook', 'Updated Sep 29, 2020', 'Updated Oct 5, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Dart', 'Updated Sep 30, 2020', 'Jupyter Notebook', 'Updated Oct 3, 2020']}"
"{'location': 'NONE', 'stats_list': [['6', '          followers'], ['5', '          following'], ['0']], 'contributions': '833 contributions\n        in the last year', 'description': ['Software Engineering Bootcamp\nJava & Angular\npowered by Pfizer\nSacchon\nA Diabetes Management\nWeb Application\nSoftware Requirements Specification Document\nSeptember 2020\nAbstract\nThe final deliverable in the Software Engineering Bootcamp is the group project\nsoftware, Sacchon, a diabetes management web application. Each team will create\ntheir own implementation based on a Software Requirements Specification (SRS)\ndocument. The SRS is common to all, but each team can follow their own\nassumptions and approaches. Sacchon is divided into two distinct subsystems, the\nSacchon Rest-API which is the backend and the Sacchon Angular App, which is\nthe frontend. To the end user, the web app consists of three major components:\nthe Repository of Medical Data (MediDataRepo), the Doctor Advice Services\nSystem (DoctorAdvice), and the Reporting Services (Reporter).\nMediDataRepo keeps track of the usersâ€™ blood glucose level, daily consumed\ncarbohydrates, and medication intake. In the DoctorAdvice section a team of\ndoctors provide advice to patients on a per-call basis. Reporter provides a series\nof aggregation operations for creating tables and charts. Further details on the\nbusiness requirements of each component will be discussed in the class.\nTable of Contents\n\n1 Introduction\n2 Project scope\n3 Deliverables\n4 Functional Requirements\n\n4.1 Overview\n4.2 MediDataRepo\n4.3 DoctorAdvice\n4.4 Reporter\n\n\n5 Non-Functional Requirements\n\n5.1 Sacchon app\n\nPerformance\nVersion control\nMicrodesign\n\n\n5.2 Sacchon application code\n\nDevelopment environment\nSoftware interfaces\nTesting\nLogging\nException handling\nDeliverables\n\n\n\n\n\n1 Introduction\nThis Software Requirements Specification (SRS) document gives an overview of\nSacchon, a diabetes management web application. It names what is required to be\nanalyzed, designed, implemented, tested, and presented. It also describes the\nhigh-level requirements of the stakeholders based on their needs and\nexpectations, i.e. the desired product features.\n2 Project scope\nThe project aim is to develop the Sacchon app and deliver it ready to be released.\nThe requirements are given by the Sacchon Consulting Enterprise (a fictional\ncompany).\nThe information system must contain\n\nA User Interface to submit and view medical data by the patients and\ndoctors.\nAn Administration Console with user management, monitoring, and\nreporting capabilities of the system usage.\n\nFor the above features to be considered complete, the following functionality must\nbe provided\n\nFrom the backend view, a corresponding call with a valid JSON object\ncontaining all needed information must be available, according to the\nspecification of each case.\nFrom the frontend view, a corresponding page consuming the service from\nthe backend and presenting the suitable information must be available.\n\n3 Deliverables\nThe deliverable of this project is the integrated platform of the back and the front\nsystem of the Sacchon. This means that the following three subsystems must be\ndelivered:\n\nMediDataRepo, the Repository of Medical Data)\nDoctorAdvice, the Doctor Advice Services System\nReporter, the Reporting Services\n\nIn the following sections, all needed functionality for each subsystem is defined.\n4 Functional Requirements\n4.1 Overview\nThe patient uses the system to store their data at any time. After a month of data\nrecording has elapsed, a doctor can review this data and provide advice to the\npatient for the next month. This process is repeated until the patient or the doctor\nunregisters from the system.\nThe Chief Doctor is an officer who can view reports which monitor the activity of\npatients and doctors in the system.\nThe following sections list the functionality needed to be present for the system to\nbe considered complete.\n4.2 MediDataRepo\nThe patient can\nmanage their account\nsign up for an account\nremove the account\nstore their data\nblood glucose level (date, time, measured in mg/dL)\ncarb intake (measured in grams)\nview\ntheir average daily blood glucose level over a user- specified period\ntheir average carb intake over a user-specified period\nthe current and past consultations from doctors\nupdate\nmodify incorrect submitted data\ndelete incorrect submitted data\n4.3 DoctorAdvice\nThe doctor can\nmanage their account\nsign up for an account\nremove the account\nview patient record\nbrowse the data for a single patient (patient data and\nconsultations)\nsearch\nfind patients that have not had a consultation in the last month\nconsult\nprovide advice to a patient for the upcoming month (name of\nmedication and dosage)\nupdate\nmodify a consultation to a patient\nInitially a patient has not doctor consulting them. As soon as a month of data\nrecording has passed, the patient is ready to be consulted by a doctor.\nDoctors search for patients for which advice is pending. Each doctor can see all\nthe patients that they consult and the patients that are new in the system.\nDoctors cannot see patients that are consulted by other doctors. All doctors can\nsee the new patients.\nWhen a doctor selects to consult a new patient, the patient becomes managed by\nthis doctor exclusively.\nWhen a doctor leaves the system, their patients become available again for other\ndoctors to consult. Past consultations of these patients continue to refer to the\ndoctor who is leaving the system.\nIf a doctor modifies a consultation, the patient must see a warning as soon as\nthey enter the system, so that they know that some important information must\nbe reviewed.\nA month is the period from the day of consultation to the same date next month\n(say, from the 15th of June to the 14th of July). It is not a calendar month. The\nnext month for a patient starts as soon as a doctor has provided a consultation.\nUntil the new consultation arrives, the previous one is considered valid.\n4.4 Reporter\nThis section is available only to the Chief Doctors in the application. The reports\navailable are:\n\nThe information submissions (personal monitor data) of a patient over a\ntime range\nThe information submissions (consultations) of a doctor over a time\nrange\nThe list of the patients who are waiting for a consultation and the time\nelapsed since they needed to have one\nThe list of the patients with no activity over a time range\nThe list of the doctors with no activity over a time range\n\n5 Non-Functional Requirements\n5.1 Sacchon app\nThe Sacchon app must be able to run in any current major web browser.\nPerformance\nTo guarantee a good user experience, all calls to the backend must have a\nmaximum response time of 1 second (excluding network response time).\nVersion control\nAll code must make use of the Git version control system. Each team must create\nits own single GitHub code repository.\nUser interface\nA basic UI design with open source images will be used.\n5.2 Sacchon application code\nDevelopment environment\nThe following set up is required:\n\nThe backend part of the system must be developed in Java 8 or greater.\nAny IDE can be used for the implementation; JetBrains IntelliJ IDEA is\npreferred (but not required).\nThe frontend will be developed using the Angular Framework.\nThe underlying database system must be the Microsoft SQL Server\nDeveloper Edition.\nMaven must be the tool to manage dependencies and the software\ndevelopment lifecycle.\n\nSoftware interfaces\nAll functionality must be implemented by using HTTP calls returning information\nin JSON format.\nA software interface document must be created. This is to be read by external\nsoftware developers who may want to interface with the system. The document\nmust provide the following information:\n\nGive the list of communications including the description of the data that is\nbeing exchanged.\nSpecify any constraints.\nDescribe application or other software interface characteristics, including\ncomponent names and versions, databases, operating systems, libraries,\ntools, etc. that must be known to the developers.\n\nTesting\nThe system must be fully backed up by unit tests.\nFor testing the REST calls, a third-party tool should be utilized. Postman\n(https://www.getpostman.com) is recommended as a commonly-used tool in this\narea. Swagger can also interface with the deliverable for testing. Automating REST\ncalls testing is highly recommended.\nLogging\nA well-defined logging policy maintaining all information produced by the\nsoftware when running is mandatory. The logging policy must be documented\n(e.g. name the specific log files, directories, the rotation policy etc.).\nException handling\nWhen handling software exceptions, every call must be guaranteed to return a\nvalid JSON document. This includes the cases where something went wrong in the\nbackend execution due to either development bugs or system causes. The end-\nuser must never see default error pages on the web browser. Depending on the\ntype of the call (the various CRUD actions), the proper HTTP code must be always\nreturned from the backend for further processing up front.\nDeliverables\nThe application code must be delivered in a single project repository on GitHub,\non the master branch of the project. The required software interface document\nmust be included as project documentation in the same repository.\n'], 'url_profile': 'https://github.com/alexkala1', 'info_list': ['Java', 'Updated Oct 2, 2020']}",,,,,,,,,
