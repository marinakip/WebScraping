"{'location': 'Bengaluru', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '35 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Analysis and Machine learning model on Pima Indian sample population.\n'], 'url_profile': 'https://github.com/Nishanth-K-S', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/JorgeOliveiraFisico', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andresvm999', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MigoJJ', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '18 contributions\n        in the last year', 'description': ['The Demographics of Diabetes\nNovember 14, 2020\nAbstract\nThe Pima Indians of Arizona are a tight knit community that is genetically isolated. They also have the highest diagnosed cases of type 2 diabetes than any other population group in the world (Baier, 2004). I use a dataset of medical information about the Pima Indians to determine if demographics and health statistics can identify people at higher risk of diabetes. This algorithm can help medical professionals identify at-risk individuals for early intervention and prevent possible development into type 2 diabetes.\n'], 'url_profile': 'https://github.com/jeverett74', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/muhumuza1', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['9']], 'contributions': '48 contributions\n        in the last year', 'description': ['Diabetes Prediction Web Application\n  \n• This repository consists of files required to deploy a Machine Learning Web App built using Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://doihavediabetes.herokuapp.com/\n'], 'url_profile': 'https://github.com/akshkshay', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rogerioBSB2020', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/marcosgesetIPN', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}","{'location': 'NONE', 'stats_list': [], 'contributions': '13 contributions\n        in the last year', 'description': ['DiabetesPrediction\n'], 'url_profile': 'https://github.com/GalZeevy', 'info_list': ['Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 20, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', '2', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 18, 2020', 'Updated Nov 18, 2020', 'Python', 'Updated Feb 5, 2021']}"
"{'location': 'Netherlands', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/koendamme', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '40 contributions\n        in the last year', 'description': [""Diabetes Prediction:\nTable of Content\n\nDemo\nOverview\nMotivation\nInstallation\nDeployement on Heroku\nDirectory Tree\nBug / Feature Request\n\nDemo\nLink: https://diabetes--predictor-api.herokuapp.com/\n\nOverview\nThis is a simple Flask web app which predicts whether a patient is having diabetes or not.\nMotivation\nWhat to do when you are at home due to this pandemic situation? I started to learn Machine Learning model to get most out of it. I came to know mathematics behind all supervised models. Finally it is important to work on application (real world application) to actually make a difference.\nInstallation\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nDeployement on Heroku\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nDirectory Tree\n├── static \n│\xa0\xa0 ├── css\n├── template\n│\xa0\xa0 ├── home.html\n├── Procfile\n├── README.md\n├── app.py\n├── diabetes_model.pkl\n├── requirements.txt\n\nTechnologies Used\n\n  \nBug / Feature Request\nIf you find a bug (the website couldn't handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result\n""], 'url_profile': 'https://github.com/ananya-menon', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['5', '          following'], ['4']], 'contributions': '20 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ZeynepRuveyda', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['11']], 'contributions': '5 contributions\n        in the last year', 'description': ['DiabetesPredictor\n'], 'url_profile': 'https://github.com/NripeshKumar', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'Pune', 'stats_list': [], 'contributions': '51 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Jayantc', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'Irvine, California', 'stats_list': [['13', '          followers'], ['9', '          following'], ['34']], 'contributions': '336 contributions\n        in the last year', 'description': ['Predicting early hospital readmission rates for patients with Diabetes\n\nUsed UCI Machine Learning Repository’s Diabetes 130-Hospital Dataset to find the best fitting model for predicting early hospital admission rates in Diabetic patients\nPerformed feature engineering steps such as removing unimportant features, replacing and grouping feature values, one hot encoding categorical features and rescaling numerical features\nEmployed SMOTE to tackle class imbalance in the target feature\nPerformed Grid Search on the following models: Logistic Regression, Random Forest, and Neural Network to select the best model using Cross Validation\n\n'], 'url_profile': 'https://github.com/kalyaniasthana', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['diabetesPred\n'], 'url_profile': 'https://github.com/prasad-tale', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '45 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/siddarth-s', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'Gurgaon', 'stats_list': [['3', '          followers'], ['8', '          following'], ['33']], 'contributions': '279 contributions\n        in the last year', 'description': ['Diabetes Prediction\nContext\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.\nSeveral constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nContent\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nThis is a Machine learning application to predict diabetes of females developed from python and flask deployed on Heroku platform.\nDeployed at https://diabetes-detect.herokuapp.com/\n'], 'url_profile': 'https://github.com/ShuklaPrashant21', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}","{'location': 'Pune,India', 'stats_list': [['18', '          followers'], ['25', '          following'], ['139']], 'contributions': '412 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sidrakshe28', 'info_list': ['Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 19, 2020', 'Python', 'Updated Nov 22, 2020', '2', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 18, 2020', 'Updated Nov 22, 2020']}"
"{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'Germany', 'stats_list': [['11', '          followers'], ['8', '          following'], ['1.4k']], 'contributions': '35 contributions\n        in the last year', 'description': ['\nSince the FreeStyle Libre 2 glucose sensor is a Bluetooth Low Energy BLE device and my purchase experience with the transmitters available for the previous generation has been quite frustrating, I am trying to leverage its capabilities to implement something new compared to the traditional apps:\n\na universal SwiftUI application for iPhone, iPad and Mac Catalyst;\nan independent Apple Watch app connecting directly via Bluetooth;\nscanning the Libre directly via NFC;\nusing both online servers and offline methods for calibrating just like Abbott’s algorithm;\nshowing for comparison the HealthKit and Nightscout data shared with other apps;\nvarying the reading interval instead of the usual 5-minute one;\na detailed log to check the traffic from/to the BLE devices and remote servers.\n\nStill too early to decide the final design (but I really like already the evil logo 😈), here there are some recent screenshots I tweeted:\n\n\xa0\xa0\nLibre 2 decrypted thanks to @ivalkou  -  Atlas stress test: 1-minute uploads\n\nPhones and transmitters: who needs them?\n\nThe project started as a single script for the iPad Swift Playgrounds to test the workings of the several BLE devices I bought, mainly the Bubble and the MiaoMiao. It was then quickly converted to an app by using a standard Xcode template: it should compile finely without external dependencies just after changing the Bundle Identifier in the General panel and the Team in the Signing and Capabilities tab of Xcode -- Spike users know already very well what that means... ;)\nI am targeting only the latest betas of Xcode. To send the custom NFC commands you have to switch from “Basic” to “Devel” mode in the Log tab and enjoy the verbose flow of debug messages.\nPlease refer to the TODOs list for the up-to-date status of all the current limitations and known bugs of this prototype.\n\nCredits: @bubbledevteam, @captainbeeheart, @cryptax, @dabear, @ivalkou, LibreMonitor, Loop, Nightguard, @travisgoodspeed, WoofWoof, xDrip+, xDrip4iOS.\n'], 'url_profile': 'https://github.com/nshtg', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['10']], 'contributions': '67 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nLecture notes of a workshop.\nPredicting diabetes using machine learning with step by step explanation.\n'], 'url_profile': 'https://github.com/arunkumardash', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['4']], 'contributions': '42 contributions\n        in the last year', 'description': [""diabetes-analysis\nAnalyze patient's likelihood  of developing diabetes using Machine Learning\nGoal\nCreate a model that could predict the likelihood  of developing diabetes.\nMethod\nKNN.\n""], 'url_profile': 'https://github.com/17nicolel', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '45 contributions\n        in the last year', 'description': [""Diabetes_Project\nThis project completes part of the final assessment in HarvardX's Professional Certificate in Data Science. It explores data on patients from Sylhet Diabetic Hospital. The main focus is to construct a model to predict whether a patient is at risk of being diabetic.\nGraded Files\nmain_code.R\nThis is the main R scrips which loads and visualises the data and constructs the models. this script requires that the file diabetes_data_upload.csv is in the working (project) directory. The data is included in this repo and relative file paths (in line with the repo) are used to load the data.\nfinal_report.rmd\nThis is the final report in .Rmd form. The files which are loaded are created in main_code.R. Because the script takes a while to run, all of the R objects and images required to run this report are included in the folder rmd_files. This folder must be present in the working (project) directory. Again, relative file paths in line with this repo are used to load the files. This report is also available through this RPubs link.\nfinal_report.pdf\nThis is the final report in PDF format.\nExtra Files\nrmd_files\nThis folder contains all necessary files to run final_report.Rmd.\ndiabetes_data_upload.csv\nThis is the original data set downloaded from UCI Machine Learning Repository.\nsave_files.R\nThis R script keeps track of what R objects are saved under what file names. Feel free to ignore.\n""], 'url_profile': 'https://github.com/alyomahoney', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '92 contributions\n        in the last year', 'description': [""\n\n\n\n\n\n\nAbout Laravel\nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:\n\nSimple, fast routing engine.\nPowerful dependency injection container.\nMultiple back-ends for session and cache storage.\nExpressive, intuitive database ORM.\nDatabase agnostic schema migrations.\nRobust background job processing.\nReal-time event broadcasting.\n\nLaravel is accessible, powerful, and provides tools required for large, robust applications.\nLearning Laravel\nLaravel has the most extensive and thorough documentation and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.\nIf you don't feel like reading, Laracasts can help. Laracasts contains over 1500 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.\nLaravel Sponsors\nWe would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel Patreon page.\n\nVehikl\nTighten Co.\nKirschbaum Development Group\n64 Robots\nCubet Techno Labs\nCyber-Duck\nBritish Software Development\nWebdock, Fast VPS Hosting\nDevSquad\nUserInsights\nFragrantica\nSOFTonSOFA\nUser10\nSoumettre.fr\nCodeBrisk\n1Forge\nTECPRESSO\nRuntime Converter\nWebL'Agence\nInvoice Ninja\niMi digital\nEarthlink\nSteadfast Collective\nWe Are The Robots Inc.\nUnderstand.io\nAbdel Elrafa\nHyper Host\nAppoly\nOP.GG\n\nContributing\nThank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.\nCode of Conduct\nIn order to ensure that the Laravel community is welcoming to all, please review and abide by the Code of Conduct.\nSecurity Vulnerabilities\nIf you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via taylor@laravel.com. All security vulnerabilities will be promptly addressed.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license.\n""], 'url_profile': 'https://github.com/atsuyukikambe', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'India', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '155 contributions\n        in the last year', 'description': ['Diabetes-Detection\nRunning the application\n\nInstall streamlit.\nClone this repo.\nRun streamlit run app.py in the terminal.\n\nScreenshots\n\n\n\n\n\n'], 'url_profile': 'https://github.com/Nigama-oss', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'Montreal, QC', 'stats_list': [['12', '          followers'], ['10', '          following'], ['3']], 'contributions': '634 contributions\n        in the last year', 'description': ['Diabetes Prediction\nTechnology and Resources Used\nPython Version: 3.7.7\nTable of Contents\n\nDefine the Problem\nGather the Data\nPrepare Data for Consumption\nData Cleaning\nData Exploration\nFeature Engineering\nModel Building\nHyperparameter Tuning\n\n1) Define the Problem\nThe mandate is to predict if a person has diabetes or not.\n2) Gather the Data\nThe data sets were provided. They are uploaded in the data sets folder.\n3) Prepare Data for Consumption\n3.1 Import Libraries\nThe following code is written in Python 3.7.7. Below is the list of libraries used.\nimport numpy as np \nimport pandas as pd\n3.2 Load Data Modeling Libraries\nThese are the most common machine learning and data visualization libraries.\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Model Algorithms\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model Helpers\nfrom sklearn.metrics import accuracy_score, mean_squared_error, confusion_matrix\n3.3 Data dictionary\nThe data dictionary for the data set is as follows:\n\n\n\nVariable\nDefinition\nType\nKey\n\n\n\n\npreg\nPregnancies\nNumerical\n\n\n\nplas\nPlasma Glucose Levels (mg/dL)\nNumerical\n\n\n\npres\nBlood Pressure\nNumerical\n\n\n\nskin\nSkin Thickness\nNumerical\n\n\n\ntest\nInsulin Level\nNumerical\n\n\n\nmass\nBody Mass Index\nNumerical\n\n\n\npedi\nPedigree\nNumerical\n\n\n\nage\nAge\nNumerical\n\n\n\nclass\nWhether or not this person has diabetes\nCategorical\n1 = Yes, 0 = No\n\n\n\n3.5 Greet the data\nImport data\n# read data set\ndiabetes_data = pd.read_csv(""Data set/diabetes.csv"", encoding= \'unicode_escape\')\nPreview data\n# get a peek at the top 5 rows of the data set\nprint(diabetes_data.head())\n   preg  plas  pres  skin  test  mass   pedi  age  class\n0     6   148    72    35     0  33.6  0.627   50      1\n1     1    85    66    29     0  26.6  0.351   31      0\n2     8   183    64     0     0  23.3  0.672   32      1\n3     1    89    66    23    94  28.1  0.167   21      0\n4     0   137    40    35   168  43.1  2.288   33      1\n\nDate column types and count\n# understand the type of each column\nprint(diabetes_data.info())\n<class \'pandas.core.frame.DataFrame\'>\nRangeIndex: 768 entries, 0 to 767\nData columns (total 9 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   preg    768 non-null    int64  \n 1   plas    768 non-null    int64  \n 2   pres    768 non-null    int64  \n 3   skin    768 non-null    int64  \n 4   test    768 non-null    int64  \n 5   mass    768 non-null    float64\n 6   pedi    768 non-null    float64\n 7   age     768 non-null    int64  \n 8   class   768 non-null    int64  \ndtypes: float64(2), int64(7)\n\nThere are no null values.\nSummarize the central tendency, dispersion and shape\n# get information on the numerical columns for the data set\nwith pd.option_context(\'display.max_columns\', len(diabetes_data.columns)):\n    print(diabetes_data.describe(include=\'all\'))\n             preg        plas        pres        skin        test        mass  \\\ncount  768.000000  768.000000  768.000000  768.000000  768.000000  768.000000   \nmean     3.845052  120.894531   69.105469   20.536458   79.799479   31.992578   \nstd      3.369578   31.972618   19.355807   15.952218  115.244002    7.884160   \nmin      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n25%      1.000000   99.000000   62.000000    0.000000    0.000000   27.300000   \n50%      3.000000  117.000000   72.000000   23.000000   30.500000   32.000000   \n75%      6.000000  140.250000   80.000000   32.000000  127.250000   36.600000   \nmax     17.000000  199.000000  122.000000   99.000000  846.000000   67.100000   \n\n             pedi         age       class  \ncount  768.000000  768.000000  768.000000  \nmean     0.471876   33.240885    0.348958  \nstd      0.331329   11.760232    0.476951  \nmin      0.078000   21.000000    0.000000  \n25%      0.243750   24.000000    0.000000  \n50%      0.372500   29.000000    0.000000  \n75%      0.626250   41.000000    1.000000  \nmax      2.420000   81.000000    1.000000  \n\n4) Data Cleaning\n4.1 Correcting outliers\nI used the IQR (Inter Quartile Range) method to detect and remove outliers and plotted boxplots to get a visual understanding of the outliers.\n4.1.0 IQR method\ndef remove_outliers_iqr(df):\n\tdataf = pd.DataFrame(df)\n\tquartile_1, quartile_3 = np.percentile(dataf, [25,75])\n\n\tiqr = quartile_3 - quartile_1\n\tlower_bound = quartile_1 - (iqr * 1.5)\n\tupper_bound = quartile_3 + (iqr * 1.5)\n\n\tprint(""lower bound:"", lower_bound)\n\tprint(""upper bound:"", upper_bound)\n\tprint(""IQR outliers:"", np.where((dataf > upper_bound) | (dataf < lower_bound)))\n\tprint(""# of outliers:"", len(np.where((dataf > upper_bound) | (dataf < lower_bound))[0]))\n\n\treturn dataf[~((dataf < lower_bound) | (dataf > upper_bound)).any(axis=1)]\n4.1.1 preg (Pregnancies)\nsns.boxplot(x=diabetes_data[\'preg\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'preg\'] = remove_outliers_iqr(diabetes_data[\'preg\'])\nlower bound: -6.5\nupper bound: 13.5\nIQR outliers: (array([ 88, 159, 298, 455], dtype=int64), array([0, 0, 0, 0], dtype=int64))\n# of outliers: 4\n\n4.1.2 plas (Plasma Glucose)\nsns.boxplot(x=diabetes_data[\'plas\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'plas\'] = remove_outliers_iqr(diabetes_data[\'plas\'])\nlower bound: 37.125\nupper bound: 202.125\nIQR outliers: (array([ 75, 182, 342, 349, 502], dtype=int64), array([0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 5\n\n4.1.3 skin (Skin Thickness)\nsns.boxplot(x=diabetes_data[\'skin\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'skin\'] = remove_outliers_iqr(diabetes_data[\'skin\'])\nlower bound: -48.0\nupper bound: 80.0\nIQR outliers: (array([579], dtype=int64), array([0], dtype=int64))\n# of outliers: 1\n\n4.1.4 test (Insulin Test)\nsns.boxplot(x=diabetes_data[\'test\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'test\'] = remove_outliers_iqr(diabetes_data[\'test\'])\nlower bound: -190.875\nupper bound: 318.125\nIQR outliers: (array([  8,  13,  54, 111, 139, 153, 186, 220, 228, 231, 247, 248, 258,\n       286, 296, 360, 370, 375, 392, 409, 415, 480, 486, 519, 574, 584,\n       612, 645, 655, 695, 707, 710, 715, 753], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 34\n\n4.1.5 mass (Body Mass Index)\nsns.boxplot(x=diabetes_data[\'mass\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'mass\'] = remove_outliers_iqr(diabetes_data[\'mass\'])\nlower bound: 13.35\nupper bound: 50.550000000000004\nIQR outliers: (array([  9,  49,  60,  81, 120, 125, 145, 177, 193, 247, 303, 371, 426,\n       445, 494, 522, 673, 684, 706], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      dtype=int64))\n# of outliers: 19\n\n4.1.6 pedi (Pedigree)\nsns.boxplot(x=diabetes_data[\'pedi\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'pedi\'] = remove_outliers_iqr(diabetes_data[\'pedi\'])\nlower bound: -0.32999999999999996\nupper bound: 1.2\nIQR outliers: (array([  4,  12,  39,  45,  58, 100, 147, 187, 218, 228, 243, 245, 259,\n       292, 308, 330, 370, 371, 383, 395, 445, 534, 593, 606, 618, 621,\n       622, 659, 661], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 29\n\n4.1.7 age\nsns.boxplot(x=diabetes_data[\'age\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'age\'] = remove_outliers_iqr(diabetes_data[\'age\'])\nlower bound: -1.5\nupper bound: 66.5\nIQR outliers: (array([123, 363, 453, 459, 489, 537, 666, 674, 684], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 9\n\n4.1.8 drop null values\ndiabetes_data = diabetes_data.dropna()\n\nprint(diabetes_data.info())\nInt64Index: 673 entries, 0 to 767\nData columns (total 9 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   preg    673 non-null    float64\n 1   plas    673 non-null    float64\n 2   pres    673 non-null    int64  \n 3   skin    673 non-null    float64\n 4   test    673 non-null    float64\n 5   mass    673 non-null    float64\n 6   pedi    673 non-null    float64\n 7   age     673 non-null    float64\n 8   class   673 non-null    int64  \ndtypes: float64(7), int64(2)\n\n4.1.9 Convert object data type\ndiabetes_data[\'preg\'] = diabetes_data[\'preg\'].astype(int)\ndiabetes_data[\'plas\'] = diabetes_data[\'plas\'].astype(int)\ndiabetes_data[\'pres\'] = diabetes_data[\'pres\'].astype(int)\ndiabetes_data[\'skin\'] = diabetes_data[\'skin\'].astype(int)\ndiabetes_data[\'test\'] = diabetes_data[\'test\'].astype(int)\ndiabetes_data[\'age\'] = diabetes_data[\'age\'].astype(int)\ndiabetes_data[\'class\'] = diabetes_data[\'class\'].astype(int)\n\ndiabetes_data[\'mass\'] = diabetes_data[\'mass\'].astype(float)\ndiabetes_data[\'pedi\'] = diabetes_data[\'pedi\'].astype(float)\n4.1.10 Output to CSV\nOutput cleaned data to CSV.\ndiabetes_data.to_csv(\'Data set/diabetes_data_cleaned.csv\',index = False)\n5) Data Exploration\nThis section explores the distribution of each variable using cleaned data set.\ndiabetes_data = pd.read_csv(""Data set/diabetes_data_cleaned.csv"", encoding= \'unicode_escape\')\n5.0 Helper method\nI created a few helper methods to plot the visualizations.\ndef plotHist(xlabel, title, column):\n    fig, ax = plt.subplots(1, 1, \n                           figsize =(10, 7),  \n                           tight_layout = True)\n\n    ax.spines[""top""].set_visible(False)  \n    ax.spines[""right""].set_visible(False)\n\n    plt.xticks(fontsize=14)  \n    plt.yticks(fontsize=14)\n\n    plt.xlabel(xlabel, fontsize=16)  \n    plt.ylabel(""# of entries"", fontsize=16)\n    plt.title(title, fontsize=20)\n\n    plt.hist(column)\n    plt.show()\ndef plotBar(xlabel, title, column):\n    ax = sns.barplot(column.value_counts().index, column.value_counts())\n\n    ax.spines[""top""].set_visible(False)  \n    ax.spines[""right""].set_visible(False)\n\n    plt.xticks(fontsize=14)  \n    plt.yticks(fontsize=14)\n\n    plt.xlabel(xlabel, fontsize=16)  \n    plt.ylabel(""# of entries"", fontsize=16)\n    plt.title(title, fontsize=20)\n\n    plt.show()\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={\'shrink\':.9}, \n        ax=ax,\n        annot=True, \n        linewidths=0.1, \n        vmax=1.0, \n        linecolor=\'white\',\n        annot_kws={\'fontsize\':14}\n    )\n\n    _.set_yticklabels(_.get_ymajorticklabels(), fontsize = 16)\n    _.set_xticklabels(_.get_xmajorticklabels(), fontsize = 16)\n\n    plt.title(\'Pearson Correlation of Features\', y=1.05, size=20)\n\n    plt.show()\n5.1 preg (Pregnancies)\nprint(\'preg (Pregnancies):\\n\', diabetes_data.preg.value_counts(sort=False))\nplotHist(""Pregnancies"", ""Histogram of number of entries per number of pregnancies"", diabetes_data.preg) \n\npreg (Pregnancies):\n0      97\n1     118\n2      89\n3      68\n4      64\n5      49\n6      44\n7      40\n8      31\n9      24\n10     22\n11      9\n12      8\n13     10\nName: preg, dtype: int64\n\n5.2 plas (Plasma Glucose)\nprint(\'plas (Plasma Glucose):\\n\', diabetes_data.plas.value_counts(sort=False))\nplotHist(""Plasma Glucose Levels (mg/dL)"", ""Histogram of number of entries per plasma glucose levels"", diabetes_data.plas) \n\nplas (Plasma Glucose):\n44     1\n56     1\n57     1\n61     1\n62     1\n      ..\n194    2\n195    2\n196    3\n197    1\n198    1\nName: plas, Length: 132, dtype: int64\n\n5.3 skin\nprint(\'skin (Skin Thickness):\\n\', diabetes_data.skin.value_counts(sort=False))\nplotHist(""Skin Thickness"", ""Histogram of number of entries per skin thickness length"", diabetes_data.skin) \n\nskin (Skin Thickness):\n0     206\n7       1\n8       2\n10      5\n11      6\n12      7\n13     10\n14      5\n15     13\n16      5\n17     14\n18     18\n19     16\n20     10\n21      9\n22     13\n23     19\n24      8\n25     15\n26     15\n27     22\n28     19\n29     15\n30     23\n31     18\n32     29\n33     14\n34      8\n35     10\n36     13\n37     14\n38      6\n39     16\n40     16\n41     11\n42      6\n43      4\n44      3\n45      5\n46      7\n47      3\n48      3\n49      2\n50      3\n51      1\n52      2\n54      2\n60      1\nName: skin, dtype: int64\n\n5.4 test\nprint(\'test (Insulin Level):\\n\', diabetes_data.test.value_counts(sort=False))\nplotHist(""Insulin Level"", ""Histogram of number of entries per insulin level"", diabetes_data.test)\n\ntest (Insulin Level):\n0      338\n15       1\n16       1\n18       2\n22       1\n      ... \n293      1\n300      1\n304      1\n310      1\n318      1\nName: test, Length: 150, dtype: int64\n\n5.5 mass\nprint(\'mass (Body Mass Index):\\n\', diabetes_data.mass.value_counts(sort=False))\nplotHist(""Body Mass Index"", ""Histogram of number of entries per body mass index score"", diabetes_data.mass) \n\nmass (Body Mass Index):\n31.0     2\n38.0     2\n30.0     6\n29.0     4\n36.0     2\n        ..\n26.9     1\n36.6     4\n23.4     1\n46.3     1\n31.2    10\nName: mass, Length: 232, dtype: int64\n\n5.6 pedi\nprint(\'pedi (Pedigree):\\n\', diabetes_data.pedi.value_counts(sort=False))\nplotHist(""Pedigree"", ""Histogram of number of entries per pedigree count"", diabetes_data.mass) \n\npedi (Pedigree):\n0.375    1\n0.875    2\n0.560    1\n0.381    1\n0.514    2\n        ..\n0.347    1\n0.236    3\n0.231    2\n0.893    1\n0.084    1\nName: pedi, Length: 461, dtype: int64\n\n5.7 age\nprint(\'age:\\n\', diabetes_data.age.value_counts(sort=False))\nplotHist(""Age"", ""Histogram of number of entries per age"", diabetes_data.age) \n\nage:\n21    56\n22    63\n23    35\n24    42\n25    38\n26    29\n27    31\n28    31\n29    27\n30    19\n31    22\n32    15\n33    13\n34    10\n35     9\n36    16\n37    18\n38    15\n39    12\n40    11\n41    21\n42    17\n43    11\n44     7\n45    14\n46     9\n47     5\n48     5\n49     4\n50     7\n51     7\n52     7\n53     4\n54     5\n55     4\n56     2\n57     4\n58     6\n59     2\n60     3\n61     2\n62     3\n63     4\n64     1\n65     3\n66     4\nName: age, dtype: int64\n\n5.8 class\nprint(\'class:\\n\', diabetes_data[\'class\'].value_counts(sort=False))\nplotBar(""Result (1 = positive, 0 = negative)"", ""Diabetes results"", diabetes_data[\'class\'])\n\nclass:\n0    456\n1    217\nName: class, dtype: int64\n\n5.9 Correlation heatmap\ncorrelation_heatmap(diabetes_data)\n\n5.10 Pair plot\nsns.pairplot(diabetes_data, hue = \'class\')\nplt.show()\n\n5.11 Pivot Table\npivot_table1 = pd.pivot_table(diabetes_data, index = \'class\', values = [\'preg\', \'plas\', \'pres\', \'skin\'])\nprint(pivot_table1)\n\npivot_table2 = pd.pivot_table(diabetes_data, index = \'class\', values = [\'test\', \'mass\', \'pedi\', \'age\'])\nprint(pivot_table2)\n             plas      preg       pres       skin\nclass                                            \n0      109.313596  3.298246  68.945175  19.815789\n1      140.622120  4.838710  70.838710  19.843318\n\n             age       mass      pedi       test\nclass                                           \n0      30.789474  30.775439  0.398202  58.660088\n1      36.755760  34.763134  0.490309  72.483871\n\n6) Feature Engineering\n6.1 Exploration of new features\nNo new features created.\n6.2 Split into Training and Testing Data\n# define x, y\nX = diabetes_data.drop([\'class\'], axis = 1)\ny = diabetes_data[\'class\']\n\n# split into train test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 7)\n7) Model Building\nTrain the models and use cross validation score for the accuracy.\n7.1 Logistic Regression\nlr = LogisticRegression(max_iter = 2000)\ncv = cross_val_score(lr, X_train, y_train,cv=5)\nprint(cv)\nprint(cv.mean())\n[0.7962963  0.81481481 0.81481481 0.75700935 0.72897196]\n0.7823814468674282\n\n7.2 Decision Tree\ndt = tree.DecisionTreeClassifier(random_state = 1)\ncv = cross_val_score(dt, X_train, y_train, cv=5)\nprint(cv)\nprint(cv.mean())\n[0.66666667 0.73148148 0.72222222 0.58878505 0.65420561]\n0.6726722049151955\n\n7.3 Random Forest\nrf = RandomForestClassifier(random_state = 1)\ncv = cross_val_score(rf, X_train, y_train, cv=5)\nprint(cv)\nprint(cv.mean())\n[0.81481481 0.83333333 0.75       0.73831776 0.74766355]\n0.7768258913118726\n\n8) Hyperparameter Tuning\n8.1 Logistic Regression\n\nC : float, (default=1.0). Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.\n\nlr = LogisticRegression()\nparam_grid = {\'max_iter\' : [2000],\n              \'penalty\' : [\'l1\', \'l2\'],\n              \'C\' : np.logspace(-4, 4, 20),\n              \'solver\' : [\'liblinear\']}\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train, y_train)\n\nprint(\'Best Score: \' + str(best_clf_lr.best_score_))\nprint(\'Best Parameters: \' + str(best_clf_lr.best_params_))\nFitting 5 folds for each of 40 candidates, totalling 200 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  88 tasks      | elapsed:    1.3s\n[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:    1.5s finished\nBest Score: 0.7916753201799931\nBest Parameters: {\'C\': 0.615848211066026, \'max_iter\': 2000, \'penalty\': \'l1\', \'solver\': \'liblinear\'}\n\ny_predict = best_clf_lr.predict(X_test)\n\nprint(""Confusion Matrix:\\n"", confusion_matrix(y_test, y_predict))\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nConfusion Matrix:\n [[83  9]\n [20 23]]\nAccuracy: 0.7851851851851852\n\n8.2 Decision Tree\n\n\ncriterion : optional (default=”gini”) or Choose attribute selection measure: This parameter allows us to use the different attribute selection measure. Supported criteria are “gini” for the Gini index and “entropy” for the information gain.\n\n\nmax_depth : int or None, optional (default=None) or Maximum Depth of a Tree: The maximum depth of the tree. If None, then nodes are expanded until all the leaves contain less than min_samples_split samples. The higher value of maximum depth causes overfitting, and a lower value causes underfitting (Source).\n\n\ngini_acc_scores = []\nentropy_acc_scores = []\n\ncriterions = [""gini"", ""entropy""]\n\nfor criterion in criterions:\n\tfor depth in range(25):\n\t    dt = tree.DecisionTreeClassifier(criterion=criterion, max_depth = depth+1, random_state=depth)\n\t    model = dt.fit(X_train,y_train)\n\t    \n\t    y_predict = dt.predict(X_test)\n\n\t    if criterion == ""gini"":\n\t    \tgini_acc_scores.append(accuracy_score(y_test, y_predict))\n\t    else:\n\t    \tentropy_acc_scores.append(accuracy_score(y_test, y_predict))\nfiguresize = plt.figure(figsize=(12,8))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nEntropyAcc = plt.plot(np.arange(25)+1, entropy_acc_scores, \'--bo\')   \nGiniAcc = plt.plot(np.arange(25)+1, gini_acc_scores, \'--ro\')\nlegend = plt.legend([\'Entropy\', \'Gini\'], loc =\'lower right\',  fontsize=15)\ntitle = plt.title(\'Accuracy Score for Multiple Depths\', fontsize=25)\nxlab = plt.xlabel(\'Depth of Tree\', fontsize=20)\nylab = plt.ylabel(\'Accuracy Score\', fontsize=20)\n\nplt.show()\n\nprint(""Gini max accuracy:"", max(gini_acc_scores))\nprint(""Entropy max accuracy:"", max(entropy_acc_scores))\n\nGini max accuracy: 0.762962962962963\nEntropy max accuracy: 0.762962962962963\n\ndt = tree.DecisionTreeClassifier(max_depth = 1, random_state = 1)\ndt = dt.fit(X_train, y_train)\ny_predict = dt.predict(X_test)\n\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nAccuracy: 0.762962962962963\n\n8.3 Random Forest\n\nmax_depth : int or None, optional (default=None) or Maximum Depth of a Tree: The maximum depth of the tree. If None, then nodes are expanded until all the leaves contain less than min_samples_split samples. The higher value of maximum depth causes overfitting, and a lower value causes underfitting (Source).\n\nacc_scores = []              \ndepth = np.arange(1, 30)\n\nfor i in depth:\n\n    rf = RandomForestClassifier(n_estimators=25, max_depth=i, random_state=1)\n    rf.fit(X_train,y_train)\n\n    y_predict = rf.predict(X_test)\n\n    acc_scores.append(accuracy_score(y_test, y_predict)) \nfigsize = plt.figure(figsize = (12,8))\nplot = plt.plot(depth, acc_scores, \'r\')\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nxlab = plt.xlabel(\'Depth of the trees\', fontsize = 20)\nylab = plt.ylabel(\'Accuracy\', fontsize = 20)\ntitle = plt.title(\'(Random Forest) Accuracy vs Depth of Trees\', fontsize = 25)\nplt.show()\n\nrf = RandomForestClassifier(n_estimators=25, max_depth=acc_scores.index(max(acc_scores))+1, random_state=1)\nrf.fit(X_train,y_train)\n\ny_predict = rf.predict(X_test)\n\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nAccuracy: 0.7851851851851852\n\n'], 'url_profile': 'https://github.com/kevin2huang', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'Coimbatore', 'stats_list': [['2', '          followers'], ['3', '          following'], ['4']], 'contributions': '391 contributions\n        in the last year', 'description': ['Prediction of diabetes using ML\nThis is a machine learning project to predict whether a person has diabetes or not, based on information about the patient such as Pregnancies, Glucose, blood pressure, SkinThickness, body mass index (BMI), age, etc.\n\n\n\nData Description\nThe following features have been provided to help us predict whether a person is diabetic or not:\n\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration over 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)2)\nDiabetesPedigreeFunction: Diabetes pedigree function (a function which scores likelihood of diabetes based on family history)\nAge: Age (years)\nOutcome: Class variable (0 if non-diabetic, 1 if diabetic)\n\nLibraries used\n\nPandas\nNumpy\nMatplotlib\nSeaborn\nScikit-learn\n\n'], 'url_profile': 'https://github.com/Ashwina7999', 'info_list': ['Updated Nov 18, 2020', 'Updated Nov 17, 2020', 'Swift', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 19, 2020', 'R', 'Updated Nov 28, 2020', 'PHP', 'Updated Nov 22, 2020', 'Python', 'Updated Dec 8, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/HaofaHong', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Montreal, QC', 'stats_list': [['12', '          followers'], ['10', '          following'], ['3']], 'contributions': '634 contributions\n        in the last year', 'description': ['Diabetes Prediction\nTechnology and Resources Used\nPython Version: 3.7.7\nTable of Contents\n\nDefine the Problem\nGather the Data\nPrepare Data for Consumption\nData Cleaning\nData Exploration\nFeature Engineering\nModel Building\nHyperparameter Tuning\n\n1) Define the Problem\nThe mandate is to predict if a person has diabetes or not.\n2) Gather the Data\nThe data sets were provided. They are uploaded in the data sets folder.\n3) Prepare Data for Consumption\n3.1 Import Libraries\nThe following code is written in Python 3.7.7. Below is the list of libraries used.\nimport numpy as np \nimport pandas as pd\n3.2 Load Data Modeling Libraries\nThese are the most common machine learning and data visualization libraries.\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Model Algorithms\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model Helpers\nfrom sklearn.metrics import accuracy_score, mean_squared_error, confusion_matrix\n3.3 Data dictionary\nThe data dictionary for the data set is as follows:\n\n\n\nVariable\nDefinition\nType\nKey\n\n\n\n\npreg\nPregnancies\nNumerical\n\n\n\nplas\nPlasma Glucose Levels (mg/dL)\nNumerical\n\n\n\npres\nBlood Pressure\nNumerical\n\n\n\nskin\nSkin Thickness\nNumerical\n\n\n\ntest\nInsulin Level\nNumerical\n\n\n\nmass\nBody Mass Index\nNumerical\n\n\n\npedi\nPedigree\nNumerical\n\n\n\nage\nAge\nNumerical\n\n\n\nclass\nWhether or not this person has diabetes\nCategorical\n1 = Yes, 0 = No\n\n\n\n3.5 Greet the data\nImport data\n# read data set\ndiabetes_data = pd.read_csv(""Data set/diabetes.csv"", encoding= \'unicode_escape\')\nPreview data\n# get a peek at the top 5 rows of the data set\nprint(diabetes_data.head())\n   preg  plas  pres  skin  test  mass   pedi  age  class\n0     6   148    72    35     0  33.6  0.627   50      1\n1     1    85    66    29     0  26.6  0.351   31      0\n2     8   183    64     0     0  23.3  0.672   32      1\n3     1    89    66    23    94  28.1  0.167   21      0\n4     0   137    40    35   168  43.1  2.288   33      1\n\nDate column types and count\n# understand the type of each column\nprint(diabetes_data.info())\n<class \'pandas.core.frame.DataFrame\'>\nRangeIndex: 768 entries, 0 to 767\nData columns (total 9 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   preg    768 non-null    int64  \n 1   plas    768 non-null    int64  \n 2   pres    768 non-null    int64  \n 3   skin    768 non-null    int64  \n 4   test    768 non-null    int64  \n 5   mass    768 non-null    float64\n 6   pedi    768 non-null    float64\n 7   age     768 non-null    int64  \n 8   class   768 non-null    int64  \ndtypes: float64(2), int64(7)\n\nThere are no null values.\nSummarize the central tendency, dispersion and shape\n# get information on the numerical columns for the data set\nwith pd.option_context(\'display.max_columns\', len(diabetes_data.columns)):\n    print(diabetes_data.describe(include=\'all\'))\n             preg        plas        pres        skin        test        mass  \\\ncount  768.000000  768.000000  768.000000  768.000000  768.000000  768.000000   \nmean     3.845052  120.894531   69.105469   20.536458   79.799479   31.992578   \nstd      3.369578   31.972618   19.355807   15.952218  115.244002    7.884160   \nmin      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n25%      1.000000   99.000000   62.000000    0.000000    0.000000   27.300000   \n50%      3.000000  117.000000   72.000000   23.000000   30.500000   32.000000   \n75%      6.000000  140.250000   80.000000   32.000000  127.250000   36.600000   \nmax     17.000000  199.000000  122.000000   99.000000  846.000000   67.100000   \n\n             pedi         age       class  \ncount  768.000000  768.000000  768.000000  \nmean     0.471876   33.240885    0.348958  \nstd      0.331329   11.760232    0.476951  \nmin      0.078000   21.000000    0.000000  \n25%      0.243750   24.000000    0.000000  \n50%      0.372500   29.000000    0.000000  \n75%      0.626250   41.000000    1.000000  \nmax      2.420000   81.000000    1.000000  \n\n4) Data Cleaning\n4.1 Correcting outliers\nI used the IQR (Inter Quartile Range) method to detect and remove outliers and plotted boxplots to get a visual understanding of the outliers.\n4.1.0 IQR method\ndef remove_outliers_iqr(df):\n\tdataf = pd.DataFrame(df)\n\tquartile_1, quartile_3 = np.percentile(dataf, [25,75])\n\n\tiqr = quartile_3 - quartile_1\n\tlower_bound = quartile_1 - (iqr * 1.5)\n\tupper_bound = quartile_3 + (iqr * 1.5)\n\n\tprint(""lower bound:"", lower_bound)\n\tprint(""upper bound:"", upper_bound)\n\tprint(""IQR outliers:"", np.where((dataf > upper_bound) | (dataf < lower_bound)))\n\tprint(""# of outliers:"", len(np.where((dataf > upper_bound) | (dataf < lower_bound))[0]))\n\n\treturn dataf[~((dataf < lower_bound) | (dataf > upper_bound)).any(axis=1)]\n4.1.1 preg (Pregnancies)\nsns.boxplot(x=diabetes_data[\'preg\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'preg\'] = remove_outliers_iqr(diabetes_data[\'preg\'])\nlower bound: -6.5\nupper bound: 13.5\nIQR outliers: (array([ 88, 159, 298, 455], dtype=int64), array([0, 0, 0, 0], dtype=int64))\n# of outliers: 4\n\n4.1.2 plas (Plasma Glucose)\nsns.boxplot(x=diabetes_data[\'plas\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'plas\'] = remove_outliers_iqr(diabetes_data[\'plas\'])\nlower bound: 37.125\nupper bound: 202.125\nIQR outliers: (array([ 75, 182, 342, 349, 502], dtype=int64), array([0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 5\n\n4.1.3 skin (Skin Thickness)\nsns.boxplot(x=diabetes_data[\'skin\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'skin\'] = remove_outliers_iqr(diabetes_data[\'skin\'])\nlower bound: -48.0\nupper bound: 80.0\nIQR outliers: (array([579], dtype=int64), array([0], dtype=int64))\n# of outliers: 1\n\n4.1.4 test (Insulin Test)\nsns.boxplot(x=diabetes_data[\'test\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'test\'] = remove_outliers_iqr(diabetes_data[\'test\'])\nlower bound: -190.875\nupper bound: 318.125\nIQR outliers: (array([  8,  13,  54, 111, 139, 153, 186, 220, 228, 231, 247, 248, 258,\n       286, 296, 360, 370, 375, 392, 409, 415, 480, 486, 519, 574, 584,\n       612, 645, 655, 695, 707, 710, 715, 753], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 34\n\n4.1.5 mass (Body Mass Index)\nsns.boxplot(x=diabetes_data[\'mass\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'mass\'] = remove_outliers_iqr(diabetes_data[\'mass\'])\nlower bound: 13.35\nupper bound: 50.550000000000004\nIQR outliers: (array([  9,  49,  60,  81, 120, 125, 145, 177, 193, 247, 303, 371, 426,\n       445, 494, 522, 673, 684, 706], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      dtype=int64))\n# of outliers: 19\n\n4.1.6 pedi (Pedigree)\nsns.boxplot(x=diabetes_data[\'pedi\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'pedi\'] = remove_outliers_iqr(diabetes_data[\'pedi\'])\nlower bound: -0.32999999999999996\nupper bound: 1.2\nIQR outliers: (array([  4,  12,  39,  45,  58, 100, 147, 187, 218, 228, 243, 245, 259,\n       292, 308, 330, 370, 371, 383, 395, 445, 534, 593, 606, 618, 621,\n       622, 659, 661], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 29\n\n4.1.7 age\nsns.boxplot(x=diabetes_data[\'age\'])\nplt.show()\n\n# calculate IQR score and remove outliers\ndiabetes_data[\'age\'] = remove_outliers_iqr(diabetes_data[\'age\'])\nlower bound: -1.5\nupper bound: 66.5\nIQR outliers: (array([123, 363, 453, 459, 489, 537, 666, 674, 684], dtype=int64), array([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64))\n# of outliers: 9\n\n4.1.8 drop null values\ndiabetes_data = diabetes_data.dropna()\n\nprint(diabetes_data.info())\nInt64Index: 673 entries, 0 to 767\nData columns (total 9 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   preg    673 non-null    float64\n 1   plas    673 non-null    float64\n 2   pres    673 non-null    int64  \n 3   skin    673 non-null    float64\n 4   test    673 non-null    float64\n 5   mass    673 non-null    float64\n 6   pedi    673 non-null    float64\n 7   age     673 non-null    float64\n 8   class   673 non-null    int64  \ndtypes: float64(7), int64(2)\n\n4.1.9 Convert object data type\ndiabetes_data[\'preg\'] = diabetes_data[\'preg\'].astype(int)\ndiabetes_data[\'plas\'] = diabetes_data[\'plas\'].astype(int)\ndiabetes_data[\'pres\'] = diabetes_data[\'pres\'].astype(int)\ndiabetes_data[\'skin\'] = diabetes_data[\'skin\'].astype(int)\ndiabetes_data[\'test\'] = diabetes_data[\'test\'].astype(int)\ndiabetes_data[\'age\'] = diabetes_data[\'age\'].astype(int)\ndiabetes_data[\'class\'] = diabetes_data[\'class\'].astype(int)\n\ndiabetes_data[\'mass\'] = diabetes_data[\'mass\'].astype(float)\ndiabetes_data[\'pedi\'] = diabetes_data[\'pedi\'].astype(float)\n4.1.10 Output to CSV\nOutput cleaned data to CSV.\ndiabetes_data.to_csv(\'Data set/diabetes_data_cleaned.csv\',index = False)\n5) Data Exploration\nThis section explores the distribution of each variable using cleaned data set.\ndiabetes_data = pd.read_csv(""Data set/diabetes_data_cleaned.csv"", encoding= \'unicode_escape\')\n5.0 Helper method\nI created a few helper methods to plot the visualizations.\ndef plotHist(xlabel, title, column):\n    fig, ax = plt.subplots(1, 1, \n                           figsize =(10, 7),  \n                           tight_layout = True)\n\n    ax.spines[""top""].set_visible(False)  \n    ax.spines[""right""].set_visible(False)\n\n    plt.xticks(fontsize=14)  \n    plt.yticks(fontsize=14)\n\n    plt.xlabel(xlabel, fontsize=16)  \n    plt.ylabel(""# of entries"", fontsize=16)\n    plt.title(title, fontsize=20)\n\n    plt.hist(column)\n    plt.show()\ndef plotBar(xlabel, title, column):\n    ax = sns.barplot(column.value_counts().index, column.value_counts())\n\n    ax.spines[""top""].set_visible(False)  \n    ax.spines[""right""].set_visible(False)\n\n    plt.xticks(fontsize=14)  \n    plt.yticks(fontsize=14)\n\n    plt.xlabel(xlabel, fontsize=16)  \n    plt.ylabel(""# of entries"", fontsize=16)\n    plt.title(title, fontsize=20)\n\n    plt.show()\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={\'shrink\':.9}, \n        ax=ax,\n        annot=True, \n        linewidths=0.1, \n        vmax=1.0, \n        linecolor=\'white\',\n        annot_kws={\'fontsize\':14}\n    )\n\n    _.set_yticklabels(_.get_ymajorticklabels(), fontsize = 16)\n    _.set_xticklabels(_.get_xmajorticklabels(), fontsize = 16)\n\n    plt.title(\'Pearson Correlation of Features\', y=1.05, size=20)\n\n    plt.show()\n5.1 preg (Pregnancies)\nprint(\'preg (Pregnancies):\\n\', diabetes_data.preg.value_counts(sort=False))\nplotHist(""Pregnancies"", ""Histogram of number of entries per number of pregnancies"", diabetes_data.preg) \n\npreg (Pregnancies):\n0      97\n1     118\n2      89\n3      68\n4      64\n5      49\n6      44\n7      40\n8      31\n9      24\n10     22\n11      9\n12      8\n13     10\nName: preg, dtype: int64\n\n5.2 plas (Plasma Glucose)\nprint(\'plas (Plasma Glucose):\\n\', diabetes_data.plas.value_counts(sort=False))\nplotHist(""Plasma Glucose Levels (mg/dL)"", ""Histogram of number of entries per plasma glucose levels"", diabetes_data.plas) \n\nplas (Plasma Glucose):\n44     1\n56     1\n57     1\n61     1\n62     1\n      ..\n194    2\n195    2\n196    3\n197    1\n198    1\nName: plas, Length: 132, dtype: int64\n\n5.3 skin\nprint(\'skin (Skin Thickness):\\n\', diabetes_data.skin.value_counts(sort=False))\nplotHist(""Skin Thickness"", ""Histogram of number of entries per skin thickness length"", diabetes_data.skin) \n\nskin (Skin Thickness):\n0     206\n7       1\n8       2\n10      5\n11      6\n12      7\n13     10\n14      5\n15     13\n16      5\n17     14\n18     18\n19     16\n20     10\n21      9\n22     13\n23     19\n24      8\n25     15\n26     15\n27     22\n28     19\n29     15\n30     23\n31     18\n32     29\n33     14\n34      8\n35     10\n36     13\n37     14\n38      6\n39     16\n40     16\n41     11\n42      6\n43      4\n44      3\n45      5\n46      7\n47      3\n48      3\n49      2\n50      3\n51      1\n52      2\n54      2\n60      1\nName: skin, dtype: int64\n\n5.4 test\nprint(\'test (Insulin Level):\\n\', diabetes_data.test.value_counts(sort=False))\nplotHist(""Insulin Level"", ""Histogram of number of entries per insulin level"", diabetes_data.test)\n\ntest (Insulin Level):\n0      338\n15       1\n16       1\n18       2\n22       1\n      ... \n293      1\n300      1\n304      1\n310      1\n318      1\nName: test, Length: 150, dtype: int64\n\n5.5 mass\nprint(\'mass (Body Mass Index):\\n\', diabetes_data.mass.value_counts(sort=False))\nplotHist(""Body Mass Index"", ""Histogram of number of entries per body mass index score"", diabetes_data.mass) \n\nmass (Body Mass Index):\n31.0     2\n38.0     2\n30.0     6\n29.0     4\n36.0     2\n        ..\n26.9     1\n36.6     4\n23.4     1\n46.3     1\n31.2    10\nName: mass, Length: 232, dtype: int64\n\n5.6 pedi\nprint(\'pedi (Pedigree):\\n\', diabetes_data.pedi.value_counts(sort=False))\nplotHist(""Pedigree"", ""Histogram of number of entries per pedigree count"", diabetes_data.mass) \n\npedi (Pedigree):\n0.375    1\n0.875    2\n0.560    1\n0.381    1\n0.514    2\n        ..\n0.347    1\n0.236    3\n0.231    2\n0.893    1\n0.084    1\nName: pedi, Length: 461, dtype: int64\n\n5.7 age\nprint(\'age:\\n\', diabetes_data.age.value_counts(sort=False))\nplotHist(""Age"", ""Histogram of number of entries per age"", diabetes_data.age) \n\nage:\n21    56\n22    63\n23    35\n24    42\n25    38\n26    29\n27    31\n28    31\n29    27\n30    19\n31    22\n32    15\n33    13\n34    10\n35     9\n36    16\n37    18\n38    15\n39    12\n40    11\n41    21\n42    17\n43    11\n44     7\n45    14\n46     9\n47     5\n48     5\n49     4\n50     7\n51     7\n52     7\n53     4\n54     5\n55     4\n56     2\n57     4\n58     6\n59     2\n60     3\n61     2\n62     3\n63     4\n64     1\n65     3\n66     4\nName: age, dtype: int64\n\n5.8 class\nprint(\'class:\\n\', diabetes_data[\'class\'].value_counts(sort=False))\nplotBar(""Result (1 = positive, 0 = negative)"", ""Diabetes results"", diabetes_data[\'class\'])\n\nclass:\n0    456\n1    217\nName: class, dtype: int64\n\n5.9 Correlation heatmap\ncorrelation_heatmap(diabetes_data)\n\n5.10 Pair plot\nsns.pairplot(diabetes_data, hue = \'class\')\nplt.show()\n\n5.11 Pivot Table\npivot_table1 = pd.pivot_table(diabetes_data, index = \'class\', values = [\'preg\', \'plas\', \'pres\', \'skin\'])\nprint(pivot_table1)\n\npivot_table2 = pd.pivot_table(diabetes_data, index = \'class\', values = [\'test\', \'mass\', \'pedi\', \'age\'])\nprint(pivot_table2)\n             plas      preg       pres       skin\nclass                                            \n0      109.313596  3.298246  68.945175  19.815789\n1      140.622120  4.838710  70.838710  19.843318\n\n             age       mass      pedi       test\nclass                                           \n0      30.789474  30.775439  0.398202  58.660088\n1      36.755760  34.763134  0.490309  72.483871\n\n6) Feature Engineering\n6.1 Exploration of new features\nNo new features created.\n6.2 Split into Training and Testing Data\n# define x, y\nX = diabetes_data.drop([\'class\'], axis = 1)\ny = diabetes_data[\'class\']\n\n# split into train test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 7)\n7) Model Building\nTrain the models and use cross validation score for the accuracy.\n7.1 Logistic Regression\nlr = LogisticRegression(max_iter = 2000)\ncv = cross_val_score(lr, X_train, y_train,cv=5)\nprint(cv)\nprint(cv.mean())\n[0.7962963  0.81481481 0.81481481 0.75700935 0.72897196]\n0.7823814468674282\n\n7.2 Decision Tree\ndt = tree.DecisionTreeClassifier(random_state = 1)\ncv = cross_val_score(dt, X_train, y_train, cv=5)\nprint(cv)\nprint(cv.mean())\n[0.66666667 0.73148148 0.72222222 0.58878505 0.65420561]\n0.6726722049151955\n\n7.3 Random Forest\nrf = RandomForestClassifier(random_state = 1)\ncv = cross_val_score(rf, X_train, y_train, cv=5)\nprint(cv)\nprint(cv.mean())\n[0.81481481 0.83333333 0.75       0.73831776 0.74766355]\n0.7768258913118726\n\n8) Hyperparameter Tuning\n8.1 Logistic Regression\n\nC : float, (default=1.0). Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.\n\nlr = LogisticRegression()\nparam_grid = {\'max_iter\' : [2000],\n              \'penalty\' : [\'l1\', \'l2\'],\n              \'C\' : np.logspace(-4, 4, 20),\n              \'solver\' : [\'liblinear\']}\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train, y_train)\n\nprint(\'Best Score: \' + str(best_clf_lr.best_score_))\nprint(\'Best Parameters: \' + str(best_clf_lr.best_params_))\nFitting 5 folds for each of 40 candidates, totalling 200 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  88 tasks      | elapsed:    1.3s\n[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:    1.5s finished\nBest Score: 0.7916753201799931\nBest Parameters: {\'C\': 0.615848211066026, \'max_iter\': 2000, \'penalty\': \'l1\', \'solver\': \'liblinear\'}\n\ny_predict = best_clf_lr.predict(X_test)\n\nprint(""Confusion Matrix:\\n"", confusion_matrix(y_test, y_predict))\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nConfusion Matrix:\n [[83  9]\n [20 23]]\nAccuracy: 0.7851851851851852\n\n8.2 Decision Tree\n\n\ncriterion : optional (default=”gini”) or Choose attribute selection measure: This parameter allows us to use the different attribute selection measure. Supported criteria are “gini” for the Gini index and “entropy” for the information gain.\n\n\nmax_depth : int or None, optional (default=None) or Maximum Depth of a Tree: The maximum depth of the tree. If None, then nodes are expanded until all the leaves contain less than min_samples_split samples. The higher value of maximum depth causes overfitting, and a lower value causes underfitting (Source).\n\n\ngini_acc_scores = []\nentropy_acc_scores = []\n\ncriterions = [""gini"", ""entropy""]\n\nfor criterion in criterions:\n\tfor depth in range(25):\n\t    dt = tree.DecisionTreeClassifier(criterion=criterion, max_depth = depth+1, random_state=depth)\n\t    model = dt.fit(X_train,y_train)\n\t    \n\t    y_predict = dt.predict(X_test)\n\n\t    if criterion == ""gini"":\n\t    \tgini_acc_scores.append(accuracy_score(y_test, y_predict))\n\t    else:\n\t    \tentropy_acc_scores.append(accuracy_score(y_test, y_predict))\nfiguresize = plt.figure(figsize=(12,8))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nEntropyAcc = plt.plot(np.arange(25)+1, entropy_acc_scores, \'--bo\')   \nGiniAcc = plt.plot(np.arange(25)+1, gini_acc_scores, \'--ro\')\nlegend = plt.legend([\'Entropy\', \'Gini\'], loc =\'lower right\',  fontsize=15)\ntitle = plt.title(\'Accuracy Score for Multiple Depths\', fontsize=25)\nxlab = plt.xlabel(\'Depth of Tree\', fontsize=20)\nylab = plt.ylabel(\'Accuracy Score\', fontsize=20)\n\nplt.show()\n\nprint(""Gini max accuracy:"", max(gini_acc_scores))\nprint(""Entropy max accuracy:"", max(entropy_acc_scores))\n\nGini max accuracy: 0.762962962962963\nEntropy max accuracy: 0.762962962962963\n\ndt = tree.DecisionTreeClassifier(max_depth = 1, random_state = 1)\ndt = dt.fit(X_train, y_train)\ny_predict = dt.predict(X_test)\n\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nAccuracy: 0.762962962962963\n\n8.3 Random Forest\n\nmax_depth : int or None, optional (default=None) or Maximum Depth of a Tree: The maximum depth of the tree. If None, then nodes are expanded until all the leaves contain less than min_samples_split samples. The higher value of maximum depth causes overfitting, and a lower value causes underfitting (Source).\n\nacc_scores = []              \ndepth = np.arange(1, 30)\n\nfor i in depth:\n\n    rf = RandomForestClassifier(n_estimators=25, max_depth=i, random_state=1)\n    rf.fit(X_train,y_train)\n\n    y_predict = rf.predict(X_test)\n\n    acc_scores.append(accuracy_score(y_test, y_predict)) \nfigsize = plt.figure(figsize = (12,8))\nplot = plt.plot(depth, acc_scores, \'r\')\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nxlab = plt.xlabel(\'Depth of the trees\', fontsize = 20)\nylab = plt.ylabel(\'Accuracy\', fontsize = 20)\ntitle = plt.title(\'(Random Forest) Accuracy vs Depth of Trees\', fontsize = 25)\nplt.show()\n\nrf = RandomForestClassifier(n_estimators=25, max_depth=acc_scores.index(max(acc_scores))+1, random_state=1)\nrf.fit(X_train,y_train)\n\ny_predict = rf.predict(X_test)\n\nprint(""Accuracy:"", accuracy_score(y_test, y_predict))\nAccuracy: 0.7851851851851852\n\n'], 'url_profile': 'https://github.com/kevin2huang', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Coimbatore', 'stats_list': [['2', '          followers'], ['3', '          following'], ['4']], 'contributions': '391 contributions\n        in the last year', 'description': ['Prediction of diabetes using ML\nThis is a machine learning project to predict whether a person has diabetes or not, based on information about the patient such as Pregnancies, Glucose, blood pressure, SkinThickness, body mass index (BMI), age, etc.\n\n\n\nData Description\nThe following features have been provided to help us predict whether a person is diabetic or not:\n\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration over 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)2)\nDiabetesPedigreeFunction: Diabetes pedigree function (a function which scores likelihood of diabetes based on family history)\nAge: Age (years)\nOutcome: Class variable (0 if non-diabetic, 1 if diabetic)\n\nLibraries used\n\nPandas\nNumpy\nMatplotlib\nSeaborn\nScikit-learn\n\n'], 'url_profile': 'https://github.com/Ashwina7999', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['6', '          following'], ['7']], 'contributions': '86 contributions\n        in the last year', 'description': ['Diabetes-detection\n'], 'url_profile': 'https://github.com/sharinair14', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Louisville, Kentucky', 'stats_list': [], 'contributions': '117 contributions\n        in the last year', 'description': ['Diabetes-Detection\nPython Code using Machine Learning to diagnose Diabetes\nhttps://colab.research.google.com/drive/1QJgt-Kqf9vkehw7b0yKxJqwsPrW7WTSk?usp=sharing\nhttps://www.youtube.com/watch?v=Uf1GOzvMHMw\nhttps://sites.google.com/view/disease-detector\n'], 'url_profile': 'https://github.com/Varun-Chandrashekhar', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Mumbai, Maharashtra', 'stats_list': [], 'contributions': '95 contributions\n        in the last year', 'description': ['Predicting-Diabetes\nSimple ML model to Predict Diabetes hosted with Flask\n'], 'url_profile': 'https://github.com/swapnilg4u', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Williamstown, MA', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['PimaDiabetes\nMachine Learning Models for Detecting Diabetes in Pima Women\nI worked with the Pima data set in library MASS for this project. The World Health Organization tested a population of women ages 21+ of Pima Indian descent for diabetes. Using the health information available in this data set, I trained and tested four different models (Lasso, Logistic Regression, Elastic Net, and Stepwise Generalized Additive Model) to try to accurately diagnose whether patients have diabetes or not while also accounting for the implications of misdiagnosis in this context.\nMotivation\nStatistical modeling can be a helpful way to guide medical professionals in care, diagnosis, and treatment. Specifically, using machine learning to build models that recognize diabetes aids doctors in determining whether to run further testing on Hemoglobin A1c and fasting blood sugar, for example, and designing effective treatment plans for diabetic patients. If left untreated, diabetes can have severe and potentially lethal health consequences. These models work to distinguish between diabetic and non-diabetic patients while trying to minimize the number of Type II errors, in which we fail to diagnose diabetes in actually diabetic patients.\nVisualization\n\nWe consider each individual\'s number of pregnancies, age, concentration of glucose in their plasma, diastolic blood pressure, skin fold thickness in the triceps, body mass index, and diabetes pedigree in working to identify the patients with diabetes. This scatterplot matrix displays the pairwise relationships between the these measurements.\nSample Code\nSee Rmd file for full project code.\n# Stepwise GAM model\n# Creating a GAM Object\nGam.object <- gam(type_num~npreg+glu+ped+age+bmi+bp+skin, data=Dtrain) \nstep.object <- step.Gam(Gam.object, scope=list(""npreg""=~1+npreg+s(npreg,2)+s(npreg,3)+s(npreg,4),\n                                               ""glu""=~1+glu+s(glu,2)+s(glu,3)+s(glu,4),\n                                               ""ped""=~1+ped+s(ped,2)+s(ped,3)+s(ped,4),\n                                               ""age""=~1+age+s(age,2)+s(age,3)+s(age,4),\n                                               ""bmi""=~1+bmi+s(bmi,2)+s(bmi,3)+s(bmi,4),\n                                               ""bp""=~1+bp+s(bp,2)+s(bp,3)+s(bp,4),\n                                               ""skin""=~1+skin+s(skin,2)+s(skin,3)+s(skin,4)))\n# GAM Model Performance at optimal cut off of 0.32\npreds.gam = predict(step.object, newdata = xvars.Dtest) # using the gam model from the training set to predict on the test set\n\nactual <- yvars.Dtest\npredicted <- ifelse(preds.gam > 0.32, 1, 0) # cut off at 0.32 \n\nfinal.gam <- data.frame(actual, predicted)\nnames(final.gam) <- c(""actual"", ""predicted"")\n\ncFM(final.gam) # See Rmd for the confusion matrix function I wrote\n\n\nThe stepwise GAM model manages to keep the number of false negatives low without sacrificing much in the way of the overall error rate, making it the best performing model, given our desire to balance accuracy and the minimization of Type II errors.\nNext Steps\nTo start, I would like to make use of AUC values and ROC plots to back up my decisions regarding the best cut off levels. More generally, I would like to expand the scope of these models to predict diabetes in wider populations than just the population of Pima women.\nCollaborators\nSelin Gumustop, Williams College Class of 2020\n'], 'url_profile': 'https://github.com/melissaswann', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Pune, Maharashtra ', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': [""Diabetes Prediction:\nTable of Content\n\nDemo\nOverview\nMotivation\nInstallation\nDeployement on Heroku\nDirectory Tree\nBug / Feature Request\n\nDemo\nLink: https://diabetes--predictior-api.herokuapp.com/\nOverview\nThis is a simple Flask web app which predicts whether a patient is having diabetes or not.\nMotivation\nWhat to do when you are at home due to this pandemic situation? I started to learn Machine Learning model to get most out of it. I came to know mathematics behind all supervised models. Finally it is important to work on application (real world application) to actually make a difference.\nInstallation\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nDeployement on Heroku\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nDirectory Tree\n├── static \n│\xa0\xa0 ├── css\n├── template\n│\xa0\xa0 ├── home.html\n├── Procfile\n├── README.md\n├── app.py\n├── diabetes_model.pkl\n├── requirements.txt\n\nTechnologies Used\n\n  \nBug / Feature Request\nIf you find a bug (the website couldn't handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result\n""], 'url_profile': 'https://github.com/ShivamGupta624', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'Austin, TX', 'stats_list': [['4', '          followers'], ['12', '          following'], ['49']], 'contributions': '66 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nStreamlit webapp featuring a machine learning classification model for positive or negative for diabetes based on dataset of the Pima Indians.\nParameters\n\nPregnancies (integer)\nGlucose level (decimal)\nResting Blood Pressure (decimal)\nSkin Thickness (decimal)\nInsulin (decimal)\nBody Mass Index (decimal)\nDiabetesPedigreeFunction (decimal)\nAge (integer)\nOutcome (binary)\n\nResults\nThe Model showed a weighted average of 88% for each: precision, recall, f1-score.  Support: 154.\nGlucose Level and Diabetes Pedigree Function saw the highest correlation with the target variable.\nConsiderations\nThis model, while accurate on this particular population, is limited to a single sample population of the entire human global population and does not therefore take into account certain genetic mutations that may account for greater or lower predisposition to Diabetes whether type 1 or type 2.  Further testing of the model on outside populations is required and will help resolve bias in the model.  If you would like to contribute using the parameters specified and whether you know for a fact if you have this disease or not I would love to add it to make a better model\n'], 'url_profile': 'https://github.com/mixtek', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['3']], 'contributions': '62 contributions\n        in the last year', 'description': ['diabetes_heroku\nLink : https://predictdiabetesapp.herokuapp.com/\n\n\n\n'], 'url_profile': 'https://github.com/azmeena1311', 'info_list': ['Updated Nov 16, 2020', 'Python', 'Updated Nov 23, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Feb 6, 2021', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 31, 2020', 'Jupyter Notebook', 'Updated Dec 14, 2020']}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '67 contributions\n        in the last year', 'description': ['Diabetes-prediction\nApp Link  https://diabetesprediction12.herokuapp.com/\nProject architecture\n1. Data collection\n2. Feature engineering\n3. Model creation\n4. Create Flask app\n5. Deploy model\n'], 'url_profile': 'https://github.com/kanhakumar143', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '51 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/drs213m', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '55 contributions\n        in the last year', 'description': ['Diabetes Prediction System\nLibraries Used : \npandas\nnumpy\nmatplolib\nseaborn\nsklearn\n\nMODEL USED\nThe models in contention were Random Forest Regressor, Support Vector Machine Regression and Decision Tree Regressor.\nUsing GridSearchCV, Random Forest Classifier turned out to be the best fit.\nThe Model was Deployed using Heroku.\n'], 'url_profile': 'https://github.com/Anirudhr98', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'New York', 'stats_list': [['0', '          followers'], ['1', '          following'], ['3']], 'contributions': '39 contributions\n        in the last year', 'description': ['diabetes-stats\nStatistical Analysis to Determine Early Indicators of Diabetes\nResearch Report found in Ciranni_Herrick_Final_Project.pdf\nStatistical Analysis found in analysis.Rmd\n\nthis is an R Markdown Notebook. Please open in R-Studio, or another application in which you can view such a notebook.\nthere are many diagrams that assist in the understanding of the data, and provide additional context for the analysis.\n\nData Dictionary in data_dictionary.html\n\nsaved html page directly from the data source - open in web browser to view\n\nData Summary in data_summary.html\n\nsaved html page directly from the data source - open in web browser to view\n\nlibraries.R\n\nall libraries used in this analysis\n\nutilities.R\n\nSome utility functions used in the analysis, kept out of the main code for cleanliness.\n\nData Source: Vanderbilt Biostatistics\n'], 'url_profile': 'https://github.com/branden-ciranni', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '245 contributions\n        in the last year', 'description': ['install google script types\nnpm i -S @types/google-apps-script\nadd tsconfig.json\n{\n""compilerOptions"": {\n""allowJs"": true,\n""checkJs"": true,\n""types"": [""google-apps-script""],\n""lib"": [""esnext""],\n""experimentalDecorators"": true\n},\n}\ndynamically add otpiosn to select in js\nhttps://electrictoolbox.com/javascript-add-options-html-select/\nhttps://www.w3schools.com/jsref/met_select_add.asp\nbest prcatices\nhttps://developers.google.com/apps-script/guides/html/best-practices\nversion 34\nhttps://script.google.com/macros/s/ AKfycby2JcVlYTi5BPVmGTMwu8CLSt6AsbvVQaFmQUR9r27d57mVOVX9fmQ5kx_3_zBeV10a4g/exec\nside bar menu\nhttps://www.codingnepalweb.com/2020/04/responsive-sidebar-menu-html-css.html\nserve different pages in doGet\nhttps://stackoverflow.com/questions/15668119/linking-to-another-html-page-in-google-apps-script\njavascript date proeprties\nhttps://www.w3schools.com/jsref/jsref_obj_date.asp\nmust create instance: var dt = new Date();\ncan\'t run deployed version with clasp deploy\nhttps://github.com/google/clasp/issues/63\n'], 'url_profile': 'https://github.com/castanc', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['3', '          following'], ['0']], 'contributions': '181 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vsvale', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'Malang, Indonesia', 'stats_list': [], 'contributions': '69 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/dhatuker', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '26 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/WTYxNEY', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['8', '          following'], ['52']], 'contributions': '48 contributions\n        in the last year', 'description': ['Dataset\nKullanılan dataset: Pima Indians Diabetes Database\nVeri Analizi\nVeri analizini kolaylaştırmak için pandas profiling kullanıldı.\nOutliers temizlendi.\nYöntem\nSklearn kütüphanesinden SVC modeli kullanıldı.\n'], 'url_profile': 'https://github.com/er-ay', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['6']], 'contributions': '55 contributions\n        in the last year', 'description': ['Diabetes-Detection\nConsists of diabetes detection using Gradient Boosting algorithm with a fully functional GUI. This project is a machine learning demonstration of a detection problem statement where data of various patients having diabetes or not has been used. The model works fine with a good accuracy of 88.2%, hence providing a good estimate of whether the data provided would be of a diabetic human being or not.\nStandard Prima dataset has been used which is universally accepted for Machine Learning problem statements.\n'], 'url_profile': 'https://github.com/Sahil-Palarpwar', 'info_list': ['Jupyter Notebook', 'Updated Nov 23, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Dec 20, 2020', 'HTML', 'Updated Jan 18, 2021', 'HTML', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Java', 'Updated Dec 10, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020']}"
"{'location': 'NONE', 'stats_list': [['9', '          followers'], ['15', '          following'], ['5']], 'contributions': '56 contributions\n        in the last year', 'description': ['Sequential-Approach-to-Diabetes\nAn Artificial Neaural Network model, that is able to predict whether a person has diabetes or not by following a sequential approach. The model uses 8 attributes to come up with an outcome which will be either a logic 1 or a 0.\nApproach\nThe model is an implementation of the Keras Sequential model and has 4 Dense layer. All the layers have an ReLU activation function except the last one that uses Sigmoid to output 1 or 0\nAccuracy\nAfter being trained for 1000 epochs the model has an average accuracy of 91% on the training data and 85% on the testing dataset\n'], 'url_profile': 'https://github.com/sttsenov', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '36 contributions\n        in the last year', 'description': ['Pima-Indians-Diabetes---Classification\nThis dataset describes the medical records for Pima Indians and whether or not each patient will have an onset of diabetes within Five years.\nShape of dataset: (767 rows x 9 columns)\nFields description follow:\npreg = Number of times pregnant\nplas = Plasma glucose concentration a 2 hours in an oral glucose tolerance test\npres = Diastolic blood pressure (mm Hg)\nskin = Triceps skin fold thickness (mm)\ntest = 2-Hour serum insulin (mu U/ml)\nmass = Body mass index (weight in kg/(height in m)^2)\npedi = Diabetes pedigree function\nage = Age (years)\nclass = Class variable (1:tested positive for diabetes, 0: tested negative for diabetes)\n'], 'url_profile': 'https://github.com/joelbraganza', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['5']], 'contributions': '84 contributions\n        in the last year', 'description': ['Diabetes-Prediction-System\n'], 'url_profile': 'https://github.com/souravarya07', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Telangana, Hyderabad', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '53 contributions\n        in the last year', 'description': ['Welcome to Rob Console, I\'m Syed Abdur Rahman Uddin - aka Alexis Rob 👋\n\nI\'m a Full Stack Web Developer, Data Analyst, Mathematics Tutor and Part Time Football Player!!\n\n🔭 I just Completed My Certifications in Web Development\n🌱 I’m currently Exploring Machine Learning Projects\n👯 I’m looking to collaborate with Companies and develop Products and Futures\n🥅 2020 Goals: Contribute more to Open Source projects\n⚡ Fun fact: I like to Cook and Eat\n\nConnect with me:\n\n\nDiabetes-Detection-using-Streamlit\nStreamlit is an open-source Python library that makes it easy to create and share beautiful, custom web apps for machine learning and data science. ... Make sure that you have Python 3.6 - Python 3.8 installed. Install Streamlit using PIP and run the \'hello world\' app: pip install streamlit streamlit hello. That\'s it!\nPrerequites\n\nimport pandas\nImport sklearn\nimport streamlit\n\nHow to Use\n\nDownload the Zip File.\nPip install pandas, sklearn and streamlit\nRun the Code in any Editor ( set the source of csv file according to your destination folder )\nTo run the webapp, Open Command Prompt and enter => streamlit run ""C:\\Users\\ROB......whatever your source is.....\\webapp.py""\nThe webapp will get implemented on a localhost with address.\n\nSnapshots\n\n\n\n\n'], 'url_profile': 'https://github.com/syedrahman24', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['17', '          followers'], ['28', '          following'], ['14']], 'contributions': '146 contributions\n        in the last year', 'description': ['diagnose-diabetes-svm\nBuilding a Support Vector Machine Model to diagnose if a patient has diabetes based on their medical records\n'], 'url_profile': 'https://github.com/Inyrkz', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['8']], 'contributions': '49 contributions\n        in the last year', 'description': ['Pima-Indians-Diabetes-Database\n'], 'url_profile': 'https://github.com/BelalAgwaDev', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'mumbai ', 'stats_list': [['0', '          followers'], ['5', '          following'], ['0']], 'contributions': '42 contributions\n        in the last year', 'description': ['Diabetes-detection-Web-App\nDiabetes is a metabolic disease affecting a multitude of people worldwide that because diabetes detection is very important then we can start treatment immediately so we created web app for detection of Diabetes using Machine Learning\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/prathamesh3113', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Surabaya, Indonesia', 'stats_list': [['35', '          followers'], ['23', '          following'], ['37']], 'contributions': '554 contributions\n        in the last year', 'description': ['\nبِسْــــــــــــــمِ اللَّهِ الرَّحْمَنِ الرَّحِيم \n\nK Nearest Neighbor using Go\nProgram sederhana untuk klasifikasi Diabetes menggunakan bahasa pemrograman Go. Memakai dataset dari Kaggle. Preprocessing data yang dilakukan yaitu dengan normalisasi atribut class Glucose, BloodPressure, SkinThickness, BMI, dan Insulin yang semula nilai 0 diganti menjadi nilai mean dari kolom masing-masing.\nAdapun nilai K yang cocok untuk klasifikasi menggunakan program ini adalah K=3 dengan datatest=40% datatrain=60%, maka didapatkan hasil sebagai berikut:\n\nAKURASI =  0.9244823386114495\nMEAN ERROR =  0.07551766138855055\n\nHow To Install\n\nDownload Go terlebih dahulu disini\nDownload repo ini\nMasuk kedalam foldernya\nJalankan perintah ./install.sh untuk membuat folder output plot\nJalankan perintah go run main.go untuk menjalankan program\n\nAuthor\n\nAfrizal Muhammad Yasin\nDina Puspitaningrum\nNurlisa Aulia Setyaningrum\n\n'], 'url_profile': 'https://github.com/afrizal423', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['32', '          followers'], ['27', '          following'], ['9']], 'contributions': '201 contributions\n        in the last year', 'description': [""\n\n\nPima Indians Diabetes Classification Project\n🎯 Objective of Project\nDiabetes, is a group of metabolic disorders in which there are high blood sugar levels over a prolonged period. Symptoms of high blood sugar include frequent urination, increased thirst, and increased hunger. If left untreated, diabetes can cause many complications. Acute complications can include diabetic ketoacidosis, hyperosmolar hyperglycemic state, or death. Serious long-term complications include cardiovascular disease, stroke, chronic kidney disease, foot ulcers, and damage to the eyes.\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\nDetails about the dataset: The datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)^2)\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutcome: Class variable ( 0 - 1)\n\nNumber of Observation Units: 768\nVariable Number: 9\nResult; The model with the highest score after hyper parameter optimization was LGBM with 0.90 cross validation score.\n\nREPORT\nThe aim of this study was to create classification models for the diabetes data set and to predict whether a person is sick by establishing models and to obtain maximum validation scores in the established models. Here the steps;\nExploratory Data Analysis: The data set's structural data were checked. The types of variables in the dataset were examined. Size information of the dataset was accessed. The 0 values in the data set are missing values. Primarily these 0 values were replaced with NaN values. Descriptive statistics of the data set were examined.\nData Preprocessing section; The NaN values missing observations were filled with the median values of whether each variable was diabetic or not. The outliers were determined by LOF and dropped.\nIn model building; first, the base model was create and the test results were checked. Then categorical variables were edited and new features were added to the model.\nDuring Model Building; Logistic Regression, KNN, CART, Random Forests, GBM, XGBoost, LightGBM like using machine learning models Cross Validation Score were calculated.\nAccording to test results; GBM, XGBoost, LightGBM hyperparameter optimizations optimized to increase Cross Validation value.\nThe model with the highest score after Hyper Parameter optimization was LGBM with 0.90 cross validation score\n\nFiles\n\n\ndiabetes-prediction-with-classification-models.ipynb - Project Notebook\n\n\ndiabetes.csv - Dataset of project\n\n\nLibraries Used\npandas\nnumpy\nseaborn\nmatplotlib\nplotly\nsklearn\nlightgbm\nxgboost\n\nAuthor\n\nOğuz Han Erdoğan - oguzerdo\n\n""], 'url_profile': 'https://github.com/oguzerdo', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '27 contributions\n        in the last year', 'description': ['PIMA INDIANS DIABETES EDA AND PREDICTION:\nINRODUCTION: This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nPROBLEM STATEMENT: Can you build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\nATTRIBUTES INFO:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nOutcome (0 or 1)\n\n'], 'url_profile': 'https://github.com/Pranjalisankhe', 'info_list': ['Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Python', 'Updated Nov 16, 2020', 'Python', 'MIT license', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 19, 2020', '1', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 22, 2020', 'Go', 'Updated Dec 28, 2020', '1', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '382 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/alexriveracruz4', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Berlin', 'stats_list': [['2', '          followers'], ['14', '          following'], ['53']], 'contributions': '132 contributions\n        in the last year', 'description': [""Project : Data Science\nForecasting Diabetes by diagnostic measures\nTo diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements. All patients here are females at least 21 years old of Pima Indian heritage. Here to see the project findings\n\nThe objecttive of this project\nData details\nModel and methods Overview\nDomain (Diabetes types)\nFeature creattion and Data cleaning\nModel selection and Evaluation\nChallenges and Augmentations\n\nMotivation\nLearning basic techniques and approach to solve a classification problem by machine learning.\nFiles' and folders' descriptions\n\n\ndata A data folder containing raw and processed data files\n\n\nimages Images kept in this folder for the project findings\n\n\nproject_findings Report of this project\n\n\nutils\n\ncleaning_utils.py\nmodeling_utils.py\n\n\n\nnotebooks clearning.py and turning_model.py's notebook version. It shows graph and visualisation process.\n\n\nclearning.py Preprocessing datasets\n\n\n\nturning_model.py Evaluating and turning a model\n\n\nturning_resampled_modeling.py  Evaluating and turning a model which was trained by resampled dataset\n\n\nrequirements.txt Software Requirements\n\n\n""], 'url_profile': 'https://github.com/yukaberry', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '207 contributions\n        in the last year', 'description': ['Diabetes Predictor\nSimple Flask application as a final challenge in the IGTI Python Developer Bootcamp. The goal was to determine among three machine learning algorithms the one with the best accuracy to predict whether a person has diabetes and show the result in a GUI.\nTech:\n\nPython\nFlask\nScikit-learn: \nAlgorithms:\n\nKNeighbors\nTree Decision\nMulti-layer Perceptron (MLP)\n\n\nGoogle Colab (for the initial part where I chose among the three models)\n\nFiles:\n\nMachine Learning Model (Multi-layer Perceptron): prediction_model.sav\nGoogle Colab code: choosing_model.ipynb\nEntry data: diabetes_data.csv\n\nSetup:\n\nOpen the terminal and create a folder (I used Power Shell in Windows)\nClone the repository\n\ngit clone https://github.com/rlovatto/python-diabetes-predictor.git\n\n\nInstall virtual env and activate it\n\npython -m pip install --user virtualenv\ncd python-diabetes-predictor\npy -m venv diabetesenv\n.\\diabetesenv\\Scripts\\activate\n\nIf you are in the virtualenv your terminal should looks like this: \n\n\nInstall dependencies\n\npip install Flask\npip install numpy\npip install joblib\npip install scikit-learn\n\n\nRun the project:\n\npython app.py\n\n\n\n'], 'url_profile': 'https://github.com/rlovatto', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Pune', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes Data Analysis\nAll information regarding the features and dataset can be found in this research arcticle:\nImpact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records\nI have a family history of diabetes so I want to know how different features affect diabetes in general.\nFor this kernel, we will be using a diabetes readmission dataset to explore the different frameworks for model explainability\nMachine learning models that can be used in the medical field should be interpretable.\nHumans should know why these models decided on a conclusion.\nThe problem is the more complex an ML model gets the less interpretable it gets.\nIn this kernel we will examine techniques and frameworks in interpreting ML models.\n'], 'url_profile': 'https://github.com/visionnlp', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/manojae98', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['1']], 'contributions': '22 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/krishna-datascience', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Kerala, India', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '89 contributions\n        in the last year', 'description': [""Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://diabetes-prediction-with-flask.herokuapp.com/\n• If you are searching for Code, Algorithms used and Accuracy of the model.. you won't find it here. Click the link mentioned below for the same:\nLink: https://github.com/nandu26m/Diabetes-Prediction-Deployment\n""], 'url_profile': 'https://github.com/nandu26m', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['Diabetes-Predidiction-Project\nClassification Project for General Assembly\n'], 'url_profile': 'https://github.com/nish-c', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'Aurangabad', 'stats_list': [['0', '          followers'], ['0', '          following'], ['15']], 'contributions': '97 contributions\n        in the last year', 'description': ['Diabetes-Prediction-With-Deployment\n'], 'url_profile': 'https://github.com/saurabhaherkar', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '90 contributions\n        in the last year', 'description': ['Diabetes-Prediction-System\nThe data set consists of 9 attributes: number of times pregnant, plasma glucose concentration, diastolic blood pressure, triceps skin folds thickness, serum insulin, body mass index, pedigree type, age,and class.\n\n\n\n\n'], 'url_profile': 'https://github.com/shivusingh3335', 'info_list': ['R', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Dec 2, 2020', 'Jupyter Notebook', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Updated Nov 16, 2020', 'Updated Nov 16, 2020', 'HTML', 'Updated Nov 17, 2020', 'Updated Nov 21, 2020', '1', 'Jupyter Notebook', 'Updated Nov 19, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020']}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '43 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Seth-Lupo', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Exeter, United Kingdom', 'stats_list': [['10', '          followers'], ['8', '          following'], ['7']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shayanmustafa', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Jaboatão dos Guararapes-Pe', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '163 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/silviojoliver', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Hyderabad', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Analysis_on_Diabetes_data\nIn this project of ""Performance Analysis of Supervised Machine Learning Techniques"", various supervised algorithms namely Logistic Regression, KNearestNeighbors, Support Vector Machine, Decision Tree Classifier and Random Forest Classifier are applied on to real-time Diabetes dataset. This dataset has missing values and they are removed by applying both the mean imputation and median imputation techniques. This dataset is then normalized using Standard Scaler and MinMax Scaler. The cleaned and normalized data is further treated with the all 5 specified algorithms and their confusion matrices, accuracy scores, precision values and recall values are generated. These values are compared by generating corresponding bar graphs and the best algorithm, best imputation techniques are determined.\n'], 'url_profile': 'https://github.com/GayathriMadala', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Chennai', 'stats_list': [], 'contributions': '74 contributions\n        in the last year', 'description': ['Pima-Diabetes-Prediction\nCONTEXT\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nCONTENT\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nOBJECTIVE:\nBuilding a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\nColumns:\n\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (\nBMI: Body mass index (Weight (kg)/(Height (m)^2))\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutcome: Class variable (0 or 1)\n\n'], 'url_profile': 'https://github.com/Dharmesh007', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['Diabetes-time-series\nPublicly available dataset corresponding to Protocol H, “A Randomized Trial Comparing Continuous Glucose Monitoring With and Without Routine Blood Glucose Monitoring in Adults with Type 1 Diabetes” from the following website:\nhttps://public.jaeb.org/t1dx/stdy\na.\tGlucose prediction algorithm that predicts glucose levels 30 minutes into the future. Focus on the data in table HDeviceCGM. primarily a CGM-only solution.\nb.\tData in HDeviceWizard to come up with a way to simulate the meal patterns of new “virtual subjects”. Analyze meal timing and size, fit distributions to this data, and use the distributions to create simulated meal data for newly created “virtual subjects” that come from the same population as the study participants.\n'], 'url_profile': 'https://github.com/sovikkn2015', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '38 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MuhammadKhoiriMuzakki', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Mangalore', 'stats_list': [['6', '          followers'], ['5', '          following'], ['13']], 'contributions': '45 contributions\n        in the last year', 'description': ['diabetes-detector-and-prescription-suggestor\n'], 'url_profile': 'https://github.com/PSSubramanya', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'Haridwar', 'stats_list': [['1', '          follower'], ['4', '          following'], ['0']], 'contributions': '17 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/piyush-chandra', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}","{'location': 'odisha', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '100 contributions\n        in the last year', 'description': ['case-study-on-Diabetes-Readmission\nIn USA 1 person in every 10 is suffering from diabetes and is getting admitted in the hospital. So there is a chance that some people may be in an certain need of being readmitted in the hospital due to diabetes and there may be less necessity for some others so Now here I am trying to predict if a patient with diabetes will be readmitted to the hospital within 30 days.\nSo In this project we will check to confirm the readmission of patients in the hospital due to diabetes.\n'], 'url_profile': 'https://github.com/gullayeshwantkumarruler', 'info_list': ['HTML', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Jupyter Notebook', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 22, 2020', 'Python', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', '1', 'Updated Nov 16, 2020', 'Jupyter Notebook', 'Updated Nov 17, 2020', 'Jupyter Notebook', 'Updated Nov 25, 2020']}"
"{'location': 'Ankara,Turkey', 'stats_list': [['2', '          followers'], ['4', '          following'], ['0']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/islgulerr', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'Nagercoil', 'stats_list': [], 'contributions': '230 contributions\n        in the last year', 'description': ['Diabetes-Prediction-HEROKU Deployment\nAPP ADDRESS : https://diabetespredictorapi.herokuapp.com/\n'], 'url_profile': 'https://github.com/anusuyababy', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'India', 'stats_list': [['1', '          follower'], ['4', '          following'], ['2']], 'contributions': '12 contributions\n        in the last year', 'description': ['Probabilistic-Estimate-of-Diabetes-using-Ensemble-Learning\nA basic ML project which used RandomForest Algorithm to Give Probability of Having Diabetes.\n'], 'url_profile': 'https://github.com/akr-1', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '15 contributions\n        in the last year', 'description': [""Lesson Folder\nThis repo contains a master project folder.\nProject Folder\nThe project folder should contain all files and instructions necessary for setup. At a minimum, one set of instructions should be provided. A README template has been provided in the project folder. This template layout should be used to write your README.\nGetting Started\nInstructions for how to get a copy of the project running on your local machine.\nDependencies\nUsing Anaconda consists of the following:\n\nInstall miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nCreate and activate * a new conda environment.\n\n* Each time you wish to work on any exercises, activate your conda environment!\n\n1. Installation\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2. Create and Activate the Environment\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nGetting Started\nFollow the instructions in starter_code/hospital_time_predictor_project.ipynb and be sure to set up your Anaconda environment to get started!\nDependencies\nUsing Anaconda consists of the following:\n\nInstall miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nCreate and activate * a new conda environment.\n\n* Each time you wish to work on any exercises, activate your conda environment!\n\n1. Installation\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2. Create and Activate the Environment\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nGit and version control\nThese instructions also assume you have git installed for working with Github from a terminal window, but if you do not, you can download that first with the command:\nconda install git\n\nIf you'd like to learn more about version control and using git from the command line, take a look at the Udacity free course: Version Control with Git.\nNow, we're ready to create our local environment!\n\nClone the repository, and navigate to the downloaded folder. This may take a minute or two to clone due to the included image data.\n\ngit clone https://github.com/nihithindlekar/Patient-Selection-for-Diabetes-Drug-Testing.git\ncd Patient-Selection-for-Diabetes-Drug-Testing\n\n\n\nCreate (and activate) a new environment, named project-ehr-env with Python 3.7. If prompted to proceed with the install (Proceed [y]/n) type y.\n\nLinux or Mac:\n\nconda create -n project-ehr-env python=3.7\nsource activate project-ehr-env\n\n\nWindows:\n\nconda create --name project-ehr-env python=3.7\nactivate project-ehr-env\n\nAt this point your command line should look something like: (project-ehr-env) <User>:USER_DIR <user>$. The (project-ehr-env) indicates that your environment has been activated, and you can proceed with further package installations.\n\n\nInstall a few required pip packages, which are specified in the requirements text file. Be sure to run the command from the project root directory since the requirements.txt file is there. I also added a line for installing the environment in your notebook in case this is new for you. You should be able to now look for the environment when you select the kernel.\n\n\npip install -r requirements.txt\nipython3 kernel install --name project-ehr-env --user\n\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md\n""], 'url_profile': 'https://github.com/nihithindlekar', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['MACHINE-LEARNING-PROJECT-1-SPAM-DETECTION-\n'], 'url_profile': 'https://github.com/prince097', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '68 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/annkurillose', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['4', '          following'], ['0']], 'contributions': '90 contributions\n        in the last year', 'description': [""Final-Project-Diabetes-Type-II-Risk-Prediction\nThis final project is one of the requirements for graduating from Job Connector Data Science and Machine Learning Purwadhika Start-up and Coding School.\nDiabetes is a chronic disease that occurs either when the pancreas does not produce enough insulin or when the body cannot effectively use the insulin it produces. Insulin is a hormone that regulates blood sugar. Hyperglycaemia, or raised blood sugar, is a common effect of uncontrolled diabetes and over time leads to serious damage to many of the body's systems, especially the nerves and blood vessels. Over time, diabetes can damage the heart, blood vessels, eyes, kidneys, and nerves. Uncontrolled blood sugar it can cause all sorts of very bad things: infections, damaged kidneys, vision loss, amputations, stroke, heart attacks, medical cost, productivity and many more.\nType 2 diabetes results from the body’s ineffective use of insulin. The majority of people with diabetes have type 2 diabetes. This type of diabetes is largely the result of excess body weight and physical inactivity. Symptoms may be similar to those of type 1 diabetes, but are often less marked. As a result, the disease may be diagnosed several years after onset, after complications have already arisen. Prediabetes is a precursor condition in which glucose levels are high, but not yet high enough to diagnose diabetes. Almost 90% adults with prediabetes were unaware of their condition.\nThere are great benefits to employing data analytics in the health care system to provide insights, augment diagnosis, improve outcomes, and reduce costs. In particular, successful implementation of machine learning enhances the work of medical experts and improves the efficiency of the health care system or assurance. Machine learning models can be useful in the identification of patients with diabetes or prediabetes. There are often many factors that contribute to identifying patients who are at risk for these common diseases. We also consider the prediction of prediabetes and undiagnosed diabetes. In this project I will try to predict case 1: no-diabetes and risk diabetes & case 2: no-diabetes and risk prediabetes/ undiagnose diabetes. In general this project divided into 4 parts.\n1. Preprocessing Data\nThis project use data from National Health and Nutrition Examination Surveys 2017 - 2018.\n\nDemographic Data\nExamination Data\nLaboratory Data\nQuestioner Data\n\nSource Data : https://wwwn.cdc.gov/nchs/nhanes/continuousnhanes/default.aspx\nThe National Health and Nutrition Examination Survey (NHANES) is a program designed by the National Center for Health Statistics (NCHS), which is used to assess the health and nutritional status of the U.S. population. The dataset is unique in the aspect that it combines survey interviews with physical examinations and laboratory tests. NHANES provides insightful data that has made important contributions to people in the United States. It gives important clues to the causes of disease based on the distribution of health problems and risk factors in the population.\nThe next step are define target and features, for target use questioner and data laboratory which respondent have diabetes & prediabetes risk. Using the National Health and Nutrition Examination Survey (NHANES) dataset, we search of all available features within the data to develop models for risk diabetes and risk prediabetes detection. After fill missing value in dataset that might be done from remining data, we feature enginnering that may be used for predicting risk diabetes, exploratory data analysis, prepare data for the next stage (case 1 and case 2) and fill missing value head % fat with imputer KNN.\n2. Prediction Risk Diabetes (Case I)\nIn prediction risk diabetes, Data Biochemistry Profile not include in analysis because objective model. The model will be used for screening so that features are selected based on the ease of filling by user. Check percentage missing value features, association and correlation target with features. This process can help the researcher to find features which will be used in modelling. The next stage is modelling with some algorithm classifier and evalute preformance model.\nSeven algorithm machine learning models : logistic regression, support vector machines, random forest, gradient boosting, light gradient boosting, xgboost and adaboost were evaluated on their classification performance. In the following below is the result from recall rate models :\n\nAfter found four of the best algorithms which are logistic regression, support vector machines, gradient boosting, and adaboost, I tuned hyperparameter for them using GridSearchCV. The results from tuning hyperparameter show that support vector machines gives better learning curve, recall, precision and accuracy. The following below are the parameters that I tuned, confusion matrix and features importance from support vector machines :\nConfusion Matrix\n\nFetaures Importance\n\n3. Prediction Risk Prediabetes (Case II)\nPrediction risk prediabetes we use all features. Check percentage missing value features, association and correlation target with features. The process same with case 1, we evalute preformance model and choose best model for predicting prediabetes.\nSeven algorithm machine learning models : logistic regression, support vector machines, random forest, gradient boosting, light gradient boosting, xgboost and adaboost were evaluated on their classification performance. In the following below is the result from recall rate models :\n\nAfter found four of the best algorithms which are logistic regression, support vector machines, random forest, and gradient boosting, I tuned hyperparameter for them using GridSearchCV. The results from tuning hyperparameter show that support vector machines gives better learning curve, recall, precision and accuracy. The following below are the parameters that I tuned, confusion matrix and features importance from support vector machines :\nConfusion Matrix\n\nFetaures Importance\n\n4. Dashboard\nFrom the analysis of existing data and models, a predicting risk diabetes is compiled which consists of 3 parts, namely home, additional test and about Diabetes Risk. In the home section, you can Calculate Risk Diabetes, new data can be analyzed regarding the risk diabetes of user. In additional test, you can Calculate Risk Prediabetes, new data can be analyzed regarding the risk prediabetes of user. In the about section, you can analyze the description risk status by health weight.\nHome Page:\n\nResult prediction risk diabetes:\n\nAdditional test:\n\nResult additional test:\n\nConclusion :\nIt also allows health planners and government agencies to detect and establish policies, plan research, and health promotion programs to improve present health status and prevent future health problems. Type 2 diabetes needs to be taken seriously and treated. Identifying and predicting these diseases in patients is the first step towards stopping their progression. To treat type 2 diabetes and prediabetes lifestyle changes are very effective, and the side effects of eating more healthfully and staying more active are positive ones. Prediabetes is reversible with lifestyle modification and weight loss, offering an avenue to avoid the adverse effects of diabetes. Education and prevention programs increasing public awareness, emphasizing diet and exercise were intensified based on the indication of undiagnosed diabetes, overweight prevalence, hypertension, arthritis and cholesterol figures. Glucose level from biochemistry profile, head % fat, and vigourous intensity sport is also associated with risk prediabetes.\n""], 'url_profile': 'https://github.com/dinanad', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['0', '          following'], ['0']], 'contributions': '106 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SmartPracticeschool', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '30 contributions\n        in the last year', 'description': ['Disease-Progression-Linear-Regression\nLinear regression modeling progression of diabetes as function of various lifestyle/demographic variables\n'], 'url_profile': 'https://github.com/mannasirak', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '25 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/FrankieGirardot', 'info_list': ['Jupyter Notebook', 'Updated Nov 17, 2020', 'HTML', 'Updated Nov 21, 2020', 'Updated Nov 22, 2020', 'Jupyter Notebook', 'Updated Nov 18, 2020', 'Updated Nov 21, 2020', 'HTML', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Nov 24, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Dec 23, 2020', 'Python', 'Updated Dec 6, 2020']}"
"{'location': 'Naples', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '126 contributions\n        in the last year', 'description': [""Implementation-of-Artificial-Pancreas-for-Patients-of-1-Diabetes-Using-Artificial-Neural-Network-\nDeveloped by: A. Santopaolo (2019).\nSupervisor: prof. D. Iacoviello.\nAchievement: Optimal Control exam.\n Abstract \nArtificial Pancreas was implemented using an ANN that maintains the glucose levels of patients with type 1 diabetes in an optimal range. The neural network takes as input many parameters of the patient's Glucose-Insulin system and calculates the controller output (insulin flow rate) based only on the current values of the Glucose-Insulin system. In other words, the neural network does not take into account the history of the parameters of the patients. First an accurate representation of the Glucose - Insulin system\nof human body is modelled. The mathematical used here is the Hovorka model. Hovorka utilises a compartment model which represents the glucoregulatory system and includes submodels representing absorption of subcutaneously administered insulin and gut absorption. To generate the data for training our neural network, an reference controller\nwas used. The reference controller employed was Model Predictive Control.\nThe controller samples the glucose system parameters every 15 minutes and gives the insulin flow rate as output. A custom cost function is used that not only minimises the controller effort but also the rate of change to provide a smoother controller output. Moving target trajectory facilitates slow, controlled normalization of elevated glucose levels and faster normalization of low glucose values. Data is then collected from this control scheme for different initial values of glucose concentrations and different meal times and quantities so that the ANN controller can be effective under diverse conditions.\nThe neural network trained uses multilayer feed-forward back-propagation that relates the output to the inputs by hyperbolic tangent sigmoid transfer function and optimized by Levenberg-Marquardt, the training of the ANN was successfull with R is approaching to 1 (R is a measure of the ANN performance. 1 is best possible result). The generated ANN was then used as a controller and the Insulin - Glucose system was simulated, the ANN was successfully able to maintain normoglycemia.\nIn conclusion, ANN is viable for use as an Artificial Pancreas. The model can manage in a very good manner the highly non linearity of glucoregolatory system.\nImplementation Details\nThe code has been written in Matlab. The code is available, and can be opened with Matlab software 2018b.\n""], 'url_profile': 'https://github.com/AlexSantopaolo', 'info_list': ['MATLAB', 'Updated Nov 20, 2020', 'Python', 'Updated Feb 16, 2021', 'JavaScript', 'Updated Dec 11, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '29 contributions\n        in the last year', 'description': [""\n\tDiabetic Retinopathy Classification Using DNN \n\nPoster: Diabetic Retinopathy Classification Using DNN\nFor Running the  code directly using \n\nInput Pipeline- (Training set Images- 413, Test set Images-103)\n\nImage Resize (to 256*256)\nImage crop (Box crop)\nImage Normalization\nClass balancing\n\n\nModel Architecture\nTraining Routine\nModel CallBacks:\n\nCheck point Callback - For saving model at desired interval(epoch frequency)\nTensorboard Callback - For logging training stats,Profiling\nCSV Logger Callback - To save training logs in a csv file\n\n\nTraining from a check point\n\nInitial epoch here is the point at which the training was interrupted\n\n\nEvaluation\n\nConfusion Matrix\nClassification Report\n\n\nData Augmentation\n\nVertical Flip\nHorizontal Flip\nBox Crop\nRotate\n\n\nDeep Visualization\n\nGradCAM\n\n\nHyper Parameter Tuning\n\nGrid Search (Epochs, Number of dense neurons, stride, Learning rate)\n\n\n\nOutputs from several stages of project\n\nAfter Image processing and data augmentation:\n\n\n\n\n\nProcessed and Augmented Images\n\n\n\nModel Architecture\n\nModel based on ResNET50v2 (Transfer \t\t\t\tlearning).\nModel based on  Blocks of Conv+BatchNorm+Maxpool (Only 453K parameters)\n\n\n\n\n\nCustom Architecture based on blocks of Conv+BatchNorm+Maxpool (ii)\n\n\n\nTraining Results\n\nModel based on  Blocks of Conv+BatchNorm+Maxpool\n\n\n\n\n\n\n\nAccuracy plot for Custom model (on left) and ResNET50v2 based model (on right)  [epochs vs accuracy]  \n\n\n\nResults and Evaluation\n\n\nTest accuracy - 77.8% (Custom Model), 81.55% (Finetuned on ResNET50v2)\n\n\n\n\n\n\nConfusion Matrix\n\n\n\n\n\nprecision\nrecall\nf1-score\nSupport\n\n\n\n\nNRDR\n0.73\n0.82\n0.77\n39\n\n\nRDR\n0.88\n0.81\n0.85\n64\n\n\n\n\n\n\n\n\n\naccuracy\n0.82\n0.82\n0.82\n103\n\n\nmacro avg\n0.80\n0.82\n0.81\n103\n\n\nweighted avg\n0.82\n0.82\n0.82\n103\n\n\n\n\nClassification Report\n\n\n\nDeep Visualization\n\n\n\n\nOriginal Image, GradCAM output, Overlay\n\n\n\nHyperparameter optimization\n\n\n\n\nOriginal Image, GradCAM output, Overlay\n\n\n\nInstructions to run the script:\nBefore running the script Install the requirments from requirements.txt using pip install -r requirements.txt\n\n\nMake the following changes in main.py based on the Mode(training mode, hyper parameter tuning mode, finetuning mode, evaluation mode) you want you the script in\n\n\nTo Train the model, change the train FLAG in main.py to True\nflags.DEFINE_boolean('train', True, 'Specify whether to train or evaluate a model.')\n\nTo log the data , specify path to tensorboard callback, model chekpoint call back, CSVlogger call back in constants.py\ndir_all_logs = 'log_dir'\ndir_fit = os.path.join(dir_all_logs, 'fit') \ndir_cpts = os.path.join(dir_all_logs, 'cpts') \ndir_csv = os.path.join(dir_all_logs, 'csv_log') \n\n\n\nFor performing hyperparamter Tuning\nflags.DEFINE_boolean('hparam_tune', True, 'Specify if its hyper param tuning.')\n\n\nFor Training the model based on ResNET50v2\nflags.DEFINE_boolean('Transfer_learning', True, 'to use transfer learning based model, train flag must be set to true to fine tune pretrained model')\n\n\nFor Evaluating the pretrained model\n\nChange the path of the pretrained model here in main.py to desired path.\n\nflags.DEFINE_boolean('train', False, 'Specify whether to train or evaluate a model.')\n\n\n\n\n""], 'url_profile': 'https://github.com/sgaruda-sudo', 'info_list': ['MATLAB', 'Updated Nov 20, 2020', 'Python', 'Updated Feb 16, 2021', 'JavaScript', 'Updated Dec 11, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2020']}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '55 contributions\n        in the last year', 'description': ['MediTech- An Improvised Healthcare platform\n\nWeb-based Meditech is an initiatively providing a platform to support the Electronic based-health facilities and telemedicine system which simplify and\nhelp to co-ordinate the effective home health care function of Hospitals, Clinics, or any Rehab centers. Meditech healthcare is designed as a platform to serve the patients the\nbest e-healthcare available. In an attempt to provide smart healthcare MediTech has functionalities such as appointment booking, E_chat, predicting risk of diabetes, BMI calculator which gives value to e-health and telemedicine.\n\nEnviornment setup:\n\n\nDownload Xammp from this link :  https://www.apachefriends.org/download.html\nAfter downloading you need to start\n-mysql server\n-apache server\n\n\nYou can use database on : http://localhost/phpmyadmin\n\n\nTo access meditech functionalities you need to import .sql into phpmyadmin database meditech.sql\n\n\nAuthor\n\nAshwini Upasani\nPartho Ghosal\n\nAcknowledgements\nThis project was developed under Ali abbas for ELG 6131 : Advance topic in Biomedical.\n'], 'url_profile': 'https://github.com/ashwini1025', 'info_list': ['MATLAB', 'Updated Nov 20, 2020', 'Python', 'Updated Feb 16, 2021', 'JavaScript', 'Updated Dec 11, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '223 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/IsabelCHM', 'info_list': ['MATLAB', 'Updated Nov 20, 2020', 'Python', 'Updated Feb 16, 2021', 'JavaScript', 'Updated Dec 11, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2020']}",,,,,,
