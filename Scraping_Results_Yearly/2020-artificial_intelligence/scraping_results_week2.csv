"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Artificial Intelligence with Python Cookbook\n\nThis is the code repository for Artificial Intelligence with Python Cookbook, published by Packt.\nPractical recipes for next-generation deep learning and neural networks using TensorFlow and PyTorch\nWhat is this book about?\nWith artificial intelligence (AI) systems, we can develop goal-driven agents to automate problem-solving. This involves predicting and classifying the available data and training agents to execute tasks successfully. This book will help you to solve complex AI problems using practical recipes.\nThis book covers the following exciting features:\n\nImplement data preprocessing steps and optimize model hyperparameters\nWork with large amounts of data using distributed and parallel computing techniques\nGet to grips with representational learning from images using InfoGAN\nDelve into deep probabilistic modeling with a Bayesian network\nCreate your own artwork using adversarial neural networks\n\nIf you feel this book is for you, get your copy today!\n\nInstructions and Navigations\nAll of the code is organized into folders. For example, Chapter02.\nThe code will look like the following:\nfrom sklearn.datasets import fetch_openml\ndata = fetch_openml(data_id=42165, as_frame=True)\n\nFollowing is what you need for this book:\nThis AI book is for Python developers, data scientists, machine learning developers, and deep learning practitioners who want to learn how to build artificial intelligence solutions with easy-to-follow recipes. If you are looking for state-of-the-art solutions to perform different machine learning tasks in various use cases, this book is for you. Basic working knowledge of Python programming language and machine learning concepts will help you to work with the code.\nWith the following software and hardware list you can run all code files present in the book (Chapter 1-11).\nSoftware and Hardware List\n\n\n\nChapter\nSoftware required\nOS required\n\n\n\n\n1\nPython 3.6 or later\nWindows, Mac OS X, and Linux (Any)\n\n\n2\nTensorFlow 2.0 or later\nWindows, Mac OS X, and Linux (Any)\n\n\n3\nPyTorch 1.6 or later\nWindows, Mac OS X, and Linux (Any)\n\n\n4\nPandas 1.0 or later\nWindows, Mac OS X, and Linux (Any)\n\n\n5\nScikit-learn 0.22.0 or later\nWindows, Mac OS X, and Linux (Any)\n\n\n\nWe also provide a PDF file that has color images of the screenshots/diagrams used in this book. Click here to download it.\nRelated products\n\n\nHands-On Artificial Intelligence for Banking [Packt] [Amazon]\n\n\nArtificial Intelligence with Python - Second Edition [Packt] [Amazon]\n\n\nGet to Know the Author\nBen Auffarth\nis a full-stack data scientist with more than 15 years of work experience. With a background and Ph.D. in computational and cognitive neuroscience, he has designed and conducted wet lab experiments on cell cultures, analyzed experiments with terabytes of data, run brain models on IBM supercomputers with up to 64k cores, built production systems processing hundreds of thousands of transactions per day, and trained neural networks on millions of text documents. He resides in West London with his family, where you might find him in a playground with his young son. He co-founded and is the former president of Data Science Speakers, London.\nSuggestions and Feedback\nClick here if you have any feedback or suggestions.\n'], 'url_profile': 'https://github.com/PacktPublishing', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'India', 'stats_list': [], 'contributions': '8,875 contributions\n        in the last year', 'description': ['\n#100DaysofMLCode\nTable of Contents\n1. Data Pre-processing\n\nImporting Libraries\nImporting Data sets\nHandling the missing data values\nEncoding categorical data\nSplit Data into Train data and Test data\nFeature Scaling\n\n2. Regression\n\nSimple Linear Regression\nMulti Linear Regression\nPolynomial Regression\nSupport Vector Regression\nDecision Tree Regression\nRandom Forest Regression\n\n3. Classification\n\nLogistic Regression\nK Nearest Neighbors Classification\nSupport Vector Machine\nKernel SVM\nNaive Bayes\nDecision Tree Classification\nRandom Forest Classification\n\n4. Clustering\n\nK-Means Clustering\nHierarchical Clustering\n\n5. Association Rule\n\nApriori\nEclat\n\n6. Reinforcement Learning\n\nUpper Confidence Bounds\nThompson Sampling\n\n7. Natural Language Processing \n\nAWS Comprehend\n\n8. Deep Learning\n\nArtificial Neural Networks (ANN)\n2. Convolutional Neural Networks (CNN)\n\n9. Dimensionality Reduction\n\nPrincipal Component Analysis\nLinear Discriminant Analysis\nKernel PCA\n\n10. Model Selection\n\nGrid Search\nK-fold Cross Validation\nXGBoost\n\n11. Data Visualization\n\nMatplotlib library in Python\nTableau\nPower BI\nGrafana\n\nLog of my Day-to-Day Activities\nTrack my daily activities here\nHow to Contribute\nThis is an open project and contribution in all forms are welcomed.\nPlease follow these Contribution Guidelines\nCode of Conduct\nAdhere to the GitHub specified community code.\nLicense\nCheck the official MIT License here.\n'], 'url_profile': 'https://github.com/NishkarshRaj', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '81 contributions\n        in the last year', 'description': ['Welcome to GitHub Pages\nYou can use the editor on GitHub to maintain and preview the content for your website in Markdown files.\nWhenever you commit to this repository, GitHub Pages will run Jekyll to rebuild the pages in your site, from the content in your Markdown files.\nMarkdown\nMarkdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for\nSyntax highlighted code block\n\n# Header 1\n## Header 2\n### Header 3\n\n- Bulleted\n- List\n\n1. Numbered\n2. List\n\n**Bold** and _Italic_ and `Code` text\n\n[Link](url) and ![Image](src)\nFor more details see GitHub Flavored Markdown.\nJekyll Themes\nYour Pages site will use the layout and styles from the Jekyll theme you have selected in your repository settings. The name of this theme is saved in the Jekyll _config.yml configuration file.\nSupport or Contact\nHaving trouble with Pages? Check out our documentation or contact support and we’ll help you sort it out.\n'], 'url_profile': 'https://github.com/uclaml', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'Bangalore, India', 'stats_list': [], 'contributions': '11,676 contributions\n        in the last year', 'description': ['\nGenetic Algorithms and Genetic Programming in Computational Finance\nGenetic Data Analysis II: Methods for Discrete Population Genetic Data \nGenetic Programming: Theory and Practice II\nPattern Recognition Using Genetic Programming for Classification of Diabetes and Modulation Data\nFoundations of Genetic Programming\nGenetic Programming: An Introduction\n Genetic Programming: Theory and Practice XIV\nGenetic Programming IV\nGenetic Algorithms + DataStructures = Evolution Programs \nIntelligent Optimisation Techniques: Genetic Algorithms, Tabu Search, Simulated Annealing and Neural Networks\nAn Introduction to Machine Learning\nGenetic Programming: Theory and Practice XV\nApplied Genetic Programming and Machine Learning\n Genetic Programming: Theory and Practice VII\nA Field Guide to Genetic Programming\nBehavioral Program Synthesis with Genetic Programming\nLinear Genetic Programming\nData Mining Using Grammar Based Genetic Programming and Applications\n Automatic Program Repair Using Genetic Programming\n Genetic Programming in Mathematica\nGenetic Programming: Theory and Practice VIII\n Genetic Programming: Theory and Practice X\nGenetic Programming: Theory and Practice XIII\nLearning Basic Genetics with Interactive Computer Programs\nEvolving Artificial Neural Networks using Cartesian Genetic Programming\nCartesian Genetic Programming\n Genetic Programming: Theory and Practice XI\n Genetic and Evolutionary Computation – GECCO 2004\n\n'], 'url_profile': 'https://github.com/manjunath5496', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'Sydney', 'stats_list': [], 'contributions': '43 contributions\n        in the last year', 'description': ['Artificial Intelligence COMP3411/COMP9814 20T0\nCourse Title\tArtificial Intelligence\nConvenor\tTatjana Zrimec\nLecturer\tTatjana Zrimec\n'], 'url_profile': 'https://github.com/brmuch', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'Bangalore, India', 'stats_list': [], 'contributions': '11,676 contributions\n        in the last year', 'description': [""Python: \n\nMachine Learning in Python\nPython Programming: An Introduction to Computer Science\nHigh Performance Python\n Effective Python : 59 specific ways to write better Python\nAutomate the Boring Stuff with Python: Practical Programming for Total Beginners\nBlack Hat Python: Python Programming for Hackers and Pentesters\nCore Python Programming\nData Science from Scratch \nData Structures and Algorithms Using Python\nDeep Learning with Python\nDive into Python\nFluent Python\nHands-On Machine Learning with Scikit-Learn and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems\nHead First Python\nHow to Think Like a Computer Scientist: Learning with Python 3 Documentation\nInvent Your Own Computer Games with Python\nLearning Python\nLearn Python the Hard Way: A Very Simple Introduction to the Terrifyingly Beautiful World of Computers and Code \nNatural Language Processing with Python\nPython Crash Course: A Hands-On, Project-Based Introduction to Programming\n Programming Python \nPython Essential Reference \nPython for Kids: A Playful Introduction to Programming\nPython in a Nutshell\nPython Pocket Reference\nPython Cookbook\nPython Tricks: The Book\n Python Data Science Handbook\nPython for Data Analysis\nPython for Everybody: Exploring Data Using Python 3\nThe Hitchhiker's Guide to Python: Best Practices for Development\nThe Quick Python Book\nThink Python: How to Think Like a Computer Scientist\n Text Processing in Python\nViolent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers\nLearn Python in One Day and Learn It Well\n Web Scraping with Python\nIntroducing Python: Modern Computing in Simple Packages\nLean Python: Learn Just Enough Python to Build Useful Tools\nHadoop with Python\nTango with Django: A beginners guide to Python/Django\nProgramming Computer Vision with Python\n\n\nLisp:\n\nBuild Your Own Lisp\nA Practical Introduction to Fuzzy Logic using LISP\nAI Algorithms, Data Structures, and Idioms in Prolog, Lisp, and Java\nClojure Programming: Practical Lisp for the Java World\nCoders at Work: Reflections on the Craft of Programming\nCommon Lisp Recipes: A Problem-Solution Approach\n Common LISP: A Gentle Introduction to Symbolic Computation\nCommon Lisp the Language\nInterpreting LISP: Programming and Data Structures \nLet Over Lambda — 50 Years of Lisp\nLisp in Small Pieces\nLearn Lisp\nOn Lisp: Advanced Techniques for Common Lisp \nParadigms of AI Programming: Case Studies in Common Lisp\nPractical Common Lisp\nSuccessful Lisp: How to Understand and Use Common Lisp\nThe Clean Coder: A Code of Conduct for Professional Programmers\nThe Visual LISP Developers Bible\nLand of Lisp\nLisp Programming: Lecture Notes \nA Crash Course in LISP\nLISP-STAT: An Object-Oriented Environment for Statistical Computing and Dynamic Graphics\nLoving Common Lisp, or the Savvy Programmer's Secret Weapon\nANSI Common Lisp\nComputer Algebra with LISP and REDUCE: An Introduction to Computer-aided Pure Mathematics\nGetting Started in *Lisp\nHandbook of LISP Functions\nThe Evolution of Lisp\nAdventurer's Guide to Interleaf Lisp\nThe Art of Lisp Programming\nCommon LISP: An Interactive Approach\nSketchy LISP: An Introduction to Functional Programming in Scheme\nThe Programming Language LISP: Its Operation and Applications\n\n\nJava: \n\nHead First Java \nCore Java, Volume II — Advanced Features\nFundamentals of the Java Programming Language, Java SE 6\nFundamentals of Computer Science Using Java\nJava 9 Programming By Example \nJava for Absolute Beginners\nJAVA: A Beginner's Guide to Learning the Basics of Java Programming\nJAVA: Easy Java Programming for Beginners, Your Step-\nBy-Step Guide to Learning Java Programming \nJava For Beginners: A Simple Start To Java\nJava All-in-One For Dummies\nJava Programming Language Handbook \nJava: The Complete Reference\nLearning Java Functional Programming\nModern Java in Action\nThe Well-Grounded Java Developer\nJava in a Nutshell\nJava Generics and Collections\nSpring in Action\nThink Java: How to Think Like a Computer Scientist\nThinking in Java\nSpring Microservices in Action\nThe Elements of Java Style\nBeginning Programming with Java For Dummies\nEffective Java\nJava For Dummies\nJava Network Programming\nJava Puzzlers: Traps, Pitfalls, and Corner Cases\nJava SE 8 for the Really Impatient\nJava Threads\nThe Java Virtual Machine Specification (Java SE 8 Edition)\nMurach's Beginning Java 2\nJava Performance: The Definitive Guide\nConcurrent Programming in Java: Design Principles and Patterns\nJava Concurrency In Practice \nHigh-Performance Java Persistence\nJava: How To Program\nTeach Yourself JAVA in 21 Days\nJava 8 Lambdas \n\n\nProlog: \n\nAgent-Oriented Programming: From Prolog to Guarded Definite Clauses\nAn Introduction to Language Processing with Perl and Prolog\nLanguage Processing with Perl and Prolog: Theories, Implementation, and Application\nLearn Prolog Now!\nLogic Programming with Prolog\nNatural Language Processing for Prolog Programmers\n Problem Solving with Prolog\nProgramming in Prolog\nProlog Programming in Depth \nProlog Techniques\nProlog Versus You: An Introduction to Logic Programming\nProlog for Programmers\nThe Art of Prolog: Advanced Programming Techniques\nThinking as Computation: A First Course\nProlog by Example: How to Learn, Teach and Use It\nThe Practice of Prolog\nProlog Programming: A First Course\nProlog Basics\n6.1 Prolog++ Reference\nProlog Experiments in Discrete Mathematics, Logic, and Computability\nProlog and Natural-Language Analysis\nFrom Logic Programming to Prolog\nAdventure in Prolog\nPROLOG for Computer Science\nProlog Based Reasoning\nA High Performance Architecture for Prolog\nMicro-Prolog: Programming in Logic\n\n\nR Programming: \n\nEfficient R Programming: A Practical Guide to Smarter Programming\n Functional Programming in R: Advanced Statistical Programming for Data Science, Analysis and Finance\nLearn R for Applied Statistics: With Data Visualizations, Regressions, and Statistics\nMachine Learning with R\nHands-On Programming with R\nR For Dummies\n R in Action: Data analysis and graphics with R\nR Programming for Bioinformatics\nBeyond Spreadsheets with R \nR Programming Tutorial\nR Programming for Data Science\nStatistical Analysis with R\nThe Art of R Programming: A Tour of Statistical Software Design\nThe Book of R: A First Course in Programming and Statistics\nR Graphics\nLearning R Programming\nA Course in Statistics with R\nR Programming By Example\nMachine Learning with R Cookbook\nUsing R for Introductory Statistics\nSams Teach Yourself R in 24 Hours\nMetaprogramming in R: Advanced Statistical Programming\nfor Data Science, Analysis and Finance\nModeling and solving linear programming with R\nBusiness Analytics Using R - A Practical Approach\nData Manipulation with R\nIntroduction to Scientific Programming and Simulation Using R\nQuantitative Trading with R\nA Step-by-Step R Tutorial\nMastering Parallel Programming with R\nR for Stata Users\nR Markdown: The Definitive Guide\nR Programming and Its Applications in Financial Mathematics\nR Programming Succinctly\nSoftware for Data Analysis: Programming with R\nBeginning R: The Statistical Programming Language\nR for Data Science: Import, Tidy, Transform, Visualize, and Model Data\n\n""], 'url_profile': 'https://github.com/manjunath5496', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'Florianópolis - Santa Catarina - Brasil', 'stats_list': [], 'contributions': '192 contributions\n        in the last year', 'description': ['\n\n\n\n\n\nArtificial Intelligence Methods and Techniques\nThis repository is under development and constantly being updated. Containing examples in Python of Artificial Intelligence applications, the Jupyter Nooteboks available aims to help mainly those who are starting in the AI area, with examples and links to reference materials.\nIf this repository helped you, give your star :)\nTable of Contents\n\nOverview\nHow To Use\nContributions\nLicense\n\nOverview\nThe examples available in this repository cover several processing steps, from pre-processing, processing and post-processing. The methods already available are described below.\nPre-Processing\n\n\n\nProcessing\n\nK-Means Clustering\nK-Nearest Neighbors\nSupport Vector Machine\n\nPos-Processing\n\n\n\nHow To Use\nYou can run the methods in two ways:\nRunning Locally\nClone this repository to your machine and add it to your jupyter notebook path:\ngit clone https://github.com/jefmenegazzo/Artificial-Intelligence-Methods-and-Techniques.git\nRunning Online\nYou can run online on Google Colab or Binder.\nContributions\nThe repository is open to contributions in documentation, error fixes, improvements and addition of new methods. Currently, the theoretical explanation of the methods is referenced through links in the Jupyter Notebook. However, contributions are welcome to add the theoretical explanation of the AI methods and techniques together with the source-code in Jupyter Notebook.\nLicense\nThe MIT License (MIT). Please see License File for more information.\n'], 'url_profile': 'https://github.com/jefmenegazzo', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Artificial Intelligence USC CSI 561\n\nHW1: Find placement for officers on a grid world to collect maximum activity points. Simulated annealing search algorithm was used to find placements.\nHW2: Find next applicant to be chosen by an organization to maximize space efficiency. Min-Max algorithm was used to search in the tree generated by game playing between two competing organizations.\nHW3: Find optimal moves for a car in grid world given obstacles and rewards. Value iteration was used for this homework.\n\n'], 'url_profile': 'https://github.com/SapandeepDhaliwal', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['AI programming assignment topics include\n\nstate space search\npropositional logic\nDavis-Putnam algorithm\ngame simulation machine learning\nsupervised machine learning\nNaive Bayes Classifier\ngradient descent\nnatural language processing\nexpression parse trees\n\n'], 'url_profile': 'https://github.com/jamezlim', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}","{'location': 'Gandhinagar', 'stats_list': [], 'contributions': '409 contributions\n        in the last year', 'description': ['Artificial intelligence\n'], 'url_profile': 'https://github.com/Vatsalparsaniya', 'info_list': ['32', 'Jupyter Notebook', 'MIT license', 'Updated Jan 21, 2021', '144', 'Jupyter Notebook', 'MIT license', 'Updated Mar 3, 2021', '2', 'Apache-2.0 license', 'Updated Mar 12, 2020', '4', 'Updated Jan 7, 2020', '5', 'HTML', 'Updated Mar 1, 2020', '4', 'Updated Jan 9, 2020', '2', 'Jupyter Notebook', 'MIT license', 'Updated Mar 7, 2020', 'Python', 'Updated Jan 6, 2020', 'Java', 'Updated Jan 13, 2020', 'HTML', 'Updated Jun 20, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '21 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pandilwar605', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'California / Virginia ', 'stats_list': [], 'contributions': '83 contributions\n        in the last year', 'description': ['A.I.\nMultiple Linear Regression Lab:\nhttps://github.com/NatalieHaronitou/A.I.-/commit/837b5c31e118d7d76052b59b4546938d3387f93b\n\n'], 'url_profile': 'https://github.com/NataliaHaronitou', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'seoul, Korea', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['파이썬, AI(머신러닝, 딥러닝), opencv 프로젝트 및 코드\n'], 'url_profile': 'https://github.com/KimChungHee', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '141 contributions\n        in the last year', 'description': ['artificial-intelligence\nThis are some of the projects I worked on in my AI class\n'], 'url_profile': 'https://github.com/vh62', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Pullman, WA, USA', 'stats_list': [], 'contributions': '75 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ReetBarik', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/aitorelvira', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Ottawa, ON, CA', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mmheydari97', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Hyderabad', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Artificial-Intelligence\nArtificial-Intelligence\n'], 'url_profile': 'https://github.com/MohammedHassaanAli', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/elif-caliskan', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Munich, Germany', 'stats_list': [], 'contributions': '93 contributions\n        in the last year', 'description': ['Artificial_Intelligence\nThis project consists of topics related to:\n\nsearch problem\nconstraint satisfaction problem\n\n'], 'url_profile': 'https://github.com/sabean', 'info_list': ['Roff', 'Updated Jul 6, 2020', 'Jupyter Notebook', 'Updated Aug 26, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Python', 'Updated Jan 10, 2020', 'Python', 'Updated Jan 7, 2020', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 13, 2020', 'Updated Jan 11, 2020', 'Java', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 10, 2020']}"
"{'location': 'Hyderabad', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Artificial-Intelligence\nArtificial-Intelligence\n'], 'url_profile': 'https://github.com/MohammedHassaanAli', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rajesh-a-borade', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'Charlotte, NC', 'stats_list': [], 'contributions': '29 contributions\n        in the last year', 'description': ['Artificial-Intelligence\n'], 'url_profile': 'https://github.com/ZTatman', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'China', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['AI\nArtificial Intelligence\n\n'], 'url_profile': 'https://github.com/DiegoJohnson', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'Oregon', 'stats_list': [], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/NicholasFay-CIS', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'Finland', 'stats_list': [], 'contributions': '60 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rabia174', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'India', 'stats_list': [], 'contributions': '36 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/akkirajput', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'Jyväskylä', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MikkoAro', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'San Francisco, CA', 'stats_list': [], 'contributions': '29 contributions\n        in the last year', 'description': ['Artificial Intelligence Fundamentals\nTask\nUnderstand the fundamentals of Artificial Intelligence.\nOutput\nThe repository contains work based on the topics below.\nCriteria\n\nIntroduction to AI\n\n\nSearch\n\n\nHeuristic and Adversarial Search\n\n\nConstant Satisfaction\n\n\nLogic\n\n\nPlanning\n\n\nProbabilistic Reasoning\n\n\nLearning\n\n\nNatural Language Processing\n\n\nPerception ? Advanced Topics\n\nTech Stack\n\nJava\n\n\nPython\n\n'], 'url_profile': 'https://github.com/MLBott', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '29 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Bruddock', 'info_list': ['Updated Jan 11, 2020', 'Python', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Apr 25, 2020', '1', 'Jupyter Notebook', 'Updated Nov 28, 2020', 'Python', 'Updated Feb 16, 2020', 'HTML', 'Updated Aug 28, 2020', 'C++', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Sep 21, 2020', 'Updated Feb 1, 2020', 'Updated Jan 8, 2020']}"
"{'location': 'Istanbul', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mzn', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'Athens, Greece', 'stats_list': [], 'contributions': '22 contributions\n        in the last year', 'description': ['Facebook NewsBot Instructions\nRequirements \n\nPycharm \nPython (only 3.7.x versions) \n\nThen follow this tutorial \nInstall this Packages : \n\npip3 install Flask  \npip3 install pymessenger  \npip3 install nltk \npip3 install numpy  \npip3 install tflearn  \npip3 install tensorflow==1.15.0 \n\n'], 'url_profile': 'https://github.com/tzortzis-kondylis', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '182 contributions\n        in the last year', 'description': ['Artificial Intelligence\nArtificial Intelligence Fundamental class at FTU\n'], 'url_profile': 'https://github.com/langsari', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'Chicago, IL', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Sheery96', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/GryffDerrick', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '28 contributions\n        in the last year', 'description': ['CS-6300-Artificial-Intelligence\nCS 6300 A.I. 2018 at University of Utah\nProject to create a working AI for Pacman\n'], 'url_profile': 'https://github.com/Justin-Ngo', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/cohenyu', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['PacMan-Artificial-Intelligence\n'], 'url_profile': 'https://github.com/K-V-S-Rachana', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '49 contributions\n        in the last year', 'description': ['NTUA_Artificial_Intelligence\n""Artificial Intelligence"" course - ECE NTUA\n\nFind shortest path in a NxN grid with obstacles\nRecommendation System\n\n'], 'url_profile': 'https://github.com/maryka2', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}","{'location': 'Toronto, ON, Canada', 'stats_list': [], 'contributions': '162 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/KojimaMcMaple', 'info_list': ['Updated Jan 9, 2020', 'Python', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 27, 2021', 'Updated Jan 6, 2020', 'Updated Jan 10, 2020', 'GPL-3.0 license', 'Updated Jan 8, 2020', 'Python', 'Updated Apr 5, 2020', 'Updated Jan 11, 2020', '1', 'Jupyter Notebook', 'Updated Jan 10, 2020', 'C', 'Updated Mar 10, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '82 contributions\n        in the last year', 'description': [""Artificial-Intelligence-That-Can-See\nKeras, OpenAI Gym, DQNAgent, Deep reinforcement learning\nprerequisite: Python 3\ndeprecation errors are gym's fault\ninstersection of two lines\nhttps://stackoverflow.com/questions/22417842/how-do-i-find-the-intersection-of-two-line-segments\ninterseciton of line and circle\nhttps://stackoverflow.com/questions/30844482/what-is-most-efficient-way-to-find-the-intersection-of-a-line-and-a-circle-in-py\nHow to make a polygon\nhttps://shapely.readthedocs.io/en/stable/manual.html#polygons\n""], 'url_profile': 'https://github.com/McCannDahl', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'Santa Clara, California', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['Artificial Intelligence for Robotics - Udacity\nProgramming all the major systems of a robotic car. The Topics include Localization, Planning, Search, Track and Control.\nThis Repository includes my solutions to the quizzes and projects in the Udacity Artificial Intelligence for Robotics Course.\n'], 'url_profile': 'https://github.com/Gopsee', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'Pakistan', 'stats_list': [], 'contributions': '21 contributions\n        in the last year', 'description': ['Python-Basics-PIAIC-\nThis is the example of python basics learned in PIAIC\n'], 'url_profile': 'https://github.com/Talha089', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['Torcs-Python-Client-\nThis is python client of torcs bot\nRead torcs.pdf file and download torcs server and run this client and modify if you want to enhance its performance\n'], 'url_profile': 'https://github.com/Mian-Zaid', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MichalPiechowiak', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'Greater Minneapolis St Paul Area', 'stats_list': [], 'contributions': '93 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MorrisOmbiro', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Artificial-intelligence-project-using-CNN\n'], 'url_profile': 'https://github.com/thotanaveen044', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '163 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/jwmmy', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '62 contributions\n        in the last year', 'description': ['Problem sets of Artificial Intelligence course\n'], 'url_profile': 'https://github.com/blues-lead', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': ['AIBusiness\nPart 1 - Optimizing Business Processes\nCase Study: Optimizing the Flows in an E-Commerce Warehouse\nAI Solution: Q-Learning\nPart 2 - Minimizing Costs\nCase Study: Minimizing the Costs in Energy Consumption of a Data Center\nAI Solution: Deep Q-Learning\nPart 3 - Maximizing Revenues\nCase Study: Maximizing Revenue of an Online Retail Business\nAI Solution: Thompson Sampling\n'], 'url_profile': 'https://github.com/sebastianflaen', 'info_list': ['Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated May 3, 2020', 'Python', 'Updated Jan 12, 2020', 'C#', 'Updated Jan 10, 2020', 'Updated Jan 6, 2020', 'MATLAB', 'Updated Jan 8, 2020', 'Jupyter Notebook', 'Updated Jan 15, 2020', 'Jupyter Notebook', 'Updated Feb 8, 2020', 'Python', 'Updated Jan 8, 2020']}"
"{'location': 'Orlando, FL', 'stats_list': [], 'contributions': '70 contributions\n        in the last year', 'description': ['CAP4630-Wocjan\nArtificial Intelligence class content\n'], 'url_profile': 'https://github.com/erick1439', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': ['AIBusiness\nPart 1 - Optimizing Business Processes\nCase Study: Optimizing the Flows in an E-Commerce Warehouse\nAI Solution: Q-Learning\nPart 2 - Minimizing Costs\nCase Study: Minimizing the Costs in Energy Consumption of a Data Center\nAI Solution: Deep Q-Learning\nPart 3 - Maximizing Revenues\nCase Study: Maximizing Revenue of an Online Retail Business\nAI Solution: Thompson Sampling\n'], 'url_profile': 'https://github.com/sebastianflaen', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '64 contributions\n        in the last year', 'description': ['\nAI agent plays and learns the game. In this project agents don\'t need training dataset to learn the game.\nFeatures\n\nDeveloped with python,\nOpen source project,\nOpen source libraries (pygame, tensorflow, numpy),\nFancy gui,\nIncludes art,\nEasy to understand,\nWorks on multiple platforms.\n\nSnake AI\nCurrently (January 2020) you should use python version 3.7.X. Tensorflow doesn\'t work at python version 3.8.X!\nYou can install needed libraries from shell with these lines.\npip install tensorflow\npip install numpy\npip install pygame\n\nAfter installing libraries type following lines to start your snake trainer.\n### STARTING THE PROGRAM ###\n> python main.py  # opens SnakeAI project\n     Select your choice\n     1. Load Agent     \n     2. Train Agent    \n     Choice: \n> 1/2             # type ""1"" to load agent or ""2"" to train new one\n\n### 1 - FOR LOADING AGENT ###\n     Select Agent ID: agent_\n> 5001            # type ""61"", ""401"" or ""5001"" to open saved agents\n\n### 2 - FOR TRAINING NEW AGENT ###\n     Game Limit: \n> 51              # type limit game number to train agent (start training with 50)\n\nGame GUI\n\nExamples\n\n\n\nGeneration 48\nGeneration 192\n\n\n\n\n\n\n\n\n\nArt\nThe famous painting ""Kaplumbağa Terbiyecisi"" (Turtle Trainer) of Mr. Osman Hamdi was used to add visual power to the project.\n\n'], 'url_profile': 'https://github.com/bilalguvenc', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['AIVIS\nArtificial Intelligence Virtual Interview System\n'], 'url_profile': 'https://github.com/monawin456', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'Netherlands', 'stats_list': [], 'contributions': '87 contributions\n        in the last year', 'description': ['RAISE\nRAISE is a neural network library writting in Rust from scratch.\nRAISE includes a seperate experimental autograd package called RAISE Graph which can be found here.\nInstallation\nRAISE needs to be installed with RAISE Graph on the same directory level.\n[dependencies]\nrand=""0.7.3""\nrand_distr = ""0.2.2""\ndyn-clone = ""1.0.1""\ninline-python = ""0.5.1""\nraise-graph = { path = ""../raise-graph"" }\nUsage\nFor an example how to use RAISE please see the examples folder.\nFor usable performance always build and run with the --release flag.\nMNIST\nmnist.rs downloads the mnist dataset and trains a simple neural network.\nThe accuracy resulting accuracy should be around 96%.\nInitializing a model works similarly  to PyTorch and TensorFlow:\nlet hidden_layer = 50;\n\nlet mut model = Sequential::new(vec![\n    Box::new(Linear::new([train_set.input_shape()[1], hidden_layer], ""relu"")),\n    Box::new(ReLU::new()),\n    Box::new(Linear::new([hidden_layer, train_set.target_shape()[1]], """")),\n]);\n\nlet mut loss_func = CrossEntropy::new();\nlet mut optimizer = SGD::new(0.05);\n\nlet batch_size = 64;\nTraining a model in RAISE only needs a couple of lines. No need to manually write a training loop. However, since everything is written in Rust you can easily take a look at how things work under the hood!\nlet (mean, std) = train_set.norm_input();\nvalid_set.norm_input_with(mean, std);\n\nlet train_loader = DataLoader::new(train_set, batch_size, true);\nlet valid_loader = DataLoader::new(valid_set, batch_size, false);\n\nfit(5, &mut model, &mut loss_func, &mut optimizer, &train_loader, &valid_loader);\nThis shoud result in an output similar this:\nEpoch 0: Train Accuracy: 0.852, Train Loss: 0.513, Valid Accuracy: 0.932, Valid Loss: 0.244, Elapsed Time: 4.80s\nEpoch 1: Train Accuracy: 0.925, Train Loss: 0.260, Valid Accuracy: 0.944, Valid Loss: 0.202, Elapsed Time: 4.67s\nEpoch 2: Train Accuracy: 0.942, Train Loss: 0.201, Valid Accuracy: 0.935, Valid Loss: 0.225, Elapsed Time: 4.73s\nEpoch 3: Train Accuracy: 0.952, Train Loss: 0.170, Valid Accuracy: 0.955, Valid Loss: 0.162, Elapsed Time: 4.69s\nEpoch 4: Train Accuracy: 0.956, Train Loss: 0.152, Valid Accuracy: 0.959, Valid Loss: 0.150, Elapsed Time: 4.68s\nContributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n'], 'url_profile': 'https://github.com/AlexanderKeijzer', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'Chicago, Illinois', 'stats_list': [], 'contributions': '71 contributions\n        in the last year', 'description': ['CS 480: Introduction to Artificial Intelligence - Fall 2019\nCourse Description\nIntroduction to computational methods for intelligent control of autonomous agents, and the use of programming paradigms that support development of flexible and reactive systems. These include heuristic search, knowledge representation, constraint satisfaction, probabilistic reasoning, decision-theoretic control, and sensor interpretation. Particular focus will be places on real-world application of the material.\n'], 'url_profile': 'https://github.com/VoraHarsh', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'Noida', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NEW LIST 2017 - 2020: Machine-Learning / Deep-Learning / AI -Tutorials\nHi - Thanks for dropping by!\n\nI will be updating this tutorials site on a daily basis adding all relevant topcis, including latest researches papers from internet such as arxiv.org, BIORXIV - Specifically Neuroscience to name a few. \n\nMore importantly the applications of ML/DL/AI into industry areas such as Transportation, Medicine/Healthcare etc. will be something I\'ll watch with keen interest and would love to share the same with you.\n\nFinally, it is YOUR help I will seek to make it more useful and less boring, so please do suggest/comment/contribute!\n\n\n\nIndex\n\n\ndeep-learning\n\nUBER | Pyro\nNetflix | VectorFlow\nPyTorch\ntensorflow\ntheano\nkeras\ncaffe\nTorch/Lua\nMXNET\n\n\n\nscikit-learn\n\n\nstatistical-inference-scipy\n\n\npandas\n\n\nmatplotlib\n\n\nnumpy\n\n\npython-data\n\n\nkaggle-and-business-analyses\n\n\nspark\n\n\nmapreduce-python\n\n\namazon web services\n\n\ncommand lines\n\n\nmisc\n\n\nnotebook-installation\n\n\nCurated list of Deep Learning / AI blogs\n\n\ncredits\n\n\ncontributing\n\n\ncontact-info\n\n\nlicense\n\n\ndeep-learning\nIPython Notebook(s) and other programming tools such as Torch/Lua/D lang in demonstrating deep learning functionality.\nuber-pyro-probabalistic-tutorials\n\n\n\nAdditional PyRo tutorials:\n\npyro-examples/full examples\npyro-examples/Variational Autoencoders\npyro-examples/Bayesian Regression\npyro-examples/Deep Markov Model\npyro-examples/AIR(Attend Infer Repeat)\npyro-examples/Semi-Supervised VE\npyro-examples/GMM\npyro-examples/Gaussian Process\npyro-examples/Bayesian Optimization\nFull Pyro Code\n\nnetflix-vectorflow-tutorials\n\n\n\n\nMNIST Example, running with Dlang\n\npytorch-tutorials\n\n\n\n\n\n\nLevel\nDescription\n\n\n\n\nBeginners/Zakizhou\nLearning the basics of PyTorch from Facebook.\n\n\nIntermedia/Quanvuong\nLearning the intermediate stuff about PyTorch of from Facebook.\n\n\nAdvanced/Chsasank\nLearning the advanced stuff about PyTorch of from Facebook.\n\n\nLearning PyTorch by Examples - Numpy, Tensors and Autograd\nAt its core, PyTorch provides two main features an n-dimensional Tensor, similar to numpy but can run on GPUs AND automatic differentiation for building and training neural networks.\n\n\nPyTorch - Getting to know autograd.Variable, Gradient, Neural Network\nHere we start with ultimate basics of Tensors, wrap a Tensor with Variable module, play with nn.Module and implement forward and backward function.\n\n\n\ntensor-flow-tutorials\n\n\n\n\nAdditional TensorFlow tutorials:\n\npkmital/tensorflow_tutorials\nnlintz/TensorFlow-Tutorials\nalrojo/tensorflow-tutorial\nBinRoot/TensorFlow-Book\n\n\n\n\nNotebook\nDescription\n\n\n\n\ntsf-basics\nLearn basic operations in TensorFlow, a library for various kinds of perceptual and language understanding tasks from Google.\n\n\ntsf-linear\nImplement linear regression in TensorFlow.\n\n\ntsf-logistic\nImplement logistic regression in TensorFlow.\n\n\ntsf-nn\nImplement nearest neighboars in TensorFlow.\n\n\ntsf-alex\nImplement AlexNet in TensorFlow.\n\n\ntsf-cnn\nImplement convolutional neural networks in TensorFlow.\n\n\ntsf-mlp\nImplement multilayer perceptrons in TensorFlow.\n\n\ntsf-rnn\nImplement recurrent neural networks in TensorFlow.\n\n\ntsf-gpu\nLearn about basic multi-GPU computation in TensorFlow.\n\n\ntsf-gviz\nLearn about graph visualization in TensorFlow.\n\n\ntsf-lviz\nLearn about loss visualization in TensorFlow.\n\n\n\ntensor-flow-exercises\n\n\n\nNotebook\nDescription\n\n\n\n\ntsf-not-mnist\nLearn simple data curation by creating a pickle with formatted datasets for training, development and testing in TensorFlow.\n\n\ntsf-fully-connected\nProgressively train deeper and more accurate models using logistic regression and neural networks in TensorFlow.\n\n\ntsf-regularization\nExplore regularization techniques by training fully connected networks to classify notMNIST characters in TensorFlow.\n\n\ntsf-convolutions\nCreate convolutional neural networks in TensorFlow.\n\n\ntsf-word2vec\nTrain a skip-gram model over Text8 data in TensorFlow.\n\n\ntsf-lstm\nTrain a LSTM character model over Text8 data in TensorFlow.\n\n\n\n\n\n\n\ntheano-tutorials\n\n\n\nNotebook\nDescription\n\n\n\n\ntheano-intro\nIntro to Theano, which allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It can use GPUs and perform efficient symbolic differentiation.\n\n\ntheano-scan\nLearn scans, a mechanism to perform loops in a Theano graph.\n\n\ntheano-logistic\nImplement logistic regression in Theano.\n\n\ntheano-rnn\nImplement recurrent neural networks in Theano.\n\n\ntheano-mlp\nImplement multilayer perceptrons in Theano.\n\n\n\n\n\n\n\nkeras-tutorials\n\n\n\nNotebook\nDescription\n\n\n\n\nkeras\nKeras is an open source neural network library written in Python. It is capable of running on top of either Tensorflow or Theano.\n\n\nsetup\nLearn about the tutorial goals and how to set up your Keras environment.\n\n\nintro-deep-learning-ann\nGet an intro to deep learning with Keras and Artificial Neural Networks (ANN).\n\n\nPerceptrons and Adaline\nImplement Peceptron and adaptive linear neurons.\n\n\nMLP and MNIST Data\nClassifying handwritten digits,implement MLP, train and debug ANN\n\n\ntheano\nLearn about Theano by working with weights matrices and gradients.\n\n\nkeras-otto\nLearn about Keras by looking at the Kaggle Otto challenge.\n\n\nann-mnist\nReview a simple implementation of ANN for MNIST using Keras.\n\n\nconv-nets\nLearn about Convolutional Neural Networks (CNNs) with Keras.\n\n\nconv-net-1\nRecognize handwritten digits from MNIST using Keras - Part 1.\n\n\nconv-net-2\nRecognize handwritten digits from MNIST using Keras - Part 2.\n\n\nkeras-models\nUse pre-trained models such as VGG16, VGG19, ResNet50, and Inception v3 with Keras.\n\n\nauto-encoders\nLearn about Autoencoders with Keras.\n\n\nrnn-lstm\nLearn about Recurrent Neural Networks (RNNs) with Keras.\n\n\nlstm-sentence-gen\nLearn about RNNs using Long Short Term Memory (LSTM) networks with Keras.\n\n\nnlp-deep-learning\nLearn about NLP using ANN (Artificial Neural Networks.\n\n\nhyperparamter-tuning\nHyperparamters tuning using keras-wrapper.scikit-learn\n\n\n\ndeep-learning-misc\n\n\n\nNotebook\nDescription\n\n\n\n\ndeep-dream\nCaffe-based computer vision program which uses a convolutional neural network to find and enhance patterns in images.\n\n\n\n\n\n\n\nscikit-learn\nIPython Notebook(s) demonstrating scikit-learn functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nintro\nIntro notebook to scikit-learn.  Scikit-learn adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.\n\n\nknn\nImplement k-nearest neighbors in scikit-learn.\n\n\nlinear-reg\nImplement linear regression in scikit-learn.\n\n\nsvm\nImplement support vector machine classifiers with and without kernels in scikit-learn.\n\n\nrandom-forest\nImplement random forest classifiers and regressors in scikit-learn.\n\n\nk-means\nImplement k-means clustering in scikit-learn.\n\n\npca\nImplement principal component analysis in scikit-learn.\n\n\ngmm\nImplement Gaussian mixture models in scikit-learn.\n\n\nvalidation\nImplement validation and model selection in scikit-learn.\n\n\n\n\n\n\n\nstatistical-inference-scipy\nIPython Notebook(s) demonstrating statistical inference with SciPy functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nscipy\nSciPy is a collection of mathematical algorithms and convenience functions built on the Numpy extension of Python. It adds significant power to the interactive Python session by providing the user with high-level commands and classes for manipulating and visualizing data.\n\n\neffect-size\nExplore statistics that quantify effect size by analyzing the difference in height between men and women.  Uses data from the Behavioral Risk Factor Surveillance System (BRFSS) to estimate the mean and standard deviation of height for adult women and men in the United States.\n\n\nsampling\nExplore random sampling by analyzing the average weight of men and women in the United States using BRFSS data.\n\n\nhypothesis\nExplore hypothesis testing by analyzing the difference of first-born babies compared with others.\n\n\n\n\n\n\n\npandas\nIPython Notebook(s) demonstrating pandas functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\npandas\nSoftware library written for data manipulation and analysis in Python. Offers data structures and operations for manipulating numerical tables and time series.\n\n\ngithub-data-wrangling\nLearn how to load, clean, merge, and feature engineer by analyzing GitHub data from the Viz repo.\n\n\nIntroduction-to-Pandas\nIntroduction to Pandas.\n\n\nIntroducing-Pandas-Objects\nLearn about Pandas objects.\n\n\nData Indexing and Selection\nLearn about data indexing and selection in Pandas.\n\n\nOperations-in-Pandas\nLearn about operating on data in Pandas.\n\n\nMissing-Values\nLearn about handling missing data in Pandas.\n\n\nHierarchical-Indexing\nLearn about hierarchical indexing in Pandas.\n\n\nConcat-And-Append\nLearn about combining datasets: concat and append in Pandas.\n\n\nMerge-and-Join\nLearn about combining datasets: merge and join in Pandas.\n\n\nAggregation-and-Grouping\nLearn about aggregation and grouping in Pandas.\n\n\nPivot-Tables\nLearn about pivot tables in Pandas.\n\n\nWorking-With-Strings\nLearn about vectorized string operations in Pandas.\n\n\nWorking-with-Time-Series\nLearn about working with time series in pandas.\n\n\nPerformance-Eval-and-Query\nLearn about high-performance Pandas: eval() and query() in Pandas.\n\n\n\n\n\n\n\nmatplotlib\nIPython Notebook(s) demonstrating matplotlib functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nmatplotlib\nPython 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.\n\n\nmatplotlib-applied\nApply matplotlib visualizations to Kaggle competitions for exploratory data analysis.  Learn how to create bar plots, histograms, subplot2grid, normalized plots, scatter plots, subplots, and kernel density estimation plots.\n\n\nIntroduction-To-Matplotlib\nIntroduction to Matplotlib.\n\n\nSimple-Line-Plots\nLearn about simple line plots in Matplotlib.\n\n\nSimple-Scatter-Plots\nLearn about simple scatter plots in Matplotlib.\n\n\nErrorbars.ipynb\nLearn about visualizing errors in Matplotlib.\n\n\nDensity-and-Contour-Plots\nLearn about density and contour plots in Matplotlib.\n\n\nHistograms-and-Binnings\nLearn about histograms, binnings, and density in Matplotlib.\n\n\nCustomizing-Legends\nLearn about customizing plot legends in Matplotlib.\n\n\nCustomizing-Colorbars\nLearn about customizing colorbars in Matplotlib.\n\n\nMultiple-Subplots\nLearn about multiple subplots in Matplotlib.\n\n\nText-and-Annotation\nLearn about text and annotation in Matplotlib.\n\n\nCustomizing-Ticks\nLearn about customizing ticks in Matplotlib.\n\n\nSettings-and-Stylesheets\nLearn about customizing Matplotlib: configurations and stylesheets.\n\n\nThree-Dimensional-Plotting\nLearn about three-dimensional plotting in Matplotlib.\n\n\nGeographic-Data-With-Basemap\nLearn about geographic data with basemap in Matplotlib.\n\n\nVisualization-With-Seaborn\nLearn about visualization with Seaborn.\n\n\n\n\n\n\n\nnumpy\nIPython Notebook(s) demonstrating NumPy functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nnumpy\nAdds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.\n\n\nIntroduction-to-NumPy\nIntroduction to NumPy.\n\n\nUnderstanding-Data-Types\nLearn about data types in Python.\n\n\nThe-Basics-Of-NumPy-Arrays\nLearn about the basics of NumPy arrays.\n\n\nComputation-on-arrays-ufuncs\nLearn about computations on NumPy arrays: universal functions.\n\n\nComputation-on-arrays-aggregates\nLearn about aggregations: min, max, and everything in between in NumPy.\n\n\nComputation-on-arrays-broadcasting\nLearn about computation on arrays: broadcasting in NumPy.\n\n\nBoolean-Arrays-and-Masks\nLearn about comparisons, masks, and boolean logic in NumPy.\n\n\nFancy-Indexing\nLearn about fancy indexing in NumPy.\n\n\nSorting\nLearn about sorting arrays in NumPy.\n\n\nStructured-Data-NumPy\nLearn about structured data: NumPy\'s structured arrays.\n\n\n\n\n\n\n\npython-data\nIPython Notebook(s) demonstrating Python functionality geared towards data analysis.\n\n\n\nNotebook\nDescription\n\n\n\n\ndata structures\nLearn Python basics with tuples, lists, dicts, sets.\n\n\ndata structure utilities\nLearn Python operations such as slice, range, xrange, bisect, sort, sorted, reversed, enumerate, zip, list comprehensions.\n\n\nfunctions\nLearn about more advanced Python features: Functions as objects, lambda functions, closures, *args, **kwargs currying, generators, generator expressions, itertools.\n\n\ndatetime\nLearn how to work with Python dates and times: datetime, strftime, strptime, timedelta.\n\n\nlogging\nLearn about Python logging with RotatingFileHandler and TimedRotatingFileHandler.\n\n\npdb\nLearn how to debug in Python with the interactive source code debugger.\n\n\nunit tests\nLearn how to test in Python with Nose unit tests.\n\n\n\n\n\n\n\nkaggle-and-business-analyses\nIPython Notebook(s) used in kaggle competitions and business analyses.\n\n\n\nNotebook\nDescription\n\n\n\n\ntitanic\nPredict survival on the Titanic.  Learn data cleaning, exploratory data analysis, and machine learning.\n\n\nchurn-analysis\nPredict customer churn.  Exercise logistic regression, gradient boosting classifers, support vector machines, random forests, and k-nearest-neighbors.  Includes discussions of confusion matrices, ROC plots, feature importances, prediction probabilities, and calibration/descrimination.\n\n\n\n\n\n\n\nspark\nIPython Notebook(s) demonstrating spark and HDFS functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nspark\nIn-memory cluster computing framework, up to 100 times faster for certain applications and is well suited for machine learning algorithms.\n\n\nhdfs\nReliably stores very large files across machines in a large cluster.\n\n\n\n\n\n\n\nmapreduce-python\nIPython Notebook(s) demonstrating Hadoop MapReduce with mrjob functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nmapreduce-python\nRuns MapReduce jobs in Python, executing jobs locally or on Hadoop clusters. Demonstrates Hadoop Streaming in Python code with unit test and mrjob config file to analyze Amazon S3 bucket logs on Elastic MapReduce.  Disco is another python-based alternative.\n\n\n\n\n\n\n\naws\nIPython Notebook(s) demonstrating Amazon Web Services (AWS) and AWS tools functionality.\nAlso check out:\n\nSAWS: A Supercharged AWS command line interface (CLI).\nAwesome AWS: A curated list of libraries, open source repos, guides, blogs, and other resources.\n\n\n\n\nNotebook\nDescription\n\n\n\n\nboto\nOfficial AWS SDK for Python.\n\n\ns3cmd\nInteracts with S3 through the command line.\n\n\ns3distcp\nCombines smaller files and aggregates them together by taking in a pattern and target file.  S3DistCp can also be used to transfer large volumes of data from S3 to your Hadoop cluster.\n\n\ns3-parallel-put\nUploads multiple files to S3 in parallel.\n\n\nredshift\nActs as a fast data warehouse built on top of technology from massive parallel processing (MPP).\n\n\nkinesis\nStreams data in real time with the ability to process thousands of data streams per second.\n\n\nlambda\nRuns code in response to events, automatically managing compute resources.\n\n\n\n\n\n\n\ncommands\nIPython Notebook(s) demonstrating various command lines for Linux, Git, etc.\n\n\n\nNotebook\nDescription\n\n\n\n\nlinux\nUnix-like and mostly POSIX-compliant computer operating system.  Disk usage, splitting files, grep, sed, curl, viewing running processes, terminal syntax highlighting, and Vim.\n\n\nanaconda\nDistribution of the Python programming language for large-scale data processing, predictive analytics, and scientific computing, that aims to simplify package management and deployment.\n\n\nipython notebook\nWeb-based interactive computational environment where you can combine code execution, text, mathematics, plots and rich media into a single document.\n\n\ngit\nDistributed revision control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows.\n\n\nruby\nUsed to interact with the AWS command line and for Jekyll, a blog framework that can be hosted on GitHub Pages.\n\n\njekyll\nSimple, blog-aware, static site generator for personal, project, or organization sites.  Renders Markdown or Textile and Liquid templates, and produces a complete, static website ready to be served by Apache HTTP Server, Nginx or another web server.\n\n\npelican\nPython-based alternative to Jekyll.\n\n\ndjango\nHigh-level Python Web framework that encourages rapid development and clean, pragmatic design. It can be useful to share reports/analyses and for blogging. Lighter-weight alternatives include Pyramid, Flask, Tornado, and Bottle.\n\n\n\nmisc\nIPython Notebook(s) demonstrating miscellaneous functionality.\n\n\n\nNotebook\nDescription\n\n\n\n\nregex\nRegular expression cheat sheet useful in data wrangling.\n\n\nalgorithmia\nAlgorithmia is a marketplace for algorithms. This notebook showcases 4 different algorithms: Face Detection, Content Summarizer, Latent Dirichlet Allocation and Optical Character Recognition.\n\n\n\nnotebook-installation\nanaconda\nAnaconda is a free distribution of the Python programming language for large-scale data processing, predictive analytics, and scientific computing that aims to simplify package management and deployment.\nFollow instructions to install Anaconda or the more lightweight miniconda.\ndev-setup\nFor detailed instructions, scripts, and tools to set up your development environment for data analysis, check out the dev-setup repo.\nrunning-notebooks\nNote: If you intend to learn the hard way (preferred method)then I\'d strongly advice to write as much code as you can yourself and not just run pre-written code. If you still want to test it, then do the following:\nTo view interactive content or to modify elements within the IPython notebooks, you must first clone or download the repository then run the notebook.  More information on IPython Notebooks can be found here.\n$ git clone https://github.com/TarrySingh/Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials.git\n$ cd Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials\n$ jupyter notebook\n\nNotebooks tested with Python 2.7.x.(will soon be updated to Python 3.5+)\ncurated-list-of-deeplearning-blogs\n\nA Blog From a Human-engineer-being http://www.erogol.com/ (RSS)\nAakash Japi http://aakashjapi.com/ (RSS)\nAdit Deshpande https://adeshpande3.github.io/ (RSS)\nAdvanced Analytics & R http://advanceddataanalytics.net/ (RSS)\nAdventures in Data Land http://blog.smola.org (RSS)\nAgile Data Science http://blog.sense.io/ (RSS)\nAhmed El Deeb https://medium.com/@D33B (RSS)\nAirbnb Data blog http://nerds.airbnb.com/data/ (RSS)\nAlex Castrounis | InnoArchiTech http://www.innoarchitech.com/ (RSS)\nAlex Perrier http://alexperrier.github.io/ (RSS)\nAlgobeans | Data Analytics Tutorials & Experiments for the Layman https://algobeans.com (RSS)\nAmazon AWS AI Blog https://aws.amazon.com/blogs/ai/ (RSS)\nAnalytics Vidhya http://www.analyticsvidhya.com/blog/ (RSS)\nAnalytics and Visualization in Big Data @ Sicara https://blog.sicara.com (RSS)\nAndreas Müller http://peekaboo-vision.blogspot.com/ (RSS)\nAndrej Karpathy blog http://karpathy.github.io/ (RSS)\nAndrew Brooks http://brooksandrew.github.io/simpleblog/ (RSS)\nAndrey Kurenkov http://www.andreykurenkov.com/writing/ (RSS)\nAnton Lebedevich\'s Blog http://mabrek.github.io/ (RSS)\nArthur Juliani https://medium.com/@awjuliani (RSS)\nAudun M. Øygard http://www.auduno.com/ (RSS)\nAvi Singh https://avisingh599.github.io/ (RSS)\nBeautiful Data http://beautifuldata.net/ (RSS)\nBeckerfuffle http://mdbecker.github.io/ (RSS)\nBecoming A Data Scientist http://www.becomingadatascientist.com/ (RSS)\nBen Bolte\'s Blog http://benjaminbolte.com/ml/ (RSS)\nBen Frederickson http://www.benfrederickson.com/blog/ (RSS)\nBerkeley AI Research http://bair.berkeley.edu/blog/ (RSS)\nBig-Ish Data http://bigishdata.com/ (RSS)\nBlog on neural networks http://yerevann.github.io/ (RSS)\nBlogistic RegressionAbout Projects http://d10genes.github.io/blog/ (RSS)\nblogR | R tips and tricks from a scientist https://drsimonj.svbtle.com/ (RSS)\nBrain of mat kelcey http://matpalm.com/blog/ (RSS)\nBrilliantly wrong thoughts on science and programming https://arogozhnikov.github.io/ (RSS)\nBugra Akyildiz http://bugra.github.io/ (RSS)\nBuilding Babylon https://building-babylon.net/ (RSS)\nCarl Shan http://carlshan.com/ (RSS)\nChris Stucchio https://www.chrisstucchio.com/blog/index.html (RSS)\nChristophe Bourguignat https://medium.com/@chris_bour (RSS)\nChristopher Nguyen https://medium.com/@ctn (RSS)\nCloudera Data Science Posts http://blog.cloudera.com/blog/category/data-science/ (RSS)\ncolah\'s blog http://colah.github.io/archive.html (RSS)\nCortana Intelligence and Machine Learning Blog https://blogs.technet.microsoft.com/machinelearning/ (RSS)\nDaniel Forsyth http://www.danielforsyth.me/ (RSS)\nDaniel Homola http://danielhomola.com/category/blog/ (RSS)\nDaniel Nee http://danielnee.com (RSS)\nData Based Inventions http://datalab.lu/ (RSS)\nData Blogger https://www.data-blogger.com/ (RSS)\nData Labs http://blog.insightdatalabs.com/ (RSS)\nData Meets Media http://datameetsmedia.com/ (RSS)\nData Miners Blog http://blog.data-miners.com/ (RSS)\nData Mining Research http://www.dataminingblog.com/ (RSS)\nData Mining: Text Mining, Visualization and Social Media http://datamining.typepad.com/data_mining/ (RSS)\nData Piques http://blog.ethanrosenthal.com/ (RSS)\nData School http://www.dataschool.io/ (RSS)\nData Science 101 http://101.datascience.community/ (RSS)\nData Science @ Facebook https://research.facebook.com/blog/datascience/ (RSS)\nData Science Insights http://www.datasciencebowl.com/data-science-insights/ (RSS)\nData Science Tutorials https://codementor.io/data-science/tutorial (RSS)\nData Science Vademecum http://datasciencevademecum.wordpress.com/ (RSS)\nDataaspirant http://dataaspirant.com/ (RSS)\nDataclysm http://blog.okcupid.com/ (RSS)\nDataGenetics http://datagenetics.com/blog.html (RSS)\nDataiku https://www.dataiku.com/blog/ (RSS)\nDataKind http://www.datakind.org/blog (RSS)\nDataLook http://blog.datalook.io/ (RSS)\nDatanice https://datanice.wordpress.com/ (RSS)\nDataquest Blog https://www.dataquest.io/blog/ (RSS)\nDataRobot http://www.datarobot.com/blog/ (RSS)\nDatascope http://datascopeanalytics.com/blog (RSS)\nDatasFrame http://tomaugspurger.github.io/ (RSS)\nDavid Mimno http://www.mimno.org/ (RSS)\nDayne Batten http://daynebatten.com (RSS)\nDeep Learning http://deeplearning.net/blog/ (RSS)\nDeepdish http://deepdish.io/ (RSS)\nDelip Rao http://deliprao.com/ (RSS)\nDENNY\'S BLOG http://blog.dennybritz.com/ (RSS)\nDimensionless https://dimensionless.in/blog/ (RSS)\nDistill http://distill.pub/ (RSS)\nDistrict Data Labs http://districtdatalabs.silvrback.com/ (RSS)\nDiving into data https://blog.datadive.net/ (RSS)\nDomino Data Lab\'s blog http://blog.dominodatalab.com/ (RSS)\nDr. Randal S. Olson http://www.randalolson.com/blog/ (RSS)\nDrew Conway https://medium.com/@drewconway (RSS)\nDustin Tran http://dustintran.com/blog/ (RSS)\nEder Santana https://edersantana.github.io/blog.html (RSS)\nEdwin Chen http://blog.echen.me (RSS)\nEFavDB http://efavdb.com/ (RSS)\nEmilio Ferrara, Ph.D.  http://www.emilio.ferrara.name/ (RSS)\nEntrepreneurial Geekiness http://ianozsvald.com/ (RSS)\nEric Jonas http://ericjonas.com/archives.html (RSS)\nEric Siegel http://www.predictiveanalyticsworld.com/blog (RSS)\nErik Bern http://erikbern.com (RSS)\nERIN SHELLMAN http://www.erinshellman.com/ (RSS)\nEugenio Culurciello http://culurciello.github.io/ (RSS)\nFabian Pedregosa http://fa.bianp.net/ (RSS)\nFast Forward Labs http://blog.fastforwardlabs.com/ (RSS)\nFastML http://fastml.com/ (RSS)\nFlorian Hartl http://florianhartl.com/ (RSS)\nFlowingData http://flowingdata.com/ (RSS)\nFull Stack ML http://fullstackml.com/ (RSS)\nGAB41 http://www.lab41.org/gab41/ (RSS)\nGarbled Notes http://www.chioka.in/ (RSS)\nGreg Reda http://www.gregreda.com/blog/ (RSS)\nHyon S Chu https://medium.com/@adailyventure (RSS)\ni am trask http://iamtrask.github.io/ (RSS)\nI Quant NY http://iquantny.tumblr.com/ (RSS)\ninFERENCe http://www.inference.vc/ (RSS)\nInsight Data Science https://blog.insightdatascience.com/ (RSS)\nINSPIRATION INFORMATION http://myinspirationinformation.com/ (RSS)\nIra Korshunova http://irakorshunova.github.io/ (RSS)\nI’m a bandit https://blogs.princeton.edu/imabandit/ (RSS)\nJason Toy http://www.jtoy.net/ (RSS)\nJeremy D. Jackson, PhD http://www.jeremydjacksonphd.com/ (RSS)\nJesse Steinweg-Woods https://jessesw.com/ (RSS)\nJoe Cauteruccio http://www.joecjr.com/ (RSS)\nJohn Myles White http://www.johnmyleswhite.com/ (RSS)\nJohn\'s Soapbox http://joschu.github.io/ (RSS)\nJonas Degrave http://317070.github.io/ (RSS)\nJoy Of Data http://www.joyofdata.de/blog/ (RSS)\nJulia Evans http://jvns.ca/ (RSS)\nKDnuggets http://www.kdnuggets.com/ (RSS)\nKeeping Up With The Latest Techniques http://colinpriest.com/ (RSS)\nKenny Bastani http://www.kennybastani.com/ (RSS)\nKevin Davenport http://kldavenport.com/ (RSS)\nkevin frans http://kvfrans.com/ (RSS)\nkorbonits | Math ∩ Data http://korbonits.github.io/ (RSS)\nLarge Scale Machine Learning  http://bickson.blogspot.com/ (RSS)\nLATERAL BLOG https://blog.lateral.io/ (RSS)\nLazy Programmer http://lazyprogrammer.me/ (RSS)\nLearn Analytics Here https://learnanalyticshere.wordpress.com/ (RSS)\nLearnDataSci http://www.learndatasci.com/ (RSS)\nLearning With Data http://learningwithdata.com/ (RSS)\nLife, Language, Learning http://daoudclarke.github.io/ (RSS)\nLocke Data https://itsalocke.com/blog/ (RSS)\nLouis Dorard http://www.louisdorard.com/blog/ (RSS)\nM.E.Driscoll http://medriscoll.com/ (RSS)\nMachinalis http://www.machinalis.com/blog (RSS)\nMachine Learning (Theory) http://hunch.net/ (RSS)\nMachine Learning and Data Science http://alexhwoods.com/blog/ (RSS)\nMachine Learning https://charlesmartin14.wordpress.com/ (RSS)\nMachine Learning Mastery http://machinelearningmastery.com/blog/ (RSS)\nMachine Learning Blogs https://machinelearningblogs.com/ (RSS)\nMachine Learning, etc http://yaroslavvb.blogspot.com (RSS)\nMachine Learning, Maths and Physics https://mlopezm.wordpress.com/ (RSS)\nMachine Learning Flashcards https://machinelearningflashcards.com/ $10, but a nicely illustrated set of 300 flash cards\nMachined Learnings http://www.machinedlearnings.com/ (RSS)\nMAPPING BABEL https://jack-clark.net/ (RSS)\nMAPR Blog https://www.mapr.com/blog (RSS)\nMAREK REI http://www.marekrei.com/blog/ (RSS)\nMARGINALLY INTERESTING http://blog.mikiobraun.de/ (RSS)\nMath ∩ Programming http://jeremykun.com/ (RSS)\nMatthew Rocklin http://matthewrocklin.com/blog/ (RSS)\nMelody Wolk http://melodywolk.com/projects/ (RSS)\nMic Farris http://www.micfarris.com/ (RSS)\nMike Tyka http://mtyka.github.io/ (RSS)\nminimaxir | Max Woolf\'s Blog http://minimaxir.com/ (RSS)\nMirror Image https://mirror2image.wordpress.com/ (RSS)\nMitch Crowe http://www.dataphoric.com/ (RSS)\nMLWave http://mlwave.com/ (RSS)\nMLWhiz http://mlwhiz.com/ (RSS)\nModels are illuminating and wrong https://peadarcoyle.wordpress.com/ (RSS)\nMoody Rd http://blog.mrtz.org/ (RSS)\nMoonshots http://jxieeducation.com/ (RSS)\nMourad Mourafiq http://mourafiq.com/ (RSS)\nMy thoughts on Data science, predictive analytics, Python http://shahramabyari.com/ (RSS)\nNatural language processing blog http://nlpers.blogspot.fr/ (RSS)\nNeil Lawrence http://inverseprobability.com/blog.html (RSS)\nNLP and Deep Learning enthusiast http://camron.xyz/ (RSS)\nno free hunch http://blog.kaggle.com/ (RSS)\nNuit Blanche http://nuit-blanche.blogspot.com/ (RSS)\nNumber 2147483647 https://no2147483647.wordpress.com/ (RSS)\nOn Machine Intelligence https://aimatters.wordpress.com/ (RSS)\nOpiate for the masses Data is our religion. http://opiateforthemass.es/ (RSS)\np-value.info http://www.p-value.info/ (RSS)\nPete Warden\'s blog http://petewarden.com/ (RSS)\nPlotly Blog http://blog.plot.ly/ (RSS)\nProbably Overthinking It http://allendowney.blogspot.ca/ (RSS)\nProoffreader.com http://www.prooffreader.com (RSS)\nProoffreaderPlus http://prooffreaderplus.blogspot.ca/ (RSS)\nPublishable Stuff http://www.sumsar.net/ (RSS)\nPyImageSearch http://www.pyimagesearch.com/ (RSS)\nPythonic Perambulations https://jakevdp.github.io/ (RSS)\nquintuitive http://quintuitive.com/ (RSS)\nR and Data Mining https://rdatamining.wordpress.com/ (RSS)\nR-bloggers http://www.r-bloggers.com/ (RSS)\nR2RT http://r2rt.com/ (RSS)\nRamiro Gómez http://ramiro.org/notebooks/ (RSS)\nRandom notes on Computer Science, Mathematics and Software Engineering http://barmaley-exe.github.io/ (RSS)\nRandy Zwitch http://randyzwitch.com/ (RSS)\nRaRe Technologies http://rare-technologies.com/blog/ (RSS)\nRayli.Net http://rayli.net/blog/ (RSS)\nRevolutions http://blog.revolutionanalytics.com/ (RSS)\nRinu Boney http://rinuboney.github.io/ (RSS)\nRNDuja Blog http://rnduja.github.io/ (RSS)\nRobert Chang https://medium.com/@rchang (RSS)\nRocket-Powered Data Science http://rocketdatascience.org (RSS)\nSachin Joglekar\'s blog https://codesachin.wordpress.com/ (RSS)\nsamim https://medium.com/@samim (RSS)\nSean J. Taylor http://seanjtaylor.com/ (RSS)\nSebastian Raschka http://sebastianraschka.com/blog/index.html (RSS)\nSebastian Ruder http://sebastianruder.com/ (RSS)\nSebastian\'s slow blog http://www.nowozin.net/sebastian/blog/ (RSS)\nSFL Scientific Blog https://sflscientific.com/blog/ (RSS)\nShakir\'s Machine Learning Blog http://blog.shakirm.com/ (RSS)\nSimply Statistics http://simplystatistics.org (RSS)\nSpringboard Blog http://springboard.com/blog\nStartup.ML Blog http://startup.ml/blog (RSS)\nStatistical Modeling, Causal Inference, and Social Science http://andrewgelman.com/ (RSS)\nStigler Diet http://stiglerdiet.com/ (RSS)\nStitch Fix Tech Blog http://multithreaded.stitchfix.com/blog/ (RSS)\nStochastic R&D Notes http://arseny.info/ (RSS)\nStorytelling with Statistics on Quora http://datastories.quora.com/ (RSS)\nStreamHacker http://streamhacker.com/ (RSS)\nSubconscious Musings http://blogs.sas.com/content/subconsciousmusings/ (RSS)\nSwan Intelligence http://swanintelligence.com/ (RSS)\nTechnoCalifornia http://technocalifornia.blogspot.se/ (RSS)\nTEXT ANALYSIS BLOG | AYLIEN http://blog.aylien.com/ (RSS)\nThe Angry Statistician http://angrystatistician.blogspot.com/ (RSS)\nThe Clever Machine https://theclevermachine.wordpress.com/ (RSS)\nThe Data Camp Blog https://www.datacamp.com/community/blog (RSS)\nThe Data Incubator http://blog.thedataincubator.com/ (RSS)\nThe Data Science Lab https://datasciencelab.wordpress.com/ (RSS)\nTHE ETZ-FILES http://alexanderetz.com/ (RSS)\nThe Science of Data http://www.martingoodson.com (RSS)\nThe Shape of Data https://shapeofdata.wordpress.com (RSS)\nThe unofficial Google data science Blog http://www.unofficialgoogledatascience.com/ (RSS)\nTim Dettmers http://timdettmers.com/ (RSS)\nTombone\'s Computer Vision Blog http://www.computervisionblog.com/ (RSS)\nTommy Blanchard http://tommyblanchard.com/category/projects (RSS)\nTrevor Stephens http://trevorstephens.com/ (RSS)\nTrey Causey http://treycausey.com/ (RSS)\nUW Data Science Blog http://datasciencedegree.wisconsin.edu/blog/ (RSS)\nWellecks http://wellecks.wordpress.com/ (RSS)\nWes McKinney http://wesmckinney.com/archives.html (RSS)\nWhile My MCMC Gently Samples http://twiecki.github.io/ (RSS)\nWildML http://www.wildml.com/ (RSS)\nWill do stuff for stuff http://rinzewind.org/blog-en (RSS)\nWill wolf http://willwolf.io/ (RSS)\nWILL\'S NOISE http://www.willmcginnis.com/ (RSS)\nWilliam Lyon http://www.lyonwj.com/ (RSS)\nWin-Vector Blog http://www.win-vector.com/blog/ (RSS)\nYanir Seroussi http://yanirseroussi.com/ (RSS)\nZac Stewart http://zacstewart.com/ (RSS)\nŷhat http://blog.yhat.com/ (RSS)\nℚuantitative √ourney http://outlace.com/ (RSS)\n大トロ http://blog.otoro.net/ (RSS)\n\ncredits\n\nPython for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython by Wes McKinney\nPyCon 2015 Scikit-learn Tutorial by Jake VanderPlas\nPython Data Science Handbook by Jake VanderPlas\nParallel Machine Learning with scikit-learn and IPython by Olivier Grisel\nStatistical Interference Using Computational Methods in Python by Allen Downey\nTensorFlow Examples by Aymeric Damien\nTensorFlow Tutorials by Parag K Mital\nTensorFlow Tutorials by Nathan Lintz\nTensorFlow Tutorials by Alexander R Johansen\nTensorFlow Book by Nishant Shukla\nSummer School 2015 by mila-udem\nKeras tutorials by Valerio Maggio\nKaggle\nYhat Blog\n\ncontributing\nContributions are welcome!  For bug reports or requests please submit an issue.\ncontact-info\nFeel free to contact me to discuss any issues, questions, or comments.\n\nEmail: tarry.singh@gmail.com\nTwitter: @tarrysingh\nGitHub: tarrysingh\nLinkedIn: Tarry Singh\nWebsite: tarrysingh.com\nMedium: tarry@Medium\nQuora : Answers from Tarry on Quora\n\nlicense\nThis repository contains a variety of content; some developed by Tarry Singh and some from third-parties and a lot will be maintained by me. The third-party content is distributed under the license provided by those parties.\nThe content was originally developed by Donne Martin is distributed under the following license. I will be maintaining and revamping it by adding PyTorch, Torch/Lua, MXNET and much more:\nI am providing code and resources in this repository to you under an open source license.\nCopyright 2017 Tarry Singh\n\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'], 'url_profile': 'https://github.com/PIYUSH0812', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'Nüremberg - Germany', 'stats_list': [], 'contributions': '407 contributions\n        in the last year', 'description': ['Artificial Intelligence in Industry 4.0\n'], 'url_profile': 'https://github.com/jupiterbak', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'Malaysia', 'stats_list': [], 'contributions': '927 contributions\n        in the last year', 'description': ['DAT263x\nIntroduction to Artificial Intelligence (AI)\n'], 'url_profile': 'https://github.com/dennislamcv1', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '116 contributions\n        in the last year', 'description': ['CIS365-Project1\nCIS365-Artificial Intelligence-Project 1-Capture The Flag(Pacman)\n'], 'url_profile': 'https://github.com/JosefHartsough', 'info_list': ['Jupyter Notebook', 'Updated Apr 25, 2020', 'Python', 'Updated Jan 8, 2020', '2', 'Python', 'Updated Jan 14, 2020', '1', 'Python', 'Updated Jun 26, 2020', 'Rust', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Jan 9, 2020', 'Python', 'Updated Jan 11, 2020', '1', 'TeX', 'MIT license', 'Updated Sep 7, 2020', 'Jupyter Notebook', 'Updated Mar 29, 2020', 'Python', 'Updated Jan 31, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['Artificial Intelligence learns to play Kariba!\nPython implementation of Multiple-Observer Information Set Monte Carlo Tree Search (MOISMCTS) for the card game Kariba, as described in this blog.\nGetting Started\nFirst, install required dependencies (either conda or pip)\n    conda install numpy\n    conda install jupyter\n    conda install tqdm\nClone this repo\n    git clone https://github.com/KnurpsBram/AI_plays_kariba.git\n    cd AI_plays_kariba \nTo play a game of Kariba against an AI using MOISMCTS, open interactive_game.ipynb. From the command line:\n    cd src\n    jupyter notebook\n\nMOISMCTS keeps track of a separate tree per player. A node in this tree is not a state, but an \'information set\'; the set of all states the game could be in given the information that the player has. A player cannot observe the opponent\'s hand, but it can reason about which hands are either in the deck or in the opponents hand. These cards are in the \'jungle\', the union of the deck and the opponent\'s hand(s). The tree distinguishes between post-action-nodes and neutral-nodes. We only keep track of the amount of simulated wins from post-action-nodes onwards, because only for those nodes do we need to compute the upper confidence bound (UCB) (which requires the amount of wins).\n>>> from kariba_moismcts import Kariba, moismcts, Simulators, Node\n\n... kariba = Kariba()\n... event = kariba.random_card_draw() # actions and card draws are both \'events\', represented as a dictionary\n... kariba.apply_event(event)\n... root_state = kariba\n... best_action = moismcts(root_state, n=100)\n\n... print(kariba)\n... print(event)\n... print(best_action)\n100%|██████████| 100/100 [00:00<00:00, 130.70it/s]\n\n-------------------------\nturn: player0\ndeck:\n[8 7 8 8 8 7 7 6]\nfield:\n[0 0 0 0 0 0 0 0]\nhands:\nplayer0 [0 1 0 0 0 1 1 2]\nplayer1 [0 0 0 0 0 0 0 0]\n-------------------------\n\n{\'kind\': \'deck_draw\', \'who\': \'player0\', \'cards\': array([0, 1, 0, 0, 0, 1, 1, 2])}\n{\'kind\': \'action\', \'who\': \'player0\', \'cards\': array([0, 0, 0, 0, 0, 1, 0, 0])}\n\n# what happens inside the moismcts function\n>>> simulators = Simulators(root_state)\n\n... simulators.apply_event(simulators.select_action())\n... simulators.next_turn()\n... simulators.apply_event(simulators.random_card_draw()) # draw cards for player0\n\n... print(""Complete information of the state:"")\n... print(simulators.game)\n\n... print(""Partial information available to player0:"")\n... print(Node(simulators.game, ""player0""))\n\n... print(""Partial information available to player1:"")\n... print(Node(simulators.game, ""player1""))\nComplete information of the state:\n-------------------------\nturn: player1\ndeck:\n[7 7 8 8 6 7 7 4]\nfield:\n[0 0 0 0 0 0 1 0]\nhands:\nplayer0 [0 1 0 0 0 1 0 2]\nplayer1 [1 0 0 0 2 0 0 2]\n-------------------------\n\nPartial information available to player0:\n+------------------------\nneutral_node\nself: player0\nturn: player1\nn: 0\njungle:\n[8 7 8 8 8 7 7 6]\nfield:\n[0 0 0 0 0 0 1 0]\nhand:\n[0 1 0 0 0 1 0 2]\n\nPartial information available to player1:\n+------------------------\nneutral_node\nself: player1\nturn: player1\nn: 0\njungle:\n[7 8 8 8 6 8 7 6]\nfield:\n[0 0 0 0 0 0 1 0]\nhand:\n[1 0 0 0 2 0 0 2]\n\n>>> # run n simulations\n... n = 6\n\n... simulators = Simulators(root_state)\n... for _ in range(n):\n...     while not simulators.game.is_final:\n...         simulators.apply_event(simulators.random_card_draw()) # give cards to the player whose turn it is, at the very first turn, this should not do anything\n...         simulators.apply_event(simulators.select_action()) # the player whose turn it is may select the action, apply the action to the game and update both the players\' trees\n...         simulators.next_turn()\n...     winner = simulators.game.leading_player\n...     simulators.backpropagate(winner)\n...     simulators.reset_game()\n    \n... print(""Tree of player0 after ""+str(n)+"" simulations:"")\n... print(simulators.tree_dict[""player0""])\n\n... print(""Tree of player1 after ""+str(n)+"" simulations:"")\n... print(simulators.tree_dict[""player1""])\nTree of player0 after 6 simulations:\n+------------------------\nneutral_node\nself: player0\nturn: player1\nn: 6\njungle:\n[8 7 8 8 8 7 7 6]\nfield:\n[0 0 0 0 0 0 1 0]\nhand:\n[0 1 0 0 0 1 0 2]\n    +------------------------\n    neutral_node\n    self: player0\n    turn: player1\n    n: 2\n    jungle:\n    [8 7 8 8 7 7 7 6]\n    field:\n    [0 0 0 0 1 0 1 0]\n    hand:\n    [0 1 0 0 0 1 0 2]\n        +------------------------\n        neutral_node\n        self: player0\n        turn: player0\n        n: 1\n        jungle:\n        [7 7 8 8 7 7 7 6]\n        field:\n        [0 0 0 0 1 0 1 0]\n        hand:\n        [1 1 0 0 0 1 0 2]\n        \n    +------------------------\n    neutral_node\n    self: player0\n    turn: player1\n    n: 1\n    jungle:\n    [7 7 8 8 8 7 7 6]\n    field:\n    [1 0 0 0 0 0 1 0]\n    hand:\n    [0 1 0 0 0 1 0 2]\n    \n    +------------------------\n    neutral_node\n    self: player0\n    turn: player1\n    n: 1\n    jungle:\n    [8 7 8 8 8 7 7 4]\n    field:\n    [0 0 0 0 0 0 1 2]\n    hand:\n    [0 1 0 0 0 1 0 2]\n    \n    +------------------------\n    neutral_node\n    self: player0\n    turn: player1\n    n: 1\n    jungle:\n    [8 7 8 8 6 7 7 6]\n    field:\n    [0 0 0 0 2 0 1 0]\n    hand:\n    [0 1 0 0 0 1 0 2]\n    \n    +------------------------\n    neutral_node\n    self: player0\n    turn: player1\n    n: 1\n    jungle:\n    [8 7 8 8 8 7 7 5]\n    field:\n    [0 0 0 0 0 0 1 1]\n    hand:\n    [0 1 0 0 0 1 0 2]\n    \nTree of player1 after 6 simulations:\n+------------------------\nneutral_node\nself: player1\nturn: player1\nn: 6\njungle:\n[7 8 8 8 6 8 7 6]\nfield:\n[0 0 0 0 0 0 1 0]\nhand:\n[1 0 0 0 2 0 0 2]\n    +------------------------\n    post_action_node\n    self: player1\n    turn: player1\n    n: 2\n    w: 2\n    jungle:\n    [7 8 8 8 6 8 7 6]\n    field:\n    [0 0 0 0 1 0 1 0]\n    hand:\n    [1 0 0 0 1 0 0 2]\n        +------------------------\n        neutral_node\n        self: player1\n        turn: player0\n        n: 1\n        jungle:\n        [7 8 8 8 6 8 7 4]\n        field:\n        [0 0 0 0 1 0 1 2]\n        hand:\n        [1 0 0 0 1 0 0 2]\n        \n    +------------------------\n    post_action_node\n    self: player1\n    turn: player1\n    n: 1\n    w: 0\n    jungle:\n    [7 8 8 8 6 8 7 6]\n    field:\n    [1 0 0 0 0 0 1 0]\n    hand:\n    [0 0 0 0 2 0 0 2]\n    \n    +------------------------\n    post_action_node\n    self: player1\n    turn: player1\n    n: 1\n    w: 0\n    jungle:\n    [7 8 8 8 6 8 7 6]\n    field:\n    [0 0 0 0 0 0 1 2]\n    hand:\n    [1 0 0 0 2 0 0 0]\n    \n    +------------------------\n    post_action_node\n    self: player1\n    turn: player1\n    n: 1\n    w: 1\n    jungle:\n    [7 8 8 8 6 8 7 6]\n    field:\n    [0 0 0 0 2 0 1 0]\n    hand:\n    [1 0 0 0 0 0 0 2]\n    \n    +------------------------\n    post_action_node\n    self: player1\n    turn: player1\n    n: 1\n    w: 0\n    jungle:\n    [7 8 8 8 6 8 7 6]\n    field:\n    [0 0 0 0 0 0 1 1]\n    hand:\n    [1 0 0 0 2 0 0 1]\n\n'], 'url_profile': 'https://github.com/KnurpsBram', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Irvine, California', 'stats_list': [], 'contributions': '27 contributions\n        in the last year', 'description': ['SudokuSolver\nConstraint Propagation based Sudoku Solver.\nCourse Project for CS271P Intro to Artificial Intelligence, UC Irvine, Fall 2019.\nDeveloped by Rishabh Saxena & Chaitanya Ujeniya\n'], 'url_profile': 'https://github.com/rsaxena07', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Dallas, TX', 'stats_list': [], 'contributions': '356 contributions\n        in the last year', 'description': [""AI Guide for Fantasy Premier League\nArtificial Intelligence guide for preparing my team for Fantasy Premier League.\n\n\nFantasy Premier League\nA.K.A FPL in short, it is a game in which participants assemble an imaginary team of real life footballers for a gameweek in the English Premier League and score points based on those players' actual statistical performance or their perceived contribution on the field of play. It requires predicting and foreseeing the future of the players' performance.\nThe fpl_AI Bot\n\nIt gives suggestions based on insights on what steps to take to maximize the FPL team points.\nIt makes the suggestions for player transfer if needed based on:\n\nupcoming fixtures\nplayers' form\nteam budget\n\n\nIt sends the suggestions or advice automatically via email a few hours before the FPL Gameweek deadline.\n\nWorkflow\nFetch and organize data\n\nScrape data\n\nParse and store all the data\n\n\n\ncd src/scraping\npython global_scraper.py\npython teams_scraper.py ${TEAM_ID}\n\n\nUpdate existing data with new data\n\ncd src\nrm -rf raw_data/2019-20/players\nmv scraping/data/2019-20/players raw_data/2019-20/ -f\nmv scraping/data/2019-20/players_raw.csv raw_data/2019-20/ -f\nmv scraping/data/2019-20/fixtures.csv raw_data/ -f\nmv scraping/data/team_data/my_team.json raw_data/ -f\nmv scraping/data/gameweeks.json raw_data/ -f\nrm -rf scraping/data\n\n\nClean and preprocess the data\n\npython data_cleaner.py\npython data_maker.py\n\n\nRun the bot\n\ncd src\npython ai.py\n\n\nNotify the user\n\ncd src\npython ai.py\n\nLinks\n\nAutomating GitHub Workflow\nGitHub scheduled events\n\nData\nKudos to vaastav for the data\nConcept\nKudos to ravgeetdhillon for the concept\n""], 'url_profile': 'https://github.com/likarajo', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mg065', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '193 contributions\n        in the last year', 'description': ['Owari\nPurpose:\nThe goal of this assignment is to gain an understanding of game playing, the minimax algorithm, and alpha-beta pruning.\nBackground:\nOwari is a two-player, alternating-move, zero-sum game of complete information. Each player (called SOUTH and NORTH) has six pits lined up horizontally in front of him or her, and a ""goal"" pit on the side to the player’s right. The board will be represented as a picture:\n3 3 3 3 3 3\n0                   0\n3 3 3 3 3 3\nHere, SOUTH’s pits are at the bottom and goal pit at the right, while NORTH’s pits are at the top and goal pit at the left. The picture above shows the starting configuration for every game: each pit has 3 stones in it, except for the goal pits which are empty.\nTo make a move, a player chooses one of the six pits on his or her side of the board (the chosen pit must have stones in it) and redistributes (or ""sows"") the stones one-by-one going counterclockwise around the board, starting with the pit following the one picked. The opponent\'s goal pit, if reached, is skipped. For the purposes of this implementation, the pits on SOUTH\'s side are numbered 0 to 5, with pit 6 being the SOUTH\'s goal pit, while NORTH \'s pits are numbered 7 to 12 from right to left (i.e., continuing counter-clockwise) and NORTH\'s goal pit is pit number 13. If SOUTH moves first and chooses to move from pit number 4, the resulting position would be:\n3 3 3 3 3 4\n0                   1\n3 3 3 3 0 4\nCapturing: If the last stone of a player\'s move falls into an empty pit on the moving player\'s side of the board, then any stones in the pit opposite to it are captured and placed in the moving player\'s goal pit. For instance, if it were SOUTH’s turn in the position shown above, SOUTH could choose to move from pit number 1, and the resulting configuration would be:\n3 3 3 3 0 4\n0                   4\n3 0 4 4 1 4\nNote that all of the stones from pit number 8 have been captured and placed in SOUTH’s pit.\nEnding the game: The game is over when either player empties all six pits on his or her side of the board. The other player then takes all of the remaining stones from his or her own side, and places them in his or her goal pit. Players then count the stones in their goal pits. The player with the most stones is the winner.\nRequirements:\nFor this assignment, you are required to write a program that plays a competent game of Owari against an interactive opponent.  You may assume that the computer is always the SOUTH player and the interactive opponent is always the NORTH player. The main components of your program include the following:\n\nGetWhoMovesFirst: This routine will interactively prompt the human opponent (NORTH) to select whether he or she wants to move first or second.\nGetHumanPlayerMove:  This routine will prompt the human opponent (NORTH) to specify the pit from which he or she wants to move stones (7, 8, 9, 10, 11, or 12).  If the specified pit is empty, your program should display an appropriate error message and redisplay the prompt.  Repeat the process until the user selects a pit that is not empty, and then move the stones from that pit to other pits as described above, skipping the opponent’s goal pit if necessary.\nGenerateComputerPlayerMove:  This routine will use the minimax algorithm with alpha-beta pruning to determine the optimal next move for the computer player.  The algorithm used by this routine is relatively simple:\na)\tGiven the current state, generate all possible successor states by trying all legal computer moves. (A maximum of six moves are possible.)\nb)\tSelect the move that leads to the successor state that is most advantageous for the computer player.\nOf course, the tricky part for the computer player comes from evaluating each possible successor state.  The computer proceeds by assuming that the human player will always pick the move that leads to a successor state that is most favorable to him or her.  Unfortunately, the size of the search space for Owari is large enough to make exhaustive search of the game space prohibitively costly.  For this reason, your computer move generator should keep track of the current search depth, and should stop generating new successor states when it reaches a predefined depth limit.  It should then call a static evaluation function to estimate the value of the current state, and return the estimated value to the calling routine.\n\n'], 'url_profile': 'https://github.com/Nat101', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Machine Learning with AWS\nThis course is the right place to start if you are interested in learning useful artificial intelligence and machine learning skills using Amazon Web Services, the most popular and powerful cloud platform. You will learn in detail how to use AWS to transform your projects into apps that work at high speed and are highly scalable. From natural language processing (NLP) applications, such as language translation,\nunderstanding news articles and other text sources, to creating chatbots with both voice and text interfaces, to processing huge numbers of images fast, and creating machine learning models, you will learn all that there is to know about using AWS to your advantage. By the end of this course, you will have the skills to efficiently use AWS in your machine learning and artificial intelligence projects..\nWhat you will learn\n\nGet up and running with machine learning on the AWS platform\nAnalyze unstructured text using AI and Amazon Comprehend\nCreate a chatbot and interact with it using speech and text input\nRetrieve external data via your chatbot\nDevelop a natural language interface\nApply AI to images and videos with Amazon Rekognition\n\nHardware Requirement\nFor an optimal student experience, we recommend the following hardware configuration:\n\nProcessor: Intel Core i5 or equivalent\nMemory: 4GB RAM\nStorage: 35GB available space\n\nSoftware Requirement\nYou’ll also need the following software installed in advance:\n\nOS: Windows 7 SP1 64-bit, Windows 8.1 64-bit or Windows 10 64-bit\nBrowser: Google Chrome, Latest Version\nAn AWS account\n\n'], 'url_profile': 'https://github.com/elephantscale', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Tempe, Arizona, USA', 'stats_list': [], 'contributions': '38 contributions\n        in the last year', 'description': [""arijit7978-Artificial-Intelligence-CSE-471--PacMan\nArizona State University\nCSE 471 Intro To Artificial Intelligence\nFall 2019\nGrade A\nIn this project, several techniques of Artificial Intelligence such as Searching, Adversarial Behaviour, Deep Reinforcement Learning, Neural Network etc are implemented to help the pacman agent to maximize its expected utility.\nProject 0: Python Autograder Tutorial\nProject 1: Searching - DFS, BFS, UCS, Greedy Search, A* Search, etc.\nProject 2: MultiAgent Pacman - minimax, alpha-beta pruning, expectimax, etc.\nProject 3: Reinforcement Learning - MDP, value iteration, q-learning, epsilon-greedy, approximate q-learning, etc.\nProject 4: Ghostbusters - HMM, Particle Filtering, Bayes' Nets, Deep Reinforcement Learning, etc.\nRefer project specification file under each project for more details.\nProgramming Language - Python 3.7\n""], 'url_profile': 'https://github.com/arijit7978', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '57 contributions\n        in the last year', 'description': ['Unity The hague university artificial intelligence Gold Quest\nThe hague university - game minor - artificial intelligence Gold Quest - A little student projec.\nAn Tic Tac Toe made in Unity with an unbeatable ai.\nScreenshots\n\n\n'], 'url_profile': 'https://github.com/nietjoost', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '208 contributions\n        in the last year', 'description': ['\nProgramming Artificial Intelligence Utilities is a package that aims to make\nartificial intelligence and machine learning programming easier through\nabstractions of extensive APIs, research paper implementations, and data\nmanipulation.\nPackage Features\n\nAnalytics\n\nPlotting of data through embedding algorithms, such as Isomap and TSNE\n\n\nAudio\n\nRecording and playing\nVolume, speed, and pitch manipulation\nTrimming and Splitting\nSpectrogram, Fbanks, and MFCC creation\nAudio file conversions\n\n\nImage\n\nSimplified OpenCV Interface\n\n\nAutoencoder\n\nTrainer and Predictor\nTrainer with extra decoder\nVAE Trainer\n\n\nEvolution Algorithm\n\nOne dimensional evolution algorithm\nHyperparameter tuner\n\n\nGAN\n\nGAN Trainer\nGANI Trainer (GAN which takes provided Inputs)\nCycle GAN Trainer\nPredictors\n\n\nNeural Network\n\nTrainer and Predictor\nDense layers that combine batch norm\nConvolution layers that combine batch norm, max pooling, upsampling, and transposing\n\n\nReinforcement\n\nOpenAI Gym wrapper\nMulti-agent adverserial environment\nGreedy, ascetic, and stochastic policies\nNoise policies\nExponential, linear, and constant decay\nNormal memory and efficient time distributed memory (for stacked states)\nAgents\n\nQAgent: Q-learning with a table\nDQNAgent Q-learning with a neural network model\nPGAgent: State to action neural network model (Actor) trained with\npolicy gradients\nDDPGAgent: State to continous action space neural network model trained\nwith deterministic policy gradients\n\n\n\n\nReinforcement Agents\n\nDQNPGAgent: Combination of a DQN and PG agent into one agent\nA2CAgent: Advantage Actor Critic agent\nPPOAgent: Proximal Policy Optimization agent\nTD3Agent: Twin Delayed DDPG Agent\nPGCAgent: Continuous variant of PGAgent\nA2CCAgent: Continuous variant of A2CAgent\n\n\n\n'], 'url_profile': 'https://github.com/Tiger767', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/dipakbarua', 'info_list': ['1', 'Python', 'Updated Feb 24, 2020', 'Java', 'Updated Jan 8, 2020', 'Python', 'MIT license', 'Updated Feb 18, 2020', 'Updated Jan 7, 2020', 'Python', 'Updated Jul 30, 2020', 'Python', 'MIT license', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 8, 2020', 'ShaderLab', 'Updated Jan 12, 2021', '2', 'Python', 'MIT license', 'Updated Dec 22, 2020', 'Python', 'Updated Jan 10, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Mustymustapha12', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ddarrah17', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'Ireland', 'stats_list': [], 'contributions': '25 contributions\n        in the last year', 'description': ['Intro-to-AI\nFiles from my Intro to Artificial Intelligence module\n3 word doc on questions. No coding assignments\n'], 'url_profile': 'https://github.com/patricklowe', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'Bucharest', 'stats_list': [], 'contributions': '49 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Madaist', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['aigarbagefinder Βρίσκουμε σκουπίδια με Τεχνητή Νοημοσύνη\nΟμάδα: Κυνηγοί Σκουπιδιών\nΒρίσκουμε σκουπίδια χρησιμοποιώντας ΤΝ (Τεχνητή νοημοσύνη - Artificial Intelligence)\nΣκοπός του έργου είναι να φτιαχτεί ένα σύστημα το οποίο θα μπορεί να αναγνωρίζει σκουπίδια σε ένα χώρο και να ειδοποιεί όταν ο αριθμός των σκουπιδιών είναι μεγάλος. Για αυτό το σκοπό θα χρησιμοποιήσουμε την πλατφόρμα maixduino (https://wiki.sipeed.com/en/maix/board/maixduino.html https://www.seeedstudio.com/Sipeed-Maixduino-Kit-for-RISC-V-AI-IoT-p-4047.html), η οποία μας παρέχει τη δυνατότητα να τρέχουμε εφαρμογές τεχνητής νοημοσύνης με χαμηλό κόστος (<40 ευρώ) για την βασική πλακέτα. Θα προσπαθήσουμε να εκπαιδεύσουμε το σύστημά μας να αναγνωρίζει σκουπίδια χρησιμοποιώντας τη πλατφόρμα tensorflow και στη συνέχεια να μεταφέρουμε το μοντέλο μας στην πλακέτα maixduino, χρησιμοποιώντας micropython. Η πλακέτα maixduino περιλαμβάνει κάμερα και TFT οθόνη που θα μας επιτρέψει να πάρουμε εικόνες από την περιοχή που έχει σκουπίδια, να βρούμε τα σκουπίδια και να τα απεικονίσουμε στην TFT οθόνη. Η πλατφόρμα μας θα μπορούσε να βρίσκεται και σε ένα απλό ρομποτικό όχημα που να κινείται για να κάνει ανίχνευση σκουπιδιών σε μια περιοχή.\nΛίστα Υλικών\n\n\n\nΑ/Α\nΥλικό\n\n\n\n\n1\nmaixduino board με οθόνη και κάμερα\n\n\n\n'], 'url_profile': 'https://github.com/CRPKalamata', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""\nCognitive Science, Artificial Intelligence and Education\nATTENTION:\nDue to the storm and the potential dangers associated with it, the workshop Minds and Machines is cancelled for today and will start on Tuesday 11 February 2020.\nPurpose of the Workshop\nLearning science as an interdisciplinary subject requires integrating distinct fields and skillsets. In particular, Cognitive Science, which studies and models the human mind, and Artificial Intelligence, which seeks to generate intelligent behavior in machines, share deep theoretical and practical concerns in the domains of education and learning which make interdisciplinary research that spans these two disciplines highly relevant. First, AI is more cognitive than appears at first glance. At the heart of the current AI revolution is a massive transfer of knowledge from humans to machines, in the form of learning from human-labeled and human-structured data. Creating and curating appropriate datasets for training AI systems requires a deep understanding of human-like knowledge representations and the subtleties of converting abstract human knowledge (e.g., what concept or skill a test question assesses) into a machine readable form. Second, AI systems most often have humans as users, as in the case of adaptive learning or assessment, requiring the AI system to maintain human interpretability. Interpretable AI requires the decisions, recommendations and advice delivered to provide sensible interpretations that can be understood by various stakeholders (such as educators, researchers or students), which imposes interesting constraints on learning methodologies for autonomous systems. Finally, Cognitive Science provides proof of concept demonstrations of learned behavior that provide next-generation targets for what AI might achieve. In this workshop we explore these themes through lectures, tutorials, and collaborative projects to enable students to participate in this exciting interdisciplinary research frontier.\nBy the end of this workshop, students will have gained both conceptual knowledge and practical experience in using advanced machine learning (ML) methods applied to educational settings, domains, and datasets. ML topics include: deep learning, reinforcement learning, and natural language processing; with applications to cognitive modeling and recommender systems in the educational domain.\nWhen and Where\n10 Feb 2020 - 14 Feb 2020, University of Luxembourg, Belval Campus. More details soon.\nMost of the workshop will take place in the Learning Hub 1.01 room, in the first floor of the Luxembourg Learning Centre.\nWorkshop Structure\nThe workshop will span 1 full week (5 days), fulltime.\nWe will interleave lectures, tutorials and team-project work throughout the day.\nAt the end of the workshop students present their project.\nInstructors (alphabetic):\n\nPedro Cardoso-Leite\nDominic Mussack\nSiwen Guo\nConstantin Rothkopf\nChristoph Schommer\nPaul Schrater\nMorteza Ansarinia (Teaching Assistant)\n\nStudents / Audience\nThe workshop is destined in priority for PhD students from the Unviersity of Luxembourg but is open to anyone for free. Students need to apply (send CV, current project description, recommendations) and are selected by the instructors.\nECTS\nPhD students from the UL may earn 2 ECTS if they\n\nregister on moodle (link will be provided soon)\nattend all lectures\ncomplete project\n\nOther people may participate to the workshop as well (e.g., Master students) but they won't be able to earn ECTS.\nPre-requisites\nSkills:\n\n\nProgramming: Participants musk know programming, ideally in Python, in order to complete the projects and earn ECTS. Participants without programming skills may still participate but might not earn ECTS.\n\n\nMath: Background knowledge in math (Linear Algebra, Probability theory) is desirable.\n\n\nEnglish: All courses will be taught in English.\n\n\nReading list/Preparation for the workshop:\n\nLinear Algebra and Learning from Data by Gilbert Strang\nEdu Data / Learning Analytics review papers (TBD)\nAI / CogSci review papers (TBD)\n\nSetup\nBring your own laptop. If you don't have a laptop you may borrow one from the Luxembourg Learning Centre.\nIn this workshop we will mostly use Python3 and Pytorch.\nWorkshop Program\nThe workshop will take place in\nDay 1:  General Intro\nCANCELLED\nDay 2: Introduction\n\n\n\nTime\nTopic\n\n\n\n\n09:00-09:30\nWelcoming remarks (Cardoso-Leite)\n\n\n09:30-10:30\nEducation Intro\t(Cardoso-Leite)\n\n\n10:30-11:30\nCogSci Intro (Schrater)\n\n\n11:30-12:15\nAI intro (Schommer)\n\n\n13:15-16:00\nAI Methods / Deep Learning intro (Mussack)\n\n\n16:00-18:30\nGroup work\n\n\n\nDay 3: Recommender Systems\n\n\n\nTime\nTopic\n\n\n\n\n08:00-10:30\nNLP & Sentiment Analysis in RecSys (Guo)\n\n\n10:30-12:30\nIRT, Deep Learning for structured data RecSys, Pytorch factorization recommender (Cardoso-Leite; Schrater)\n\n\n14:00-16:00\nNLP-Paper discussion (Schommer)\n\n\n16:00-18:00\nGroup work\n\n\n\nDay 4: Cognitive Modeling, RL\n\n\n\nTime\nTopic\n\n\n\n\n08:00-10:00\nRL intro (Schrater; Rothkopf)\n\n\n10:00-12:00\nTutorial\n\n\n13:00-14:00\nEcological behavior, looking:  RL analysis (Rothkopf)\n\n\n14:00-16:00\nReading and disucssions\n\n\n16:00-18:00\nGroup work\n\n\n\nDay 5: Project Presenations\n\n\n\nTime\nTopic\n\n\n\n\n08:00-10:00\nGroup presenations\n\n\n10:00-12:00\nRoundtable discussion\n\n\n14:00-18:00\nGroup work\n\n\n\nHow to apply\nParticipation is free but places are limited and will be filled on a continuous basis. Therefore, if you are interested, apply as soon as possible by sending an email with the following information:\n\na short cv (in particular explain if you have programming experience)\na short motivation letter (who are you? how would you benefit from this workshop?)\n\nApplications should be send by email to contact@xcit.org\nDeadline: 4 February 2020\n""], 'url_profile': 'https://github.com/xcit-lab', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '119 contributions\n        in the last year', 'description': ['Taipei-QA-Bot\nDeep Learning and Its Applications & Advanced Artificial Intelligence Final Project\n以Bert實作Taipei QA Bot資料集\n'], 'url_profile': 'https://github.com/seanbbear', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['SELENA\nA concept of operations for an autonomous artificial intelligence\nThese are the specs for an autonomous Artificial Intelligence. I am looking for people to join the project.\n'], 'url_profile': 'https://github.com/twilightravengames', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'New York metropolitan area', 'stats_list': [], 'contributions': '223 contributions\n        in the last year', 'description': [""The following files are my programming assignments that I had to write as part of my 'Introduction Into Artificial Intelligence' class (CS370)\nThey use no external libraries (such as Tensorflow or PyTorch) and only require it to be ran on Python 3 (preferably Python 3.7.4)\n""], 'url_profile': 'https://github.com/digitalcircuits', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}","{'location': 'Turin, Italy', 'stats_list': [], 'contributions': '267 contributions\n        in the last year', 'description': ['ML-AI_HW3\nHomework 3 of 3 of Machine Learning and Artificial Intelligence @ Polito\n'], 'url_profile': 'https://github.com/Vaelthur', 'info_list': ['Updated Jan 7, 2020', 'Python', 'Updated Jan 11, 2020', 'Updated Jan 6, 2020', 'Python', 'Updated Jan 16, 2020', 'Updated Jan 6, 2020', 'Updated Feb 10, 2020', 'Python', 'Updated Feb 27, 2020', 'Updated Jan 8, 2020', 'Python', 'Updated Jan 6, 2020', 'Jupyter Notebook', 'Updated Jan 7, 2020']}"
"{'location': 'Rayadurg', 'stats_list': [], 'contributions': '117 contributions\n        in the last year', 'description': ['Batch No - B7\nStudent Informative Voice Based Chat Bot System\nProject Overview\n\nChat bot is an automation system and different formats of chat bots are command-line, graphical, web application, and voice based. Chat bots typically provide a text-based user interface, allowing the user to type commands and receive text as well as text to speech response. The functionality of a Chat bot works only on the existing commands. Chat bots  usually remember previous commands in order to provide functionality\n\nWhat Will I Learn?\n\nDevelop a RESTful web application using the Python framework Flask\nImplementing OAuth authentication.\nImplementing CRUD (create, read, update and delete) operations.\nHow to handle chatterbot module in python\n\nSkills used for this project\n\nNatural language processing tool kit\nPattern Matching\nPython –flask\nSQL alchemy\n\nPreRequisites\n\nPython ~3.7\nSQL alchemy\nChatterBot\n\nHow to Run\n\n\nInstall Python ~ 3.7\n\n\nClone this repo\n\n\nUnzip the file\n\n\ngo student_chatbot folder\n\n\ninstall all requirements using pip\n\n\n$ pip install -r requirements.txt\n\n\nCreate a database and tables\n\n$ Python database_setup.py\n\n\nPopulate the database with some initial data\n\n$ Python input_data.py\n\n\nLaunch application\n\n$ Python app.py\n\n\nOpen the browser and go to http://localhost:5000\n\n'], 'url_profile': 'https://github.com/satheesh22g', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'Montreal', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ndebray', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'Bangalore, India', 'stats_list': [], 'contributions': '11,676 contributions\n        in the last year', 'description': [""\nRanking Fraud Detection for Mobile Apps: A Holistic View\nSecuring the Deep Fraud Detector in Large-Scale E-Commerce Platform via Adversarial Machine Learning Approach\nGraph-Based User Behavior Modeling: From Prediction to Fraud Detection\nExposing Search and Advertisement Abuse Tactics and Infrastructure of Technical Support Scammers\nHiDDen: Hierarchical Dense Subgraph Detection with Application to Financial Fraud Detection\nREV2: Fraudulent User Prediction in Rating Platforms\nFraud Detection with Density Estimation Trees\nAI Technologies to Defeat Identity Theft Vulnerabilities\nA Machine-Learned Proactive Moderation System for Auction Fraud Detection\nRealtime Constrained Cycle Detection in Large Dynamic Graphs\nUsing Co-Visitation Networks For Detecting Large Scale Online Display Advertising Exchange Fraud\nCrowd Fraud Detection in Internet Advertising\nLarge Graph Mining: Patterns, Cascades, Fraud Detection, and Algorithms \nOnline Modeling of Proactive Moderation System for Auction Fraud Detection\nUsing Relational Knowledge Discovery to Prevent Securities Fraud\nNetProbe: A Fast and Scalable System for Fraud Detection in Online Auction Networks\nIdentifying Anomalies in Graph Streams Using Change Detection\nDetecting Fraud in Health Insurance Data: Learning to Model Incomplete Benford's Law Distributions\nKey Player Identification in Underground Forums over Attributed Heterogeneous Information Network Embedding Framework\nFraud Detection by Generating Positive Samples for Classification from\nUnlabeled Data\nPD-FDS: Purchase Density based Online Credit Card Fraud Detection System\nImproving Card Fraud Detection through Suspicious Pattern Discovery\nA graph-based, semi-supervised, credit card fraud detection system\nA Pattern Discovery Approach to Retail Fraud Detection\nFRAUDAR: Bounding Graph Fraud in the Face of Camouflage\nFARE: Schema-Agnostic Anomaly Detection in Social Event Logs\nImproving Credit Card Fraud Detection with Calibrated Probabilities\nCredit Card Fraud Detection Using Meta-Learning: Issues and Initial Results\nRobust System for Identifying Procurement Fraud\nBIRDNEST: Bayesian Inference for Ratings-Fraud Detection\nDocument Classification and Visualisation to Support the Investigation of Suspected Fraud\nDetecting Fraudulent Personalities in Networks of Online Auctioneers\nFrauDetector: A Graph-Mining-based Framework for Fraudulent Phone Call Detection \nToward Scalable Learning with Non-uniform Class and Cost Distributions: A Case Study in Credit Card Fraud Detection\nToward An Intelligent Agent for Fraud Detection — The CFE Agent\nUncovering Download Fraud Activities in Mobile App Markets\nNo Place to Hide: Catching Fraudulent Entities in Tensors\nDetection of money laundering groups using supervised learning in networks\nCall-based Fraud Detection in Mobile Communication Networks using a Hierarchical Regime-Switching Model\nImpression Allocation for Combating Fraud in E-commerce Via Deep\nReinforcement Learning with Action Norm Penalty\nOnline Reputation Fraud Campaign Detection in User Ratings\nCatch the Black Sheep: Unified Framework for Shilling Attack Detection\nBased on Fraudulent Action Propagation\nUtility-Based Fraud Detection\nGraph Analysis for Detecting Fraud, Waste, and Abuse in Healthcare Data\nAnomaly, Event, and Fraud Detection in Large Network Datasets\nFraudulent Support Telephone Number Identification Based on Co-occurrence Information on theWeb\n\n""], 'url_profile': 'https://github.com/manjunath5496', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['KI_UniFrankfurt\nFiles for Course ""Artificial Intelligence (KI-b)"" at Goethe Uni Frankfurt\n'], 'url_profile': 'https://github.com/anselm-ug', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'Bologna, Italy', 'stats_list': [], 'contributions': '212 contributions\n        in the last year', 'description': [""A.I.DA\nProject work for Foundations of Artificial Intelligence - MSc Computer Engineering (University of Bologna)\nNamed after Giuseppe Verdi's opera, A.I.DA is a Java-based genetic algorithm that produces monophonic music.\nAmong other parameters, the user can choose the length of the samples, the mapping from genotype to phenotype by means of a scale (i.e. C Major, etc.), and the note range.\nThe best results were obtained with a Pentatonic C Major scale, 16 notes per sample, and 6 as the note range.\nIn /report there is a PowerPoint with audio samples, an explanation of what happens in A.I.DA, the UML diagram and the references. There is also a PDF version of the presentation.\nMore results can be found in /results.\nThis work has been inspired by Prof. John Biles, whose work on music can be found here.\nThis paper in particular has been very useful: Biles, John. (1994). GenJam: A Genetic Algorithm for Generating Jazz Solos.\n""], 'url_profile': 'https://github.com/ilceltico', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '177 contributions\n        in the last year', 'description': ['10316-materials-design-ai\nDTU Course 10316 - Material design with machine learning and artificial intelligence\n'], 'url_profile': 'https://github.com/Strandgaard96', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['RuleBasedQuestionGeneration\nGeneration of questions based on given context. No artificial intelligence, just rules.\n'], 'url_profile': 'https://github.com/dimitrije-zucc', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'Depok', 'stats_list': [], 'contributions': '159 contributions\n        in the last year', 'description': ['ai-kepribadian\nArtificial intelligence (AI) berbasis web PHP untuk memperkirakan kepribadian pengguna berdasarkan survey.\n'], 'url_profile': 'https://github.com/VClude', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['Programmentwurf Sternensammler\nA* Suchverfahren\nZiel\nEs soll ein Programm erstellt werden, welches ein Labyrinth aus gegebenen Informationen aus verschiedenen csv Dateien generiert und dies dann anhand einer gegebener Start und Ziel Koordinate  sowie Energiemenge löst.  Der A-Stern Algorithmus soll hierzu verwendet werden.\nParameter und Variablen\nHier werden die wichtigsten Parameter und deren Sinn erklärt.\nLabyrinth: 2 Dimensionales Array der Größe 10 mal 10 indem der Inhalt des Labyrinth gespeichert wird. Alle Felder des Arrays werden bei Initialisierung auf 0 für Leer gesetzt. Das Labyrinth besitzt aber auch  wie Sterne und Energie die eingesammelt werden können und Mauern welches die Bewegung einschränken\nMauern: Mauern werden zwischen 2 Felder gesetzt und verhindern das man von dem einen Feld auf  das andere kommt. Die Position der Mauern im Labyrinth wird aus einer csv Datei eingelesen.\nSterne: Sterne werden auf Felder gesetzt und geben 2 Punkte wenn sie durch das betreten eines Feldes eingesammelt werden. Die Position der Sterne im Labyrinth wird aus einer csv Datei eingelesen.\nEnergie: Energie wird auf Felder gesetzt und gibt 5 Energiepunkte wenn sie durch das betreten eines Feldes eingesammelt wird. Wenn die Gesamtenergie aufgebraucht ist und das Ziel noch nicht erreicht so ist das Programm gescheitert. Die Position der Energie im Labyrinth wird aus einer csv Datei eingelesen. Die Anfangsenergie wird im CLI Betrieb al Parameter übergeben oder bei der GUI  in einem Feld eingegeben.\nStart und Ziel Koordinate: Start und Ziel Koordinaten werden im CLI Betrieb als Parameter übergeben. Im GUI Betrieb in einem Feld eingegeben. Die Eingabe ist in beiden Fällen ein String welches aus x und y Koordinate besteht getrennt von einem Komma bsp. „3, 2“ Koordinate x = 3 y = 2.\nFeldererklärung\n\n0 = Leeres Feld\n1 = Feld mit angrenzender Mauer\n2 = Feld mit Energie\n3 = Feld mit Energie und angrenzender Mauer\n4 = Feld mit Stern\n5 = Feld mit Stern und angrenzender Mauer\n\nEs ist nicht möglich von einem Feld mit angrenzender  Mauer (1) auf ein anderes Feld mit angrenzender Mauer zu gehen (1, 3, 5).   Wenn man ein Feld mit Energy (2, 3) oder Stern (4, 5) betritt so wird dies um den Standardwert des Feldes reduziert (-2 bei Energie oder -4 bei Stern) dadurch wird diese Feld dann zu einem Leeren Felod oder einem mit Mauer (0, 1) und der Stern oder die Energie wird eingesammelt\nUmsetzung\nDas Programm wurde als Python Script implementiert welches in 2 verschiedenen Modi verwendet werden kann. Eine Command Line Interface (CLI) welches das Ergebnis für ein Pfad durch das  Labyrinth liefert. Sowie eine Grafische Benutzeroberfläche wo man mehrere verschiedene Labyrinthe mit Unterschiedlichen Start und Ziel Koordinaten laufen lassen kann.\nDie Ausgabe ist in beiden Versionen der Pfad, die anzahl Gesammelter Sterne Mal 2 genommen, die übrig gebiebene Energiemenge und ob man es bis zum Ziel geschaft hatt mit der Energie.\nFür die umsetztung wurden einige Biblotheken von Python verwendet. Diese Sind zum verwenden von der Anwendung nötig.\n\nPandas: Bibliothek für die Verwaltung von Daten\nNumpy: Bibliothek für den Umgang mit Vektoren und Matrizen\nTkinter:  Bibliothek um GUIs in Python zu Erstellen\nSys\nArgparse:  Bibliothek um die CLI interface zu erstellen\n\nVerwendung mit Beispiele\nCommand Line Interface (CLI)\nDie CLI bestitzt 2 Hauptoptionen man kann die Hilfe aufrufen oder die Eigenliche Anwendung Verwenden. Die Hilfe wird mit dem nachfolgendem Befehl aufgerufen.\nfoo@bar:~/Astart-DHBW-KI$ python3 A-Star-Search.py -h\nusage: A-Star-Search.py [-h] [-s START] [-g GOAL] [-se STARTENERGY]\n                          [-w WALLS] [-st STARS] [-e ENERGY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s START, --start START\n                        Startvalue as: ""x,y""\n  -g GOAL, --goal GOAL  Goalvalue as: ""x,y""\n  -se STARTENERGY, --startenergy STARTENERGY\n                        Energy as number\n  -w WALLS, --walls WALLS\n                        Path to wall csv\n  -st STARS, --stars STARS\n                        Path to star csv\n  -e ENERGY, --energy ENERGY\n                        Path to energy csv\n\nHier sieht man auch die Parameter die Benötigt werden um die Anwendung im CLI Betrieb auszuführen. Es werden alle Parameter Benötigt sowie im folgendem Beispiel gezeigt wird. Wenn nicht alle Parameter Gegeben sind wird die GUI Version aufgerufen.\nfoo@bar:~/Astart-DHBW-KI$ python3 A-Star-Search.py -s ""0,0"" -g ""9,9"" -se 15 -w ""CSV-Data/S_A01_Mauer.csv"" -st ""CSV-Data/S_A01_Stern.csv"" -e ""CSV-Data/S_A01_Energie.csv""\nStart CMD\n### Enter start as: x,y | default 0, 0\n### Enter goal as: x,y | default 9, 9\n### Enter energy as number default 5\n15\n### 1) Generate Clean Maze ###\n[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n### 2) Get Wall data from csv if empty uses example csv ###\n### 3) Set Wall Data in maze ###\n### 4) Get Energy data from csv if empty uses example csv###\n### 5) Set Star Data in maze ###\n### 6) Get Star data from csv if empty uses example csv###\n### 7) Set Star Data in maze ###\n[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 4. 0. 0. 0. 3. 1. 0. 0.]\n [0. 1. 1. 1. 0. 4. 1. 1. 0. 0.]\n [0. 1. 1. 1. 0. 0. 0. 0. 4. 0.]\n [0. 0. 4. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 4. 0. 0. 0.]\n [0. 0. 0. 4. 0. 0. 1. 1. 0. 0.]\n [0. 0. 0. 0. 0. 0. 1. 1. 0. 4.]\n [0. 0. 2. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 4. 0. 0. 0. 0. 0.]]\nstar\nstar\n### 8) A* was successful ###\n### 9) Print Path ###\n[(0, 0), (1, 1), (1, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8), (7, 9), (8, 9), (9, 9)]\n### 10) Print energy ###\n3\n### 11) print stars ###\n4\n\nProcess finished with exit code 0\n\nGraphical User Interface (GUI)\nUm die Grafische Benutzeroberfläche aufzurufen wird der Script ohne Parameter ausgeführt.\nfoo@bar:~/Astart-DHBW-KI$ python3 A-Star-Search.py \nDann können die Start und Zielwerte sowie Anfangsenergie in der GUI angegeben werden und die Dateien für die Sterne, Energie und Mauern können über den Dateibrowser ausgewählt werden.\n\n'], 'url_profile': 'https://github.com/skywalkeretw', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}","{'location': 'Kongens Lyngby', 'stats_list': [], 'contributions': '68 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/augustsemrau', 'info_list': ['4', 'HTML', 'Updated Feb 4, 2021', 'HTML', 'Updated Jan 18, 2020', '3', 'Updated Jan 6, 2020', 'MIT license', 'Updated Jan 12, 2020', 'Java', 'Updated Jan 27, 2020', '1', 'Jupyter Notebook', 'Updated Jan 17, 2020', 'Updated Jan 11, 2020', 'PHP', 'Updated Apr 7, 2019', 'Python', 'MIT license', 'Updated Jan 13, 2020', 'Python', 'Updated Jan 21, 2020']}"
"{'location': 'The Internet', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MrDataScience', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Kongens Lyngby', 'stats_list': [], 'contributions': '68 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/augustsemrau', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '46 contributions\n        in the last year', 'description': ['Information-Theoretic XAI\nThis repository contains links to publications on information-theoretic methods which could be used for Explainable Artificial Intelligence (XAI).\nVariational Information Bottleneck\n\nKolchinsky, Artemy, Brendan D. Tracey, and Steven Van Kuyk. ""Caveats for information bottleneck in deterministic scenarios."" (ICLR 2019) [PDF]\nSaxe, Andrew M., Yamini Bansal, Joel Dapello, Madhu Advani, Artemy Kolchinsky, Brendan D. Tracey, and David D. Cox. ""On the information bottleneck theory of deep learning."" (ICLR 2019) [PDF]\nBang, Seojin, Pengtao Xie, Wei Wu, and Eric Xing. ""Explaining a black-box using Deep Variational Information Bottleneck Approach."" arXiv preprint arXiv:1902.06918 (2019) [PDF]\nLi, Xiang Lisa, and Jason Eisner. ""Specializing Word Embeddings (for Parsing) by Information Bottleneck."" (EMNLP 2019) [PDF]\nDai, Bin, Chen Zhu, and David Wipf. ""Compressing neural networks using the variational information bottleneck."" Proceedings of the 35th International Conference on Machine Learning (ICML 2018) [PDF]\nAlemi, Alexander A., Ian Fischer, and Joshua V. Dillon. ""Uncertainty in the variational information bottleneck."" arXiv preprint arXiv:1807.00906 (2018) [PDF]\nAlemi, Alexander A., Ian Fischer, Joshua V. Dillon, and Kevin Murphy. ""Deep variational information bottleneck."" (ICLR 2017) [PDF]\n\nMutual Information Maximization\n\nKong, Lingpeng, Cyprien de Masson d\'Autume, Wang Ling, Lei Yu, Zihang Dai, and Dani Yogatama. ""A Mutual Information Maximization Perspective of Language Representation Learning."" (ICLR 2020) [PDF]\nSong, Jiaming, and Stefano Ermon. ""Understanding the Limitations of Variational Mutual Information Estimators."" (ICLR 2020) [PDF]\nPoole, Ben, Sherjil Ozair, Aaron Van Den Oord, Alex Alemi, and George Tucker. ""On Variational Bounds of Mutual Information."" In the 36th International Conference on Machine Learning, pp. 5171-5180. (ICML 2019) [PDF]\nTschannen, Michael, Josip Djolonga, Paul K. Rubenstein, Sylvain Gelly, and Mario Lucic. ""On mutual information maximization for representation learning."" arXiv preprint arXiv:1907.13625 (2019) [PDF]\nGabrié, Marylou, Andre Manoel, Clément Luneau, Nicolas Macris, Florent Krzakala, and Lenka Zdeborová. ""Entropy and mutual information in models of deep neural networks."" In Advances in Neural Information Processing Systems, pp. 1821-1831. (NIPS 2018) [PDF]\n\n'], 'url_profile': 'https://github.com/nuaaxc', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Montréal, QC, Canada', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['Assignments  for ""INF8215: Methods and Algorithms for Artificial Intelligence""\nDescription\nThese are the 3 assignments for the INF8215: Methods and Algorithms for Artificial Intelligence, taught by Prof. DANIEL ALOISE. The content of this course is very similar and inspired from the content of the CS 188: Introduction to Artificial Intelligence course at UC Berkeley.\nThis is a joint work with Théo Moins and Amine Bellahsen.\nAssignment 1 : search methods [Python]\nImplemented methods: search trees, A* search algorithm and Variable Neighborhood Search (VNS).\nStatement in English\nSolution in French.\nAssignment 2: Prolog, logic programming and constraint programming [Prolog&MiniZinc]\nUsing constraint programming to solve two combinatorial problems and logic programming to extract information.\nStatement in English\nSolution:\nExercise 1\nExercise 2\nExercise 3\nExercise 4\nReport in French.\nAssignment 3: Machine Learning [Python]\nImplementation of softmax regression, data preprocessing and InclassKaggle challenge.\nStatement in English\nSolution in French.\n'], 'url_profile': 'https://github.com/Sanaelotfi', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/liamshawcarleton', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Bangalore, India', 'stats_list': [], 'contributions': '11,676 contributions\n        in the last year', 'description': [""\nMerge Sort Algorithm\nA Concurrency-Optimal Binary Search Tree\nLRC: Dependency-Aware Cache Management for Data Analytics Clusters\nLLVM: A Compilation Framework for Lifelong Program Analysis and Transformation\nSCTP in Go\nThe Little Manual of API Design\nNo Silver Bullet − Essence and Accident in Software Engineering\nCalvin: Fast Distributed Transactions for Partitioned Database Systems\nConcurrent Data Structures\nUnderstanding Real-World Concurrency Bugs in Go\nAn Approach to Improve the Performance of Insertion Sort Algorithm\nAn Overview of Approaches Used In Focused Crawlers\nSmartcrawler: a two-stage crawler for efficient search result \nAn O(1) algorithm for implementing the LFU cache eviction scheme\nLarge Scale Unit Testing for Go Programming Language Packages\nProceedings of FAST' 03: 2nd USENIX Conference on File and Storage Technologies\nAmazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases\nView-Centric Performance Optimization for Database-Backed Web Applications\nThe Science of Software and System Design\nSkip Lists: A Probabilistic Alternative to Balanced Trees\nProgramming Paradigms for Dummies: What Every Programmer Should Know\nGoogle's DeepWeb Crawl\n\n""], 'url_profile': 'https://github.com/manjunath5496', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/guillemgbt', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'Singapore', 'stats_list': [], 'contributions': '453 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/DouMaokang', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Stephoni_Lee\nA.A - Accountancy/Accounting, A.S-T - Business Administration, B.S - Biochemistry/Biomedical Engineering (IP), Data Science/Machine Learning/Artificial Intelligence at Lamda School (2020)\n'], 'url_profile': 'https://github.com/stephonilee19', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['AI Projects\nA few Artificial Intelligence based assignments completed during the first semester of my senior year. Class was taugh by Professor Richard Burns, burns@wcupa.edu\n'], 'url_profile': 'https://github.com/ryanowings', 'info_list': ['Python', 'MIT license', 'Updated Jan 16, 2020', 'R', 'Updated Jan 21, 2020', 'Updated Jan 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jan 10, 2020', 'C#', 'Updated Apr 17, 2020', '1', 'Updated Jan 6, 2020', 'Swift', 'Updated Feb 14, 2020', 'Jupyter Notebook', 'Updated Jan 9, 2020', 'Updated Jan 12, 2020', '1', 'Python', 'Updated Jan 10, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Iroh-1', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/alexisarekion', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '135 contributions\n        in the last year', 'description': ['Pathfinder\nDescription:\nPathfinder is a python visualizer program that shows how the shortest path algorithm finds the appropriate route given a starting and ending point in the grid. Users can also draw boundaries on the grid and the algorithm will adapt to it accordingly. In each step, the algorithm looks at four postions from the current position: top, bottom, right and left to find the shortest path. Python Pygame is used to build this application.\nDemo:\n\nCredits\nText input module imported from: https://github.com/Nearoo/pygame-text-input\nContributor(s):\nMd. Abrar Labib: https://github.com/abrar-labib\n'], 'url_profile': 'https://github.com/Saquibirtiza', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['8puzzle\nSolving the 8puzzle game using BFS and A* search algorithm and compare their effectivenes. Group project for Artificial Intelligence, UOWM Semester 2019-2020\n'], 'url_profile': 'https://github.com/katerinatheo', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/jmstomber', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'Ottawa, Ontario, Canada', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['ARIA\nA prototype for granting agencies to be able to use Artificial Intelligence and Machine Learning to pre-score applications based on set program eligibility criteria.\nNot Production, Experimental Only\nBuilt as a project for the Canadian School of Public Service, Digital Academy (Cohort II)\nDemo at https://xerotalent.github.io/ARIA/\n'], 'url_profile': 'https://github.com/xerotalent', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'Mumbai, India', 'stats_list': [], 'contributions': '325 contributions\n        in the last year', 'description': ['Reinforcement learning on Breakout and Pong\nCourse Project for AI-ML(CS-337), Autumn 2019, IIT Bombay.\nThis project explores the following reinforcement learning algorithms and performs a comparative analysis on the game Breakout and Pong:\n\nDeep Q-learning\nAdvantage Actor-Critic Learning\nProximal policy optimization\nTrust Region Policy Optimization\n\nPlease visit https://github.com/ajd12342/exploring-reinforcement-learning/tree/master/Pong/videos and https://github.com/ajd12342/exploring-reinforcement-learning/tree/master/Breakout/videos for demo videos of the AI playing Breakout and Pong after training is complete.\n'], 'url_profile': 'https://github.com/ajd12342', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'Japan', 'stats_list': [], 'contributions': '77 contributions\n        in the last year', 'description': ['A.I.Segmentation version 1.4.1\nThe Xcode project of A.I.Segmentation version 1.4.1.\n\nYou can download the latest A.I.Segmentation from HERE. (The source code is not public)\nNOTE: This is the source code of the old version, known bugs that were unknown at its release are left unchanged.\n\n\n'], 'url_profile': 'https://github.com/tkshirakawa', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'Colorado', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['Othello-AI\nWorked with a classmate to develop an Othello AI for our final project for the Artificial Intelligence course. We utilized the Monte Carlo search tree algorithm to accomplish this. The AI was programmed in Python.\n'], 'url_profile': 'https://github.com/MiguelAnGuerrero', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['AL_F\nSystem ready, alienated Artificial Intelligence command center. The language syntax is similar to C++, although it is a custom language operating as a interpretation mechanism for a highly complex artificial intelligence from a supposed planetary constellation approximated 50 light years from our solar system. To understand the systematic representation of the core integration of the code is interpretative to the command sequence of plain-text to computer Kernel Grade Assembly debugging of changes to the computer system. The code it self is not compatible with current system, yet is achieved change in the registers behind the scenes of the Graphical User Interface, as it is with in the Verbose consistence of the main frame of a computer record.  Each command starts with AL_FIN as follows (WHAT2FIND)::PLAINTEXT::CLASSINHEIRANCE; So a command such as a desire to inject a CMD prompt into a foreign computer system as follows  AL_FIN(WORKSTATIONNAME)::INJECT@(cmd.exe) -^ LOCALIZEDHOST#[%HOST%];  So as presented this command is suppose to find the workstation which is the name of the computer system than as follows the host is into a localized host pool that is part of GLOBALHOST domain.\n'], 'url_profile': 'https://github.com/DragonStar666', 'info_list': ['Updated Jan 7, 2020', 'Updated Jan 9, 2020', 'Python', 'Updated Aug 31, 2020', 'C', 'GPL-3.0 license', 'Updated Jan 5, 2020', 'Jupyter Notebook', 'Updated Feb 7, 2020', 'HTML', 'GPL-3.0 license', 'Updated Jan 15, 2020', 'Python', 'MIT license', 'Updated Jan 9, 2020', '1', 'Objective-C', 'BSD-3-Clause license', 'Updated Nov 24, 2020', 'Python', 'Updated Jan 7, 2020', 'Shell', 'GPL-3.0 license', 'Updated Jan 9, 2020']}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Teach-a-Neural-Network-to-Read-Handwriting\nNeural networks and deep learning are two success stories in modern artificial intelligence. They’ve led to major advances in image recognition, automatic text generation, and even in self-driving cars. To get involved with this exciting field, you should start with a manageable dataset. The MNIST Handwritten Digit Classification Challenge is the classic entry point. Image data is generally harder to work with than “flat” relational data. The MNIST data is beginner-friendly and is small enough to fit on one computer. Handwriting recognition will challenge you, but it doesn’t need high computational power. Build a neural network from scratch that solves the MNIST challenge with high accuracy. Data Sources MNIST (http://yann.lecun.com/exdb/mnist/) – MNIST is a modified subset of two datasets collected by the U.S. National Institute of Standards and Technology. It contains 70,000 labeled images of handwritten digits.\n'], 'url_profile': 'https://github.com/Adwayt-APN', 'info_list': ['1', 'Jupyter Notebook', 'Updated Jan 20, 2020']}",,,,,,,,,
