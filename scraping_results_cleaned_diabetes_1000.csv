Location,Followers,Following,Stars,Contributions,Description,Url_profile,Info
"Barkhamsted, CT",468,6,131,32,['diabetesNeuralNetwork\nA neural network using Keras that classifies risk for diabetes based on health data.\n'],https://github.com/jg-fisher,"['47', 'Python', 'Updated Jul 16, 2018', '330', 'Java', 'GPL-3.0 license', 'Updated Aug 20, 2018', '89', 'C#', 'Updated Oct 7, 2019', '191', 'Jupyter Notebook', 'Updated Mar 22, 2018', '26', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jul 12, 2019', '135', 'Python', 'Updated Oct 4, 2020', '201', 'Makefile', 'MIT license', 'Updated Nov 15, 2020', '65', 'HTML', 'Updated Oct 20, 2020', '18', 'Python', 'Updated Jan 30, 2018', '80', 'Python', 'BSD-3-Clause license', 'Updated Feb 5, 2019']"
"Mountain View, CA",37,0,0,4,['This repo contains the Jupyter Notebook for predicting hospital readmission for patients with diabetes using the dataset from UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008).\nThe methodology behind this notebook is explained in my Medium Blog post: https://towardsdatascience.com/predicting-hospital-readmission-for-patients-with-diabetes-using-scikit-learn-a2e359b15f0\nThis project was created based on the conda environment.yml file provided in the repo.\n'],https://github.com/andrewwlong,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
BeiJing,2,2,17,23,['MedicalTreat_Diabetes\n天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测\n止步初赛：215/2522\n'],https://github.com/LCJHust,"['6', 'Python', 'Updated Feb 25, 2018', '4', 'JavaScript', 'Updated Oct 20, 2020', '6', 'Jupyter Notebook', 'Updated Apr 22, 2019', '18', 'Kotlin', 'GPL-3.0 license', 'Updated Sep 27, 2020', '13', 'Jupyter Notebook', 'Updated Jul 7, 2019', '37', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '6', 'Jupyter Notebook', 'Updated Sep 27, 2016', '6', 'Vue', 'MIT license', 'Updated Oct 3, 2020', '3', 'Jupyter Notebook', 'MIT license', 'Updated Nov 5, 2019', '28', 'HTML', 'MIT license', 'Updated Nov 13, 2020']"
"São Paulo, SP Brasil",518,92,36,30,"['Diabetes Mais Doce\nAplicativo para ajudar pessoas diabéticas a buscar quantidade de carboidratos de alimentos, salvar refeições e glicemias diárias, gerar tabelas com esses resultados para médicos, entre outras coisas. A ideia é facilitar o dia a dia de uma pessoa diabética :)\n']",https://github.com/FernandaBernardo,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
Jamshedpur,5,17,48,0,['ML_from_Scratch\nDiabetes Mellitus Prediction using Machine Learning\n'],https://github.com/AntimKhel,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
Chile,20,4,38,18,"['Diabetes-mellitus-prediction-in-Pima-Indians\nThis repository was created to show the workshop for ""Switch Fb developer circle"", which is going to take place on 05-08-2017.\nTítle: ""Proceso CRISP-DM aplicado a la predicción de la diabetes mellitus con datasets públicos""\nThe content of the workshop is divided into two stages:\nTheoretical\n1.-The CRISP-DM and BAB process.\n2.-Scrum Agile and how to mix it with Data Science from my experience\n2.-Explanation of the problem to solve, structure and problems that we face in the dataset.\nHands on\n1.-Understanding and characterization of the data.\n2.-EDA for the Data Understanding\n3.-Data preparation\n4.-Application of logistic,GridSearch algortihm and Random Forest models\n5.-Performance analysis\n6.-Conclusions\nIn the future: TBD according to the feedback of the first audience in the Dev Circle Ago/2017 in SCL-CL\nthe force be with you\n']",https://github.com/iair,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
"Charlotte, NC",3,0,0,0,"[""Healthcare-Data-Analysis-on-PIMA-Indian-Diabetes-Database\nKnowledge Discovery in Database\n\nIn this project we focused our analysis on applying data analysis techniques, create visualizations and interpret the models using histograms, scatter plots and many other visual plots etc. to uncover the reason for high diabetic outcome among the PIMA Indian women.\nPredict whether the patient is diagnosed with diabetes based on diagnostic measurements available in the dataset.\nWe obtained this dataset from Kaggle and built some supervised explanatory models (classification tree and logistic regression) and predictive models (KNN); also tried Unsupervised techniques such as K-means Clustering and Kohonen's Self-Organizing Map (SOM).\nLanguages and tools used: R Programming, R Studio, WEKA and Tableau.\n\n""]",https://github.com/HRakesh,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
Goiânia - GO,64,12,2,69,['Analise Exploratória de Casos de Diabetes\nAnálise exploratória utilizando  Pandas e Numpy e criação de modelo de classificação com Machine Learning para casos de diabetes.\nOs modelos criados para testes foram:\n\nNaive Bayes\nRandom Forest\nLogistic Regression\n\nPara utlização do modelo a fins de testes foi utilizado uma API com o Flask.\n'],https://github.com/cicerojmm,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
"San Jose, CA",6,0,19,6,"['Diabetes-Prediction\nData mining project to detect if a person is diabetic using logistic regression in R\nDataset Description\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nNumber of Instances: 768\nNumber of Attributes: 8 plus class\nAttributes\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nClass Distribution: (class value 1 is interpreted as ""tested positive for\ndiabetes"")\n\n\n\nClass Value\nNumber of instances\n\n\n\n\n0\n500\n\n\n1\n268\n\n\n\n']",https://github.com/jerisalan,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
"Salt Lake City, UT",0,1,0,0,"['Diabetes Management\nWhile there are a variety of technologies out there today that make managing diabetes easier, they are generally single-purpose and integration of information between multiple devices can mean double or triple entry of information.\nThe goal of this project is to improve visibility with minimal lift by extracting information from various monitoring and management devices to allow for insights that are not possible on their own.  Additionally, this will generate a tabular version of the Omnipod data, extracting information from comments, etc. for easier analysis.\nAfter cloning this repository and installing the required software, you\'ll need to enter the name of your files and run all cells in the Jupyter Notebook.\nBackground\nThough not all of this is yet included, here is some useful background information related to the data sources.\n\na1c: The measure of glycolated hemoglobin in the blood.  This is generally-speaking a 3-month average of blood sugar.  A good target range is < 7.0.\nBolus insulin: an amount of insulin taken at once\nBasal insulin: a rate of insulin released into the body over time throughout the day.  Different parts of the day will have different basal insulin rates\nBG or bg: a common abbreviation for blood sugar (blood glucose)\nCGM: Continuous Glucose Monitor.  Dexcom is an example of a CGM.  A CGM takes samples of blood sugar from interstitial fluid rather than directly from the blood.  As a result, CGM blood sugar values are generally considered to be 10-15 minutes behind the actual blood sugar.\n\nGetting Started\nCurrently, this project supports two types of (.csv or .xlsx) files:\n\nOmnipod log files: FreeStyle CoPilot Health Management System\n\nThere is no export option, but you can easily copy and paste all of this data as-is into an excel or csv file.\n\n\nDexcom: Export from your Dexcom Clarity account - Maximum download is 90 days.\n\nhttps://clarity.dexcom.com\nReports > Export\n\n\n\nTo use this package, clone the repository and move copies of your Omnipod and Dexcom data into the corresponding folders in the repository.\nFor reference, files are places in the repository now.\nOnce all files are located in their place, you will just need to use the file paths/folder within the Jupyter notebook to get started.\nOmnipod\n- Meal Bolus: Insulin taken for food eaten\n- Bolus Insulin: A bolus taken for ANY reason where the reason is not specified in the device.\n- Correction Bolus: Insulin taken if blood glucose levels are above target.  A correction bolus is broken out separately from a Meal bolus when bg is above the target.\n- IOB: Insulin On Board - Fast-acting insulin is used in Insulin Pumps (Omnipod, Medtronic, etc.).  When calculating how much insulin to take, either the person or the device must understand how much insulin is already in the body to calculate a correct dose.  If insulin is not used within ~20 minutes after it entered the body, it will be be excreted with no effect on blood sugar.  \n- Extended Meal Bolus: Bolus insulin delivered over a time period.  In the omnipod data, this is seen as a fraction, 0.4 = 40% of the Meal Bolus, for example, will be delivered after a designated time period.  Since some foods take longer for the body to digest into sugars that can be processed by the insulin, extended meal boluses allow for a programmatic way to handle complex foods (i.e. pizza).\n- Blood Sugar (bg) Target: A numeric value that the device uses to calculate the ""ideal"" blood sugar and uses to calculate the amount of insulin to deliver.\n\nDexcom\n- Calibration: A Dexcom (G5) is generally celibrated 2x per day.  Each calibration takes 2 back-to-back blood sugar readings.  \n- Lifecycle: The life of a single device is about 7 days.  After 7 days, the site is switched and there is a two-hour warm-up phase required to activate the new site.\n\nNote: For a variety of reasons, the Dexcom calibration may not be accurate.  Some of these reasons include blood sugar volatility during the warm-up phase of the device (occurs weekly), a faulty insertion (blood affecting the measurement), or over-calibration.\n\nPrerequisites [ Will add Requirements file ]\nSoftware\n\nFreeStyle CoPilot Health Management System\n\nFor instructions: https://www.myomnipod.com/learning-center/download-software/download-abbott\n\n\nPython\nJupyter Notebook\n\nPython Packages to install (imports are in the file but you made need to install some first)\n\nholoviews\nbokeh\nos\npandas\ndatetime\ndateutil\nnumpy\n\nContributing\nAs this project is further developed, I will open it up for contribution.  If you are interested in seeing any particular data sources added, please contact me: [chelsea.lapeikis@gmail.com]\nVersioning\nVersion 0.1 - 12/15/2017\nAuthors\n\nChelsea Lapeikis - Initial work - chelseamlap\n\nLicense\nThis project is licensed under the GNU License - see the LICENSE.md file for details\nAcknowledgments\nMy husband for expanding my understanding of the complex world of diabetes management and for explaining the many variables that exist within each of the systems.\n']",https://github.com/chelseamlap,"['Python', 'GPL-3.0 license', 'Updated Dec 15, 2017', '4', 'MATLAB', 'MIT license', 'Updated Jun 27, 2020', '5', 'Python', 'Updated Nov 4, 2015', '1', 'Java', 'Updated Feb 29, 2016', '2', 'Python', 'Updated Sep 4, 2018', 'Jupyter Notebook', 'Updated Feb 12, 2019', 'Python', 'Updated Feb 8, 2020', '1', 'Jupyter Notebook', 'Updated Nov 25, 2020', '1', 'Jupyter Notebook', 'Updated Oct 8, 2017', 'Swift', 'Updated Mar 22, 2019']"
Singapore,3,1,18,19,"[""DiabetesPredictionSystemPrototype\nNeural Network, Big Data. The design of the diabetes prediction system based on Neural Network.\nWe used the PyBrain as the Neural Network data training and prediction framework.\nIt's a prototype based on “python with django” as the programing language and framework.\nPurpose: We are going to develop an online system that is used to predict females’ health conditions, especially for diabetes. After initial specification, we decide to use the neural network as an approach to train the prediction model. Otherwise some web pages using will be the user interfaces. Because we are lack of clarity in conceptual design, we are going to build an experimental prototype that could help us to complement the specification. This prototype will have high fidelity and become a part of the system in the future. In this prototype, we are mainly focus on the following points.\n\nChoosing the best neural network that could generate efficient and accurate algorithm, and using the trained model to do the prediction service.\nBuilding a stable and excellent interactive interface.\n\nTest Scenarios:\n\nEnter the main page by 127.0.0.1:8000/main/;\nThen click the start button to enter the data processing page; in this page, it shows the\nrelated algorithm to do the data processing, and there are two options, one is the “Show the Raw Data” button to show the list of the raw training data, the other one is “Data Processing” to do the processing;\nEnter the data processing page, we could see the data which we remove from the raw data based on the outlier algorithm of the box plot; moreover, the processed data can be shown by clicking the “Show Processed Data” button, and the following step can be processed by clicking the “Training and Test” button;\nAfter clicking the “Training and Test” button, the client will send the request for training and test the processed data to the server by jQuery/Ajax (cause the training and test stage will spend longer time comparatively), and the server will begin training and test the related data, then the result will show on the next page;\nThen just clicking the “Predict” button, two options (multiple-record predict and single- record predict) can be chosen for the prediction stage;\nFor the multiple-record prediction, just uploading the CSV file with the related format, and for the single-record prediction, just filling with the blanks (still using jQuery/JavaScript to control the input), then the prediction output will be shown on the page; then, there still are two options that one is prediction by the current trained neural network model, and the other is return to the main page.\n\n""]",https://github.com/xljiadahao,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"San Francisco, CA",4,3,15,81,"[""diabetes-pancreas\nLocal Development\n\nnvm use\nnpm install\nnpm start\n\nYou'll need to make sure you have nvm installed and the proper version of node as specified in the .nvmrc file.\nInstalling nvm and the required version of node\n\nnpm install -g nvm\nnvm install\n\n""]",https://github.com/jakobsandberg,"['JavaScript', 'Updated Aug 23, 2018', '1', 'Java', 'Updated Apr 14, 2018', '1', 'Python', 'Updated Jan 30, 2018', 'Jupyter Notebook', 'Updated Dec 15, 2019', '1', 'JavaScript', 'Updated Apr 26, 2014', 'Jupyter Notebook', 'Updated Oct 8, 2016', 'Makefile', 'Updated Mar 27, 2017', 'HTML', 'Updated May 4, 2017', '1', 'HTML', 'MIT license', 'Updated Sep 18, 2020', '1', 'Java', 'Apache-2.0 license', 'Updated May 12, 2019']"
Hamburg,22,19,27,28,"['\nDiabertie\n\nDiabertie is a personal diabetes chatbot.\nIt uses the awesome Telegram Bot API.\nYou can send Diabertie your blood sugar levels, insulin doses and whatever is important for your daily diabetes logging.\nFor a detailed documentation on how to use this bot there is a detailed guide on that.\nContribute\nYou are very encouraged and welcome to contribute to this project as long as you stick to the code of conduct.\nRun development server\nYou have to set some environment variables. There is a .env.example with all the needed variables.\nnpm run dev\nRun tests\n$ npm test\n']",https://github.com/sebashwa,"['3', 'JavaScript', 'Updated Jul 13, 2017', 'HTML', 'Apache-2.0 license', 'Updated Dec 17, 2016', '5', 'Jupyter Notebook', 'Updated Jun 30, 2019', '5', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'Jupyter Notebook', 'Updated Aug 5, 2020', '5', 'Java', 'Updated Jun 17, 2020', '2', 'Jupyter Notebook', 'Updated Jun 14, 2016', 'HTML', 'Updated Dec 5, 2017', '1', 'Java', 'Updated Nov 5, 2016', '1', 'HTML', 'Updated Jan 24, 2016']"
"Syracuse, New York, US",5,1,7,82,"[""Hospital-Readmission-based-on-DiabetesData\n\nProblem Statement\nDiabetes is a widespread chronic disease that is accompanied with irregularities of blood glucose levels due to problems related to insulin. For diabetes; the cost analysis estimates that $250 million can be saved across 98,000 diabetic patients by incorporating predictive modeling and prompting greater attention to those who were predicted to get readmitted. Hospital readmission rates are an indicator of hospital quality as well as a means to reduce healthcare costs. High readmission rate is an indication of poor hospital quality, poor treatment and results in the hospital getting penalized. Hence by identifying the factors that lead to higher readmission and being able to predict if a patient is going to be readmitted, the treatment provided by the hospital can be changed, to avoid a readmission and thereby the quality of healthcare provided to the patient can be largely improved, as well as billions of dollars can be saved.\nData Science Methodology\nBy leveraging the dataset, we will perform extensive Exploratory Data Analysis and perform feature engineering to identify the suitable attributes that are having significant effects on the target variable i.e readmission. After doing exploratory data analysis (EDA) and feature selection, we can build Classification and Clustering Machine Learning models in order to predict whether the patient is going to be readmitted or not. We are planning on implementing Classification algorithms like Logistic Regression, SVM, Feedforward Neural network, etc. and clustering techniques like Kmeans and Hierarchical Agglomerative Clustering algorithms in order to produce the optimum number of clusters. We will then go ahead with the clustering algorithm that produces clusters with the highest purity and least entropy. Extensive model fine-tuning can be done in order to build a model with the best accuracy and recall. The recall is more important in this case as it is very important to minimize Recall by reducing the False Negatives, as incorrectly classifying a patient as ‘Not Readmitted’ when he/she is going to be readmitted can be very problematic and is highly undesirable.\nProject Objective\nThe objective of the project is to help the hospitals accurately predict if a patient is going to get readmitted after discharge. The predictions made will help the hospital make informed decisions on the necessary treatment process alterations in order to reduce patient readmission rate. In this context, you can see different objective functions for the problem. We have to try to figure out situations where the patient will not be readmitted, or if they are going to be readmitted in less than 30 days. Make your choice and let's help them create new approaches for the problem. We will try to predict which factors are more important in determining if a patient might get readmitted within 30 days.\nExpected Results\nBy accurately predicting if a patient is going to be readmitted, the hospital will be able to (taking into account the patient demographics, the treatment procedure and medicines) make necessary treatment changes to avoid the patient readmission. This reduction in patient readmission rate will help the hospital save billions of dollars and also improve their customer rating. The process of EDA followed by model building, fine tuning and performance evaluation is an iterative process which can be carried out until the best and desirable results are achieved.\nDataset Source\nPrediction on Hospital Readmission Classification using Diabetes dataset is obtained from the UCI ML Repository. The data set represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. The data has around 100k+ observations and 50 attributes. The data contains categorical attributes such as race, admission type, insulin, medical specialty of admitting, etc. and binary variables such as gender, change, diabetes Medicine and numeric variables like age, time in hospital, number of lab test performed, number of medication, number of outpatient, inpatient, and emergency visits in the year before the hospitalization. The target variable has 3 different classes which are “No readmission”, “A readmission in less than 30 days” & “A readmission in more than 30 days”.\n\n""]",https://github.com/Laxman-Kumar,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
London,136,54,38,9133,"[""\n\n\n\n\n\nDiabetes dashboard\nA Dashing dashboard, driven by my Pancreas API. Right now it shows:\n\nDaily, weekly and 30-day blood-glucose graphs and averages\nWeekly breakfast, lunch, dinner and bedtime medication graphs and averages\nLatest HbA1c\n\nThere'll be a lot more sophisticated stuff here once I've worked out Coffeescript and Rickshaw\nDeployment\nThis is a straight-up Rack app, it should deploy right onto Heroku. The Heroku environment will need to know about\n\nMETRICS_API_USERNAME and\nMETRICS_API_PASSWORD\n\nto access the Pancreas API (you'll have set these here), and\n\nDASHBOARD_USERNAME and\nDASHBOARD_PASSWORD\n\nwhich will allow you into the dashboard\nDashing is awesome\nSee http://shopify.github.com/dashing for more on Dashing\n""]",https://github.com/pikesley,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
Vancouver,13,11,57,0,"['Medical-Machine-Learning\n\nPredicting hospital readmission for patients with diabetes mellitus\n\nData taken from http://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\nRunning\nFor preprocess.R to work, download the data set from the above link, and place diabetic_data.csv in dataset_diabetes/ folder. The R script has no dependencies. Source the script from the folder where this README is located.\nOnce the data is generated by preprocess.R, run train_randomforest.py to train the model and print importance results. It depends on pandas, numpy, and scikit-learn.\n']",https://github.com/prollynomial,"['1', 'Python', 'Updated Nov 30, 2015', '1', 'JavaScript', 'BSD-2-Clause license', 'Updated Sep 22, 2017', 'R', 'Updated May 2, 2018', '3', 'JavaScript', 'MIT license', 'Updated Mar 14, 2020', '3', 'Jupyter Notebook', 'Updated Mar 25, 2019', '3', 'JavaScript', 'Updated Jun 25, 2019', '2', 'HTML', 'MIT license', 'Updated Jul 6, 2019', '3', 'Jupyter Notebook', 'Updated Sep 28, 2020', '3', 'Python', 'Updated Sep 10, 2012', '2', 'JavaScript', 'Updated Oct 22, 2012']"
Krauschwitz,4,8,24,52,"['FPE-Rechner\nThis app is designed, to help diabetics, to calculate the fat protein units.\nFat protein units will additionally to the bread units calculated.\nPlease check with a doctor previously!\nIt is not a officially approved medical application.\nExtra Tools:\n\nFood database\nFactor database by time\nConverter for mg/dl and mmol/l\n\n\nCommunities\nFollow on Google+\nDonations\nDonate with PayPal\nLogo\n\n']",https://github.com/Matze1985,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
Pune,0,7,0,0,['Machine-Learning-in-HealthCare\n1.Machine Learning for Diagnosis of Diabetes With Python\n'],https://github.com/BKhairkhar,"['4', 'Jupyter Notebook', 'Updated Feb 6, 2019', '2', 'Jupyter Notebook', 'Updated Aug 17, 2020', '2', 'HTML', 'MIT license', 'Updated Nov 22, 2020', '2', 'R', 'Updated Aug 16, 2017', 'Updated Dec 22, 2014', 'Python', 'Updated Aug 11, 2017', '2', 'Updated Apr 6, 2018', '2', 'Java', 'Updated May 4, 2020', '2', 'JavaScript', 'Updated Apr 25, 2016', '2', 'C#', 'Updated Sep 11, 2014']"
"Denver, Colorado",0,7,0,6,"['diabetes\nA test case illustrating the use of Spark on real-time IoT data.\nchallenge\nThe standard of care for Type 2 Diabetes includes monitoring average blood insulin level over three months.  New advances in medicine and data engineering allow for granular monitoring and care recommendations.  Our challenge is to ingest data from personal health monitors, securely transmit that data to the cloud, apply data science analysis, and display current status to the patient and care givers.\nsolution\nThe first prototype uses Python code on a Raspberry Pi to generate mock patient data streams, simulating an OEM diabetes monitor. We ingest JSON data as MQTT packets into Amazon AWS IoT. Subsequent iterations used a direct connection to Kafka running on an EC2 instance which allows us to ingest streams from multiple patients, maintain fault tolerance, and enable multiple consumers to subscribe. Kinesis was also tested as an alternative to Kafka.\nFrom Kafka, Kinesis, or AWS IoT, the next step is to subscribe to topics and ingest the data into longer term storage in S3. A small Spark 2.1 cluster running on EC2 instances is used for this purpose.  We wrote code for Spark in Scala which reads JSON streams from a Kafka topic, transforming and joining the data into normalized formats, then writing out the stream to Parquet files on S3 that are partitioned by time and patientID.\nFor analysis and display of the patient condition, the Parquet files are analyzed in Databricks Notebooks running Spark 2.2. The notebooks use regression and classification algorithms to score the current status of the patient and prioritize patients for home care visits.\n']",https://github.com/brantseibert,"['Updated Jan 3, 2018', 'Updated Mar 27, 2017', 'Updated Nov 10, 2017', 'Swift', 'Updated Dec 14, 2016', 'Jupyter Notebook', 'Updated Mar 7, 2018', 'Updated Mar 12, 2018', 'Updated Mar 24, 2019', 'Python', 'Updated Jun 30, 2019', 'Python', 'Updated Feb 8, 2019', 'Jupyter Notebook', 'Updated Oct 30, 2019']"
"Pune , Maharastra",4,9,18,0,['Diabetes\n'],https://github.com/Bhasha4995dusara,"['1', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated Sep 4, 2018', 'Python', 'Updated Feb 21, 2018', 'Java', 'Updated Apr 11, 2018', 'Java', 'Updated Jan 14, 2019', '1', 'HTML', 'MIT license', 'Updated Mar 30, 2019', 'Updated Oct 18, 2019', '1', 'Jupyter Notebook', 'Updated Feb 11, 2020', 'Jupyter Notebook', 'Updated Feb 14, 2020', 'Updated Nov 7, 2019']"
bangalore,4,9,18,1,['diabetes\n'],https://github.com/vikassrm,"['Jupyter Notebook', 'Updated Aug 20, 2018', 'Updated Jul 9, 2018', 'HTML', 'Updated Nov 25, 2018', 'Updated Oct 21, 2018', 'Python', 'Updated Mar 5, 2018', 'Python', 'Updated Dec 9, 2018', 'Updated Apr 5, 2019', 'Jupyter Notebook', 'Updated Jun 4, 2019', 'Updated Mar 10, 2019', 'Updated Sep 29, 2018']"
"Berkeley, CA",1,0,0,10,"['To see what this project is about and follow its analysis, visit my portfolio.\nA special thanks to Temi Lal and Charles Thorson for their help. This project would not have been possible without them!\n']",https://github.com/Zubair-Marediya,"['HTML', 'Updated Feb 17, 2016', '1', 'Java', 'GPL-3.0 license', 'Updated Sep 23, 2017', 'Python', 'Updated Jan 23, 2018', 'Updated Apr 23, 2018', 'Jupyter Notebook', 'Updated Nov 19, 2018', 'R', 'MIT license', 'Updated Aug 24, 2018', 'Updated Sep 22, 2018', 'Updated May 7, 2019', 'Updated Aug 26, 2019', 'Updated Apr 4, 2019']"
Nigeria,0,1,0,20,['diabetes\nPrediction\n'],https://github.com/Dandignity,"['Updated Jul 29, 2020', 'Jupyter Notebook', 'Updated May 22, 2020', 'Jupyter Notebook', 'Updated Aug 13, 2020', 'HTML', 'Updated Oct 24, 2020', 'Python', 'Updated Oct 24, 2020', '4', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Java', 'Updated Mar 30, 2016', '2', 'Jupyter Notebook', 'Updated Jun 21, 2020', '2', 'Jupyter Notebook', 'Updated Oct 27, 2020', '2', 'MATLAB', 'Updated Jul 15, 2016']"
Oslo Norway,55,7,25,3403,['diabetes\nAn Android app to record and display blood sugar measurements and store them in the cloud.\n'],https://github.com/donv,"['MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018', 'Updated Apr 7, 2018']"
"Razole ,East Godavari, Andhra Pradesh",55,7,25,301,"[""Diabetes\nImplementation : Our implementation is mainly divided into five steps:\n\nExploring the Data:\nExploring the Data using jupyter notebook and verify we need to data preprocessing or not.For this dataset there is no need to data preprocessing. Before split into train and test data check outcome balanced or in balance.whether it is in balanced then we used f1_score.\nSplit into train and test:\nIn this we will use train_test_split which is available in `sklearn.model selection'. Where we will be dividing the data into train 80% and test splits of 20%.\nBenchmark model vs other models:\nWe can choose our benchmark model as LogisticRegression. Because it is simple and easy to implement.We will apply a series of classification algorithms like Logistic\nRegression, Decision Trees, Random forests etc.The next step is to find and compare f1_scores of all the models\nagainst the benchmark model.\nApply Grid Search Optimization:\nSince we can observe that the model with f1_score is Random Forests with an f1_score of 97.65%.We can select Random forest for further optimizing it by applying the\nsame algorithm on a different set of parameters to find the one with the best f1_score.\nDisplay results\nHere we will apply many supervised learning algorithms and decide which algorithm is best suited for our dataset. We can apply the grid search on some chosen algorithms to decide the best parameters among many.Finding gridsearchcv optimal f1_score changing parameters to get best optimal f1_score.gridsearchcv (parameters like n_estimator,max_depth..etc)\nto get best f1_score for this best classification model using gridsearchcv. I faced some more extra time taken to find best f1_score to change parameters to this diabetes machine learning project.\n\n\nExternal Libraries used:\n\n\nSciKit Learn\n2.Numpy\n3.Matplotlib\n4.Pandas\n\n\nData:\n1.Diabetes Dataset available from Kaggle here https://www.kaggle.com/johndasilva/diabetes\n2.Also included in directory of repository in original form\n\n""]",https://github.com/tejaanuchuri,"['HTML', 'Updated Jul 9, 2020', 'Updated Jul 22, 2020', 'TypeScript', 'MIT license', 'Updated Aug 7, 2020', 'Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015']"
Madrid,19,45,889,15,"['Diabetes\nA Symfony project created on January 11, 2016, 4:21 pm.\n']",https://github.com/izquierdogalan,"['PHP', 'Apache-2.0 license', 'Updated Jan 28, 2016', 'Updated Dec 28, 2017', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019']"
Mumbai,4,14,200,0,['Diabetes\n'],https://github.com/saurabh9969,"['Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019', 'Updated Nov 13, 2019', 'C#', 'Updated Oct 21, 2017']"
Toronto,2,8,1,12,"['Diabetes tracking\nI realized that I need to keep track of where things are currently at, but also to be able to look back in time. So here we are.\n']",https://github.com/dafydd61,"['Updated Jan 20, 2020', 'Python', 'Updated Dec 7, 2019', 'Updated Dec 15, 2019', 'Updated Nov 24, 2019', 'Jupyter Notebook', 'Updated Nov 30, 2019', 'Updated Aug 20, 2019', 'Jupyter Notebook', 'Updated Sep 18, 2019', 'Updated Feb 17, 2020', 'Updated Feb 28, 2020', 'Jupyter Notebook', 'Updated May 6, 2020']"
KITALE,2,7,38,37,['Diabetes\nDiabetes Android Mangement System\n'],https://github.com/obadiahkorir,"['1', 'Java', 'Updated Aug 29, 2018', 'Updated Sep 16, 2018', 'Jupyter Notebook', 'Updated Jan 29, 2018', 'Updated Oct 29, 2018', 'HTML', 'Updated Dec 11, 2018', 'Python', 'Updated Mar 24, 2019', 'Python', 'Updated Aug 15, 2019', 'HTML', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Aug 25, 2020', 'R', 'Updated Sep 4, 2020']"
"Mangaluru,India",32,25,63,407,"[""Instructions to be followed\nInstall the below required packages:\ndjango - (pip install django)\ntensorflow - (pip install tensorflow)\npillow - (pip install pillow || pip install PIL)\nnumpy (pip install numpy)\n===================================================\nConfiguration to be made:\nInside diabetic_retinopathy -> settings.py at last you have to put your local path to output directory currently it is my local path\n===================================================\nNote:\nCurrently the models have been trained using tesnsorflow keras you can find the models inside diab_retina_app -> model folder\n===================================================\nTo execute the project run the below command:\npython manage.py runserver\n===================================================\nInput:\nchoose the test image from the test directory given inside the project ie; diab_retina_app->test\nTraining images are not included in the folder since it's a large collection\nThe same images you have sent have been used for training\n===================================================\nYou are free to edit the front-end/processing logic as per your need\n===================================================\n""]",https://github.com/thealoneprogrammer,"['6', 'Python', 'Updated Jun 17, 2020', 'C#', 'Updated May 23, 2015', 'JavaScript', 'MIT license', 'Updated Apr 27, 2015', '1', 'PHP', 'Updated May 7, 2014', 'Python', 'Updated Jul 19, 2017', 'Jupyter Notebook', 'Updated Jan 26, 2018', 'Python', 'Updated Apr 10, 2017', '1', 'Java', 'Updated Apr 7, 2017', 'Python', 'Updated Oct 29, 2018', 'Updated Aug 3, 2018']"
Shanghai,9,30,30,255,['DiabetesDetection\n人工智能课程项目Android端代码\n目的是实现糖尿病风险评估的交互界面\n'],https://github.com/syz913,"['Java', 'Updated Dec 30, 2019', 'CSS', 'Updated May 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 14, 2019', '1', 'Updated Nov 5, 2020', 'Python', 'Updated Oct 14, 2020', 'Classic ASP', 'Updated Jan 11, 2015', 'Updated Apr 15, 2015', 'Updated Oct 6, 2015', 'Updated Nov 9, 2017', 'Updated Dec 5, 2017']"
Athens,3,2,2,0,"['Diabetes Prediction\nUsing various machine learning algorithms to get the best prediction accuracy if possible for the Pima Indians dataset.\nThe best result was found with GradientBoosting with an accuracy of 83%.\nInstall\n\xa0\xa0\xa0 Python version used in this project: 3.6.6\n\xa0\xa0\xa0 Libraries used:\n\n\nPandas 0.23.4\nNumpy 1.15.3\nMatplotlib 2.2.2\nScikit-learn 0.20.0\nScipy 1.1.0\n\n\nHow to Run\nTo run this project you will need some software, like Anaconda.\nFrom Anaconda just set as working directory the folder of the project, open the .py file you want from Models folder and run this file or press F5.\n']",https://github.com/OperatingFuture,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
Boston,17,0,6,30,"['simglucose\n\n\n\nA Type-1 Diabetes simulator implemented in Python for Reinforcement Learning purpose\nThis simulator is a python implementation of the FDA-approved UVa/Padova Simulator (2008 version) for research purpose only. The simulator includes 30 virtual patients, 10 adolescents, 10 adults, 10 children.\nHOW TO CITE: Jinyu Xie. Simglucose v0.2.1 (2018) [Online]. Avaible: https://github.com/jxx123/simglucose. Accessed on: Month-Date-Year.\n\nNote: simglucose only supports python3.\n\n\n\n\nAnimation\nCVGA Plot\nBG Trace Plot\nRisk Index Stats\n\n\n\n\n\n\n\n\n\n\n\nMain Features\n\nSimulation enviroment follows OpenAI gym and rllab APIs. It returns observation, reward, done, info at each step, which means the simulator is ""reinforcement-learning-ready"".\nSupports customized reward function. The reward function is a function of blood glucose measurements in the last hour. By default, the reward at each step is risk[t-1] - risk[t]. risk[t] is the risk index at time t defined in this paper.\nSupports parallel computing. The simulator simulates mutliple patients parallelly using pathos multiprocessing package (you are free to turn parallel off by setting parallel=False).\nThe simulator provides a random scenario generator (from simglucose.simulation.scenario_gen import RandomScenario) and a customized scenario generator (from simglucose.simulation.scenario import CustomScenario). Commandline user-interface will guide you through the scenario settings.\nThe simulator provides the most basic basal-bolus controller for now. It provides very simple syntax to implement your own controller, like Model Predictive Control, PID control, reinforcement learning control, etc.\nYou can specify random seed in case you want to repeat your experiments.\nThe simulator will generate several plots for performance analysis after simulation. The plots include blood glucose trace plot, Control Variability Grid Analysis (CVGA) plot, statistics plot of blood glucose in different zones, risk indices statistics plot.\nNOTE: animate and parallel cannot be set to True at the same time in macOS. Most backends of matplotlib in macOS is not thread-safe. Windows has not been tested. Let me know the results if anybody has tested it out.\n\nInstallation\nIt is highly recommended to use pip to install simglucose, follow this link to install pip.\nAuto installation:\npip install simglucose\nManual installation:\ngit clone https://github.com/jxx123/simglucose.git\ncd simglucose\nIf you have pip installed, then\npip install -e .\nIf you do not have pip, then\npython setup.py install\nIf rllab (optional) is installed, the package will utilize some functionalities in rllab.\nNote: there might be some minor differences between auto install version and manual install version. Use git clone and manual installation to get the latest version.\nQuick Start\nUse simglucose as a simulator and test controllers\nRun the simulator user interface\nfrom simglucose.simulation.user_interface import simulate\nsimulate()\nYou are free to implement your own controller, and test it in the simulator. For example,\nfrom simglucose.simulation.user_interface import simulate\nfrom simglucose.controller.base import Controller, Action\n\n\nclass MyController(Controller):\n    def __init__(self, init_state):\n        self.init_state = init_state\n        self.state = init_state\n\n    def policy(self, observation, reward, done, **info):\n        \'\'\'\n        Every controller must have this implementation!\n        ----\n        Inputs:\n        observation - a namedtuple defined in simglucose.simulation.env. For\n                      now, it only has one entry: blood glucose level measured\n                      by CGM sensor.\n        reward      - current reward returned by environment\n        done        - True, game over. False, game continues\n        info        - additional information as key word arguments,\n                      simglucose.simulation.env.T1DSimEnv returns patient_name\n                      and sample_time\n        ----\n        Output:\n        action - a namedtuple defined at the beginning of this file. The\n                 controller action contains two entries: basal, bolus\n        \'\'\'\n        self.state = observation\n        action = Action(basal=0, bolus=0)\n        return action\n\n    def reset(self):\n        \'\'\'\n        Reset the controller state to inital state, must be implemented\n        \'\'\'\n        self.state = self.init_state\n\n\nctrller = MyController(0)\nsimulate(controller=ctrller)\nThese two examples can also be found in examples\\ folder.\nIn fact, you can specify a lot more simulation parameters through simulation:\nsimulate(sim_time=my_sim_time,\n         scenario=my_scenario,\n         controller=my_controller,\n         start_time=my_start_time,\n         save_path=my_save_path,\n         animate=False,\n         parallel=True)\nOpenAI Gym usage\n\nUsing default reward\n\nimport gym\n\n# Register gym environment. By specifying kwargs,\n# you are able to choose which patient to simulate.\n# patient_name must be \'adolescent#001\' to \'adolescent#010\',\n# or \'adult#001\' to \'adult#010\', or \'child#001\' to \'child#010\'\nfrom gym.envs.registration import register\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\'}\n)\n\nenv = gym.make(\'simglucose-adolescent2-v0\')\n\nobservation = env.reset()\nfor t in range(100):\n    env.render(mode=\'human\')\n    print(observation)\n    # Action in the gym environment is a scalar\n    # representing the basal insulin, which differs from\n    # the regular controller action outside the gym\n    # environment (a tuple (basal, bolus)).\n    # In the perfect situation, the agent should be able\n    # to control the glucose only through basal instead\n    # of asking patient to take bolus\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    if done:\n        print(""Episode finished after {} timesteps"".format(t + 1))\n        break\n\nCustomized reward function\n\nimport gym\nfrom gym.envs.registration import register\n\n\ndef custom_reward(BG_last_hour):\n    if BG_last_hour[-1] > 180:\n        return -1\n    elif BG_last_hour[-1] < 70:\n        return -2\n    else:\n        return 1\n\n\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\',\n            \'reward_fun\': custom_reward}\n)\n\nenv = gym.make(\'simglucose-adolescent2-v0\')\n\nreward = 1\ndone = False\n\nobservation = env.reset()\nfor t in range(200):\n    env.render(mode=\'human\')\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    print(observation)\n    print(""Reward = {}"".format(reward))\n    if done:\n        print(""Episode finished after {} timesteps"".format(t + 1))\n        break\nrllab usage\nfrom rllab.algos.ddpg import DDPG\nfrom rllab.envs.normalized_env import normalize\nfrom rllab.exploration_strategies.ou_strategy import OUStrategy\nfrom rllab.policies.deterministic_mlp_policy import DeterministicMLPPolicy\nfrom rllab.q_functions.continuous_mlp_q_function import ContinuousMLPQFunction\nfrom rllab.envs.gym_env import GymEnv\nfrom gym.envs.registration import register\n\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\'}\n)\n\nenv = GymEnv(\'simglucose-adolescent2-v0\')\nenv = normalize(env)\n\npolicy = DeterministicMLPPolicy(\n    env_spec=env.spec,\n    # The neural network policy should have two hidden layers, each with 32 hidden units.\n    hidden_sizes=(32, 32)\n)\n\nes = OUStrategy(env_spec=env.spec)\n\nqf = ContinuousMLPQFunction(env_spec=env.spec)\n\nalgo = DDPG(\n    env=env,\n    policy=policy,\n    es=es,\n    qf=qf,\n    batch_size=32,\n    max_path_length=100,\n    epoch_length=1000,\n    min_pool_size=10000,\n    n_epochs=1000,\n    discount=0.99,\n    scale_reward=0.01,\n    qf_learning_rate=1e-3,\n    policy_learning_rate=1e-4\n)\nalgo.train()\nAdvanced Usage\nYou can create the simulation objects, and run batch simulation. For example,\nfrom simglucose.simulation.env import T1DSimEnv\nfrom simglucose.controller.basal_bolus_ctrller import BBController\nfrom simglucose.sensor.cgm import CGMSensor\nfrom simglucose.actuator.pump import InsulinPump\nfrom simglucose.patient.t1dpatient import T1DPatient\nfrom simglucose.simulation.scenario_gen import RandomScenario\nfrom simglucose.simulation.scenario import CustomScenario\nfrom simglucose.simulation.sim_engine import SimObj, sim, batch_sim\nfrom datetime import timedelta\nfrom datetime import datetime\n\n# specify start_time as the beginning of today\nnow = datetime.now()\nstart_time = datetime.combine(now.date(), datetime.min.time())\n\n# --------- Create Random Scenario --------------\n# Specify results saving path\npath = \'./results\'\n\n# Create a simulation environment\npatient = T1DPatient.withName(\'adolescent#001\')\nsensor = CGMSensor.withName(\'Dexcom\', seed=1)\npump = InsulinPump.withName(\'Insulet\')\nscenario = RandomScenario(start_time=start_time, seed=1)\nenv = T1DSimEnv(patient, sensor, pump, scenario)\n\n# Create a controller\ncontroller = BBController()\n\n# Put them together to create a simulation object\ns1 = SimObj(env, controller, timedelta(days=1), animate=False, path=path)\nresults1 = sim(s1)\nprint(results1)\n\n# --------- Create Custom Scenario --------------\n# Create a simulation environment\npatient = T1DPatient.withName(\'adolescent#001\')\nsensor = CGMSensor.withName(\'Dexcom\', seed=1)\npump = InsulinPump.withName(\'Insulet\')\n# custom scenario is a list of tuples (time, meal_size)\nscen = [(7, 45), (12, 70), (16, 15), (18, 80), (23, 10)]\nscenario = CustomScenario(start_time=start_time, scenario=scen)\nenv = T1DSimEnv(patient, sensor, pump, scenario)\n\n# Create a controller\ncontroller = BBController()\n\n# Put them together to create a simulation object\ns2 = SimObj(env, controller, timedelta(days=1), animate=False, path=path)\nresults2 = sim(s2)\nprint(results2)\n\n\n# --------- batch simulation --------------\n# Re-initialize simulation objects\ns1.reset()\ns2.reset()\n\n# create a list of SimObj, and call batch_sim\ns = [s1, s2]\nresults = batch_sim(s, parallel=True)\nprint(results)\nRun analysis offline (example/offline_analysis.py):\nfrom simglucose.analysis.report import report\nimport pandas as pd\nfrom pathlib import Path\n\n\n# get the path to the example folder\nexmaple_pth = Path(__file__).parent\n\n# find all csv with pattern *#*.csv, e.g. adolescent#001.csv\nresult_filenames = list(exmaple_pth.glob(\n    \'results/2017-12-31_17-46-32/*#*.csv\'))\npatient_names = [f.stem for f in result_filenames]\ndf = pd.concat(\n        [pd.read_csv(str(f), index_col=0) for f in result_filenames],\n        keys=patient_names)\nreport(df)\nRelease Notes\n5/27/2020\n\nAdd PIDController at simglucose/controller/pid_ctrller. There is an example at examples/run_pid_controller.py showing how to use it.\n\n9/10/2018\n\nController policy method gets access to all the current patient state through info[\'patient_state\'].\n\n2/26/2018\n\nSupport customized reward function.\n\n1/10/2018\n\nAdded workaround to select patient when make gym environment: register gym environment by passing kwargs of patient_name.\n\n1/7/2018\n\nAdded OpenAI gym support, use gym.make(\'simglucose-v0\') to make the enviroment.\nNoticed issue: the patient name selection is not available in gym.make for now. The patient name has to be hard-coded in the constructor of simglucose.envs.T1DSimEnv.\n\nReporting issues\nShoot me any bugs, enhancements or even discussion by creating issues.\nHow to contribute\nThe following instruction is originally from the contribution instructions of sklearn.\nThe preferred workflow for contributing to simglucose is to fork the\nmain repository on\nGitHub, clone, and develop on a branch. Steps:\n\n\nFork the project repository\nby clicking on the \'Fork\' button near the top right of the page. This creates\na copy of the code under your GitHub user account. For more details on\nhow to fork a repository see this guide.\n\n\nClone your fork of the simglucose repo from your GitHub account to your local disk:\n$ git clone git@github.com:YourLogin/simglucose.git\n$ cd simglucose\n\n\nCreate a feature branch to hold your development changes:\n$ git checkout -b my-feature\nAlways use a feature branch. It\'s good practice to never work on the master branch!\n\n\nDevelop the feature on your feature branch. Add changed files using git add and then git commit files:\n$ git add modified_files\n$ git commit\nto record your changes in Git, then push the changes to your GitHub account with:\n$ git push -u origin my-feature\n\n\nFollow these instructions\nto create a pull request from your fork. This will send an email to the committers.\n\n\n(If any of the above seems like magic to you, please look up the\nGit documentation on the web, or ask a friend or another contributor for help.)\n']",https://github.com/jxx123,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
"San Luis Potosi, Mexico",10,0,15,45,"['raman-diabetes\nThe dataset of our work where the application of portable Raman spectroscopy coupled with several supervised machine-learning techniques, is used to discern between diabetic patients (DM2) and healthy controls (Ctrl), with a high degree of accuracy.\nDownload dataset from: https://www.kaggle.com/codina/raman-spectroscopy-of-diabetes\nThis script pre-processes the spectra to reproduce Fig. 1 of our paper:\nGuevara, E., Torres-Galván, J. C., Ramírez-Elías, M. G., Luevano-Contreras, C., & González, F. J. (2018). Use of Raman spectroscopy to screen diabetes mellitus with machine learning tools. Biomedical Optics Express, 9(10), 4998–5010. https://doi.org/10.1364/BOE.9.004998\n\nCopyright (C) 2018 Edgar Guevara, PhD\nCONACYT-Universidad Autónoma de San Luis Potosí\nCoordinación para la Innovación y Aplicación de la Ciencia y la Tecnología\n\n\n']",https://github.com/guevaracodina,"['4', 'JavaScript', 'Updated Nov 28, 2017', '7', 'MATLAB', 'Updated Nov 21, 2019', '68', 'Objective-C', 'Updated Feb 21, 2015', '53', 'Java', 'GPL-3.0 license', 'Updated Nov 26, 2020', '4', 'Jupyter Notebook', 'Updated Sep 12, 2019', '3', 'Jupyter Notebook', 'Updated Nov 28, 2016', '9', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Kotlin', 'Updated Oct 22, 2019', '5', 'C++', 'Updated Jul 24, 2017', '2', 'HTML', 'Updated Mar 28, 2018']"
San Francisco,244,63,646,91,"[""decoding-omnipod\nhacking diabetes: give me my data\nhelping\nSend me your packet captures!\nfork this repo\n\nsign up for a free github account, they support sign in with google, and it's a great service\nthen press the fork button\n\nThen\n$ git clone git@github.com/<yourname>/decoding-omnipod.git\n$ cd decoding-omnipod\n$ git checkout -b <yourname>\n$ mkdir <yourname>\n$ cp ~/path/to/captures ./<yourname>\n$ git add -v\n$ git commit -am '<yourname> adding captures for @bewest et al.'\n$ git push -u origin <yourname>\nThen you can send me an email or a pull request.\n""]",https://github.com/bewest,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
"Hangzhou, China",9,13,62,0,"['Background\nIt was reported that in 2011 more than 3.3 million patients were readmitted in the US within 30 days of being discharged, and they were associated with about $41 billion in hospital costs. The need for readmission indicates that inadequate care was provided to the patient at the time of first admission. The readmission rate has become an important metric measuring the overall quality of a hospital.\nDiabetes is the 7th leading cause of death and affects about 23.6 million people in the US. 1.4 million Americans are diagnosed with diabetes every year. Hospital readmission being a major concern in diabetes care, over 250 million dollars was spent on treatment of readmitted diabetic patients in 2011. Early identification of patients facing a high risk of readmission can enable healthcare providers to conduct additional investigations and possibly prevent future readmissions.\nIn this project, I build a machine learning classifier model to predict diabetes patients with high risk of readmission. Note that higher sensitivity (recall) is more desirable for hospitals because it is more crucial to correctly identify ""high risk"" patients who are likely to be readmitted than identifying ""low risk"" patients.\nPlease open the Jupyter Notebook file to see the details.\nDataset Description\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes 50 features representing 101766 diabetes patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria:\n\nIt is an inpatient encounter (a hospital admission).\nIt is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\nThe length of stay was at least 1 day and at most 14 days.\nLaboratory tests were performed during the encounter.\nMedications were administered during the encounter.\n\nThe data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\nSource: UCI Machine Learning Repository, https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\n']",https://github.com/swengzju,"['9', 'TypeScript', 'MIT license', 'Updated Nov 13, 2020', '2', 'Jupyter Notebook', 'Updated Nov 10, 2016', '6', 'Jupyter Notebook', 'Updated Feb 28, 2020', '7', 'CoffeeScript', 'MIT license', 'Updated Jan 11, 2015', 'Jupyter Notebook', 'Updated Jan 30, 2018', '5', 'Updated Jul 2, 2019', '5', 'JavaScript', 'Updated Oct 28, 2020', 'Python', 'Updated Nov 14, 2017', '12', 'C#', 'MIT license', 'Updated Nov 11, 2020', '4', 'Python', 'Updated Feb 19, 2016']"
"San Francisco, CA",6,4,7,0,"[""README\nDISCLAIMER: The Glucosy site is intended to provide general information only - it is not to be relied upon for medical advice. The content of the site is not intended to be a substitute for professional medical advice, diagnosis or treatment. Do not disregard your doctor's instructions, or delay in seeking medical attention because of any information provided by Glucosy.\nOverview\nThe Glucosy app was built to assist those those diagnosed with Type 1 Diabetes, manage their blood sugar levels more effectively.\nGems, Libraries and Add-ons\n\nForecastIO (weather API)\nHeroku scheduler (background task scheduling)\nMandrill (automatic emailing)\nNutritionix (nutrition information API)\nGeocoder (API)\nDropzone (upload files via drag 'n' drop in browser)\nChartjs (charts)\nCarrierwave (file upload)\nBootstrap (design and styling)\njQuery (library)\nHandlebars (library)\nUnderscore (library)\n\nDatabase\nActiveRecord and Postgres are used to manage the database. If you would like to setup your own instance of the site, use 'rake' to create and migrate the database.\nPrimary Functionality\nUsers have the ability to upload data from their digital blood sugar monitor, and review this data in chart format.\nThe site also provides information on the carbohydrate content for more than 300,000 food items. A calculator also produces an estimate of the amount of insulin required to offset the carbohydrates in a meal, based on the user's input of foods that comprise the meal.\nRegistered users are sent daily weather updates via email, with details on any significant temperature changes that are forecast over the coming week. The location for the forecast will be the location from where the user last logged into the site.\nBugs\nCurrently, we are unaware of any bugs in the code. If you happen to stumble across a bug or fault, please contact us via github.\nThanks and Acknowledgements\nAs always, the team would like to thank Joel and Jack for the blood, sweat and tears they gave during project week. You guys were instrumental in helping us achieve our goal and making the site a success. Special mention to James Gregory of ThoughtWorks, who so generously provided his extremely valuable time, thoughts and guidance throughout the project. Naturally, huge thanks and applause must go to Bishin, Sox, Tom and Xander, who sacrificed sleep and put their lives on hold for a week to make that the project was delivered on time. Good work team!!\n""]",https://github.com/xandero,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
Boston,84,15,49,271,"['Diabetes_Prediction\nPredicting Diabetes among PIMA population\nOverview:\nDiabetes mellitus, commonly referred to as diabetes, affects over 29 million people in the United States. Diabetes arises due to improper production and/or functioning of the hormone insulin, resulting in impaired metabolism of carbohydrates leading to a high level of glucose in the blood. Molecular mechanism of diabetes and its adverse impact on the body is well documented with animations in the following video.\nPima Indians living in Arizona have the highest rate of obesity and diabetes ever recorded. Thus, I will be using data collected from Pima Indians to predict diabetes with machine learning.\nDiabetes and its adverse impact on body:\n\n']",https://github.com/SayantanMitra87,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
"Russia, Saint Petersburg",2,5,12,826,"['Diacomp\nDiabetes Diary & Analytical System\n\n\nFeatures:\n\nTracking patient data (BS measurements, meal, insulin dosage etc.)\nMaking sophisticated adaptive math model\nInsulin dosage calculating\nShared extendable food/dish databases\nVisual analyzing\n\nPlatforms:\n\nAndroid\nWeb (Java)\nWindows (Delphi)\n\nLinks:\n\nOfficial site\nGoogle Play\n\n']",https://github.com/bosik,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
Bengaluru,23,0,5,407,['neural-network-sklearn\nNeural network implementation on pima indian diabetes dataset\n'],https://github.com/bmonikraj,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
delhi india,1,0,7,4,"['Personalised-Diabetes-care-Assistant\nTagline\nA smart app for persons with type II diabetes to manage their blood glucose levels by providing personalized recommendations on exercise using reinforcement learning.\nSummary Paragraph\nThe management of type II diabetes is multimodal. The interplay between diet, blood sugar-lowering medications and exercise dictate the changes in the blood glucose levels. For a given diet, a balance between adequate exercise and medications can effectively maintain blood glucose within a normal range. By using reinforcement learning, our application learns a person’s response to medications and exercise overtime.  The app helps minimize the person’s dependance on medications for maintaining optimal blood glucose levels by providing personalized recommendations on exercise type, duration and intensity.\nSolution\nWe identify persons at increased risk for type II diabetes using a standard questionnaire. From those persons at increased risk or with diabetes, additional information on their blood glucose, exercise, sleep, insulin use etc is obtained. These are evidence based factors that play a role in the changes in blood glucose levels.\nTo begin with, the user receives standard evidence based recommendations on exercise: 150 mins/week of moderate intensity exercise. As the user continues to use the application, his/her information is used to train a reinforcement learning based model to predict the best combination of insulin and exercise needed to maintain blood glucose within a normal range. By providing recommendations on exercise levels, the app aims to minimize insulin use and motivate people to use exercise more effectively in the management of their blood glucose.\nTeam Members\nDr. Rahul Gaiba \nResident Physician \nrahulgaiba@gmail.com\nSumit Rathore \nsumitrathore1313@gmail.com\nAditya Rustagi \nrustagiadi95@gmail.com\n']",https://github.com/sumitrathore1313,"['2', 'JavaScript', 'Updated Oct 26, 2012', '2', 'Python', 'Updated Apr 7, 2019', 'HTML', 'Updated Jul 16, 2019', '6', 'Go', 'Updated Oct 21, 2020', '10', 'Jupyter Notebook', 'BSD-3-Clause license', 'Updated Sep 27, 2020', '8', 'Python', 'Updated Nov 8, 2017', '3', 'Python', 'Updated Apr 29, 2017', 'JavaScript', 'Updated Apr 15, 2019', '3', 'JavaScript', 'Updated Jul 10, 2013', '3', 'Jupyter Notebook', 'Updated Jul 16, 2017']"
Patna,10,17,5,152,"['Early Stage Diabetes Prediction - Deployed\n\n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• Dataset link: https://archive.ics.uci.edu/ml/datasets/Early+stage+diabetes+risk+prediction+dataset.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://early-diabetes-pred.herokuapp.com/\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n']",https://github.com/Sonalikhasyap15,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
Bangalore,15,13,27,139,"['DiabetesDetectionApp\nDiscription\nThis is a ML oriented Web Application for detection of the diabetes based on the parameters that the user enters. It predicts whether it is benign or malignant by learning from the parameters. We have developed a deep neural network model to classify if the user has diabetes or not. The model is trained based on the PIMA Indian Diabetes dataset.\nDataset\nthe PIMA Indian Diabetes dataset from  National Institute of Diabetes and Digestive and Kidney Diseases; Includes cost data (donated by Peter Turney). The attributes are as follows:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nTechnology Used\nFor the front end HTML5,CSS and bootstrap has been used. Flask based python is the backend. All interactions with the backend are made via RESTful API calls. A python ML model has been used to predict the disease stage. The weights of the trained model are saved and when a call is made to predict the model, inference is done based on the model weights. Iframes have been used to implement Ajax Patterns.\nWhat does the application have?\nHomepage\n\nDashboard\n\n\n']",https://github.com/shreyavshetty,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
Pune,3,4,2,33,"['Diabetes-Prediction\nData visualization and exploratory data analysis are performed on Pima Indians Diabetes dataset. The aim is to construct a classifier to predict whether a patient has diabetes based on a set of diagnostics.  After cleaning the data, importance of features are analyzed using different methods.\nFir Machine learning model we have used two algorithm that is knn and logistic regression.\n']",https://github.com/pratik7478,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
"Lagos,Nigeria",10,34,27,93,"[""diabetesDiagnosis\nThis is a project for the front end of a final year project I'm working on.\nThe whole idea of the project is to have inputs from a form interact with a backend algorithm in python\nThis algorithm which has already been trained with real life data theen predicts the possibility of a patient being diabetic or not.\nResults annd suggestions are sent back to the user to help make lifestyle choices that would improve their health with regards to being\ndiabetic.\n""]",https://github.com/temideewan,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
Shanghai,29,42,101,67,['Diabetes-prediction\n天池上糖尿病预测比赛。题目给出一些血常规的样本和对应的血糖结果。然后再给一批血常规样本，叫我们预测结果。虽然有点玄学，但是题目至此，也就将就着做了。采用catboost和xgboost都尝试了一下，大致结果还行。\n'],https://github.com/zhusleep,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
"Swansea, Wales, United Kingdom",14,2,35,1471,['webusb-uploader\nUpload diabetes data using just the power of the web\n'],https://github.com/gniezen,"['1', 'Python', 'Updated Nov 30, 2015', '1', 'JavaScript', 'BSD-2-Clause license', 'Updated Sep 22, 2017', 'R', 'Updated May 2, 2018', '3', 'JavaScript', 'MIT license', 'Updated Mar 14, 2020', '3', 'Jupyter Notebook', 'Updated Mar 25, 2019', '3', 'JavaScript', 'Updated Jun 25, 2019', '2', 'HTML', 'MIT license', 'Updated Jul 6, 2019', '3', 'Jupyter Notebook', 'Updated Sep 28, 2020', '3', 'Python', 'Updated Sep 10, 2012', '2', 'JavaScript', 'Updated Oct 22, 2012']"
"Wroclaw, Poland",2,5,13,127,"[""node-js-expert-system-diabetes\nExpert System Diabetes Using Node.js\nThis expert system is develeoped using node.js and module used is Rools.\nRools is a rule engine library that can be used for expert system\nModule used = Rools -> https://www.npmjs.com/package/rools\nSee complete documentation here:\nhttps://docs.google.com/document/d/1S0MOIo2WxfIlw1Bqwukt8xEGVtnWrpmK7xbBnCelRPQ/edit?usp=sharing\nHow to start\n\nnpm install\nnpm start\naccess localhost:1996\n\nThis expert system is built for detecting Diabetes based on these 4 aspects\n\nSymtoms -> there are 10 symptoms and 2 medical tests.\nChecking wheter parents have diabetic history\nMedical Test Fasting  , here we cal it 'FPG'\nMedical fasting  Two Hour After Fasting, here we call it GTHAE\n\nExplanation of each aspects\n\nSymptoms\n\nalways feeling thirsty\nUrination, especially during the night\nOften feeling hunger\nWeight loss with no reason\nLoss of muscle mass\nThere is Keton in urine\nWeak --> lemas(indonesian)\nProblem with sight Pandangan kabur.\nscars take long time to heal\noften get infected. For example in gusi, kulit, vagina, atau saluran kemih.\n\n\n\nAccording to the resource, A person can be identified as having diabetic if has >= 2 symptoms\n\n\nDiabetic parent\nAccording to the reasearch, if a person has parent with diabetic it can give more\nprobability of having diabetic.\n\n\nFasting after 8 hours\n\n\n\n\nThis test is kind of medical test that is done after fasting for 8 hours.\n\n\nThis fasting is only FOR NOT EATING food or drink something containing energy or sugar\n\n\nDrink pure water is allowed\n\n\nAccording this medical test here are the criteria\n\nKadar gula darah normal: di bawah 100 mg/dL\nPradiabetes: 100-125 mg/dL\nDiabetes di atas 125 mg/dL\n\n\n\n\ngtwo hour\n\n\na test that is taken 2 hours after the last eating.\nAccording this medical test here are the critera\n\nKadar gula darah normal: di bawah 140 mg/dL\nPradiabetes: 140-199 mg/dL\nDiabetes: lebih dari 200 mg/ dL\n\n\n\nCalculation\n\nFor calculation purposes (to get the precentage)\nEach aspects has maximum score of 25\n\nThis expert system is created based on these resources :\n\nhttps://www.alodokter.com/diabetes\nhttps://hellosehat.com/pusat-kesehatan/diabetes-kencing-manis/serba-serbi-pemeriksaan-diabetes-di-rumah/\nhttps://www.id.wikihow.com/Mengetahui-Apakah-Anda-Menderita-Diabetes\nhttps://www.webmd.com/diabetes/how-sugar-affects-diabetes#1\nhttps://www.webmd.com/diabetes/diagnosing-type-2-diabetes#1\nhttps://www.cdc.gov/media/presskits/aahd/diabetes.pdf\n\n""]",https://github.com/ZenHuzaini,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
"Seoul, South Korea",23,30,24,599,['Exploration 5 (Regression)\nRegression 문제\n\n\n당뇨병 예측\n\n\nBike Sharing Demand\nhttps://www.kaggle.com/c/bike-sharing-demand\n\n\n'],https://github.com/ljh415,"['4', 'Jupyter Notebook', 'Updated Feb 6, 2019', '2', 'Jupyter Notebook', 'Updated Aug 17, 2020', '2', 'HTML', 'MIT license', 'Updated Nov 22, 2020', '2', 'R', 'Updated Aug 16, 2017', 'Updated Dec 22, 2014', 'Python', 'Updated Aug 11, 2017', '2', 'Updated Apr 6, 2018', '2', 'Java', 'Updated May 4, 2020', '2', 'JavaScript', 'Updated Apr 25, 2016', '2', 'C#', 'Updated Sep 11, 2014']"
"Fulda,Germany",2,1,1,7,"['\nDiabetes Monitoring is a project based on the Glucosio Project ,essentially for learning and training purposes.\n']",https://github.com/benjaminbamanya,"['2', 'R', 'MIT license', 'Updated Jul 9, 2018', '2', 'Java', 'GPL-3.0 license', 'Updated Jan 31, 2019', '2', 'Jupyter Notebook', 'Updated Jan 24, 2020', '2', 'Jupyter Notebook', 'Updated Sep 14, 2020', '2', 'JavaScript', 'MIT license', 'Updated Apr 20, 2015', '2', 'Jupyter Notebook', 'Updated Dec 27, 2019', '2', 'HTML', 'GPL-3.0 license', 'Updated Sep 17, 2020', '2', 'Java', 'GPL-2.0 license', 'Updated Oct 19, 2020', 'Updated Apr 30, 2018', 'Updated Mar 1, 2018']"
Gurgaon,5,1,0,18,['diabetes\nHere I will introduce you to identification and dealing with outliers.\nThen we will do cluster based modeling to predict if a person will be diabetic or not.\n'],https://github.com/Puneettt,"['Jupyter Notebook', 'Updated Jul 31, 2020', '1', 'Jupyter Notebook', 'Updated May 30, 2020', '1', 'Python', 'Updated Feb 13, 2018', 'Jupyter Notebook', 'Updated Jun 15, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 18, 2020', 'HTML', 'Updated Jul 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 20, 2020', 'JavaScript', 'Updated Oct 28, 2020', 'HTML', 'Updated Nov 9, 2020']"
Travelling across the USA,1,2,11,56,"['Notes\n\nInitialize Git repo (yay, we did it)\nXamarin-based data collection app for initial data set, prototype to future user interface\nStoring initial data set: easy way to start is to use a text file (CSV) on server instance, eventually use database instance (need server instance eventually anyway)\nCloud-based app service with Python code (AWS or Azure -- AWS is freer, Azure is better integrated for Xamarin)\n\n']",https://github.com/Spencer-Weston,"['HTML', 'MIT license', 'Updated May 26, 2018', 'JavaScript', 'Updated Jul 20, 2018', 'C#', 'Updated Feb 6, 2018', 'Jupyter Notebook', 'Updated Oct 3, 2018', 'HTML', 'Updated Mar 15, 2019', 'HTML', 'MIT license', 'Updated Dec 18, 2018', 'Swift', 'Updated Oct 10, 2019', 'Updated Oct 8, 2019', 'Updated Dec 1, 2019', 'Jupyter Notebook', 'Updated Jan 10, 2020']"
Oslo Norway,55,7,25,3403,['diabetes\nAn Android app to record and display blood sugar measurements and store them in the cloud.\n'],https://github.com/donv,"['2', 'Jupyter Notebook', 'Updated Jun 25, 2020', 'MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018']"
"Banglore,India",0,11,17,193,"['Diabetes\npredicting if a patient has diabetes or not using the dataset from kaggle called ""Pima Indians Diabetes Database"".\n']",https://github.com/Siddhesh19991,"['Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019', '2', 'Jupyter Notebook', 'Updated Jun 25, 2020', '2', 'JavaScript', 'Updated Feb 27, 2012', '2', 'Python', 'Apache-2.0 license', 'Updated May 3, 2020']"
India,1,2,0,0,['DiabetesPrediction\nPython GUI that predicts Diabetes using Logistic Regression.\n'],https://github.com/Anamika36,"['Python', 'Updated Mar 9, 2018', 'Updated Jun 14, 2019', 'Updated Mar 6, 2019', 'Jupyter Notebook', 'Updated Mar 6, 2019', 'Python', 'Updated Sep 11, 2019', 'JavaScript', 'Updated Nov 13, 2019', 'Updated Nov 20, 2019', 'JavaScript', 'Updated Feb 7, 2020', 'Jupyter Notebook', 'Updated Jul 9, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2019']"
Cotia - São Paulo,3,7,2,50,"['DiabetesTimer\nEstudos com JS. Contador de tempo para medição de glicemia para diabéticos após refeições.\nAutoria\nScript (JS) baseado em versão de outro autor e aplicado de forma estudada com variações minhas, cabiveis ao meu projeto.\nVersão\n1.0\n']",https://github.com/LuizBlading,"['Java', 'Updated Dec 30, 2019', 'CSS', 'Updated May 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 14, 2019', '1', 'Updated Nov 5, 2020', 'Python', 'Updated Oct 14, 2020', 'Classic ASP', 'Updated Jan 11, 2015', 'Updated Apr 15, 2015', 'Updated Oct 6, 2015', 'Updated Nov 9, 2017', 'Updated Dec 5, 2017']"
San Francisco Bay Area,3,0,1,0,"['Diabetes2\nA brief analysis of the UC Irvine Diabetes Dataset 1999-2008\nTHIS IS A WORK IN PROGRESS.\nThe dataset used here represents 10 years (1999 - 2008) of clinical care related to inpatient diabetes treatment at 130 US hospitals and integrated delivery networks. It includes over 50 features representing patient and hospital outcomes. Information was extracted from the Health Facts database (Cerner Corporation, Kansas City, MO), a national data warehouse that collects comprehensive clinical records across hospitals throughout the United States.\nMy objective in analyzing this dataset is to see if I can duplicate results from the 2014 paper listed in the References section of the Ipython notebook. In particular, I will train a logistic regression model to predict whether a patient will be readmitted within 30 days of discharge.\n']",https://github.com/jonneff,"['JavaScript', 'Updated Dec 27, 2015', '1', 'Jupyter Notebook', 'Updated Feb 7, 2016', 'Swift', 'Updated Mar 2, 2016', 'Java', 'Updated Jul 28, 2014', 'Java', 'Updated Nov 15, 2017', 'JavaScript', 'Updated Jan 19, 2017', '1', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2018', 'Java', 'Updated Feb 20, 2018', 'Jupyter Notebook', 'Updated Jul 1, 2019', 'MIT license', 'Updated Dec 6, 2018']"
Stoke on Trent. UK,699,0,19,73,"['Blueberry\nWelcome to the new open-source £100,000 diabetes project.\nIn this I aim to create the entire applications and system for a new diabetes app that helps diabetics manage and have more fun managing their condition.\n']",https://github.com/angelsix,"['47', 'Python', 'Updated Jul 16, 2018', '330', 'Java', 'GPL-3.0 license', 'Updated Aug 20, 2018', '89', 'C#', 'Updated Oct 7, 2019', '191', 'Jupyter Notebook', 'Updated Mar 22, 2018', '26', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jul 12, 2019', '135', 'Python', 'Updated Oct 4, 2020', '201', 'Makefile', 'MIT license', 'Updated Nov 15, 2020', '65', 'HTML', 'Updated Oct 20, 2020', '18', 'Python', 'Updated Jan 30, 2018', '80', 'Python', 'BSD-3-Clause license', 'Updated Feb 5, 2019']"
"Dhaka, Bangladesh",14,43,28,32,"['\nPrima Indian DataSets Diabetes prediction\n🔗 Research paper link: https://dl.acm.org/citation.cfm?id=3297737#\nDescription about dataset\nThe Prima Indian Diabetes Dataset has been used in this study, provided by the UCI Machine Learning Repository. The dataset has been originally collected from the National Institute of Diabetes and Digestive and Kidney Diseases. The dataset consists of some medical distinct variables, such as pregnancy record, BMI, insulin level, age, glucose concentration, diastolic blood pressure, triceps skin fold thickness, diabetes pedigree function etc.  This dataset has 768 patient’s data where all the patients are female and at least 21 years old.  The number of true cases are 268 (34.90%) and the number of false cases are 500 (65.10%), respectively, in the dataset.\nI used six classification techniques, artificial neural network (ANN), Support Vector Machine (SVM), Decision tree (DT), random forest (RF), Logistics Regression (LR) and Naïve Bayes (NB).\n']",https://github.com/razuswe,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
"Hyderabad, India",14,25,23,78,"['Pima Indians Diabetes Dataset Classification\nAbstract\nThe diabetes dataset is a binary classification problem where it needs to be analysed whether a patient is suffering from the disease or not on the basis of many available features in the dataset. Different methods and procedures of cleaning the data, feature extraction, feature engineering and algorithms to predict the onset of diabetes are used based for diagnostic measure on Pima Indians Diabetes Dataset.\nKeywords\nmachine learning; Pima Indians Diabetes dataset; binary classification; features; feature extraction; feature engineering; support vector machine; MLP; neural netwroks; Decision tree; Linear regression heat map; pairplot; violin plot; feature importance.\nDatabase - Pima Indians Diabetes Dataset\nPima Indian Diabetes dataset has 9 attributes in total. All the person in records are females and the number of pregnancies they have had has been recorded as the first attribute of the dataset. Second is the value of Plasma glucose concentration a 2 hours in an oral glucose tolerance test and then is the Diastolic blood pressure (mm Hg), fourth in line is the Triceps skin fold thickness (mm), then is the 2-Hour serum insulin (mu U/ml), sixth is Body mass index (weight in kg/ (height in m) ^2) and then seventh is the Diabetes pedigree function and the second last value is the that of the Age (years). The ninth column is that of the Class variable (0 or 1), 0 for no diabetes and 1 for the presence. To start with we first take a description of the dataset. We infer not much from this except the facts like we have a data datset of 768 lines and the maximum values of the Age and Pregnancies. Nothing more is of much use for the prediction. We also calculated the number of datsets that were positive to the test of diabetes and those who were negetive and the value came out to be 268 and 500 respectively. We decided to take the mean value of BMI and found that the average value of a person suffering from the disease has mean BMI value as 35.14 which means that they are not healthy and obese. It is also interesting to note that the mean BMI value for the people who are not suffering from the disease is 30 which is the threshold value of people becoming obese. The mean value of the second parameter Glucose (Plasma glucose concentration) was done we found that those who suffered from the disease had mean value as 141.25 which indicates pre-diabetic state of hyperglycaemia that is associated with insulin resistance and increased risk of cardiovascular pathology.\nMethodology\nA. A decision tree is a decision support tool that uses a tree-like graph or model of decisions and their possible consequences, including chance event outcomes, resource costs, and utility. It is one way to display an algorithm that only contains conditional control statements. Decision trees are commonly used in operations research, specifically in decision analysis, to help identify a strategy most likely to reach a goal, but are also a popular tool in machine learning.\nDecision tree algorithm follows:\n• The attribute/feature best for set is taken as root\n• Distribute the set into different sets having same attribute values for particular value.\n• Repeat the above steps till we get to the leaf nodes of the tree where no further division can take place.\nB. In statistics, linear regression is a linear approach for modelling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X. The case of one explanatory variable is called simple linear regression. For more than one explanatory variable, the process is called multiple linear regression. (This term is distinct from multivariate linear regression, where multiple correlated dependent variables are predicted, rather than a single scalar variable.)\nC. A multilayer perceptron (MLP) is a class of feedforward artificial neural network. An MLP consists of at least three layers of nodes. Except for the input nodes, each node is a neuron that uses a nonlinear activation function. MLP utilizes a supervised learning technique called backpropagation for training. Its multiple layers and non-linear activation distinguish MLP from a linear perceptron. It can distinguish data that is not linearly separable.\nD. In machine learning, support vector machines (SVMs, also support vector networks) are supervised learning models with associated learning algorithms that analyse data used for classification and regression analysis. Given a set of training examples, each marked as belonging to one or the other of two categories, an SVM training algorithm builds a model that assigns new examples to one category or the other, making it a non-probabilistic binary linear classifier (although methods such as Platt scaling exist to use SVM in a probabilistic classification setting). An SVM model is a representation of the examples as points in space, mapped so that the examples of the separate categories are divided by a clear gap that is as wide as possible. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\nConclusion\nWe applied many algorithms and did a lot of feature manipulation and extraction. We got the best accuracy of 80.5% using SVM. A lot of information about the dataset was also extracted without using complex algorithms. We were also able to perform a lot of exploratory data analysis and came to many conclusions. Random Forest and Ensemble Learning can probably find a better result. Our result was also very close to the best result found and this shows that at the right parameters SVM can be a good and practical choice to classify a medical data.\n']",https://github.com/KriAga,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
India,9,0,19,28,['Diabetes Prediction Using Machine Learning\nObjective\nTechniques Used\n\nData Cleaning\nData Visualization\nMachine Learning Modeling\n\nAlgortihms Used\n\nLogistic Regression\nSupport Vector Machine\nKNN\nRandom Forest Classifier\nNaivye Bayes\nGradient Boosting\n\nModel Evaluation Methods Used\n\nAccuracy Score\nROC AUC Curve\nCross Validation\nConfusion Matrix\n\nGuide Lines\nPackages and Tools Required:\nPandas \nMatplotlib\nSeaborn\nScikit Learn\nJupyter Notebook\n\nPackage Installation\npip install numpy\npip install pandas\npip install seaborn\npip install scikit-learn\npip install matplotlib\n\nJupyter Notebook Installation Guide  https://jupyter.org/install\n'],https://github.com/MrKhan0747,"['6', 'Python', 'Updated Feb 25, 2018', '4', 'JavaScript', 'Updated Oct 20, 2020', '6', 'Jupyter Notebook', 'Updated Apr 22, 2019', '18', 'Kotlin', 'GPL-3.0 license', 'Updated Sep 27, 2020', '13', 'Jupyter Notebook', 'Updated Jul 7, 2019', '37', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '6', 'Jupyter Notebook', 'Updated Sep 27, 2016', '6', 'Vue', 'MIT license', 'Updated Oct 3, 2020', '3', 'Jupyter Notebook', 'MIT license', 'Updated Nov 5, 2019', '28', 'HTML', 'MIT license', 'Updated Nov 13, 2020']"
"Austin, TX",18,1,18,0,"['YADLA\nYADLA exists right now as two parts.  The first is an Android app to view Nightscout data on an Android phone.  AGP and daily views are available.\nThere is also an uploader to insert Dexcom G4 (G5 not yet supported) and Tandem t:slim (and probably other Tandem pump) data into a Nightscout instance.\nTo use, download the release alrightypump-commandline.tar.gz or alrightypump-commandline.zip archive and run alrighty-pump-commandline/bin/alrightypump-commandline.{sh, bat} http://secret-password@nightscout.example.com:port/\n']",https://github.com/mgranberry,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
"Toronto, Canada",80,9,17,731,"[""Building a Binary Classification ML Model to Predict Hospital Readmission in Patients with Diabetes\nThis is an introductory workshop to data science using Python. We'll be\nbuilding a binary classification model to predict hospital readmission\nin patients with diabetes. A large focus will be on data pre-processing,\nwhich is a key part of the machine learning pipeline.\nKey topics include:\n\nExploratory data analysis\nData cleaning\nFeature selection\nSupervised learning\nBinary classification\nHyperparameter tuning\n\nWe'll be using these packages to do our analysis:\n\npandas\nnumpy\nmatplotlib\nseaborn\nscikit-learn\n\nOur dataset\nis from the UCI Machine Learning Repository which includes patient and hospital outcome\ndata from 130 U.S. hospitals collected from 1999 to 2008.\nWorkshop slides are hosted here.\nGetting Started\nThere are two options for setting up your environment:\n\nOn your local machine\nOn the cloud using Google Colab\n\nIf you're relatively new to Python and programming, we highly recommend starting with the cloud option which doesn't require any setup. The only requirement is a Gmail account.\nIf you decide to run the tutorial on your local machine, make sure that your environment is running on Python 3.6+ and has Jupyter notebook installed. You will need to install several pacakges which can be found in requirements.txt.\npip install -r requirements.txt\n\nThe detailed walkthrough can be found here. You can follow along with the fill-in-the-blank version here.\n""]",https://github.com/topspinj,"['9', 'TypeScript', 'MIT license', 'Updated Nov 13, 2020', '2', 'Jupyter Notebook', 'Updated Nov 10, 2016', '6', 'Jupyter Notebook', 'Updated Feb 28, 2020', '7', 'CoffeeScript', 'MIT license', 'Updated Jan 11, 2015', 'Jupyter Notebook', 'Updated Jan 30, 2018', '5', 'Updated Jul 2, 2019', '5', 'JavaScript', 'Updated Oct 28, 2020', 'Python', 'Updated Nov 14, 2017', '12', 'C#', 'MIT license', 'Updated Nov 11, 2020', '4', 'Python', 'Updated Feb 19, 2016']"
Planet Earth,4,0,0,36,"['\n\n\ntitle\nauthor\ndate\noutput\n\n\n\n\nType-2 Diabetes Treatment Pathways\nRohit Vashisht\n3/23/2017\nhtml_document\n\n\n\nLearning Effective Clinical Treatment Pathways for Type-2 Diabetes from Observational Data.\nObjective:\nTreatment guidelines for the management of type-2 diabetes mellitus (T2DM) are controversial because existing evidence from randomized clinical trials do not address many important clinical questions. An earlier investigation led by Observational Health Data Science (OHDSI) group reveled heterogeneity in the practice of both first and second line treatment choices in T2D with respect to established clinical guidelines. The choice of an optimal second-line drug among available options (Sulfonylureas, DPP4-Inhibitors, Thiazolidinediones) remains ambiguous. In this study, we seek to compare Sulfonylurea, DPP4-Inhibitors, and Thiazolidinediones when prescribed after Metformin for outcomes related to reduction in HbA1c < 7%, events related to Myocardial Infarction, Kidney and Eye related disorders within OHDSI network.\nRationale:\nType-2 diabetes (T2DM) affects an estimated 29.1 million people in the United States. Its global prevalence is projected to reach 440 million adults by the end of 2030. Current treatment guidelines, which are derived from a few randomized controlled trials, recommend the use of metformin as first-line monotherapy. However, when metformin exhibits adverse effects or fails to control diabetes, the second line therapy must be chosen, and there is little consensus on how to choose a second line therapy; with the American Diabetes Association recommending sulfonylureas, meglitinide, pioglitazone or dipeptidyl peptidase 4 inhibitor (DPP4) as second-line agent, and the American Association of Clinical Endocrinologists recommending alpha-glucose inhibitors, DPP4 inhibitors and GLP-1 agonist. Given the availability of myriad treatment options for second-line therapy, the problem of selecting an optimal second-line agent requires urgent attention.\nProject Lead(s):\nRohit Vashisht, Ken Jung, Alejandro Schuler, Juan Banda, James Weaver, Martijin Schuemie, Patrick Ryan and Nigam Shah\nCoordinating Institution(s):\nStanford University\nStudy Protocol\nA detailed study protocol is provided in this repository with file name T2D_Study_Protocol.docx\nR-Package\nThis is an R package that can be used to execute T2D study. An in-depth discussion on the study design can be found at (link to protocol). Very briefly, the R-Package enables one to decipher effective treatment pathways of T2D in terms of controlling a) HbA1c b) less adverse events in terms of Myocardial Infraction c) less adverse events in terms of Kidney related disorders and d) less adverse events related to Eyes disorder. A step-by-step guide to execute this study is provided below:\nStep-1\nThe package can be installed as follows:\nlibrary(""devtools"")\ninstall_github(""rohit43/DiabetesTxPath"")\nStep-2\nMake sure you have installed all the latest versions of the following packages. The study might throw an error in case old packages are loaded.\nLoad the required libraries as follows:\nlibrary(""OhdsiRTools"")\nlibrary(""OhdsiSharing"")\nlibrary(""SqlRender"")\nlibrary(""DatabaseConnector"")\nlibrary(""FeatureExtraction"")\nlibrary(""CohortMethod"")\nlibrary(""EmpiricalCalibration"")\nlibrary(""DiabetesTxPath"")\nStep-3\nSetup your JBC driver environment and connection details as follows:\njdbcDrivers <- new.env()\nconnectionDetails <- createConnectionDetails(dbms = ""yourDatabase"", \n                                             server = ""yourServer"",\n                                             user = ""yourUserName"", \n                                             password = ""yourPassword"",\n                                             port = ""yourPort"")\nStep-4\nProvide database schema name and other details as follows.\ncdmDatabaseSchema <- ""nameOfYourCdmSchema""\nresultsDatabaseSchema <- ""nameOfResultsSchema""\ntargetDatabaseSchema <- ""nameOfResultsSchema""\n#----**********------\n#Make sure to add / at the end of results_path in case you don\'t have that otherwise no folder \n#will be created and the study might crash.\nresults_path <- ""path to results folder"" #where you want the results to be saved.\n#For example results_path <- ""/Users/rvashisht/Desktop/StudyResults/"" will save the\n#study results in StudyResults folder in Desktop.\n#----*********-------\ncdmVersion <- ""5"" #do not change this. Please note, this study can only be executed on CDMV5 \nmaxCores <- 40 #change this depending on your compute power.\nStep-5\nThe complete study can be executed with a single function as shown below. Please note, this function will run the study for all the 4 different outcomes a)HbA1c b)Myocardial Infraction c)Kidney Disease and d)Eyes related disorders considered in this analysis.The script to run the complete study is below:\nrunCompleteStudy(connectionDetails = connectionDetails,\n                 cdmDatabaseSchema = cdmDatabaseSchema,\n                 resultsDatabaseSchema = resultsDatabaseSchema,\n                 cdmVersion = cdmVersion,\n                 results_path = results_path,\n                 maxCores = maxCores)\nImportant\nThe runCompleteStudy function will create a folder deleteMeBeforeSharing.\nPlease do not share this folder. Make sure to delete this folder from your\nresults folder before sharing rest of the results.\nPackage the results as follows:\npackageResults(connectionDetails = connectionDetails, \n               cdmDatabaseSchema = cdmDatabaseSchema, \n               workFolder = results_path, \n               dbName = cdmDatabaseSchema)\nTime of execution can vary from few hours to day or two, depending on the size of the dataset you have.\n']",https://github.com/rohit43,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
"Portland, Oregon",18,26,93,191,"['Glukit\nRequirements:\n\nInstall Google App Engine GO SDK:\nhttps://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go\nRead the Getting Started case in case of need:\nhttps://developers.google.com/appengine/docs/go/gettingstarted/devenvironment\nGet ruby (only for SCSS support), compass, bower and claymate (for gumby and front-end)\nsafekeeper for generating source with client ids/secrets: go get github.com/alexandre-normand/safekeeper\nGo in ./view and run claymate install.\nSetup environment variables with the following and run go generate github.com/alexandre-normand/glukit/app/secrets:\n\n```\nLOCAL_CLIENT_ID=""google-client-id-for-localhost""\nLOCAL_CLIENT_SECRET=""google-client-secret-for-localhost""\nPROD_CLIENT_ID=""""\nPROD_CLIENT_SECRET=""""\nTEST_STRIPE_KEY=""stripe-test-key""\nTEST_STRIPE_PUBLISHABLE_KEY=""stripe-test-publishable-key""\nPROD_STRIPE_KEY=""""\nPROD_STRIPE_PUBLISHABLE_KEY=""""\n```\n\n\nSetup client ids and secrets using the datastore administration UI (as an osin.client entity):\n\n* Generate a client secret using something like `openssl rand -base64 24`\n* Generate a client id using something like `echo ""`openssl rand -hex 14`.mygluk.it""`\n* Note the `RedirectUri` expected by the authenticating application (i.e. `x-glukloader://oauth/callback`)\n* Create a new `osin.client` entity using those values. The `key.identifier` should match the generated client id.\n\nMisc\nTo make SCSS changes, use compass build or compass watch.\nRunning it:\nFrom , execute goapp serve and hit http://localhost:8080.\nDeploy:\ngcloud app deploy\n']",https://github.com/alexandre-normand,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
"Islamabad, Pakistan",4,1,4,35,"['Feature Extraction of Diabetic Retinopathy Using Fundus Images\nDiabetic Retinopathy is a very common eye disease in people having diabetes. This disease can lead to blindness if not taken care of in early stages. This project is a part of the whole process of identifying Diabetic Retinopathy in its early stages. In this project, we will extract basic features which can help us in identifying Diabetic Retinopathy in its early stages. There are many clinical features of Diabetic Retinopathy but in this project, we focused on retinal blood vessels and exudates.\nPrerequisites\n\n\nPython 2.7\n\n\nPython Editor (any of your choice)\n\n\nDataset\nKaggle provides a very hefty and diverse dataset that contains round about 30,000 images. You can download it from here.\nProject Structure\n\n\nBlood Vessels.py: Contains code for blood vessels extraction from fundus images\n\n\nExudates.py: Contains code for Exudates extraction from Fundus images\n\n\nMainWindow.py: Main GUI component\n\n\nWindowFrame.py: GUI container for child controls\n\n\nAuthor\nAbdul Rasheed\n']",https://github.com/ebdulrasheed,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
Sri Lanka,17,31,131,826,"['Data Warehouse of Diabetic Data\nDataset URL - https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\nAttribute Info - https://www.hindawi.com/journals/bmri/2014/781670/tab1/\nDimensional Model\n\nBuild Data Warehouse\n\nStep 01 - Create Schema for Staging Area\nUse following query to create the database named \'diabetes_dwh_staging\' and tables.\n\nDatabase: diabetes_dwh_staging\nTables:\n\ndataset\nadmission_source\nadmission_type\ndischarge_disposition\n\n\n\nQuery to execute\nDROP SCHEMA IF EXISTS `diabetes_DWH_staging` ;\nCREATE SCHEMA `diabetes_DWH_staging` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;\nUSE `diabetes_DWH_staging` ;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`dataset` (\n  `encounter_id` INT NULL COMMENT \'\',\n  `patient_nbr` INT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  `weight` VARCHAR(45) NULL COMMENT \'\',\n  `admission_type_id` INT NULL COMMENT \'\',\n  `discharge_disposition_id` INT NULL COMMENT \'\',\n  `admission_source_id` INT NULL COMMENT \'\',\n  `time_in_hospital` INT NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  `medical_specialty` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedures` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medications` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `diag_1` VARCHAR(200) NULL COMMENT \'\',\n  `diag_2` VARCHAR(200) NULL COMMENT \'\',\n  `diag_3` VARCHAR(200) NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  `max_glu_serum` VARCHAR(45) NULL COMMENT \'\',\n  `A1Cresult` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `change` VARCHAR(45) NULL COMMENT \'\',\n  `diabetesMed` VARCHAR(45) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`admission_source` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`admission_type` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`discharge_disposition` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\nStep 02 - Extract (Import CSV Dataset) to Staging Area\nUse the following query to import data to \'datase\' table. Use absolute path to the \'diabetic_data.csv\' file as <dataset_directory>/diabetic_data.csv in the query.\nIn windows use \'/\' characters instead of \'\\\' as path name separator character (eg: instead of \'D:\\dwh\\diabetic_data.csv\' use \'D:/dwh/diabetic_data.csv\')\nUSE `diabetes_DWH_staging` ;\n\nLOAD DATA INFILE \'<dataset_directory>/diabetic_data.csv\'\nINTO TABLE `dataset`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nIf secure_file_priv is enabled copy \'diabetic_data.csv\' file to the directory given by following query and use that path.\nSHOW VARIABLES LIKE ""secure_file_priv"";\n\nCheck whether all 101766 recoreds are imported with executing the query below.\nSELECT COUNT(*) FROM `dataset`;\nImport IDs_mapping_admission_source.csv, IDs_mapping_admission_type.csv and IDs_mapping_discharge_disposition.csv files as the same way as below.\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_admission_source.csv\'\nINTO TABLE `admission_source`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_admission_type.csv\'\nINTO TABLE `admission_type`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_discharge_disposition.csv\'\nINTO TABLE `discharge_disposition`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\nStep 03 - Data Cleansing\n3.1 Create a duplicate data set to make changes\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`dataset_modified` (\n  `encounter_id` INT NULL COMMENT \'\',\n  `patient_nbr` INT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  `weight` VARCHAR(45) NULL COMMENT \'\',\n  `admission_type_id` INT NULL COMMENT \'\',\n  `discharge_disposition_id` INT NULL COMMENT \'\',\n  `admission_source_id` INT NULL COMMENT \'\',\n  `time_in_hospital` INT NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  `medical_specialty` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedures` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medications` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `diag_1` VARCHAR(200) NULL COMMENT \'\',\n  `diag_2` VARCHAR(200) NULL COMMENT \'\',\n  `diag_3` VARCHAR(200) NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  `max_glu_serum` VARCHAR(45) NULL COMMENT \'\',\n  `A1Cresult` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `change` VARCHAR(45) NULL COMMENT \'\',\n  `diabetesMed` VARCHAR(45) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\')\nENGINE = InnoDB;\nINSERT INTO `diabetes_DWH_staging`.`dataset_modified`\nSELECT * FROM `diabetes_DWH_staging`.`dataset`;\nHorizontal Filtering\nSome importants attributes that should be considered are missing in the dataset. Lets discard them.\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `payer_code` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `medical_specialty` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `race` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_1` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_2` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_3` = \'?\';\n\nSELECT COUNT(*) FROM `diabetes_dwh_staging`.`dataset_modified`;\nWe have 26755 data records.\nCleansing Patient Data\n\nSelect diry data wrt gender of the patient\n\nCREATE OR REPLACE VIEW `diabetes_dwh_staging`.`dirty_patient_gender` AS\nSELECT *\nFROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `patient_nbr` in (\n\tSELECT `patient_nbr`\n\tFROM `diabetes_dwh_staging`.`dataset_modified`\n\tWHERE `gender` = \'Female\'\n) AND `patient_nbr` in (\n\tSELECT `patient_nbr`\n\tFROM `diabetes_dwh_staging`.`dataset_modified`\n\tWHERE `gender` = \'Male\'\n);\n\nSELECT `encounter_id`, `patient_nbr`, `race`, `gender`\nFROM `diabetes_dwh_staging`.`dirty_patient_gender`;\nThere are 2 dirty records with 1 patient and cleaned with selecting most frequent and latest data.\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `gender` = \'Male\'\nWHERE `patient_nbr` = 109210482;\n\nSelect diry data wrt race of the patient\n\nSELECT distinct `race`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n-- 6 distinct races are found. (Caucasian, AfricanAmerican, ?, Other, Asian, Hispanic)\n\n-- Views to identify dirty data\nCREATE OR REPLACE VIEW `diabetes_dwh_staging`.`dirty_patient_race` AS\nSELECT `patient_nbr`, count(distinct `race`) as `race_count`\nFROM `diabetes_dwh_staging`.`dataset_modified`\ngroup by `patient_nbr` having `race_count` > 1;\n\nSELECT count(`patient_nbr`)\nFROM `diabetes_dwh_staging`.`dirty_patient_race`;\n\nSELECT `encounter_id`, `patient_nbr`, `race`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `patient_nbr` in (\n\tSELECT `patient_nbr`\n    FROM `diabetes_dwh_staging`.`dirty_patient_race`\n)\nORDER BY `patient_nbr`, `encounter_id`;\nThere are 165 dirty records with 50 patients and cleaned with selecting most frequent and latest data.\n-- Set race as Caucasian\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Caucasian\'\nWHERE `patient_nbr` IN (1553220, 23724792, 38893887, 42246738, 52316388, 112367349);\n\n-- Set race as AfricanAmerican\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'AfricanAmerican\'\nWHERE `patient_nbr` IN (6919587, 10980891, 40090752, 54643194, 101753730, 107849052);\n\n-- Set race as Other\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Other\'\nWHERE `patient_nbr` IN (28532295, 30689766, 32314608, 33247647, 36967347, 37547937, 37638306, 38774187, 39160719, 42096384, 90817893, 93105117, 93662784, 94027644, 98584524, 100322946, 103228398, 103690161, 105125598, 106425234);\n\n-- Set race as Asian\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Asian\'\nWHERE `patient_nbr` IN (24332220, 31812075, 34248078, 94539465, 97024806, 103305528, 104622570, 110657970, 111534210);\n\n-- Set race as Hispanic\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Hispanic\'\nWHERE `patient_nbr` IN (37572957, 44744166, 45113778, 90035874, 91107549, 93809358, 94088088, 98934615, 106895331, 109448541);\nStep 04 - Transforming\n4.1 Transform primary, secondary and additional diagnosis based on ""International Statistical Classification of Diseases and Related Health Problems""\n\nVisit http://icd9.chrisendres.com/index.php?action=contents for Diseases and Injuries Tabular Index\n\nValues are stored to the file data_transforming/diseases_and_injuries_tabular_index.csv.\n\n\n\nid\ndisease\ncode_letter\ncode_from\ncode_to\n\n\n\n\n1\nINFECTIOUS AND PARASITIC DISEASES\n\n1\n139\n\n\n2\nNEOPLASMS\n\n140\n239\n\n\n3\nENDOCRINE, NUTRITIONAL AND METABOLIC DISEASES, AND IMMUNITY DISORDERS\n\n240\n279\n\n\n4\nDISEASES OF THE BLOOD AND BLOOD-FORMING ORGANS\n\n280\n289\n\n\n5\nMENTAL DISORDERS\n\n290\n319\n\n\n6\nDISEASES OF THE NERVOUS SYSTEM AND SENSE ORGANS\n\n320\n389\n\n\n7\nDISEASES OF THE CIRCULATORY SYSTEM\n\n390\n459\n\n\n8\nDISEASES OF THE RESPIRATORY SYSTEM\n\n460\n519\n\n\n9\nDISEASES OF THE DIGESTIVE SYSTEM\n\n520\n579\n\n\n10\nDISEASES OF THE GENITOURINARY SYSTEM\n\n580\n629\n\n\n11\nCOMPLICATIONS OF PREGNANCY, CHILDBIRTH, AND THE PUERPERIUM\n\n630\n679\n\n\n12\nDISEASES OF THE SKIN AND SUBCUTANEOUS TISSUE\n\n680\n709\n\n\n13\nDISEASES OF THE MUSCULOSKELETAL SYSTEM AND CONNECTIVE TISSUE\n\n710\n739\n\n\n14\nCONGENITAL ANOMALIES\n\n740\n759\n\n\n15\nCERTAIN CONDITIONS ORIGINATING IN THE PERINATAL PERIOD\n\n760\n779\n\n\n16\nSYMPTOMS, SIGNS, AND ILL-DEFINED CONDITIONS\n\n780\n799\n\n\n17\nINJURY AND POISONING\n\n800\n999\n\n\n18\nSUPPLEMENTARY CLASSIFICATION OF FACTORS INFLUENCING HEALTH STATUS AND CONTACT WITH HEALTH SERVICES\nV\n1\n89\n\n\n19\nSUPPLEMENTARY CLASSIFICATION OF EXTERNAL CAUSES OF INJURY AND POISONING\nE\n800\n999\n\n\n\nLets load this csv file into a table.\nReplace <dataset_directory> directory in the query with the absolute path of the file. Use \'/\' as path seperator.\nuse diabetes_dwh_staging;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`icd9_index` (\n  `id` INT NOT NULL COMMENT \'\',\n  `disease` VARCHAR(200) NOT NULL COMMENT \'\',\n  `code_letter` VARCHAR(10) NULL COMMENT \'\',\n  `code_from` INT NOT NULL COMMENT \'\',\n  `code_to` INT NOT NULL COMMENT \'\',\n  PRIMARY KEY (`id`)  COMMENT \'\')\nENGINE = InnoDB;\n\nLOAD DATA INFILE \'<dataset_directory>/diseases_and_injuries_tabular_index.csv\'\nINTO TABLE `icd9_index`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\nTransforming ICD9 Details\nThis query may take several time (~30 seconds) to execute.\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ICD9`;\nDELIMITER ;;\n\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ICD9`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 0;\n\n-- Transform values starts with V and E\n-- Transform ""diag_1"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_1` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_1`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_1` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_1`, 1) = \'E\';\n\n-- Transform ""diag_2"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_2` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_2`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_2` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_2`, 1) = \'E\';\n\n-- Transform ""diag_3"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_3` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_3`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_3` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_3`, 1) = \'E\';\n\n\n-- Transform values with digits only\nSELECT COUNT(*) FROM `diabetes_dwh_staging`.`icd9_index`\nWHERE `code_letter` = \'\'\nINTO n;\n\nSET i = 0;\nWHILE i < n DO \n\t-- Transform ""diag_1"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `diag_1` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_1` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_1` >= (\n\t\t\tSELECT `code_from`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t) AND\n\t\t`diag_1` <= (\n\t\t\tSELECT `code_to`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t)\n\t);\n    \n\t-- Transform ""diag_2"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified` SET `diag_2` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_2` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_2` >= (\n\t\t\tSELECT `code_from`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t) AND\n\t\t`diag_2` <= (\n\t\t\tSELECT `code_to`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t)\n\t);\n    \n    -- Transform ""diag_3"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified` SET `diag_3` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_3` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_3` >= (\n\t\t\tSELECT `code_from`\n\t\t\tFROM `diabetes_dwh_staging`.`icd9_index`\n\t\t\tLIMIT i, 1\n        ) AND\n\t\t`diag_3` <= (\n\t\t\tSELECT `code_to`\n\t\t\tFROM `diabetes_dwh_staging`.`icd9_index`\n\t\t\tLIMIT i, 1\n        )\n\t);\n  SET i = i + 1;\nEND WHILE;\n\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`TRANSFORM_ICD9`();\n4.2 Transform Admission Type, Discharge Disposition, Admission Source with given mapping data set.\nOne procedure will takes around 15 seconds to execute with all take around 45 seconds.\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`;\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`;\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`;\nDELIMITER ;;\n\n-- Admission Type\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`admission_type`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `admission_type` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `admission_type` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`admission_type` WHERE `id` = i\n    )\n    WHERE `admission_type_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `admission_type_id`;\nEND;;\n\n-- Admission Source\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`admission_source`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `admission_source` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `admission_source` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`admission_source` WHERE `id` = i\n    )\n    WHERE `admission_source_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `admission_source_id`;\nEND;;\n\n-- Discharge Disposition\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`discharge_disposition`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `discharge_disposition` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `discharge_disposition` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`discharge_disposition` WHERE `id` = i\n    )\n    WHERE `discharge_disposition_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `discharge_disposition_id`;\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`();\nCALL `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`();\nCALL `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`();\n\nStep 05 - Create Schema for Data Warehouse\nExucute following query to create database and tables for Data Warehouse as in the Dimensional Model\nDROP SCHEMA IF EXISTS `diabetes_dwh` ;\n\nCREATE SCHEMA IF NOT EXISTS `diabetes_dwh` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;\nUSE `diabetes_dwh` ;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_patient` (\n  `patient_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `patient_number` VARCHAR(45) NOT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`patient_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_junk_admissionDetails` (\n  `admissionDetail_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `admission_type` VARCHAR(200) NULL COMMENT \'\',\n  `admission_source` VARCHAR(200) NULL COMMENT \'\',\n  `medical_speciality` VARCHAR(200) NULL COMMENT \'\',\n  PRIMARY KEY (`admissionDetail_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_discharge` (\n  `discharge_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `discharge_disposition` VARCHAR(150) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`discharge_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_test_results` (\n  `test_results_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `glucose_serum_test_result` VARCHAR(45) NULL COMMENT \'\',\n  `a1c_test_results` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`test_results_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_medication` (\n  `medication_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `change_of_medication` VARCHAR(45) NULL COMMENT \'\',\n  `diabetes_medicatin` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`medication_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_junk_diagnosis` (\n  `diagnosis_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `primary_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  `secondary_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  `additional_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  PRIMARY KEY (`diagnosis_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`fact_admission` (\n  `encounter_id` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `patient_sk` INT NOT NULL COMMENT \'\',\n  `test_sk` INT NOT NULL COMMENT \'\',\n  `medication_sk` INT NOT NULL COMMENT \'\',\n  `diagnosis_sk` INT NOT NULL COMMENT \'\',\n  `date_sk` DATETIME NOT NULL COMMENT \'\',\n  `time_in_hospital` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedure` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medication` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  PRIMARY KEY (`encounter_id`)  COMMENT \'\',\n  UNIQUE INDEX `patient_sk_UNIQUE` (`patient_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `test_sk_UNIQUE` (`test_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `medication_sk_UNIQUE` (`medication_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `diagnosis_sk_UNIQUE` (`diagnosis_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `date_sk_UNIQUE` (`date_sk` ASC)  COMMENT \'\')\nENGINE = InnoDB;\nStep 06 - Loading Data\n6.1 Loading to Patient Dimension\nThere are 19808 distict values.\nINSERT INTO `diabetes_dwh`.`dim_patient` (`patient_number`, `race`, `gender`, `age`)\nSELECT DISTINCT `patient_nbr`, `race`, `gender`, `age`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nORDER BY `patient_nbr`, `age`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_patient`;\n6.2 Loading to Test Results Dimension\nThere are 7 distict values.\nINSERT INTO `diabetes_dwh`.`dim_test_results` (`glucose_serum_test_result`, `a1c_test_results`)\nSELECT DISTINCT `max_glu_serum`, `A1Cresult`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_test_results`;\n6.3 Loading to Discharge Dimension\nThere are 339 distict values.\nINSERT INTO `diabetes_dwh`.`dim_discharge` (`discharge_disposition`, `readmitted`, `payer_code`)\nSELECT DISTINCT `discharge_disposition`, `readmitted`, `payer_code`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_discharge`;\n6.4 Loading to Medication Dimension\nThere are 633 distict values.\nINSERT INTO `diabetes_dwh`.`dim_medication` (\n\t`change_of_medication`, `diabetes_medicatin`, `metformin`, `repaglinide`,\n    `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`, `glipizide`,\n    `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`, `miglitol`,\n    `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`,\n    `glyburide-metformin`, `glipizide-metformin`, `glimepiride-pioglitazone`,\n    `metformin-rosiglitazone`, `metformin-pioglitazone`\n)\nSELECT DISTINCT `change`, `diabetesMed`, `metformin`,\n\t`repaglinide`, `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`,\n    `glipizide`, `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`,\n    `miglitol`, `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`,\n    `glyburide-metformin`, `glipizide-metformin`, `glimepiride-pioglitazone`,\n    `metformin-rosiglitazone`, `metformin-pioglitazone`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_medication`;\n6.5 Loading to Diagnosis Junk Dimension\nLets load all distinct values for the junk dimension.\nThere are 2323 distict values.\nINSERT INTO `diabetes_dwh`.`dim_junk_diagnosis` (`primary_diagnosis`, `secondary_diagnosis`, `additional_diagnosis`)\nSELECT DISTINCT `diag_1`, `diag_2`, `diag_3`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_junk_diagnosis`;\n6.6 Loading to Admission Junk Dimension\nLets load all distinct values for the junk dimension.\nThere are 391 distict values with including NULL values.\nINSERT INTO `diabetes_dwh`.`dim_junk_admissionDetails` (`admission_type`, `admission_source`, `medical_speciality`)\nSELECT DISTINCT `admission_type`, `admission_source`, `medical_specialty`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_junk_admissionDetails`;\n6.7 Loading to Fact\nSELECT `stg`.`encounter_id`,\n\t`patient`.`patient_sk`, `test`.`test_results_sk`,\n    `stg`.`time_in_hospital`, `stg`.`num_lab_procedures`\nFROM `diabetes_dwh_staging`.`dataset_modified` as `stg`,\n\t`diabetes_dwh`.`dim_patient` as `patient`, \n    `diabetes_dwh`.`dim_test_results` as `test`,\n    `diabetes_dwh`.`dim_discharge` as `discharge`,\n    `diabetes_dwh`.`dim_medication` as `medication`,\n    `diabetes_dwh`.`dim_junk_diagnosis` as `diag`,\n    `diabetes_dwh`.`dim_junk_admissionDetails` as `adm_details`\nWHERE `stg`.`patient_nbr` = `patient`.`patient_number` AND `stg`.`age` = `patient`.`age`\n\tAND `test`.`glucose_serum_test_result` = `stg`.`max_glu_serum` AND `test`.`a1c_test_results` = `stg`.`A1Cresult`\n    AND `stg`.`discharge`.`discharge_disposition` = `discharge_disposition` AND `stg`.`readmitted` = `discharge`.`readmitted` AND `srg`.`payer_code` = `discharge`.`payer_code`;\nData Mining\nTransforming for Data Mining\nTransform age to an integer value. (eg transform ""[40-50)"" to 45)\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`transform_for_datamining`;\nDELIMITER ;;\n\nCREATE PROCEDURE `diabetes_dwh_staging`.`transform_for_datamining`()\nBEGIN\n\nDECLARE i INT DEFAULT 0;\nDECLARE age_str VARCHAR(10);\nDECLARE age_str_int INT;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `age_int` INT;\n\nWHILE i < 10 DO\n\tSET age_str = CONCAT(\'[\', i * 10, \'-\', (i+1) * 10, \')\');\n    SET age_str_int = i * 10 + 5;\n    \n    UPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `age_int` = age_str_int\n    WHERE `age` = age_str;\n    \n    SET i = i+1;\nEND WHILE;\n\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`transform_for_datamining`();\nExport CSV file for Data Mining\nLets export diabetes_dwh_staging.dataset_modified table to csv file. Then it can be used with weka for data mining.\nReplace <dataset_directory> directory in the query with the absolute path of the file. Use \'/\' as path seperator.\nSELECT \'race\', \'gender\', \'age\', \'admission_type\',\n\t\'discharge_disposition\', \'admission_source\', \'time_in_hospital\', \'payer_code\',\n    \'medical_specialty\', \'num_lab_procedures\', \'num_procedures\', \'num_medications\',\n    \'number_outpatient\', \'number_emergency\', \'number_inpatient\', \'diag_1\', \'diag_2\',\n    \'diag_3\', \'number_diagnoses\', \'max_glu_serum\', \'A1Cresult\', \'metformin\', \'repaglinide\',\n    \'nateglinide\', \'chlorpropamide\', \'glimepiride\', \'acetohexamide\', \'glipizide\',\n    \'glyburide\', \'tolbutamide\', \'pioglitazone\', \'rosiglitazone\', \'acarbose\', \'miglitol\',\n    \'troglitazone\', \'tolazamide\', \'examide\', \'citoglipton\', \'insulin\', \'glyburide-metformin\',\n    \'glipizide-metformin\', \'glimepiride-pioglitazone\', \'metformin-rosiglitazone\',\n    \'metformin-pioglitazone\', \'change\', \'diabetesMed\', \'readmitted\'\nUNION\nSELECT `race`, `gender`, `age_int`, `admission_type`,\n\t`discharge_disposition`, `admission_source`, `time_in_hospital`, `payer_code`,\n    `medical_specialty`, `num_lab_procedures`, `num_procedures`, `num_medications`,\n    `number_outpatient`, `number_emergency`, `number_inpatient`, `diag_1`, `diag_2`,\n    `diag_3`, `number_diagnoses`, `max_glu_serum`, `A1Cresult`, `metformin`, `repaglinide`,\n    `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`, `glipizide`,\n    `glyburide`, `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`, `miglitol`,\n    `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`, `glyburide-metformin`,\n    `glipizide-metformin`, `glimepiride-pioglitazone`, `metformin-rosiglitazone`,\n    `metformin-pioglitazone`, `change`, `diabetesMed`, `readmitted`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nINTO OUTFILE \'D:/data_set.csv\'\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\';\nNow we can import this data set to Weka.\n']",https://github.com/renuka-fernando,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
"Huntington Beach, CA",96,38,153,1182,"[""Deep Learning Example using SHAInet\nThis workbook demonstrates how to create a Deep Learning network using SHAInet.  We will be using the Pima Indians dataset to predict diabetes.\nInstallation\nThis requires crystal 0.23.1\nUsage\nThis project uses crystal's playground.  You can load and run the playground workbook using:\nshards install\ncrystal play\nopen http://localhost:8080\nThen select the Workbook -> Diabetes from the menu.\nYou can also compile and run the application:\ncrystal run src/diabetes.cr\nContributing\n\nFork it ( https://github.com/drujensen/diabetes/fork )\nCreate your feature branch (git checkout -b my-new-feature)\nCommit your changes (git commit -am 'Add some feature')\nPush to the branch (git push origin my-new-feature)\nCreate a new Pull Request\n\nContributors\n\ndrujensen Dru Jensen - creator, maintainer\n\n""]",https://github.com/drujensen,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
Berlin,145,36,190,440,"['GlucoLog  \n¿Qué es GlucoLog?\nGlucolog es un API destinado al registro y seguimiento de los niveles de glicemia en la sangre, orientado para niños menores de 14 años.\n¿Cómo puedo utilizar GlucoLog?\nEl código es totalmente Open Source, puede ser descargado e instalado por cualquier persona o institución y desarrollar encima de la plataforma.\nQuiero colaborar ¿Cómo lo hago?\nPpuede reportar cualquier fallo en éste repositorio. Si eres desarrollador y tienes unas propuestas, puede colocar un Pull Request, no sin antes abrir un issue con la propuesta.\nAPI\nLa definición del API está pública en https://glucologapi.docs.apiary.io/ favor revisar.\n']",https://github.com/davidtavarez,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
Chengdu,7,1,6,61,['Tianchi_DiabetesPredict\n天池大数据竞赛数据集&代码\nCode\n1.神经网络博文链接.txt\n\u2003\u2003神经网络相关的一篇博文\n2.Reference\n\u2003\u2003比赛过程中的参考文献\n\u2003\u2003其中包括数据预处理、BoxCox变换等内容\n3.数据可视化\n\u2003\u2003比赛过程中，对特征和结果的分布一些图\n\u2003\u2003特征权重的结果图等\n4.process&predict_data\n\u2003\u2003比赛过程中数据处理和预测的代码\n\u2003\u2003需要注意的是，代码中读取数据的路径需要修改\n\u2003\u2003数据处理运行得到的处理后的数据集文件没有保留，需要自己运行后获得～\n5.keras_code\n\u2003\u2003采用神经网络keras进行预测部分的代码\nDataSet\n\u2003\u2003主办方提供的原始数据集\nReference\n\u2003\u2003人工智能辅助糖尿病遗传风险预测参考文献\n\u2003\u2003比赛主办方提供参考文献\n2.知网下载文献\n\u2003\u2003知网上下载的相关的文章\n'],https://github.com/AmbitionC,"['1', 'JavaScript', 'Updated Mar 3, 2017', '1', 'R', 'MIT license', 'Updated Jan 22, 2020', '5', 'Python', 'Updated May 7, 2019', 'Jupyter Notebook', 'Updated Jul 20, 2018', 'CLIPS', 'GPL-3.0 license', 'Updated Apr 12, 2017', '8', 'Updated Mar 10, 2015', '6', 'CSS', 'MIT license', 'Updated Jul 22, 2019', '3', 'Python', 'MIT license', 'Updated Oct 23, 2020', '4', 'R', 'Updated Jul 23, 2018', '4', 'JavaScript', 'Updated May 1, 2018']"
"Lagos, Nigeria",58,38,179,818,['Diabetes-Prediction-API\nDeploying a simple Diabetic Machine Learning classification model with Django via an API\nEndpoint\nhttps://diabetiespred.herokuapp.com/\nAPI documentation\nhttps://documenter.getpostman.com/view/10327129/SzRuZCfD?version=latest\n'],https://github.com/AminuIsrael,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
Mumbai,0,0,11,0,['Dcare\nHybrid Mobile App for Diabetes Care using PhoneGap + Ionic + AngularJs Material\n'],https://github.com/nozelrosario,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"Vancouver, Canada",1,0,15,0,['hackingdiabetes\nHacking Diabetes repo for team 4 @ Hacking Health 2014 Vancouver\nSee Pi/README.md\n'],https://github.com/StefanCodes,"['3', 'Python', 'Updated Jan 14, 2018', '7', 'Python', 'Updated Aug 2, 2020', '1', 'Python', 'Updated Dec 2, 2014', 'C#', 'GPL-3.0 license', 'Updated Jun 7, 2017', 'JavaScript', 'Updated Oct 30, 2020', '5', 'Jupyter Notebook', 'Updated Jun 27, 2019', '5', 'Python', 'Updated May 23, 2017', 'CSS', 'Updated Aug 14, 2020', 'Jupyter Notebook', 'Updated Jun 27, 2019', '1', 'Jupyter Notebook', 'Updated Oct 7, 2020']"
Hong Kong,1,2,69,7,"[""天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测\n这是天池平台上的一道关于精准医疗方面的赛题：链接。\n解决方案\n[待写...]\n代码说明\ndata\n存放原始的数据文件，包括：\n\n训练数据，draft_data_train.csv\nA榜测试数据，d_test_A_20180102\nB榜测试数据，d_test_B_20180128.csv\n\n数据分析与特征提取\n\nfeature_extract.py,提取特征，在data目录下生成feature目录，存放特征文件\noffline_data_extract.py,提取线下训练与测试集\n\nclassification\n\nxgb_hp95.py，训练xgboost分类器，判断'id'的血糖是否大于95百分位数\nxgb_lp30.py，训练xgboost分类器，判断'id'的血糖是否小于30百分位数\nseries_model.py,训练一系列分类器，包括MLP,RF,XGB等，模型均保持在model/classification文件夹下\nlevel_elimination.py,加载一些列保存的分类模型，对test数据集进行瀑布流筛选，保留top150\n\nMLP_regression\n\nyy_tensorflow.py,训练MLP回归模型，并同时对测试集进行回归预测\n\nmodel\n\nclassification 文件夹保存分类器的各类模型\nregression 文件夹保存回归其的各类模型(lightdm模型除外)\n\nregression\n\n\nxgb.py 训练xgboost回归器\n\n\ndart.py，训练dart回归器\n\n\nlightdm.py，训练lightdm回归器\n\n\nrf.py,训练lightdm回归器\n\n\ngen_submission.py，生成提交文件，融合了四个回归模型的结果。\n\n\npost_process.py，使用分类模型的预测结果，对回归预测的结果进行后处理\n\n\n""]",https://github.com/LBAWMY,"['JavaScript', 'Updated Aug 23, 2018', '1', 'Java', 'Updated Apr 14, 2018', '1', 'Python', 'Updated Jan 30, 2018', 'Jupyter Notebook', 'Updated Dec 15, 2019', '1', 'JavaScript', 'Updated Apr 26, 2014', 'Jupyter Notebook', 'Updated Oct 8, 2016', 'Makefile', 'Updated Mar 27, 2017', 'HTML', 'Updated May 4, 2017', '1', 'HTML', 'MIT license', 'Updated Sep 18, 2020', '1', 'Java', 'Apache-2.0 license', 'Updated May 12, 2019']"
"Anantapur,Andhrapradesh",35,5,41,277,"['Linear Regression Using Python\n\nClick here to download the code.\nPrerequisites\nThe things that you must have a decent knowledge on:\n    * Python\n    * Linear Algebra\n    * Calculus\n\nInstallation\n\nThis project is fully based on python. So, the necessary modules needed for computaion are:\n\n    * Numpy\n    * Sklearn\n    * Matplotlib\n    * Pandas\n\n\nThe commands needed for installing the above modules on windows platfom are:\n\n    pip install numpy\n    pip install sklearn\n    pip install matplotlib\n \n\nwe can verify the installation of modules by  importing the modules. For example:\n\n    import numpy\n    from sklearn.decomposition import kernelPCA \n    import matplotlib.pyplot as plt\n    \nExplanation\n\n\nHere were performing linear regression on the Boston house pricing dataset.\n\n\nThe details of the dataset are:\n\n\nTitle: Boston Housing Data\n\n\nSources:\n(a) Origin:  This dataset was taken from the StatLib library which is\nmaintained at Carnegie Mellon University.\n(b) Creator:  Harrison, D. and Rubinfeld, D.L. \'Hedonic prices and the\ndemand for clean air\', J. Environ. Economics & Management,\nvol.5, 81-102, 1978.\n(c) Date: July 7, 1993\n\n\nPast Usage:\n\n\n\nUsed in Belsley, Kuh & Welsch, \'Regression diagnostics ...\', Wiley,\n1980.   N.B. Various transformations are used in the table on\npages 244-261.\nQuinlan,R. (1993). Combining Instance-Based and Model-Based Learning.\nIn Proceedings on the Tenth International Conference of Machine\nLearning, 236-243, University of Massachusetts, Amherst. Morgan\nKaufmann.\n\n\n\nRelevant Information:\nConcerns housing values in suburbs of Boston.\n\n\nNumber of Instances: 506\n\n\nNumber of Attributes: 13 continuous attributes (including ""class""\nattribute ""MEDV""), 1 binary-valued attribute.\n\n\nAttribute Information:\n\nCRIM      per capita crime rate by town\nZN        proportion of residential land zoned for lots over 25,000 sq.ft.\nINDUS     proportion of non-retail business acres per town\nCHAS      Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\nNOX       nitric oxides concentration (parts per 10 million)\nRM        average number of rooms per dwelling\nAGE       proportion of owner-occupied units built prior to 1940\nDIS       weighted distances to five Boston employment centres\nRAD       index of accessibility to radial highways\nTAX      full-value property-tax rate per $10,000\nPTRATIO  pupil-teacher ratio by town\nB        1000(Bk - 0.63)^2 where Bk is the proportion of black by town\nLSTAT    % lower status of the population\nMEDV     Median value of owner-occupied homes in $1000\'s\n\n\n\nMissing Attribute Values:  None.\n\n\n\n\nClick here to find the program LinearRegression_BOSTON_Dataset.py\n\n\nResult:\n\n\nThe above program results a scatter plot showed below:\n\n\n\nThe output of the program is showed below:\n\n\n\nclick here to see the program LinearRegression_DIABETES_Dataset.py implementing linear regression on Diabetes dataset.\nConclusion\n\nPerformed Linear Regression on BOSTON house pricing and Diabetes dataset.\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md\n']",https://github.com/syamkakarla98,"['Jupyter Notebook', 'Updated Feb 5, 2018', '1', 'Updated Aug 11, 2020', '6', 'Python', 'MIT license', 'Updated Aug 11, 2018', 'Jupyter Notebook', 'Updated Sep 15, 2019', 'Jupyter Notebook', 'Updated Nov 16, 2016', '2', 'Python', 'Updated Jun 11, 2018', '3', 'Jupyter Notebook', 'Updated Jul 24, 2018', '2', 'MIT license', 'Updated Nov 25, 2018', '2', 'R', 'Updated May 3, 2019', '3', 'Jupyter Notebook', 'Updated Oct 4, 2019']"
"New Delhi, India",15,0,62,669,"[""Diabetes-Predicition-Model\nIn this project we are given a Diabetes Data set consisting of following features -\n['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nWe have to predict whether a person is suffering from diabetes or not (Binary Classification).\nClassification Task - Classify a person as 0 or 1 (Diabetic or Not) using K-Nearest Neighbors classifier.\nWe are saving our predictions of test cases in a CSV file. File should have same structure as that of Sample Submission File.\n""]",https://github.com/shubhamgoel90,"['3', 'JavaScript', 'Updated Jul 13, 2017', 'HTML', 'Apache-2.0 license', 'Updated Dec 17, 2016', '5', 'Jupyter Notebook', 'Updated Jun 30, 2019', '5', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'Jupyter Notebook', 'Updated Aug 5, 2020', '5', 'Java', 'Updated Jun 17, 2020', '2', 'Jupyter Notebook', 'Updated Jun 14, 2016', 'HTML', 'Updated Dec 5, 2017', '1', 'Java', 'Updated Nov 5, 2016', '1', 'HTML', 'Updated Jan 24, 2016']"
India,1,3,16,47,"[""DiabetesML\nDetection of type of diabetes including Decision Tree algorithm in machine learning\nWe took the dataset of aboout 768 patients which contains different attributes such as blood-ressure,BMI,blood-sugagr-level,etc as the\ndeciding factores for diabetes.Diabetes are classified into 2 types in this dataset i,e Type-1 and Type-2.\nThere are also information about patients who don't have diabetes also present in the diabetes.\nWe replace the Type-1 diabetic patients as 1 ,Type-2 diabetic patients as 2 and the patients who don't have diabetes as 0\nfor simplification purposes in our dataset.\nWe then visalize the data and us our Decision Tree Algorithm for traininng and testing puposes and get our desired results.\nWe can fix the random state of the training model at a point where we get the most desired output.This helps us to acive more accurarte results in the detection and makes our model strong.\n""]",https://github.com/avisheknayak,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
India,8,51,31,109,['bays-classifer-diabetes-via-age\nIts a bays classsifer which predict your diabetes based on your age\n'],https://github.com/kartikpaliwal,"['2', 'Java', 'Updated Sep 14, 2016', '4', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Oct 14, 2018', '4', 'Jupyter Notebook', 'Updated Oct 5, 2020', '2', 'JavaScript', 'Updated Feb 11, 2020', '2', 'Jupyter Notebook', 'Updated Jul 26, 2019', '3', 'Objective-C', 'MIT license', 'Updated Mar 12, 2017', '3', 'Jupyter Notebook', 'Updated Nov 23, 2020', '3', 'Java', 'BSD-2-Clause license', 'Updated Mar 5, 2018', '3', 'Jupyter Notebook', 'Updated May 9, 2020']"
India,5,8,68,5965,"['Diabetes_Prediction\nn this project we used different types of machine learning algorithm, and predicted that a person will be having diabetes in the future or not. And how much is it accurate given the responses that the person has diabetes.\nUsing the Decision Tree, the accuracy obtained is 87.1794% and Average precision-recall score obtained is 0.66\n']",https://github.com/malhotrabhavyajot,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
Texas,4,0,7,38,"['Diabetes-Prediction\nNational Institute of Diabetes and Digestive and Kidney Diseases research creates knowledge about and treatments for the most chronic, costly, and consequential diseases. The dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Build a model to accurately predict whether the patients in the dataset have diabetes or not.\nThe datasets consists of several medical predictor variables and one target variable (Outcome). Predictor variables includes the number of pregnancies the patient has had, Glucose,Blood Pressure, Skin Thickness, Insulin, their BMI, DiabetesPedigreeFunction, Age, Outcome(0,1).\nI have performed the following steps to predict whether or not a patient has diabetes:\n(i) Data Wrangling\n(ii) Exploratory Data Analysis\n(iii) Creation of different classifiers and choosing the best one among these algorithms\n(iv) Model validation to overcome the overfitting problem.\n(v) Evaluation of model\n(vi) Creating a dashboard with charts in Tableau.\n']",https://github.com/disojn,"['2', 'R', 'MIT license', 'Updated Jul 9, 2018', '2', 'Java', 'GPL-3.0 license', 'Updated Jan 31, 2019', '2', 'Jupyter Notebook', 'Updated Jan 24, 2020', '2', 'Jupyter Notebook', 'Updated Sep 14, 2020', '2', 'JavaScript', 'MIT license', 'Updated Apr 20, 2015', '2', 'Jupyter Notebook', 'Updated Dec 27, 2019', '2', 'HTML', 'GPL-3.0 license', 'Updated Sep 17, 2020', '2', 'Java', 'GPL-2.0 license', 'Updated Oct 19, 2020', 'Updated Apr 30, 2018', 'Updated Mar 1, 2018']"
"Milan,Italy",14,4,28,95,"['This repo detecated to the analysis at the Pima-Indians diabetes which 768 row and 9 columns at the columns are :\n0- preg = Number of times pregnant\n1- plas = Plasma glucose concentration in an oral glucose tolerance test\n2- pres = Diastolic blood pressure (mm Hg)\n3- skin = Triceps skin fold thickness (mm)\n4- test = 2-Hour serum insulin (mu U/ml)\n5- mass = Body mass index (weight in kg/ (height in m) ^2)\n6- pedi = Diabetes pedigree function\n7- age = Age (years)\n8- class = Class variable (1: tested positive for diabetes, 0: tested negative for diabetes)\nThe implementation done by using Keras and the accuracy and loss results are:\n\n\nAs we could see from this model(the photo of the model is attached bellow) we got 80.95% accuracy which is higher than any results which exists over the Internet:\n\nAfter the definition of the inital model I retrain the last model and I got the improvment at the accuracy which is 81.39% and the loss accuracy is also improved compare to the previous model:\n\n\n\n']",https://github.com/eddieir,"['Jupyter Notebook', 'Updated Nov 21, 2020', '4', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Python', 'MIT license', 'Updated Feb 9, 2019', '2', 'Jupyter Notebook', 'Updated May 5, 2020', '1', 'Jupyter Notebook', 'Updated Nov 3, 2020', '2', 'Jupyter Notebook', 'Updated Sep 4, 2018', '2', 'Jupyter Notebook', 'Updated May 4, 2018', 'Python', 'Updated Jun 27, 2015', 'CSS', 'Updated Jun 22, 2015', 'Updated Apr 2, 2015']"
"Netherlands, Lichtenvoorde",2,2,1,23,['Diabetes\n'],https://github.com/JowJoris,"['Updated Apr 4, 2019', 'Updated Nov 24, 2019', 'JavaScript', 'Updated Jan 30, 2020', 'Updated Feb 21, 2020', 'Jupyter Notebook', 'Updated Nov 1, 2019', 'Jupyter Notebook', 'Updated May 30, 2020', 'Python', 'Updated Mar 22, 2020', 'Updated Apr 20, 2020', 'Python', 'Updated Apr 22, 2020', 'Jupyter Notebook', 'Updated Jul 18, 2020']"
Mumbai,4,14,200,0,['Diabetes\n'],https://github.com/saurabh9969,"['PHP', 'Apache-2.0 license', 'Updated Jan 28, 2016', 'Updated Dec 28, 2017', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019']"
India,7,8,21,93,['Diabetes\n'],https://github.com/mphirke,"['Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019', 'Updated Nov 13, 2019', 'C#', 'Updated Oct 21, 2017']"
Nepal,3,21,5,24,['DiabetesPrediction\nDiabetesPrediction\n'],https://github.com/Dhakal29,"['Java', 'Updated Feb 19, 2018', 'Updated Apr 5, 2018', 'R', 'Updated Mar 20, 2019', 'Updated Mar 7, 2019', 'C#', 'Updated Mar 22, 2019', 'Java', 'Updated Feb 21, 2019', 'Swift', 'Updated Jun 27, 2020', 'Updated Jul 8, 2020', 'Jupyter Notebook', 'Updated Jul 23, 2020', 'Jupyter Notebook', 'Updated Dec 26, 2019']"
"Serbia,  Belgrade",15,32,51,70,"['DiabetesPrediction\nCaclulating the precentage of people in America the precentage and possibility of having diabetes.\nWhat I Learned\n\nPreparing the data set with panda data frames(removing invalid values from the set and duplicates as well)\nMold Data\nTraining with inital Algorithm - Naive Bayes\nSetting aside 20% of data for testing\nPerforming Random Forest, Logistic Regression\n\n']",https://github.com/jovanvuleta,"['Java', 'Updated Dec 30, 2019', 'CSS', 'Updated May 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 14, 2019', '1', 'Updated Nov 5, 2020', 'Python', 'Updated Oct 14, 2020', 'Classic ASP', 'Updated Jan 11, 2015', 'Updated Apr 15, 2015', 'Updated Oct 6, 2015', 'Updated Nov 9, 2017', 'Updated Dec 5, 2017']"
"Auckland, New Zealand",2,1,0,64,"['Type-II Diabetes Prediction Model\nThis study will provide validated T2D prediction models, relevant in contemporary New Zealand’s primary care.\nCore Data\nSee Wiki for details regarding the core dataset including variable descriptions.\nThe core dataset is a PREDICT population from 2006 - 2018. Individuals are eligeable if they are diabetes-free at time of PREDICT risk assessment and where an index HbA1c value is avaiable.\nInclusion does not limit the number of prior PREDICT assessments or prior CVD. Where eligeability is met at multiple PREDICT assessments, the earliest PREDICT record is used as baseline.\nInformation from the National Health Collection are linked to provide demographic, hospitalised history, hospitalised outcomes, death-specific outcomes, and baseline treatment.\nTo ensure consistency, the exclusion criteria (see Wiki) have been applied in data management.\nExclude IF\n\nPrior admission for diabetes; OR\nTreated with antidiabetic drugs in last 6 months; OR\nNoted as diabetic in PREDICT; OR\nNon-existing HbA1c test in prior 2 years; OR\nAny HbA1c in prior 2 years >= 50mmol/mol\nExclusion critiera met within 30 days of study index date\nQC Conflicts\n\nRoll to next\nExamine each visit and apply exclusion criteria. Continue with each nth visit to find those who could meet the inclusion criteria in subsequent visits.\n\nStarting with 564180 participants\n371362 met criteria after first visit\n12191 meet criteria in subsequent visit\n\nFurther Removals\n\nRemove out of age Limits 25-74: -14806\nRemove non-avaliable HbA1c within +30 days of Predict: -75764\nRemove dispensing records 1 month beyond DOD :-107\nRemove people with renal dialysis & transplantation: -826\nRemove exclusions detected within 30 days of study index: -179\nTotal Remaining = 277075\n\n']",https://github.com/VIEW2020,"['Jupyter Notebook', 'Updated Nov 26, 2019', 'Jupyter Notebook', 'Updated Aug 29, 2017', 'R', 'Updated Apr 24, 2020', 'HTML', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Sep 15, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'R', 'Updated Jul 31, 2020', 'C#', 'Updated Aug 29, 2020', 'Updated Oct 10, 2020', 'Updated Nov 19, 2020']"
"Purwokerto, Indonesia",9,13,43,245,['DiabetesManager\nApplication to manage calories so that its users do not exceed the calorie targets that have been determined by nutritionists so that users do not occur in obesity or diabetes.\nWeb Server here\nLink Video\nYoutube\n'],https://github.com/anantyan,"['Jupyter Notebook', 'Updated Feb 26, 2020', 'Python', 'Updated Apr 9, 2020', 'Java', 'Updated May 6, 2020', '1', 'Jupyter Notebook', 'Updated May 20, 2020', 'Python', 'Updated Jul 28, 2020', 'Jupyter Notebook', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Oct 20, 2020', 'R', 'MIT license', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Nov 9, 2020']"
San Francisco,244,63,646,91,"[""decoding-dexcom\nhacking diabetes: give me my data\nSetup\nThere are some scripts in the\ndexcom_reader directory.\nThey depend on https://github.com/compbrain/dexcom_reader.\nTo use these scripts:\n$ git clone https://github.com/bewest/decoding-dexcom.git\n$ cd decoding-dexcom/dexcom_reader\n$ git clone https://github.com/compbrain/dexcom_reader.git\n\nthen to test that everything worked, try\n$ python dxcom-scan\nhelping\nSend me your packet captures!\nfork this repo\nThen\n$ git clone git@github.com/<yourname>/decoding-dexcom.git\n$ cd decoding-dexcom\n$ git checkout -b <yourname>\n$ mkdir <yourname>\n$ cp ~/path/to/captures ./<yourname>\n$ git add -v\n$ git commit -am '<yourname> adding captures for @bewest et al.'\n$ git push -u origin <yourname>\nThen you can send me an email or a pull request.\n""]",https://github.com/bewest,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
"Türkheim, Germany",16,5,17,785,"[""Diaguard\n \n\n\nDiaguard is an Android app for people with diabetes mellitus.\nIt replaces the handwritten diary and helps the user to quickly and easily record, evaluate and export his blood sugar and other important data as PDF or CSV. Thanks to the clearly arranged interface, the user always has an overview of his diabetes. The app also provides information on several thousand foods including carbohydrates and other nutrients.\n\nQuickly and easily track your blood glucose, insulin, carbohydrates, HbA1c, activity, weight, pulse, blood pressure and oxygen saturation\nCustomizable units\nVisualize your blood glucose level in a graph\nDetailed logs of your data\nSettings for basal rate, correction factor and meal-bolus-factor\nFood database with thousands of entries\nPDF and CSV export\nBackup\nReminder\nEstimated HbA1c\nStatistics\nDark Mode\nLocalized in English, German, French, Spanish and Italian\n\n      \nDistribution\n\nAbout\nHistory\nDevelopment of Diaguard started in October 2013. It was as one of several small projects of one developer who was trying to gain traction on the Android platform. This project soon evolved into a vision named Diaguard which saw its initial release in July 2014. Since then it has received many updates, much appreciated feedback from its users and a little bit of marketing with the help of direct contact and mouth to mouth propaganda. But at the end of the day every line of code has been provided by one sole developer in his spare-time. This should change in April 2020 when the decision was made to go open source.\nGoals\nDiaguard should help diabetics with monitoring their diabetes. It should be able to replace the handwritten diary completely and to supplement tasks like basal rate tests or carb counting. It should help diabetologists with monitoring their patients regularly and when preparing a health insurance application.\nDiaguard's users should always be and feel in full control. All user-generated data must stay on the same device until the user explicitely decides to transfer something to another device, e.g. during an export or backup. Nothing is shared with remote services and network is only used to read data from a food database.User data must not be lost. Therefor database migrations enable user data to be carried from version 1.0 to any existing and upcoming release.\nDiaguard should be accessible to most people. Therefor its design is heavily influenced by the Material Design Guidelines and tested with accessibility tools like TalkBack and Accessibility Scanner.\nDiaguard should only be used under the supervision of a diabetologist.\nDiaguard should not be used by minors without the supervision of a parent or legal guardian.\nDiaguard is not a medical app and serves no therapeutical purpose.\nBusiness model\nThere is none.\nDiaguard exists for three reasons: for learning, for fun and for saying thank you. This app kickstarted the career of a professional software developer by leading through the whole software lifecycle: creating a concept, building software from scratch, publishing it to the masses and maintaining a legacy project with additions sprinkled here and there. Additionally it was and is pure fun to enhance this app and to see feedback from a helpful and thankful community. Last but not least Diaguard is a way of giving something back.\nFor these reasons, Diaguard has been, is and will always be free of cost.\nIf you want to buy me a beer or support me in general, please use the donate button and be aware of my thanks.\n\n\n\nDevelopment\nLanguages\nEnglish is used as general language for naming things. Everything except the localization should be written in English.\nJava is used as programming language. Currently there are no plans to migrate to Kotlin to prevent a multi-language project. A possible approach could be splitting up the monolith into multiple modules which unleashes the potential to switch language while staying consistent within a module.\nSQLite is used as query language for the database. Object-relational mapping takes then place via ORMLite.\nXML is used as markup language for user interfaces. These views are then bound to Java via Butter Knife.\nLocalization\nLocalization takes place locally and affects following components:\n\nUser interfaces: localized via Android resources (one strings.xml per language)\nCommon food: localized via custom file import (one food_common.csv for all languages)\nDefault tags: localized via custom file import (one tags.csv for all languages)\n\nCurrently the localization process requires certain programming skills. This should and could be improved by using an external service in order to support localizations by non-developers.\nArchitecture\nThere are two architectural design patterns that are being used for Diaguard: Model-View-Controller and Domain-driven design.\nModel-View-Controller (MVC) was a widely spread design pattern in the early days of Android development until Google presented its Architecture Components in 2017 and Model-View-ViewModel (MVVM) took over. A gradual transition to MVVM is planned due to its advantages over MVC, e.g. regarding encapsulation and testability.\nDomain-driven design improves the structure by grouping files in features. Every feature describes one aspect of the project and should be self-contained to improve focus during development. The only exception to this rule is the shared package which contains everything that is used in multiple features (e.g. database- or networking logic).\nTesting\nTesting takes place via JUnit, Espresso and Robolectric. Tests are few in number and far from perfect, since most of Diaguard has been developed in the early of days of one developer. However the decision to go open source came with a code of conduct, and instrumentation testing major features was the first step in a right direction. The goal now is to unit- and instrumentation test every new and edited feature in order to increase the quality with every commit.\nThird-party licenses\nThis software uses following technologies with great appreciation:\n\nAboutLibraries\nAndroidX\nApache Commons Text\nApp Privacy Policy Generator\nBetterPickers\nButter Knife\nEventBus\nFloatingActionButton\nGson\nJoda-Time\njoda-time-android\nJUnit\nMaterial Components for Android\nMPAndroidChart\nOpencsv\nOpen Food Facts\nORMLite\nORMLite Android\nParallax Everywhere\nPDFjet\nPicasso\nRetrofit\nRobolectric\nSchweizer Nährwertdatenbank\n\nThese dependencies are bundled with Diaguard but under the terms of their respective license.\nLegal\nThe manufacturer of this software assumes no responsibility for the topicality, correctness, completeness or quality of the information provided. Liability claims against the manufacturer, which relate to material or immaterial nature, caused by the use or non-use of the software are excluded.\nRedistribution\nAdditionally to the permissions, conditions and limitations of the GPLv3, the permission for redistribution must be manually requested in advance. This ensures that neither the original software or any fork will be affected negatively by terms and conditions like the Google Play Developer Distribution Agreement. If you plan to redistribute this software, please contact the maintainer at diaguard.de@gmail.com.\nLicense\nCopyright (C) 2013-2020 Philipp Fahlteich\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n""]",https://github.com/Faltenreich,"['4', 'JavaScript', 'Updated Nov 28, 2017', '7', 'MATLAB', 'Updated Nov 21, 2019', '68', 'Objective-C', 'Updated Feb 21, 2015', '53', 'Java', 'GPL-3.0 license', 'Updated Nov 26, 2020', '4', 'Jupyter Notebook', 'Updated Sep 12, 2019', '3', 'Jupyter Notebook', 'Updated Nov 28, 2016', '9', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Kotlin', 'Updated Oct 22, 2019', '5', 'C++', 'Updated Jul 24, 2017', '2', 'HTML', 'Updated Mar 28, 2018']"
San Francisco Bay Area,3,0,1,0,"['Diabetes\nThis is a brief analysis of the AIM94 diabetes dataset.  My objective in analyzing this dataset is to see if I can fit a simple linear model that will look for secular (consistently increasing or decreasing) trendds in the time series data.  A secular trend in the wrong direction would indicate that the patient needs attention.\nThe dataset analyzed here was collected for the 1994 AI in Medicine Symposium and is hosted at the UCI Irvine Machine Learning Repository.  The dataset contains blood glucose and other measurements for 70 patients with Insulin Dependent Diabetes Mellitus (IDDM).  The following excerpt explains the data codes in this set:\n""Diabetes patient records were obtained from two sources:  an automatic electronic recording device and paper records.  The automatic device had an internal clock to timestamp events, whereas the paper records only provided ""logical time"" slots (breakfast, lunch, dinner, bedtime).  For paper records, fixed times were assigned to breakfast (08:00), lunch (12:00), dinner (18:00), and bedtime (22:00).  Thus paper records have fictitious uniform recording times whereas electronic records have more realistic time stamps.\nDiabetes files consist of four fields per record.  Each field is separated by a tab and each record is separated by a newline.\nFile Names and format:\n(1) Date in MM-DD-YYYY format\n(2) Time in XX:YY format\n(3) Code\n(4) Value""\nSo what we are dealing with here is time series data with somewhat fictitious uniform time stamps for part of the data set.\nThe following excerpt is from the domain description provided for the symposium:\n""Patients with IDDM are insulin deficient. This can either be due to a) low or absent production of insulin by the beta islet cells of the pancreas subsequent to an auto-immune attack or b) insulin-resistance, typically associated with older age and obesity, which leads to a relative insulin-deficiency even though the insulin levels might be normal.\nRegardless of cause, the lack of adequate insulin effect has multiple metabolic effects. However, once a patient is diagnosed and is receiving regularly scheduled exogenous (externally administered) insulin, the principal metabolic effect of concern is the potential for hyperglycemia (high blood glucose). Chronic hyperglycemia over a period of several years puts a patient at risk for several kinds of micro and macrovascular problems (e.g. retinopathy). Consequently, the goal of therapy for IDDM is to bring the average blood glucose as close to the normal range as possible. As explained below, current therapy makes this goal a very challenging (and often frustrating) one for\nmost patients. One important consideration is that due to the inevitable variation of blood glucose (BG) around the mean, a lower mean will result in a higher frequency of unpleasant and sometimes dangerous low BG levels.""\nTo summarize in layman\'s terms, both high and low blood glucose levels are very unhealthy for the diabetes patient.\n']",https://github.com/jonneff,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
New York,29,0,10,98,"[""Abstract\nThe project implements 4 linear models and one deep learning model using scikit-learn: Logistic Regression, Naïve Bayes, Support Vector Machine, K-Nearest Neighbours and Multi-Layer Perceptron Neural network to investigate their performance on diabetes and heart disease datasets obtained from the UCI data repository.\nMulti-Layer Perceptron Neural Network outperforms other linear models however K-Nearest Neighbours gives identical results with less computing overhead. Performance improvements could also be achieved by using complex deep learning methods.\nExperiment Results\nCleveland Heart Disease Dataset\n\n\n\nClassifier\nHyper-parameters\nAccuray (10-fold CV)\n\n\n\n\nLogistic Regression\nC = 0.13, Penalty = l1\n83.84%\n\n\nLinear SVC\nC = 18.08\n84.85%\n\n\nNaïve Bayes\n\n84.51%\n\n\nK-Nearest Neighbors\nn_neighbors=13, weights='uniform'\n85.52%\n\n\nMulti-layer perceptron\nlearning_rate_init= 0.026958815931057856, hidden_layer_sizes = (29,26,5), learning_rate = constant, activation=identity, alpha = 16.681\n86.2%\n\n\n\nPIMA Indian Diabetes\n\n\n\nClassifier\nHyper-parameters\nAccuray (10-fold CV)\n\n\n\n\nLogistic Regression\nC = 0.25999, Penalty = l2\n77.6%\n\n\nLinear SVC\nC = 36.74999\n78.77%\n\n\nNaïve Bayes\n\n75.651%\n\n\nK-Nearest Neighbors\nn_neighbors=27, weights='uniform'\n78.125%\n\n\nMulti-layer perceptron\nlearning_rate_init= 0. 0.043967984410493759, hidden_layer_sizes = (23, 44), learning_rate = constant, activation=logistic, alpha = 0.1\n79.03%\n\n\n\nDeployment\n\n\nInstall Python 3 and virtualenv\na.\tIf the deployment is being done in ubuntu, run the following commands in the terminal\nsudo apt-get install python3 python3-pip python3-tk\nsudo pip install virtualenv\nb.\tIf the deployment is being done in windows, installing python is recommended using Anaconda\n\n\nDownload the zip, or clone it using git.\ngit clone https://github.com/nikhil-pandey/fyp-ml\n\n\nCreate a virtual environment and install the dependencies.\na.  In ubuntu, create the virtual environment for python 3 and activate it; then install the dependencies in requirements.txt file using the command\npip install -r requirements.txt\nb.\tFor windows, refer to requirements-anaconda.txt file for creating virtual environment and installing dependencies.\n\n\nRun app.py.\n\n\nLive Demo\nClick Here\nRead Full Report\nClick Here\nLicense\nThis project is open-sourced under the MIT license\n""]",https://github.com/nikhil-pandey,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
Seattle,62,0,1,273,"['\n\n\ndescription\n\n\n\n\nHow artificial pancreas “closed loop” systems can aid you in living with diabetes\n\n\n\nAutomated Insulin Delivery\nAutomated insulin delivery is a technology for managing type 1 diabetes that goes by many names: hybrid or full closed loop, artificial pancreas system (APS), “looping”, and more. But whatever you call them, automated insulin delivery systems are not all the same. You have choices, ranging from the type of insulin pump body and CGM you want to use, to the algorithm and controller, to the interoperability and remote monitoring options, and more. Like switching from multiple daily injections to an insulin pump, switching from manual diabetes to automated insulin delivery has a learning curve.\nIt’s certainly one you can tackle. After all, you’re already tackling type 1 diabetes! You already have the base knowledge and experience you need to succeed with a closed loop system, if it’s right for you. But you might be wondering how to get ahead of your learning curve before you start or even choose an APS. Or maybe you’ve started and want to dig even deeper into optimizing how an automated insulin delivery system fits into your lifestyle. This book was written for you! It leverages the collective knowledge of the early adopters of do-it-yourself and commercial systems from the past five years and packages it into easy, understandable guides and lessons learned.\nIn this book, you’ll find new analogies to help you understand – and explain – this new method of diabetes management, and tips on how to communicate with your healthcare provider(s) about it. You’ll see stories and examples from real families and individuals living with type 1 diabetes and how they benefit from artificial pancreas systems, and why they chose and continue to choose to use them. You’ll be empowered to understand the basic components of artificial pancreas systems, how they work, and what questions to ask as you evaluate your choices and learn how best to integrate them into your lifestyle.\n\n{% hint style=""success"" %}\nA traditional, physical “book” format - a physical, printed book that’s available through self-publishing. It’s priced so that every 2 copies purchased will fund an author-priced copy that I will donate to hospitals, libraries, etc. You can find it here on Amazon.\n{% endhint %}\n{% hint style=""success"" %}\nAn “e-book” format - a version that can be downloaded to your Kindle. You can find it here on Amazon.\n{% endhint %}\n{% hint style=""info"" %}\nA PDF format - which you can download for free and read on your computer or other e-reader of choice. Click here to go to the download page. \n{% endhint %}\n{% hint style=""info"" %}\nA website (this site!)- so you can review portions of the content anytime, and see any changes over time. There will also be additional links and videos with more content. The website and its content are open source, so if you see any typos or have suggestions, you can make those suggestions or edits directly!\n(To keep reading the web version, just hit the ""Next"" button below.)\n{% endhint %}\n']",https://github.com/danamlewis,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
Mclean,1,0,6,19,"['Diabetes-Patient-Readdmission-Prediction\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes over 50 features representing patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria.\n(1) It is an inpatient encounter (a hospital admission).\n(2) It is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\n(3) The length of stay was at least 1 day and at most 14 days.\n(4) Laboratory tests were performed during the encounter.\n(5) Medications were administered during the encounter.\nThe data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\n']",https://github.com/Srashti13,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
Italy,2,5,2,630,"['\nSince the FreeStyle Libre 2 glucose sensor is a Bluetooth Low Energy BLE device and my purchase experience with the transmitters available for the previous generation has been quite frustrating, I am trying to leverage its capabilities to implement something new compared to the traditional apps:\n\na universal SwiftUI application for iPhone, iPad and Mac Catalyst;\nan independent Apple Watch app connecting directly via Bluetooth;\nscanning the Libre directly via NFC;\nusing both online servers and offline methods for calibrating just like Abbott’s algorithm;\nshowing for comparison the HealthKit and Nightscout data shared with other apps;\nvarying the reading interval instead of the usual 5-minute one;\na detailed log to check the traffic from/to the BLE devices and remote servers.\n\nStill too early to decide the final design (but I really like already the evil logo 😈), here there are some recent screenshots I tweeted:\n\n\xa0\xa0\nLibre 2 decrypted thanks to @ivalkou  -  Atlas stress test: 1-minute uploads\n\nPhones and transmitters: who needs them?\n\nFilling the gaps from a Mac\n\nThe project started as a single script for the iPad Swift Playgrounds to test the workings of the several BLE devices I bought, mainly the Bubble and the MiaoMiao. It was then quickly converted to an app by using a standard Xcode template: it should compile finely without external dependencies just after changing the Bundle Identifier in the General panel and the Team in the Signing and Capabilities tab of Xcode -- Spike users know already very well what that means... ;)\nI am targeting only the latest betas of Xcode. To send the custom NFC commands you have to switch from “Basic” to “Devel” mode in the Log tab and enjoy the verbose flow of debug messages.\nPlease refer to the TODOs list for the up-to-date status of all the current limitations and known bugs of this prototype.\n\nCredits: @bubbledevteam, @captainbeeheart, @cryptax, @dabear, @ivalkou, LibreMonitor, Loop, Nightguard, @travisgoodspeed, WoofWoof, xDrip+, xDrip4iOS.\n']",https://github.com/gui-dos,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
Sri Lanka,5,0,7,164,"['Diabetes Prediction App\nStreamlit Web App to predict the onset of diabetes based on diagnostic measures.\nData\nThe data for the following example is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and is available on Kaggle. The data contains information on females at least 21 years old of Pima Indian heritage.\nSince the data has been added to the data/ directory, cloning this repository would suffice.\nPre-requisites\nThe project was developed using python 3.6.7 with the following packages.\n\nPandas\nNumpy\nScikit-learn\nPandas-profiling\nJoblib\nStreamlit\n\nInstallation with pip:\npip install -r requirements.txt\nGetting Started\nOpen the terminal in you machine and run the following command to access the web application in your localhost.\nstreamlit run app.py\nRun on Docker\nAlternatively you can build the Docker container and access the application at localhost:8051 on your browser.\ndocker build --tag app:1.0 .\ndocker run --publish 8051:8051 -it app:1.0\nFiles\n\ndiabetes_prediction_pipeline.ipynb : Jupyter Notebook with all the workings including pre-processing, modelling and inference.\napp.py : Streamlit App script\nrequirements.txt : pre-requiste libraries for the project\nmodels/ : trained model files and scaler objects\ndata/ : source data\n\nSummary\nThis repository acts as a guide to [this blog post] where I talk about how I use Streamlit to build Machine Learning Applications quickly. Here we use a real-world example of predicting if a patient has diabetes and built a machine learning model. A Streamlit App was then built using a step-by-step approach in this project.\nAcknowledgements\nKaggle, for providing the data for the machine learning pipeline.\nStreamlit, for the open-source library for rapid prototyping.\n']",https://github.com/arunnthevapalan,"['3', 'JavaScript', 'Updated Jul 13, 2017', 'HTML', 'Apache-2.0 license', 'Updated Dec 17, 2016', '5', 'Jupyter Notebook', 'Updated Jun 30, 2019', '5', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'Jupyter Notebook', 'Updated Aug 5, 2020', '5', 'Java', 'Updated Jun 17, 2020', '2', 'Jupyter Notebook', 'Updated Jun 14, 2016', 'HTML', 'Updated Dec 5, 2017', '1', 'Java', 'Updated Nov 5, 2016', '1', 'HTML', 'Updated Jan 24, 2016']"
"Markhan, ON",1,0,5,28,['Diabetes\nmain.py ~ to compare the accuracy of all five techniques below\nnn.py ~ to modify parameters to improve the accuracy of deep neural network\nSVC.py ~ to modify parameters to improve the accuracy of support vector machine\ndecisiontree.py ~ to modify parameters to improve the accuracy of decision tree\nlogicticregression.py ~ to modify parameters to improve the accuracy of logistic regression\nnaiveBayes.py ~ to modify parameters to improve the accuracy of naive Bayes\n'],https://github.com/sidongwei,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
Blumenau,67,18,41,295,"['Estratificando riscos usando registros eletrônicos de pacientes diabéticos\nTipicamente, dez por cento dos pacientes geram cerca de 70% das despesas de saúde (dado dos EUA). Ao identificar quais as pessoas são de alto risco ou a probabilidade de se tornarem de alto risco, as equipes de saúde podem intervir para melhorar seus resultados e reduzir os respectivos custos de saúde.\nUm dos problemas mais comuns e que refletem as inadequações no sistema de saúde são as readmissões hospitalares. Nos Estados Unidos sozinho, o tratamento de pacientes diabéticos readmitidos excede 300 milhões de dólares por ano (https://www.diabetes.org/). A readmissão hospitalar é uma das principais preocupações no tratamento do diabetes, com milhões de dólares sendo gastos no tratamento de pacientes diabéticos que precisam ser readmitidos em um hospital após receberem alta.\nIdentificação precoce de pacientes que enfrentam um alto risco de readmissão pode permitir que os profissionais de saúde conduzam investigações adicionais e possivelmente impeçam futuras readmissões.\nSendo assim, proposta aqui é utilizar os registros eletrônicos de dados médicos dos pacientes, tais como: resultados dos exames, nível de insulina, diagnósticos de outras doenças, etc... a fim de prever se um paciente pode ou não ser readmitido. Aliás, iremos além: vamos identificar os pacientes diabéticos de alto risco por meio de estratificação de risco de registros médicos eletrônicos.\nJá estamos vivendo uma “nova medicina” que está sendo “guiada” pelo processamento de um grande volume de informações através de algoritmos poderosos de “machine learning”, uma das áreas da “inteligência artificial”!\nPara isso, vamos treinar e comparar o desempenho de alguns algoritmos de aprendizado de máquina e decidir qual deles usar para prever o risco de readmissão para o paciente.\nUsarei o melhor modelo treinado para estratificar a população em três grupos de risco:\n\nAlto Risco (probabilidade de readmissão > 0,7)\nRisco Médio (0,3 < Probabilidade de readmissão < 0,7)\nBaixo Risco (probabilidade de readmissão < 0,3)\n\nO conjunto de dados, ""Diabetes 130-US hospitals for years 1999-2008"", foi baixado do UCI Machine Learning Repository: Diabetes 130-US hospitals for years 1999-2008 Data Set\nOs dados representam 10 anos (1999-2008) de atendimento clínico em 130 hospitais dos EUA e redes de distribuição integradas com 100.000 observações e 50 recursos (variáveis) que representam os registros eletrônicos com resultados de exames dos pacientes e dados sobre cada hospital. Descrição completa do trabalho:\nImpact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records\nCréditos: Data Science Academy - https://www.datascienceacademy.com.br/\n']",https://github.com/RodrigoLima82,"['2', 'Java', 'Updated Sep 14, 2016', '4', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Oct 14, 2018', '4', 'Jupyter Notebook', 'Updated Oct 5, 2020', '2', 'JavaScript', 'Updated Feb 11, 2020', '2', 'Jupyter Notebook', 'Updated Jul 26, 2019', '3', 'Objective-C', 'MIT license', 'Updated Mar 12, 2017', '3', 'Jupyter Notebook', 'Updated Nov 23, 2020', '3', 'Java', 'BSD-2-Clause license', 'Updated Mar 5, 2018', '3', 'Jupyter Notebook', 'Updated May 9, 2020']"
"Melbourne, Australia",94,8,2,1034,['Bifrost\nA bridge between 2 (diabetes) worlds\n'],https://github.com/pazaan,"['1', 'Python', 'Updated Nov 30, 2015', '1', 'JavaScript', 'BSD-2-Clause license', 'Updated Sep 22, 2017', 'R', 'Updated May 2, 2018', '3', 'JavaScript', 'MIT license', 'Updated Mar 14, 2020', '3', 'Jupyter Notebook', 'Updated Mar 25, 2019', '3', 'JavaScript', 'Updated Jun 25, 2019', '2', 'HTML', 'MIT license', 'Updated Jul 6, 2019', '3', 'Jupyter Notebook', 'Updated Sep 28, 2020', '3', 'Python', 'Updated Sep 10, 2012', '2', 'JavaScript', 'Updated Oct 22, 2012']"
"New York, NY",12,80,330,16,['Diabetes-readmission\nShort project predicting hospital readmission for Diabetes patients using R\n'],https://github.com/juanmanubens,"['4', 'Jupyter Notebook', 'Updated Feb 6, 2019', '2', 'Jupyter Notebook', 'Updated Aug 17, 2020', '2', 'HTML', 'MIT license', 'Updated Nov 22, 2020', '2', 'R', 'Updated Aug 16, 2017', 'Updated Dec 22, 2014', 'Python', 'Updated Aug 11, 2017', '2', 'Updated Apr 6, 2018', '2', 'Java', 'Updated May 4, 2020', '2', 'JavaScript', 'Updated Apr 25, 2016', '2', 'C#', 'Updated Sep 11, 2014']"
Belo Horizonte,0,0,1,22,"['Previsão de Diabetes\nEste projeto foi desenvolvido como desafio final do Bootcamp Desenvolvedor Python, do IGTI.\nO objetivo do projeto foi o desenvolvimento de um projeto completo de machine learning: desde o pré-processamento, normalização dos dados, treinamento, teste, persistência do modelo e “deploy” da solução final.\nBase de Dados\nA base de dados utilizada no desenvolvimento (diabetes.csv) provém do famoso Dataset do Kaggle Pima Indians Diabetes Database (https://www.kaggle.com/uciml/pima-indians-diabetes-database) que trata da ocorrência de diabetes em mulheres.\nPor motivos didáticos o Dataset foi fornecido sem cabeçalho, abaixo está o dicionário de dados:\n\nNúmero de vezes em que ficou grávida.\nConcentração de glicose.\nPressão diastólica (mm Hg).\nEspessura da dobra cutânea do tríceps (mm).\nInsulina (mu U/ml).\nÍndice de massa corporal (peso em kg/(altura em m)^2).\nHistórico familiar de diabetes.\nIdade (anos).\nClassificação (0 não diabético | 1 diabético ).\n\nConstrução do Modelo\nAs etapas de pré-processamento dos dados e a construção, treinamento, teste e persistência do modelo foram feitas em um jupyter notebook (construção_modelo.ipynb). Foram testados 3 modelos: KNN (K nearest neighbor), Decision Tree e MLP (Multilayer Perceptron).\nComo o objetivo era o desenvolvimento do projeto como um todo, não foi criado um baseline para comparação com o desempenho dos modelos (etapa altamente necessária em um projeto real) nem mesmo foi realizado tuning do modelo (outra etapa muito importante em um projeto real), sendo utilizado o modelo da forma padrão como foi criado.\nO modelo com melhor nível de acuracidade foi persistido para o arquivo mlp_model.sav e a normalização dos dados foi persistida para o arquivo normalização.sav (para que os dados novos que chegasem via formulário fossem corretamente normalizados e não alterassem o comportamento do modelo).\nAplicação web\nPara colocar o modelo ""em produção"" foi utilizado o micro-framework Flask, o arquivo app.py faz toda a integração através das rotas.\nForam criadas 2 páginas HTML, uma para que o usuário coloque os dados para uma nova predição (formulario.html) e uma segunda onde é mostrado o resultado da predição (resultado.html). Ambas as páginas estão na pasta templates.\nLimitações\nO projeto buscou desenvolver uma solução simples e unicamente com fins educacionais, não sendo, portanto, uma proposta real de solucação do problema.\nComo pontos de melhoría podem ser apontados:\n\nNecessidade de uma base de dados maior, o que traria maior confiabilidade ao modelo.\nNecessidade de uma baseline, de forma a avaliar a efetividade da solucação proposta em relação a uma solução simples e rápida.\nNecessidade de tuning do modelo, a fim de melhorar os resultados.\n\n']",https://github.com/JoseWalterLima,"['2', 'R', 'MIT license', 'Updated Jul 9, 2018', '2', 'Java', 'GPL-3.0 license', 'Updated Jan 31, 2019', '2', 'Jupyter Notebook', 'Updated Jan 24, 2020', '2', 'Jupyter Notebook', 'Updated Sep 14, 2020', '2', 'JavaScript', 'MIT license', 'Updated Apr 20, 2015', '2', 'Jupyter Notebook', 'Updated Dec 27, 2019', '2', 'HTML', 'GPL-3.0 license', 'Updated Sep 17, 2020', '2', 'Java', 'GPL-2.0 license', 'Updated Oct 19, 2020', 'Updated Apr 30, 2018', 'Updated Mar 1, 2018']"
"Cairo,Alexandria",9,91,42,1,['Diabetes\nImplementing a model to classify is the patient has a diabetes or now.\n'],https://github.com/MohamedElrefai,"['HTML', 'MIT license', 'Updated May 26, 2018', 'JavaScript', 'Updated Jul 20, 2018', 'C#', 'Updated Feb 6, 2018', 'Jupyter Notebook', 'Updated Oct 3, 2018', 'HTML', 'Updated Mar 15, 2019', 'HTML', 'MIT license', 'Updated Dec 18, 2018', 'Swift', 'Updated Oct 10, 2019', 'Updated Oct 8, 2019', 'Updated Dec 1, 2019', 'Jupyter Notebook', 'Updated Jan 10, 2020']"
Singapore ,12,54,69,54,"['Diabetes data analysis \nData source is from kaggle.\nSetup and Run\nThis project is based on python 3.6.6, run the following command and set up the environment\npip3 install -r requirements.txt\npython main.go\n']",https://github.com/andyafter,"['Updated Jun 18, 2019', 'Jupyter Notebook', 'Updated Jun 8, 2019', 'PHP', 'MIT license', 'Updated Dec 13, 2018', 'Python', 'Updated Nov 25, 2018', 'Updated Aug 8, 2019', 'HTML', 'Updated Nov 14, 2019', 'Updated Nov 2, 2019', 'Updated Sep 16, 2019', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'Updated Nov 24, 2019']"
Arinos,4,13,0,218,"[""Python: Getting Started\nA barebones Django app, which can easily be deployed to Heroku.\nThis application supports the Getting Started with Python on Heroku article - check it out.\nRunning Locally\nMake sure you have Python 3.7 installed locally. To push to Heroku, you'll need to install the Heroku CLI, as well as Postgres.\n$ git clone https://github.com/heroku/python-getting-started.git\n$ cd python-getting-started\n\n$ python3 -m venv getting-started\n$ pip install -r requirements.txt\n\n$ createdb python_getting_started\n\n$ python manage.py migrate\n$ python manage.py collectstatic\n\n$ heroku local\nYour app should now be running on localhost:5000.\nDeploying to Heroku\n$ heroku create\n$ git push heroku main\n\n$ heroku run python manage.py migrate\n$ heroku open\nor\n\nDocumentation\nFor more information about using Python on Heroku, see these Dev Center articles:\n\nPython on Heroku\n\n""]",https://github.com/ademirrocha,"['Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019', '2', 'Jupyter Notebook', 'Updated Jun 25, 2020', '2', 'JavaScript', 'Updated Feb 27, 2012', '2', 'Python', 'Apache-2.0 license', 'Updated May 3, 2020']"
"Leeds, West Riding, UK",29,0,4,1092,['Diabetes\nThis project was generated with Angular CLI version 6.0.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\ndiabetes\n'],https://github.com/KevinMayfield,"['Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019', 'Updated Nov 13, 2019', 'C#', 'Updated Oct 21, 2017']"
Bangalore,29,0,4,20,['Diabetes_Predictor-Web_App\nThis repository consists of files required to run Diabetes Predictor Machine Learning Web App created with Flask\n'],https://github.com/Saeed-Khan46,"['2', 'Python', 'Updated Aug 2, 2020', '2', 'JavaScript', 'Updated Aug 3, 2012', '2', 'Updated Dec 8, 2018', '2', 'Jupyter Notebook', 'Updated Jul 24, 2020', '2', 'R', 'MIT license', 'Updated Mar 12, 2020', 'Python', 'Updated Jul 7, 2014', 'Java', 'Updated Mar 4, 2017', '1', 'Java', 'Updated Aug 24, 2017', 'Updated Dec 31, 2016', 'Updated Dec 8, 2017']"
glasgow,10,16,11,60,"[""interest areas\n\n\nmyDiabetesIQ\n\n\nuse of Recurrent Neural Networks / Convolutional Neural Networks to extract information from time-series data in diabetes to allow regression / classification analysis. Applications include prediction of mortality from HbA1c time series analysis, prediction of inpatient outcomes from pre-admission data and individualised virtual n=1 drug trials to allow optimum drug selection\n\n\nuse of unsupervised ML algorithms to identify incorrected entered data within large scale diabetes datasets\n\n\ncontinuous risk stratification of inpatients with diabetes\n\n\nassociation of inpatient glucose metrics and long term outcomes\n\n\nmechanisms linking glucose and CV risk in diabetes\n\n\nproblem drug use and diabetes\n\n\ncystic fibrosis related diabetes\n\n\nmultiscale variability in glucose metrics and association with outcome\n\n\nefficacy of structured intervention on glycaemic endpoints\n\n\npeople\nCurrent\n\nDr Chris Sainsbury Consultant Diabetes & Endocrinology. @csainsbury. x@y where x=c.sainsbury & y=nhs.net\nDr Greg Jones Consultant Diabetes & Endocrinology. Honorary Associate Professor, @gregcjones. x@y where x=g.jones3 & y=nhs.net\nDr Debbie Morrison GPSI Diabetes. Honorary Clinical Lecturer\n\nPrevious\n\nDr Sean Harbison Clinical Development Fellow\n\noutput\n2020\nNon‐steroidal anti‐inflammatory drugs and susceptibility to COVID‐19. Joht Singh Chandan, Dawit Tefra Zemedikun, Rasiah Thayakaran, Nathan Byne, Samir Dhalla, Dionisio Acosta‐Mena, Krishna M Gokhale, Tom Thomas, Christopher Sainsbury, Anuradhaa Subramanian, Jennifer Cooper, Astha Anand, Kelvin O Okoth, Jingya Wang, Nicola J Adderley, Thomas Taverner, Alastair K Denniston, Janet Lord, G. Neil Thomas, Christopher D Buckley, Karim Raza, Neeraj Bhala, Krishnarajah Nirantharakumar, Shamil Haroon. Arthritis and Rheumatology. 2020. https://doi.org/10.1002/art.41593\n2020\nSodium‐glucose‐co‐transporter‐2 inhibitors and susceptibility to COVID‐19: a population‐based retrospective cohort study. C Sainsbury, J Wang, K Gokhale, D Acosta‐Mena, S Dhalla, N Byne, J Singh Chandan, A Anand, J Cooper, K Okoth, A Subramanian, M Bangash, T Taverner, W Hanif, S Ghosh, P Narendran, KK Cheng, Tom Marshall, G Gkoutos, K Toulis PhD, GN Thomas PhD, A Tahrani, N Adderley, S Haroon, K Nirantharakumar. Diabetes Obesity and Metabolism 2020.  https://doi.org/10.1111/dom.14203\nweb\n2020\nRenin-angiotensin system inhibitors and susceptibility to COVID-19 in patients with hypertension: a propensity score-matched cohort study in primary care. S Haroon,A Subramanian,J Cooper, A Anand, K Gokhale, N Byne, S Dhalla, D Acosta-Mena, T Taverner, K Okoth, J Wang, J Singh Chandan, C Sainsbury, D Zemedikun, GN Thomas,D Parekh, T Marshall, E Sapey, NJ Adderley, K Nirantharakumar. Preprint. Medrxiv. 18 Sep 2020.\nweb\n2020\nRemodelling diabetes services and emerging innovation. DJ Wake, FW Gibb, P Kar, B Kennon, DC Klonoff, G Rayman, MK Rutter, C Sainsbury, RK Semple. European Journal of Endocrinology 183 (2). web\n2020\nObstructive Sleep Apnea, a Risk Factor for Cardiovascular and Microvascular Disease in Patients With Type 2 Diabetes: Findings From a Population-Based Cohort StudyNJ Adderley, A Subramanian, K Toulis, K Gokhale, T Taverner, W Hanif, S Haroon, GN Thomas, C Sainsbury, AA Tahrani, K Nirantharakumar. Diabetes Care | https://doi.org/10.2337/dc19-2116 | web\n2019\nThyroid replacement therapy, thyroid stimulating hormone concentrations, and long term health outcomes in patients with hypothyroidism: longitudinal study. R Thayakaran, NJ Adderley, C Sainsbury, B Torlinska, K Boelaert, D Šumilo, M Price, GN Thomas, KA Toulis, K Nirantharakumar. BMJ 2019; 366 | https://doi.org/10.1136/bmj.l4892 | web\n2018\nAdmission Glucose Number (AGN): A point of admission score associated with inpatient glucose variability, hypoglycaemia and mortality. J McKechnie, R Maitland, CAR Sainsbury, GC Jones. Journal of Diabetes Science and Technology | https://doi.org/10.1177/1932296818800722 | web\n2018\nIdentifying modifiable risk factors to reduce inpatient hypoglycaemia. PD Murray, BA McKee, CAR Sainsbury, GC Jones. Clinical Pharmacist, August 2018, Vol 10, No 8, online | DOI: 10.1211/CP.2018.20205227 | web\n2018\nStructured education using Dose Adjustment for Normal Eating (DAFNE) reduces long term HbA1c and HbA1c variability. GS Walker, JY Chen, H Hopkinson, CAR Sainsbury, GC Jones. 2018. Diabetic Medicine | web\n2018\nVisit-to-visit HbA1c variability and systolic blood pressure (SBP) variability are significantly and additively associated with mortality in people with type 1 diabetes: an observational study. Stuart S. Wightman, Christopher A.R. Sainsbury, Gregory C. Jones. Diabetes Obesity & Metabolism | web\n2017\nHbA1c variability is associated with increased mortality and earlier hospital admission in people with type 1 diabetes. Graham S Walker, Scott G Cunningham, Christopher A.R. Sainsbury, Gregory C. Jones. Diabetic Medicine | web\n2017\nA practical review of C-Peptide Testing in Diabetes. E Leighton, C Sainsbury, G Jones. Diabetes Ther | web | .pdf\n2017\nHypoglycemia and Clinical Outcomes in Hospitalized Patients With Diabetes: Does Association With Adverse Outcomes Remain When Number of Glucose Tests Performed Is Accounted For?\nGC Jones, JG Timmons, SG Cunningham, SJ Cleland, CAR Sainsbury\nJournal of Diabetes Science and Technology | web | .pdf\n2016\nA Practical Approach to Glucose Abnormalities in Cystic Fibrosis\nGC Jones, CAR Sainsbury | web | .pdf\n2016\nIs all hypoglycaemia treated as equal? An observational study of how the type of diabetes and treatment prescribed prior to admission influences quality of treatment of inpatient hypoglycaemia\nGC Jones, J Khan, CAR Sainsbury | web | .pdf\n2016\nStroke and diabetes: a dangerous liaison\nSL Macpherson, C Sainsbury, J Dawson, GC Jones | web | .pdf\n2016\nLiving with asthma and chronic obstructive airways disease: using technology to support self-management – an overview. D Morrison,FS Mair, L Yardley, S Kirby, M Thomas | web\n2016\nPatterns and impact of hypoglycemia, hyperglycemia, and glucose variability on inpatients with insulin-treated cystic fibrosis-related diabetes\nGC Jones, ZM Chong, J Gilmour, C Matheson, G MacGregor, C Sainsbury | web | .pdf\n2016\nMetformin increases cortisol regeneration by 11βHSD1 in obese men with and without type 2 diabetes mellitus\nAnderson AJ, Andrew R, Homer NZ, Jones GC, Smith K, Livingstone DE, Walker BR, Stimson RH | web\n2016\nInpatient glycemic variability and long-term mortality in hospitalized patients with type 2 diabetes\nJG Timmons, SG Cunningham, CAR Sainsbury, GC Jones\nJournal of Diabetes and its Complications\n2016\nEvaluation of a combination of SGLT2 inhibitor and GLP-1 receptor agonist treatment in type 2 diabetes\nHayden J, Huang F, McConnell LMJ, Sainsbury CAR, Jones GC\nDiabetes & Primary Care 18 (3): 135-138\n2016\nManaging multimorbidity in primary care in patients with chronic respiratory conditions. npj Primary Care Respiratory Medicine, 26, 16043.\nD Morrison,K Agur, S Mercer, A Eiras, JI González-Montalvo, K Gruffydd-Jones\nPrimary Care Respiratory Medicine, 26, 16043\n2016\nExperience of and predictors of response to dapagliflozin in a real-life cohort of people with type 2 diabetes\nHuang F, Hayden J, McConnell LMJ, Sainsbury CAR, Jones GC\nJournal of Diabetes Nursing 20 (7): 238-243\n2015\nCapillary blood glucose monitoring, inpatient hypoglycaemia and quality of care\nGC Jones, CG Perry, A Monaghan, B Kennon, CAR Sainsbury\nBritish Journal of Diabetes 15 (1), 24-26 (pdf)\n2015\nComment on ‘A justification for less restrictive guidelines on the use of metformin in stable chronic renal failure’\nGC Jones, CAR Sainsbury\nDiabetic Medicine 32 (2), 287-287\n2015\nLongitudinal Blood Pressure Control, Long-Term Mortality, and Predictive Utility of Serum Liver Enzymes and Bilirubin in Hypertensive Patients. L McCallum, J Panniyammakal, CE Hastie, J Hewitt, R Patel, GC Jones, S Muir, M Walters, N Sattar, AF Dominiczak, S Padmanabhan\nHypertension 66 (1), 37-43 (pdf)\n2014\nTrends in recorded capillary blood glucose and hypoglycaemia in hospitalised patients with diabetes\nGC Jones, H Casey, CG Perry, B Kennon, CAR Sainsbury. Diabetes research and clinical practice 104 (1), 79-83\n2014\nDipeptidyl peptidase 4 inhibitors in routine clinical practice: experiences from a Scottish teaching hospital\nAL Brown, CR Sainsbury, C Fenelon, AB Mullen, GC Jones\nBritish Journal of Diabetes 14 (4), 134-137 (pdf)\n2014\nNumerical simulation of blood flow and pressure drop in the pulmonary arterial and venous circulation\nMU Qureshi, GDA Vaughan, C Sainsbury, M Johnson, CS Peskin, MS Olufsen, NA Hill\nBiomechanics and modeling in mechanobiology 13 (5), 1137-1154 \n2013\nLong-Term and Ultra Long–Term Blood Pressure Variability During Follow-Up and Mortality in 14 522 Patients With Hypertension. CE Hastie, P Jeemon, H Coleman, L McCallum, R Patel, J Dawson, W Sloan, P Meredith, GC Jones, S Muir, M Walters, AF Dominiczak, D Morrison, GT McInnes, S Padmanabhan\nHypertension 62 (4), 698-705 (pdf)\n2012\nRarefaction and blood pressure in systemic and pulmonary arteries\nMS Olufsen, NA Hill, GDA Vaughan, C Sainsbury, M Johnson\nJournal of fluid mechanics 705, 280-305\n2012\nHematocrit Predicts Long-Term Mortality in a Nonlinear and Sex-Specific Manner in Hypertensive AdultsNovelty and Significance\nL Paul, P Jeemon, J Hewitt, L McCallum, P Higgins, M Walters, J McClure, ...\nHypertension 60 (3), 631-638\n2012\nBoerhaave's syndrome and diabetic ketoacidosis\nK Mitchell, G Jones\nPractical Diabetes 29 (7), 268-268\n2011\nAMP-activated protein kinase is activated in adipose tissue of individuals with type 2 diabetes treated with metformin: a randomised glycaemia-controlled crossover study\nJG Boyle, PJ Logan, GC Jones, M Small, N Sattar, JMC Connell, ...\nDiabetologia 54 (7), 1799-1809\npresentations\n2019\nPredicting mortality in both diabetes and open source clinical datasets from free text entries using machine learning (natural language processing) | Diabetes Technology Society. November 2019. Washington DC | .pdf\n2019\npersonalising risk prediction in diabetes using machine learning bridging the gap between RCT and RCD | Royal College of Physicians and Surgeons (Glasgow) | May 2019. Glasgow | .pdf\n2019\ndata landscape presentation. march 2019 | .pdf\n2018\nMachine learning approaches to (i) predicting response to therapy in diabetes, (ii) data-driven diabetes subtype classification and (iii) synthetic data generation. Dundee. 210618 | .pdf | .ppt\n2018\nMachine-Learning (neural network) driven algorithmic classification of Type 1 or Type 2 diabetes at the time of presentation significantly outperforms experienced clinician classification. DUK. London | .pdf\n2018\nParallel time-series analysis of HbA1c and Systolic BP using a recurrent neural network (RNN) stratifies for 1-year mortality in Type 2 Diabetes independent of age and parameter variability. DUK. London | .pdf\n2018\nParallel time-series analysis of HbA1c, Systolic Blood Pressure and BMI using Recurrent Neural Networks stratifies for 1-year mortality in T2DM, independent of age and parameter variability. ATTD. Vienna | .pdf\n2018\nTime-series analysis of HbA1c using Recurrent Neural Networks stratifies for 1-year mortality in Type 1 and Type 2 Diabetes, independent of age and variability. ATTD. Vienna | .pdf\n2017\nMyDiabetesIQ. machine learning for decision support & outcome prediction in diabetes. Automated Clinical Epidemiology Studies workshop, University of Birmingham. 141217 | .pdf\n2017\nDiabetes and opiate replacement therapy (ORT). A retrospective cohort study of health care usage and clinical outcomes. H Druce, D Morrison, C Sainsbury, R Lowrie, C Ritchie, GC Jones. Oral Presentation. RCGP, London | .pdf\n2017\nGlucose dynamics and mortality in RRT patients: an initial report. Matthew A Rutherford, Gregory C Jones, Alan G Jardine, Patrick B Mark, Peter C Thomson, Christopher AR Sainsbury. Oral Presentation, SRA, Dunblane 2017 | .pdf\n2017\nDiabetes and opiate replacement therapy (ORT). A retrospective cohort study of healthcare usage and clinical outcomes. H Druce, R Lowrie, C Ritchie, D Morrison, CAR Sainsbury, GC Jones. Poster Presentation, EASD, Lisbon 2017 | .pdf\n2017\nSerum chloride predicts mortality risk in type 2 diabetes – analysis of 91,159 patients from the West of Scotland. Linsay McCallum, Christopher A Sainsbury, Gregory C Jones, Sandosh Padmanabhan. AHA, 2017 | .pdf\n2017\nSerum chloride is a mortality risk predictor in type 2 diabetes mellitus – analysis of 91,159 patients in the West of Scotland. Linsay McCallum, Christopher A Sainsbury Gregory C Jones, Sandosh Padmanabhan. Oral Presentation, ESH, Milan 2017 | .pdf\n2017\nNon-stimulated c-peptide is independently associated with requirement at 1 year for insulin therapy in paitnets with diabetes. A retrospective cohort study of 872 patients. EL Leighton, K Smith, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation, ECE, Lisbon 2017 | .pdf\n2017\nAdmission Glucose Number (AGN): a novel score associated with adverse outcomes in patients admitted with Type 2 Diabetes. CAR Sainsbury, SG Cunningham, R Srivastava, GC Jones. Poster Presentation. Diabetes UK, Manchester 2017 | .pdf\n2017\nGlucose variability and risk of hypoglycaemia amongst inpatients with type 2 diabetes and its relationship to drug class exposure. KM Fairhurst, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation. Diabetes UK, Manchester 2017 | .pdf\n2017\nDoes pre-admission HbA1c predict inpatient glucose characteristics and outcomes in patients with diabetes? M Talla, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation. Diabetes UK. Manchester March 2017 | [.pdf](./glucose_ai_presentation_files/Diab UK HbA1c Inpatient Glucose Characteristics.pdf)\n2017\nAdmission Glucose Number (AGN): A novel point-of-admission score associated with prolonged admission duration, and with glycaemic characteristics in patients with Type 1 Diabetes. R Maitland, R Srivastava, S Cunningham, G Jones, C Sainsbury. 2017. ATTD, Paris. Oral Presentation | .pdf\n2016\nDoes type of diabetes, and treatment prescribed prior to admission influence quality of treatment of inpatient hypoglycaemia?\nCAR Sainsbury, J Khan, GC Jones. British Endocrine Society. Oral Presentation | .pdf\n""]",https://github.com/csainsbury,"['1', 'Jupyter Notebook', 'Updated Oct 5, 2020', 'NetLogo', 'Updated Nov 11, 2020', 'Updated Nov 18, 2020', '2', 'R', 'Updated Nov 13, 2020', 'JavaScript', 'Updated Feb 2, 2017', 'Updated Nov 12, 2019', '2', 'Python', 'Apache-2.0 license', 'Updated Dec 31, 2018', '2', 'Jupyter Notebook', 'Updated Sep 27, 2019', 'JavaScript', 'Updated Mar 4, 2019', 'Java', 'Updated Jul 11, 2016']"
"columbia, Missouri",1,3,4,0,['DiabetesApp\n'],https://github.com/YohanesPatrick,"['Java', 'Updated Aug 20, 2018', 'HTML', 'Updated Aug 13, 2018', 'Jupyter Notebook', 'Updated Jan 19, 2019', '1', 'Swift', 'Updated Feb 23, 2018', 'Kotlin', 'Updated Mar 19, 2019', 'Updated Jan 15, 2020', 'Updated Mar 12, 2020', 'C#', 'Updated May 26, 2020', 'Jupyter Notebook', 'Updated May 31, 2020', 'Updated Mar 31, 2020']"
Finland,4,0,6,1144,['DiabetesAssistant\n\naiheenKuvausJaRakenne.md\ntestausdokumentti.md\nkäyttöohjeet.md\ntuntikirjanpito.md\n\nLinkit\n\nPIT -testi\nCheckstyle -raportti\nKurssisivu\n\n'],https://github.com/KristianLauttamus,"['Jupyter Notebook', 'Updated May 6, 2020', 'Jupyter Notebook', 'Updated Sep 14, 2020', 'Python', 'Updated Nov 25, 2020', 'HTML', 'Updated Feb 29, 2016', 'Java', 'Updated Jun 17, 2016', 'Java', 'Updated Aug 5, 2017', 'Java', 'Updated May 19, 2017', '1', 'Jupyter Notebook', 'Updated Apr 25, 2017', 'Python', 'Updated Jul 27, 2018', 'R', 'Updated Jul 24, 2018']"
"Austin, TX",11,9,13,0,"['Detection of Diabetes in Pima Indian Dataset\nGiven a Pima Indian dataset, predict the onset of diabetes by training a deep neural network.\nThe features in the data are:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\n\nClass variable 0 (no diabetes) 1 (diabetes)\n']",https://github.com/nirav99,"['Python', 'Updated Mar 9, 2018', 'Updated Jun 14, 2019', 'Updated Mar 6, 2019', 'Jupyter Notebook', 'Updated Mar 6, 2019', 'Python', 'Updated Sep 11, 2019', 'JavaScript', 'Updated Nov 13, 2019', 'Updated Nov 20, 2019', 'JavaScript', 'Updated Feb 7, 2020', 'Jupyter Notebook', 'Updated Jul 9, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2019']"
"Ohio, United States",1,1,1,9,"['A crossplatform program used to store, and calculate glucose numbers, carbohydrate intake, and the insulin dosages necessary to counteract both.\nCurrently offers basic functionality, but the plan is to be able to use this on Windows, Android, iOS, and web interfaces to help manage your diabetes.\n']",https://github.com/ethan-lefeb,"['Java', 'Updated Mar 21, 2019', 'R', 'Updated Jan 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'C#', 'Updated Apr 16, 2020', 'Jupyter Notebook', 'Updated Jun 13, 2020', 'Objective-C', 'Updated Sep 28, 2020', 'Python', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Nov 19, 2020', 'Java', 'Updated Jun 15, 2020', 'Python', 'Updated May 14, 2017']"
Spain,1,1,2,69,['DiabetesSLManager\nOngoing project about Diabetes management.\n'],https://github.com/Pinx0,"['JavaScript', 'Updated Dec 27, 2015', '1', 'Jupyter Notebook', 'Updated Feb 7, 2016', 'Swift', 'Updated Mar 2, 2016', 'Java', 'Updated Jul 28, 2014', 'Java', 'Updated Nov 15, 2017', 'JavaScript', 'Updated Jan 19, 2017', '1', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2018', 'Java', 'Updated Feb 20, 2018', 'Jupyter Notebook', 'Updated Jul 1, 2019', 'MIT license', 'Updated Dec 6, 2018']"
Delhi,16,15,10,219,['DiabetesDataset\nDiabetes Dataset using logistic regression\n'],https://github.com/manavgakhar,"['TSQL', 'Updated Jul 3, 2019', 'Java', 'Updated Jul 11, 2018', 'Python', 'Updated Jan 20, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2019', 'Updated Oct 15, 2019', 'Jupyter Notebook', 'Updated Dec 16, 2019', 'Python', 'Updated Dec 15, 2019', 'Kotlin', 'Updated Jan 3, 2020', 'Updated Dec 19, 2019', 'C#', 'Updated May 12, 2020']"
Bangalore,6200,0,2,412,['Diabetes-Prediction\n'],https://github.com/krishnaik06,"['47', 'Python', 'Updated Jul 16, 2018', '330', 'Java', 'GPL-3.0 license', 'Updated Aug 20, 2018', '89', 'C#', 'Updated Oct 7, 2019', '191', 'Jupyter Notebook', 'Updated Mar 22, 2018', '26', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jul 12, 2019', '135', 'Python', 'Updated Oct 4, 2020', '201', 'Makefile', 'MIT license', 'Updated Nov 15, 2020', '65', 'HTML', 'Updated Oct 20, 2020', '18', 'Python', 'Updated Jan 30, 2018', '80', 'Python', 'BSD-3-Clause license', 'Updated Feb 5, 2019']"
Shanghai,26,38,89,90,['天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测 第一赛季\n这次大赛第一赛季的主题，是通过对病人的临床数据和体检指标来预测其血糖值。\n大赛提供的训练数据包含病人的性别、体检日期以及血常规、肾功能检查等指标，\n每个指标分别作为一个字段储存在数据表中。最后一列为我们要预测的血糖值。\n该repo记录了参加本次大赛的各种数据探索、特征工程、特征选择、交叉验证模型以及\n线上提交模型。虽然，最后的结果并不尽人意，\n但是从doufu大佬和wufei大佬那里学到了很多。\nbasic_analysis & offline\n这个文件夹下，包含了最开始的数据探索和线下的交叉验证模型。\n通过数据探索，了解了数据的大体分布情况。\n线下模型从一开始的按性别划分，分别进行训练预测，演变成直接把性别作为特征\n全量训练预测。期间，doufu大佬开源的基于交叉验证的LightGBM融合模型给了我很大的启发。\n相信排行榜中，有不少参赛队是在那份开源代码的基础上修改来的。\n而那份代码确实“四两拨千斤”，仅仅用原始特征就取得了较好的结果。\n后来，看到wufei大佬的融合方案，借鉴了其nn模型，并利用其nn模型最后隐层的26个Batch-Normalized的输出\n作为特征输入到LightGBM进行测试，线下也得到了提高。同时，也与nn模型的结果进行了融合。\nonline\n包含了线上提交所使用的各种模型。最后，提交所使用的模型为lgb_nn_ensembing.py，\n融合了nn模型与LightGBM，同时将nn模型的隐层输出作为特征加入到LightGBM中。\nutil\n包含了特征工程、评价函数、模型参数。\n缺失数据采用随机森林填充，特征间的相关性，比各特征与血糖值之间高多了。\n'],https://github.com/zixuanweeei,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
Ghana,12,14,56,0,['diabetes prediction with K-NEAREST NEIGHBOR ALGORITHM\nUsing KNN Algorithm to predict if a person will have diabetes or not\nVisualizing data before processing\n\n\nF1_SCORE\n0.6956521739130436\nAccuracy_SCORE\n0.8181818181818182\n'],https://github.com/boosuro,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
"Mountain View, CA",37,0,0,4,"['This repo contains the Jupyter Notebook for predicting hospital readmission for patients with diabetes using deep learning. For simplicity we will use the train,validation,test splits from a prior project (https://github.com/andrewwlong/diabetes_readmission).\nThis uses the dataset from UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008).\nThe methodology behind this notebook is explained in my Medium Blog post:\nGetting Started with conda environment\nconda env create -f environment.yml\nconda activate diabetes_deep \npython -m ipykernel install --user --name diabetes_deep\n']",https://github.com/andrewwlong,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
Hamburg/ Germany ,1,1,1,13,"[""HealthCare-App\nThis Application Helps the patients who suffer from diabetes to maintain there sugar level. Support from version 4 to till dated. Please fork and work, don't push anything here.\nAndroid Application - Diabetes Patients\nBuilding it\nbuild.gradle\nNote:\n\nTarget SDK 27\nWill no longer support Android Studio <3.0.\n\n""]",https://github.com/viswesvar,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
"Trichy,India ",15,16,7,458,"['End-to-End Diabetes Prediction Application using Machine Learning (MINI Project)\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features suach as\n\nPregnancies\nInsulin Level\nAge\nBMI.\nThe data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not."".\nThis is also sort of fun to work on a project like this which could be beneficial for the society.\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project . If you are looking for all the following points in this repo then i have not covered all in this repo. I\'m working on blog about this mini project and I\'ll update the link of blog about all the points in details later . (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displayed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nBug / Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\nExecute the command: python app.py\n\nTeam\n\n\n\n\n\n\n\n\nDitikrushan Giri\n\n\n\nCredits\n\nTook inspiration from Krish Naik Who is a youtuber he makes contents on Data science his youtube channel link\nIcons by Icons8\n\nNote:\n\nWebapp can handle concurrency upto some extent but can be scaled.\n\n']",https://github.com/ditikrushna,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
"La Jolla, CA",16,2,134,195,"['Synopsys Project 2016-2017\nLeveraging Deep Learning to Derive De Novo Epigenetic Mechanisms from PPARGC1A to Account for Missing Heritability in Type II Diabetes Mellitus\nData / Statistical Analysis Jupyter Notebooks\nUntil Github fixes notebook renderings, please visit the following links (same as notebooks/)\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.1-mhl-data-analysis.ipynb\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.1-mhl-model-predictions.ipynb\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.2-mhl-model-predictions.ipynb\nSynopsys Competition Tri-Fold\n\nThe focus of the project was in using deep learning to predict novel epigenetic\nmechanisms like DNase I sites, histone modifications, and\ntranscription factor binding sites from raw genomic sequences. Type II\ndiabetes (T2D) is a common disease that affects millions of people each year,\nbut as of today, only around 10% of its heritability has been explained.\nResearchers speculate that this is because epigenetics is heavily involved, so\nmy project was designed to interpret millions of samples and hundreds of\nepigenetic regulators to be able understand the combinatorial effects of these\nepigenetic mechanisms.\nI conducted this independent research project for the Synopsys science fair as\na high school junior. In order to train my models, I built my own custom PC (see\nspecs here). I would like to\nthank my mentor, Renee Fallon, in providing me biology textbooks and general advice.\nCustom Built PC\n\nSteps for reproducing results\nStep 1. Get data\nDownload processed data from DeepSEA\nand move them to data/processed/\nData is processed in the following manner:\n\nData on histone modifications, DNase I hypersensitive sites, and\ntranscription factor binding sites is collected from ChIP-seq and DNase-seq\nmethods. This data entails 919 ChIP-seq and DNase-seq peaks from processed\nENCODE and Roadmap Epigenomics data releases for GRCh37. This data is\npublically available to download and has been processed by the researchers of\nthe DeepSEA framework (Zhou). The input is encoded in a 1000 x 4 binary matrix,\nwith the columns corresponding to A, T, G, and C. The rows corresponds to the\nnumber of bp (1kbp) in a single bin that will serve as the input for a single\nneuron. These 1000 bp regions are centered around 200 bp sequences that contain\nat least one transcription factor site (400 bp sequence paddings for genome\nsequence context). The data is split into test, train, and validation sets, and\nthe sets are separated based off of chromosomes in order to ensure that the\nmodel can be tested for high bias.\n\nStep 2. Create model\nCreate a method in src/models/create_models.py that constructs a Keras model\n(sequential, functional, etc.) and then returns it.\nStep 3. Train model\nRun make train MODEL_FUNC=\'<method from step 2>\' MODEL_NAME=\'<some unique identifier>\'\nStep 4. Test model and generate predictions\nRun make test MODEL_FUNC=\'<same as from step 3>\' MODEL_NAME=\'<same as from step 3>\'\nStep 5. Generating performance (ROC/PR, stdev, etc.) scores and visualizations\nSee notebooks/ and run the code after ""Execute the following"" headers. Make\nsure to run them with the Theano backend for Keras because the models were all\ntrained on Theano.\nProject Organization\n├── LICENSE\n├── Makefile                  <- Makefile with commands like `make data` or `make train`\n├── README.md                 <- The top-level README for developers using this project.\n├── data\n│\xa0\xa0 ├── external              <- Data from third party sources.\n│\xa0\xa0 ├── interim               <- Intermediate data that has been transformed.\n│\xa0\xa0 ├── processed             <- The final, canonical data sets for modeling.\n│\xa0\xa0 └── raw                   <- The original, immutable data dump.\n│\n├── docs                      <- A default Sphinx project; see sphinx-doc.org for details\n│\n├── models                    <- Trained and serialized models, model predictions, or model summaries\n│   ├── csv                   <- CSV logs of epoch and batch runs\n│   ├── json                  <- JSON representation of the models\n│   ├── predictions           <- Predictions generated the train models and their best weights\n│   ├── weights               <- Best weights for the models\n│   └── yaml                  <- YAML representation of the models\n│\n├── notebooks                 <- Jupyter notebooks. Naming convention is a number (for ordering),\n│                                the creator\'s initials, and a short `-` delimited description, e.g.\n│                                `1.0-jqp-initial-data-exploration`.\n│\n├── references                <- Data dictionaries, manuals, and all other explanatory materials.\n│\n├── reports                   <- Generated analysis as HTML, PDF, LaTeX, etc.\n│\xa0\xa0 └── figures               <- Generated graphics and figures to be used in reporting\n│\n├── requirements.txt          <- The requirements file for reproducing the analysis environment, e.g.\n│                                generated with `pip freeze > requirements.txt`\n│\n├── src                       <- Source code for use in this project.\n│\xa0\xa0 ├── __init__.py           <- Makes src a Python module\n│   │\n│\xa0\xa0 ├── data                  <- Scripts to download or generate data\n│\xa0\xa0 │\xa0\xa0 └── make_dataset.py\n│   │\n│\xa0\xa0 ├── features              <- Scripts to turn raw data into features for modeling\n│\xa0\xa0 │\xa0\xa0 └── build_features.py\n│   │\n│\xa0\xa0 ├── logging               <- Scripts to improve python logging\n│\xa0\xa0 │\xa0\xa0 └── log_utils.py\n│   │\n│\xa0\xa0 ├── models                <- Scripts to train and test models and then use trained models to make\n│   │   │                         predictions\n│\xa0\xa0 │\xa0\xa0 ├── create_models.py  <- Script to create a keras model and return it to train_model.py\n│\xa0\xa0 │\xa0\xa0 ├── predict_model.py\n│\xa0\xa0 │\xa0\xa0 ├── test_model.py\n│\xa0\xa0 │\xa0\xa0 └── train_model.py\n│\xa0\xa0 │\n│   │── unit_tests            <- Scripts to test each unit of the other scripts\n│\xa0\xa0 │\n│\xa0\xa0 └── visualization         <- Scripts to create exploratory and results oriented visualizations\n│\xa0\xa0     ├── plot_train_valid.py\n│\xa0\xa0     ├── stats.py\n│\xa0\xa0     └── visualize.py\n│\n└── tox.ini                   <- tox file with settings for running tox; see tox.testrun.org\n\n\nProject based on the cookiecutter data science project template. #cookiecutterdatascience\n']",https://github.com/minhoolee,"['2', 'JavaScript', 'Updated Oct 26, 2012', '2', 'Python', 'Updated Apr 7, 2019', 'HTML', 'Updated Jul 16, 2019', '6', 'Go', 'Updated Oct 21, 2020', '10', 'Jupyter Notebook', 'BSD-3-Clause license', 'Updated Sep 27, 2020', '8', 'Python', 'Updated Nov 8, 2017', '3', 'Python', 'Updated Apr 29, 2017', 'JavaScript', 'Updated Apr 15, 2019', '3', 'JavaScript', 'Updated Jul 10, 2013', '3', 'Jupyter Notebook', 'Updated Jul 16, 2017']"
Brazil,5,3,26,199,"['OpenLibreNFC\nDisclaimer\nDo not use sensors modified with this app to make medical decisions. I am not responsible to any damage to the sensor that might occur, use this at your own risk. This app is only intended for research.\nInstallation\nApks are available on the Release tab here on GitHub.\nYou can also build the app yourself:\nThis guide from the AndroidAPS docs explains how to build an apk, the steps should be basically the same, just using this repository instead.\nYou\'ll need the Android SDK installed and define the ANDROID_SDK_ROOT environment variable, after that, you can run gradlew to build the .apk file (it should probably be signed so you can install it).\nYou can also install Android Studio and build it from there.\nUsage\nWhen you open the app, you can select different options (Scan, Reset Age, Start...) and then scan the sensor, which will execute whatever you selected.\nWhen you scan the sensor to perform any action, you should wait for the second vibration to stop scanning. This might take a bit longer with operations which involve writing into memory.\nThe ""Dump Memory"" option will dump 360 bytes of the sensor\'s FRAM to sdcard/openlibrenfc/memory_dump.txt, and the ""Load Memory"" will load that same file. If you edit that file, the checksums won\'t be checked, and it might send the sensor into failure if a checksum is incorrect.\nMake sure you have backups of previous memory dumps so you can restore it in case anything happens.\n']",https://github.com/cominixo,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
Brazil,107,133,423,4802,['Meu Diabetes\nRepositório da plataforma meu diabetes um projeto da disciplina de inteligência artificial da UFRN\n\nInstalação\nPara instalar o projeto entre na pasta após a realização do git clone e execute os comandos a seguir (Para o projeto é necessário o python 3.6 e o pip já instalados):\nPrimeiramente deveremos instalar o pipenv:\n$ pip install pipenv\nCom o pipenv instalados devemos entrar no nosso virtualenv com:\n$ pipenv shell\nCom o pipenv instalado deveremos instalar nossas dependencias:\n$ pipenv install requeriments\nCaso o pipenv install der problema instale o numpy:\n$ pipenv install numpy\nExecução\nPara executar o projeto entre na pasta meuDiabetes:\n$ cd meuDiabetes\nAgora inicie seu servidor:\n$ python manage.py runserver\nSe tudo ocorreu bem seu servidor está ativo na porta 8000 basta entrar no link do seu localhost\n'],https://github.com/mpsdantas,"['Python', 'GPL-3.0 license', 'Updated Dec 15, 2017', '4', 'MATLAB', 'MIT license', 'Updated Jun 27, 2020', '5', 'Python', 'Updated Nov 4, 2015', '1', 'Java', 'Updated Feb 29, 2016', '2', 'Python', 'Updated Sep 4, 2018', 'Jupyter Notebook', 'Updated Feb 12, 2019', 'Python', 'Updated Feb 8, 2020', '1', 'Jupyter Notebook', 'Updated Nov 25, 2020', '1', 'Jupyter Notebook', 'Updated Oct 8, 2017', 'Swift', 'Updated Mar 22, 2019']"
"Shenzhen, China",28,5,208,40,"['Diabetes Diagnosis Expert System\nThis program is written by Liu Kanglong, Kim Dung Bui, Meng Yang, Lwi Tiong Chai,\nDipti Bijpuria, Tan Xinli Steven, 2016, NUS (Copyright).\nThis is a knowledge-based recommender system to help diagnose diabetes for users.\n']",https://github.com/mikelkl,"['1', 'JavaScript', 'Updated Mar 3, 2017', '1', 'R', 'MIT license', 'Updated Jan 22, 2020', '5', 'Python', 'Updated May 7, 2019', 'Jupyter Notebook', 'Updated Jul 20, 2018', 'CLIPS', 'GPL-3.0 license', 'Updated Apr 12, 2017', '8', 'Updated Mar 10, 2015', '6', 'CSS', 'MIT license', 'Updated Jul 22, 2019', '3', 'Python', 'MIT license', 'Updated Oct 23, 2020', '4', 'R', 'Updated Jul 23, 2018', '4', 'JavaScript', 'Updated May 1, 2018']"
The Netherlands,33,2,2,267,"[""d-calc\nd-calc is a bolus calculator for type 1 diabetics using an insulin pen (not an insulin pump).\n\nIntroduction\nOnce configured, start the app, input your blood glucose reading, input your estimated carbohydrate intake and it will suggest a bolus based on that information.\nd-calc has been designed for convenience and helps to remove errors and guesswork when calculating your insulin dose.\nHistory\nStarted in 2012, d-calc is a bolus calculator for your iPhone. The project was originally in Delphi XE2 - the 1st Delphi version that came with an iOS compiler (and the FireMonkey framework). It ran on iOS4 and iOS5 and iOS6.\nIn 2014, the project was re-written in Delphi XE6. The new version added support for IOB (insulin on board), and an application badge (for units of insulin on board). It ran on iOS7 and iOS8.\nd-calc integrates with Chris Bowley's Diabetes Diary (available separately on the App Store).\nIn 2015, Apple pulled d-calc from the App Store because it is out of compliance with guideline 22.9:\n\n22.9 Apps that calculate medicinal dosages must be submitted by the manufacturer of those medications or recognized institutions such as hospitals, insurance companies, and universities.\n\nAre you a hospital, university, insurance company, or drug manufacturer? Please contact me. Together, we might bring this project back to life. Diabetes is hard work. We can help patients with diabetes (often children) and remove errors from their guesswork.\nRequirements\n\nDelphi 10 Seattle\nDelphi Mobile Add-On Pack\n\nDisclaimer\nAlways consult your physician or diabetes clinic before use and please adjust the settings before using the calculator for the first time.\n""]",https://github.com/svanas,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
Japan,15,21,11,287,"['DiaBeatIt\nClick here to view user authentication implemented deployed app\nClick here to view single user deployed app\n\n\nClick here to view app code with user authentication implemented\n\n\nTechnologies used: HTML, CSS, JavaScript, React, JSX, Bootstrap, Font Awesome, Datepicker, Moment, Node, Express, Mongoose, ORM (Object-Relational Mapping), MongoDB, NoSQL, RESTful API, Google Maps API, Yelp Fusion API, Edamam API, JSON, AXIOS, Passport, Google OAuth, mLab, Heroku.\n\nApp is responsive and designed for a mobile screen and larger.\n\nOverview:\nAn app that helps prevent diabetes through healthy eating.\n\nThis is a group project of an eight member team.\nDiaBeatIt is a MERN Stack app (MongoDB, Express, React, Node).\n\n\n\nTechnical specification by page:\nLogin:\nThe user logs in with their google credientials and their email address is assigned as the username and saved to window localStorage. Whenever a user logs in, a data entry they make through the app will be saved together with their username as one of the data fields, into MongoDB. While signed in, out of all the data that is stored in MongoDB, only data that has their username saved together with it, will display to the app.  When the user clicks any of the sign out buttons on the app, localStorage will be cleared out and the user will be taken back to the splash page. The page uses Passport and Google OAuth for user authentication.\n\nCalorie Entry:\nThe user can enter their calorie intake by meal, drink or ingredient from a predefined list, or they can type in the information by manual entry. The data is then sent and stored in MongoDB.\nThe app uses its own RESTful API. A RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data. This functionality is also known as CRUD (Create, Read, Update, Delete).\n\nCalorie Data:\nThe user can retrieve the data entered on the Calorie Entry page from MongoDB.  The retrieved data is then filtered by date and sorted by meal category. The page has button options to allow a user to edit or delete an entry in MongoDB.\n\nStore Finder:\nThe user can search for market or fitness places based on their specified location. The result is then displayed to a map. The page uses a Yelp Fusion API to make the store search request and a Google Maps API to display the location of the store.\n\nRecipe Finder:\nThe user can search for recipes by entering the ingredients they wish to have included and their target calorie amount.  The page uses an Edamam API to make the receipe search request.\n\nHealth Timeline:\nThe user can enter a variety of information including gender, height and weight to display their life expectancy in a horizontal bar chart.\n\nDigital Health Card:\nThe user can enter their emergency and personal information to render a digital health card. This data is sent and stored in MongoDB.\n\nResources:\nThe user can find information on what diabetes is and how to prevent becoming diabetic.\n']",https://github.com/makicoding,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
CA,3,1,13,5,"[""Laravel PHP Framework\n  \nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, and caching.\nLaravel aims to make the development process a pleasing one for the developer without sacrificing application functionality. Happy developers make the best code. To this end, we've attempted to combine the very best of what we have seen in other web frameworks, including frameworks implemented in other languages, such as Ruby on Rails, ASP.NET MVC, and Sinatra.\nLaravel is accessible, yet powerful, providing powerful tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.\nOfficial Documentation\nDocumentation for the entire framework can be found on the Laravel website.\nContributing To Laravel\nAll issues and pull requests should be filed on the laravel/framework repository.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license\n""]",https://github.com/jooskim,"['JavaScript', 'Updated Aug 23, 2018', '1', 'Java', 'Updated Apr 14, 2018', '1', 'Python', 'Updated Jan 30, 2018', 'Jupyter Notebook', 'Updated Dec 15, 2019', '1', 'JavaScript', 'Updated Apr 26, 2014', 'Jupyter Notebook', 'Updated Oct 8, 2016', 'Makefile', 'Updated Mar 27, 2017', 'HTML', 'Updated May 4, 2017', '1', 'HTML', 'MIT license', 'Updated Sep 18, 2020', '1', 'Java', 'Apache-2.0 license', 'Updated May 12, 2019']"
"Denver, Colorado",0,1,0,252,"[""Diabetes-Demographics-in-Colorado\nVisualization project of diabetes rates along Age, Income, Food Security, and Urban/Rural settings.\nMotivation\nEffectiveness in health awareness programs and education come from a greater understanding of the demographics involved. By indentifying target areas within the population, health and food resources, prevention and treatment programs can be aimed with greater precision.\nWe believe that the stated variables of age, income, food security, urban/rural setting have an effect on the rates of diabetes amongst the population of Colorado.\nGoal\nBy visualizing the demographics of Colorado along age, income, food security, and urban/rural settings as they pertain to diabetes rates, the aim is to identify areas within the state's population that would benefit from allocation of resources and education.\nData\nData Sources: USDA Food Environment Atlas Data for Colorado Census Tracts (2017), Diabetes in Adults - CDPHE Community Level Estimates (Census Tracts) (2014-2017),  Diabetes Hospitalization Rate (Census Tracts) (2013-2017), Income/Poverty (Census Tracts) (2014-2017) , Current Prevalence of Diabetes - Center for Disease Control(2011-2020), Educational Attainment (Census Tracts) (2013-2017).  All resources were accessed from CDPHE Open Data:  https://data-cdphe.opendata.arcgis.com/\nUsing the above sources, the data will be visualized across multiple charting methods.\nUrban vs. Rural Diabetes and Hospitalization Rates\nRural and urban Coloradans have roughly equivalent average diabetes rates (8%).  However, urban Coloradans are hospitalized for diabetes far more often than rural Coloradans (+20%).  We conjectured that distance to a hospital may account for why rural diabetics are hospitalized less often than urban diabetics.  Looking into this, we mapped hospital locations in reference to rural and urban census tracts, and differences were not significant.\nWhile rural Coloradans do have less access to hospitals in terms of distance, that doesn't explain why hospitalizations per 100,000 people occur at a much greater rate in urban areas.  We conjecture that people in urban areas may have less access to consistent care in terms of yearly checkups and prescription compliance and may have lower insured rates, leading to more complications and hospitalizations.\nAdditionally, there is a slightly higher correlation between almost all access-impairing factors (income, distance, education) and both hospitalization per 100,000 and estimated diabetes rates (%) in urban census tracts, suggesting that the higher hospitalization rate in urban areas may be connected to a compounding of access-imparing issues.  This study could be furuther pursued by adding in census data regarding rural and urban insured rates and by looking at compounded access-imparing factors.  Insured data is available from the Small Area Health Insurance Estimates (2018) dataset from the Census Bureau.\nDiabetes Rates along LILA rated census tracts\nLow Income(LI) rankings are determined by poverty rates(at least 20%) or median family income ( at or below 80% of metropolitan area or the state's median income.\nLow Access(LA) status is measured in four different ways. The first three are based on the distance to the nearest supermarket or grocer. The distance thresholds for urban ares is 0.5 and 1 mile, while rural areas are measured at 10 and 20 miles. The last measure is based on household without access to a vehicle that live over 0.5  miles\nColorado has 52.9% of it's census tracts with no LILA designation. That represents 3,701,428 residents of Colorado's 5,395,805 total population. This analysis will compare their rates of diabetes along their population sizes.\nThere was a slight negative correlation between the diabetes rates and the population size of each LILA tract group, this was also showed in the census tracts that did not have a LILA designation though not as strongly. Given the weight of the Non-LILA tracts it was worth investigating where that correlation was coming from. The variance among the data points in the lower population tracts gave a path for the data to determine where that variance would come from.\nSeperating the data along the Urban/Rural designation in each LILA tract allowed for more visualization of where the variance was occuring. The lower population rural tracts showed significantly higher rates of diabetes rates. Adding health and education resources per capita would allow for a clearer view of how these affected tracts are being managed from a medical perspective.\n""]",https://github.com/Ryan-Eberle,"['3', 'JavaScript', 'Updated Jul 13, 2017', 'HTML', 'Apache-2.0 license', 'Updated Dec 17, 2016', '5', 'Jupyter Notebook', 'Updated Jun 30, 2019', '5', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'Jupyter Notebook', 'Updated Aug 5, 2020', '5', 'Java', 'Updated Jun 17, 2020', '2', 'Jupyter Notebook', 'Updated Jun 14, 2016', 'HTML', 'Updated Dec 5, 2017', '1', 'Java', 'Updated Nov 5, 2016', '1', 'HTML', 'Updated Jan 24, 2016']"
Shanghai,4,3,36,644,['Diabetes Control App\nAn Android app to record the blood sugar and other data for diabetes users.\n\nrecord the data\npresentation in table and chart\nupload to the cloud to be accessed by doctors\nremind user to take medications\nbuild up good habits for taking pills and record data on time\n\n'],https://github.com/chennanni,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
"Jabalpur,India",1,10,29,0,"['Diabetes-Detection-using-Neural-Network\nDiabetes Mellitus (DM), commonly known as diabetes, is a group of metabolic disorders characterized by high blood sugar levels over a prolonged period. Artificial Intelligence in Medical Science refers to real-world medical domains, considered and discussed at the proper depth, from both the technical and the medical points of view.\nData Science and Machine Learning is helping medical professionals make diagnosis easier by bridging the gap between huge data sets and human knowledge. We can begin to apply Machine L earning techniques for classification in a dataset that describes a population that is under a high risk of the onset of diabetes.\nGiven the medical data we can gather about people, we should be able to make better predictions on how likely a person is to suffer the onset of diabetes, and therefore act appropriately to help. We can start analyzing data and experimenting with algorithms that will help us study the onset of diabetes.\n']",https://github.com/akanshu11121,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
Kochi,16,34,98,79,"['Gluco\nOpen Source Diabetes Management\nGluco is a Open -Source Diabetes Management System.\nFeatures:\n\n\nCloud-Based\n\n\nMaterial Design\n\n\nTrack Blood glucose level,Blood Pressure,Body Weight\n\n\nGet a Detailed graph overview of your diabetes.\n\n\nTrack your Activity\n\n\nGet Diet Tips\n\n\nLicense\nCopyright 2018 Patrick Prakash\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n']",https://github.com/PatrickPrakash,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
"Houston, Texas",77,0,20,185,"['Patient Selection for Diabetes Drug Testing\nI built a model that predicts the expected days of hospitalization time, which determines whether the patient is selected for the clinical trial. In clinical trials, the drug is often administered over a few days in the hospital with frequent monitoring/testing. Therefore, the target patients are people that are likely to be in the hospital for this duration of time and will not incur significant additional costs for administering the drug and monitoring after discharge.\nDataset\nI used a modified dataset from UC Irvine.\nDependencies\nUsing Anaconda consists of the following:\n1.Install miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2.Create and activate a new conda environment.\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nThese instructions also assume you have git installed for working with Github from a terminal window, but if you do not, you can download that first with the command:\nconda install git\n\n3.Create local environment\n\nClone the repository, and navigate to the downloaded folder. This may take a minute or two to clone due to the included image data.\n\ngit clone https://github.com/iDataist/Patient-Selection-for-Diabetes-Drug-Testing.git\ncd Downloads\n\n\n\nCreate (and activate) a new environment, named ehr-env with Python 3.7. If prompted to proceed with the install (Proceed [y]/n) type y.\n\nLinux or Mac:\n\n conda create -n ehr-env python=3.7\n source activate ehr-env\n\n\nWindows:\n\n conda create --name ehr-env python=3.7\n activate ehr-env\n\nAt this point your command line should look something like: (ehr-env) <User>:USER_DIR <user>$. The (ehr-env) indicates that your environment has been activated, and you can proceed with further package installations.\n\n\nInstall a few required pip packages, which are specified in the requirements text file. Be sure to run the command from the project root directory since the requirements.txt file is there.\n\n\npip install -r requirements.txt\nipython3 kernel install --name ehr-env --user\n\n\n']",https://github.com/iDataist,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
"Berlin, Germany / Hennigsdorf, Germany",1,1,3,0,"['Diabetes-Diary\nA Meteor mobile app to keep track of health data for diabetes patients. [PRE-ALPHA]\n⚠️ DISCLAIMER\nExperimental Pre-Alpha\nThis app is in pre-alpha status. It\'s an experiment and should be treated as such. If you feel like joining the experiment - feel free!\nAbout the Management of Health Data\nHealth data is sensitive and important! As a diabetes patient, you should keep track of your values OUTSIDE OF THIS APP, as neither the data\'s safety nor its integrity can be guaranteed in experimental pre-alpha mode. Neither owner nor any contributors are responsible for any actions anybody takes regarding his or her health.\nExemption from Liability\nThis app is heavily under development. Neither owner nor contributors are responsible for actions an individual chooses to take with the code published. This includes (but is not limited to) any effects the app will have on the device it is installed on, choices based on the data entered into the app or any other action.\nAbout this App\nThis app is an experiment in using the meteor framework to build a mobile app.\nThe app\'s goal is to provide a diabetes patient with the means to keep track of his blood glucose value, the meals he eats, the insuline injected and further comments. We aim to keep as much control over the data as possible with the user.\nPlease refer to the to-do-list for features not yet included in the app.\nDemo\nFind a running demo here: diadia.meteor.com\nThe demo is running in the browser and is also a ""native"" mobile app. For example, the android version can be downloaded here.\nYou need to allow the installation of ""untrusted apps"" on your android device.\nQuickstart\n\nInstall meteor (https://www.meteor.com/install)\nClone the repository git@github.com:boRp/diabetes-diary.git\nOne plugin MUST be installed via mrt before: mrt add clockpicker\nThis plugin is not transferred to the new package style yet, more info can be found here: https://github.com/AndrasPH/meteor-clockpicker\n\nRun the app\nin browser for local development:\nmeteor\nOr on a plugged-in device:\nmeteor run android-device\nmeteor run ios-device\nMore general information regarding meteor can be found here: http://docs.meteor.com/#/basic/\ntechnical details\nFor more specific technical details, please see technical documentation\nbuild\nℹ️ This has only been tested for android!\nTo build the app:\nmeteor build /tmp/diadia/ --server diadia.meteor.com:80 --debug\nThe debug flag seems to be needed to install the apk on the phone without going through the app store\nAfterwards, you\'ll find the compiled apk within /tmp/diadia/<INSERT_PATH>\nMore information on building mobile apps for android and iOS: http://docs.meteor.com/#/basic/buildingmobileapps\nLicense\nMIT\n']",https://github.com/boRp,"['2', 'R', 'MIT license', 'Updated Jul 9, 2018', '2', 'Java', 'GPL-3.0 license', 'Updated Jan 31, 2019', '2', 'Jupyter Notebook', 'Updated Jan 24, 2020', '2', 'Jupyter Notebook', 'Updated Sep 14, 2020', '2', 'JavaScript', 'MIT license', 'Updated Apr 20, 2015', '2', 'Jupyter Notebook', 'Updated Dec 27, 2019', '2', 'HTML', 'GPL-3.0 license', 'Updated Sep 17, 2020', '2', 'Java', 'GPL-2.0 license', 'Updated Oct 19, 2020', 'Updated Apr 30, 2018', 'Updated Mar 1, 2018']"
"Seattle, WA",13,14,1,4,['Keras Transfer Learning\n'],https://github.com/alew104,"['1', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated Sep 4, 2018', 'Python', 'Updated Feb 21, 2018', 'Java', 'Updated Apr 11, 2018', 'Java', 'Updated Jan 14, 2019', '1', 'HTML', 'MIT license', 'Updated Mar 30, 2019', 'Updated Oct 18, 2019', '1', 'Jupyter Notebook', 'Updated Feb 11, 2020', 'Jupyter Notebook', 'Updated Feb 14, 2020', 'Updated Nov 7, 2019']"
Mumbai,0,2,2,20,['Diabetes\nDiabetes Predicitons using PIMA India Diabetes Data from Kaggle\n'],https://github.com/mananashah007,"['Updated May 20, 2020', 'Python', 'Updated Aug 9, 2020', 'Python', 'Updated Aug 19, 2020', 'Updated Aug 18, 2020', 'Updated Aug 1, 2020', 'Updated Sep 17, 2020', 'R', 'Updated Nov 14, 2020', 'R', 'Updated Oct 22, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Jan 28, 2020']"
United Kingdom,39,13,0,2,"[""Express prototyping tool\nPrototyping tool built in Express.\nIt will give you a basic Express app, with templates, css and images from the GOV.UK front-end toolkit.\nRequirements\n\nNode\n\nYou may already have it, try:\nnode --version\n\nGetting started\n\n\nClone this repo.\n\n\nIf you don't have Node, download it here: http://nodejs.org/.\n\n\nRun the app:\n\n\nnode start.js\n\n\nGo to localhost:3000 in your browser.\n\nHot reload\nAny code changes should update in the browser without you restarting the app.\nThe app recompiles app/assets/stylesheets/application.scss everytime changes are observed.\n""]",https://github.com/amosie,"['R', 'Updated Apr 11, 2016', 'CSS', 'Updated Feb 14, 2015', 'Java', 'Updated Sep 28, 2015', 'Ruby', 'Updated Oct 1, 2013', 'CSS', 'Updated Sep 19, 2014', 'CSS', 'BSD-3-Clause license', 'Updated Sep 29, 2014', 'R', 'Updated Sep 14, 2012', 'Updated Dec 18, 2018', 'Jupyter Notebook', 'Updated Dec 7, 2018', 'R', 'Updated Feb 3, 2018']"
Berlin,2,0,0,5,"['Diabetes\n\nAbout 422 million people worldwide have diabetes, particularly in low-and middle-income countries. Diabetes is a chronic, metabolic disease characterized by elevated levels of blood glucose (or blood sugar), which leads over time to serious damage to the heart, blood vessels, eyes, kidneys, and nerves. The most common is type 2 diabetes, usually in adults, which occurs when the body becomes resistant to insulin or doesn\'t make enough insulin. In the past three decades the prevalence of type 2 diabetes has risen dramatically [1]\n\nGoals of the exercise\n1- Take the original Diabetes dataset and preprocess it to get the toy dataset that comes with scikit-learn.\n2- Given features like age, sex and blood sugar and lipid levels predict the disease progression of diabetes patients after one year.\nDiabetes dataset\n\nDatabase obtained from Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004): ""Least Angle Regression"", Annals of Statistics (with discussion), 407-499.\nThere are ten baseline variables and six blood serum measurements obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline. Each row corresponds to the values of one patient [2]\n\nVariables:\nage\nsex: 1 (male), 2 (female) \nbmi: body mass index (kg/m2) \nbp: average blood pressure (mm Hg)\nBlood Serum Measurements:\ns1: tc, total cholesterol (mg/dl)\ns2: ldl, Low Density Lipoprotein (LDL) (mg/dl), ""bad cholesterol""\ns3: hdl, High Density Lipoprotein (HDL) (mg/dl), ""good cholesterol""\ns4: tch, ratio total cholesterol / HDL\ns5: ltg, triglycerides (mmol/l)\ns6: glu, glucose (mg/dl)\nResponse:\ny: a quantitative measure of disease progression one year after baseline\n']",https://github.com/macabeigier,"['Updated Apr 4, 2019', 'Updated Nov 24, 2019', 'JavaScript', 'Updated Jan 30, 2020', 'Updated Feb 21, 2020', 'Jupyter Notebook', 'Updated Nov 1, 2019', 'Jupyter Notebook', 'Updated May 30, 2020', 'Python', 'Updated Mar 22, 2020', 'Updated Apr 20, 2020', 'Python', 'Updated Apr 22, 2020', 'Jupyter Notebook', 'Updated Jul 18, 2020']"
São Paulo/SP,0,1,0,0,['Diabetes\n'],https://github.com/marrsantos,"['HTML', 'MIT license', 'Updated May 26, 2018', 'JavaScript', 'Updated Jul 20, 2018', 'C#', 'Updated Feb 6, 2018', 'Jupyter Notebook', 'Updated Oct 3, 2018', 'HTML', 'Updated Mar 15, 2019', 'HTML', 'MIT license', 'Updated Dec 18, 2018', 'Swift', 'Updated Oct 10, 2019', 'Updated Oct 8, 2019', 'Updated Dec 1, 2019', 'Jupyter Notebook', 'Updated Jan 10, 2020']"
"Banglore,India",0,11,17,193,"['Diabetes\npredicting if a patient has diabetes or not using the dataset from kaggle called ""Pima Indians Diabetes Database"".\n']",https://github.com/Siddhesh19991,"['Updated Sep 16, 2019', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'Updated Nov 24, 2019', 'Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', 'Updated Oct 10, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019']"
India,7,8,21,93,['Diabetes\n'],https://github.com/mphirke,"['PHP', 'Apache-2.0 license', 'Updated Jan 28, 2016', 'Updated Dec 28, 2017', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019']"
"Banglore,India",0,11,17,193,"['Diabetes\npredicting if a patient has diabetes or not using the dataset from kaggle called ""Pima Indians Diabetes Database"".\n']",https://github.com/Siddhesh19991,"['Updated Sep 16, 2019', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'Updated Nov 24, 2019', 'Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 29, 2020', 'HTML', 'Updated Oct 20, 2020', 'Python', 'Updated Apr 9, 2016', 'Python', 'Updated Oct 7, 2015']"
"St charles, MO",0,11,17,28,['diabetes\nBuild models and compared different models accuracy\n'],https://github.com/tle1000,"['Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015', '2', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Feb 10, 2020', '2', 'CSS', 'MIT license', 'Updated Jul 30, 2020', '2', 'Updated Mar 13, 2016']"
"London, UK",63,43,72,1516,['drac\nfilthy script to automatically ingest some lovely blood data from my Accu-Chek Mobile and Aviva Expert\n\ninstall\nnpm install\nconfig\nmost of this is hard wired for my set-up atm\nrun\nnpm link\n\ndrac upload /path/to/file.csv - Upload from a CSV (Accu-Chek Mobile and Aviva Expert Support)\ndrac download - Downloads from Accu-Chek Mobile directly\ndrac info - Loverly bit of information\n\ncredits\ntidepool data schema: https://github.com/tidepool-org/data-model/blob/master/device-data/types/smbg.md\nascii vamp: http://www.chris.com/ascii/joan/www.geocities.com/SoHo/7373/haloween.html\n'],https://github.com/zaccolley,"['1', 'Jupyter Notebook', 'Updated Oct 5, 2020', 'NetLogo', 'Updated Nov 11, 2020', 'Updated Nov 18, 2020', '2', 'R', 'Updated Nov 13, 2020', 'JavaScript', 'Updated Feb 2, 2017', 'Updated Nov 12, 2019', '2', 'Python', 'Apache-2.0 license', 'Updated Dec 31, 2018', '2', 'Jupyter Notebook', 'Updated Sep 27, 2019', 'JavaScript', 'Updated Mar 4, 2019', 'Java', 'Updated Jul 11, 2016']"
Houston Area,0,0,16,391,['diabetesClassifier\n'],https://github.com/madarahr,"['Java', 'Updated Dec 30, 2019', 'CSS', 'Updated May 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 14, 2019', '1', 'Updated Nov 5, 2020', 'Python', 'Updated Oct 14, 2020', 'Classic ASP', 'Updated Jan 11, 2015', 'Updated Apr 15, 2015', 'Updated Oct 6, 2015', 'Updated Nov 9, 2017', 'Updated Dec 5, 2017']"
"Auckland, New Zealand",2,1,0,64,"['Type-II Diabetes Prediction Model\nThis study will provide validated T2D prediction models, relevant in contemporary New Zealand’s primary care.\nCore Data\nSee Wiki for details regarding the core dataset including variable descriptions.\nThe core dataset is a PREDICT population from 2006 - 2018. Individuals are eligeable if they are diabetes-free at time of PREDICT risk assessment and where an index HbA1c value is avaiable.\nInclusion does not limit the number of prior PREDICT assessments or prior CVD. Where eligeability is met at multiple PREDICT assessments, the earliest PREDICT record is used as baseline.\nInformation from the National Health Collection are linked to provide demographic, hospitalised history, hospitalised outcomes, death-specific outcomes, and baseline treatment.\nTo ensure consistency, the exclusion criteria (see Wiki) have been applied in data management.\nExclude IF\n\nPrior admission for diabetes; OR\nTreated with antidiabetic drugs in last 6 months; OR\nNoted as diabetic in PREDICT; OR\nNon-existing HbA1c test in prior 2 years; OR\nAny HbA1c in prior 2 years >= 50mmol/mol\nExclusion critiera met within 30 days of study index date\nQC Conflicts\n\nRoll to next\nExamine each visit and apply exclusion criteria. Continue with each nth visit to find those who could meet the inclusion criteria in subsequent visits.\n\nStarting with 564180 participants\n371362 met criteria after first visit\n12191 meet criteria in subsequent visit\n\nFurther Removals\n\nRemove out of age Limits 25-74: -14806\nRemove non-avaliable HbA1c within +30 days of Predict: -75764\nRemove dispensing records 1 month beyond DOD :-107\nRemove people with renal dialysis & transplantation: -826\nRemove exclusions detected within 30 days of study index: -179\nTotal Remaining = 277075\n\n']",https://github.com/VIEW2020,"['Python', 'Updated Aug 13, 2019', 'Kotlin', 'Updated Jan 9, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2019', 'Jupyter Notebook', 'Updated Aug 29, 2017', 'R', 'Updated Apr 24, 2020', 'HTML', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Sep 15, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'R', 'Updated Jul 31, 2020', 'C#', 'Updated Aug 29, 2020']"
"Cuiabá, MT",27,13,4,94,['DiabetesProject_git\n'],https://github.com/eduardomartinsl,"['Objective-C', 'Updated Nov 25, 2013', 'Swift', 'Updated Apr 25, 2016', 'Java', 'Updated Jul 2, 2017', '1', 'Java', 'Updated Sep 12, 2017', 'C#', 'Updated Aug 17, 2017', 'R', 'Updated Oct 3, 2017', 'Java', 'GPL-3.0 license', 'Updated Oct 25, 2017', 'Python', 'Updated Jan 5, 2018', 'Java', 'Updated Feb 15, 2018', 'Java', 'Updated May 6, 2018']"
Nigeria,0,1,0,20,['DiabetesPrediction\nDiabetes Prediction\n'],https://github.com/Dandignity,"['Jupyter Notebook', 'Updated Feb 26, 2020', 'Python', 'Updated Apr 9, 2020', 'Java', 'Updated May 6, 2020', '1', 'Jupyter Notebook', 'Updated May 20, 2020', 'Python', 'Updated Jul 28, 2020', 'Jupyter Notebook', 'Updated Sep 8, 2020', 'Jupyter Notebook', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Oct 20, 2020', 'R', 'MIT license', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Nov 9, 2020']"
Israel,8,0,74,66,['Diabetes With Machine Learning\nPredict future glucose level\n'],https://github.com/OrDuan,"['Updated Oct 26, 2016', 'Java', 'Updated Nov 25, 2016', 'Java', 'Updated Apr 14, 2016', 'Java', 'Updated Mar 14, 2016', 'Python', 'Apache-2.0 license', 'Updated Aug 14, 2016', 'TypeScript', 'Updated Nov 1, 2017', 'Java', 'Updated Aug 4, 2018', 'HTML', 'MIT license', 'Updated Jul 16, 2019', 'Jupyter Notebook', 'Updated Dec 5, 2019', 'Jupyter Notebook', 'Updated Feb 26, 2020']"
"Ohio, United States",1,1,1,9,"['A crossplatform program used to store, and calculate glucose numbers, carbohydrate intake, and the insulin dosages necessary to counteract both.\nCurrently offers basic functionality, but the plan is to be able to use this on Windows, Android, iOS, and web interfaces to help manage your diabetes.\n']",https://github.com/ethan-lefeb,"['TypeScript', 'Updated May 3, 2019', 'Java', 'Updated Mar 21, 2019', 'R', 'Updated Jan 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'C#', 'Updated Apr 16, 2020', 'Jupyter Notebook', 'Updated Jun 13, 2020', 'Objective-C', 'Updated Sep 28, 2020', 'Python', 'Updated Nov 8, 2020', 'Java', 'Updated Jun 15, 2020', '1', 'Python', 'Updated Nov 19, 2020']"
Singapore,209,253,22,670,"['Build a machine learning classifier model\nThe Pima Indians of Arizona have the highest reported prevalence of diabetes of any population in the world. A small study has been conducted to analyse their medical records to assess if it is possible to predict the onset of diabetes based on diagnostic measures.\nDataset is downloaded from Kaggle.\xa0\nThe objective of this article is to build a predictive machine learning model to predict based on diagnostic measurements whether a patient has diabetes. This is a binary (2-class) classification problem. There are 768 observations with 8 medical predictor variables (input) and 1 target variable (output 0 for ""no"" or 1 for ""yes"").\nRead more\nhttps://towardsdatascience.com/building-a-machine-learning-classifier-model-for-diabetes-4fca624daed0\nConnect with me\nhttps://www.linkedin.com/in/jnyh/\n']",https://github.com/JNYH,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
New York,3,0,0,3,"['PIMA Diabetes Prediction\nUsing Pima Indians diabetes data set to predict whether a patient has diabetes or not based upon patient’s lab test result variables like Glucose, Blood Pressure, etc. using CART decision tree algorithm and K-Nearest Model achieving 76% accuracy.\nPython-Scikit Learn, SciPy, Pandas, MatPlotLib.\nProblem Statement: Diabetes is one of the deadliest diseases in the world. It is not only a disease but also creator of different kinds of diseases like heart attack, blindness etc. The normal identifying process is that patients need to visit a diagnostic center, consult their doctor, and sit tight for a day or more to get their reports.\nSo, the objective of this project is to identify whether the patient has diabetes or not based on diagnostic measurements.\nDataset Used: The dataset used has been obtained from UCI Machine Learning Repository having 769 records of Female Patients exclusively.\nDataset Link: https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nFrom the domain knowledge, I have analyzed and found out the ranges of values and its effects on diabetes for each continuous variable in the dataset. Based upon these ranges we will categorize the continuous variables for implementing the decision tree in the next step. Also, we can utilize these ranges to come up with appropriate null value replacement for each independent variable.\nThere are 8 independent variables:\n\nPregnancies: No. of times pregnant\nGlucose: Plasma Glucose Concentration a 2 hour in an oral glucose tolerance test (mg/dl)\nA 2-hour value between 140 and 200 mg/dL (7.8 and 11.1 mmol/L) is called impaired glucose tolerance. This is called ""pre-     diabetes."" It means you are at increased risk of developing diabetes over time. A glucose level of 200 mg/dL (11.1 mmol/L)     or higher is used to diagnose diabetes.\nBlood Pressure: Diastolic Blood Pressure(mmHg):\nIf Diastolic B.P > 90 means High B.P (High Probability of Diabetes)\nDiastolic B.P < 60 means low B.P (Less Probability of Diabetes)\nSkin Thickness: Triceps Skin Fold Thickness (mm) –\nA value used to estimate body fat. Normal Triceps SkinFold Thickness in women is 23mm. Higher thickness leads to obesity and    chances of diabetes increases.\nInsulin: 2-Hour Serum Insulin (mu U/ml)\nNormal Insulin Level 16-166 mIU/L\nValues above this range can be alarming.\nBMI: Body Mass Index (weight in kg/ height in m2)\nBody Mass Index of 18.5 to 25 is within the normal range\nBMI between 25 and 30 then it falls within the overweight range. A BMI of 30 or over falls within the obese range.\nDiabetes Pedigree Function: It provides information about diabetes history in relatives and genetic relationship of those relatives with patients. Higher Pedigree Function means patient is more likely to have diabetes.\nAge (years)\nOutcome: Class Variable (0 or 1) where ‘0’ denotes patient is not having diabetes and ‘1’ denotes patient having diabetes\nThe dependent variable is whether the patient is having diabetes or not.\n\nData Cleaning will take place as data has got lot of missing values. Handling missing values can be done either by replacing null values with mode or mean or replacing the null value with a random variable.\nAlgorithms Used: As we have to classify the data into patients having diabetes or not, the best method which can be used is Classification and Regression Tree Algorithm(CART), because in this, the dataset is divided into training and testing data. Further we can easily classify and predict the outcome using nodes and internodes.\nSoftware Package Used: Python-Scikit Learn, Numpy, Scipy, Matplotlib\nAdvantage of this project: The rules derived will be helpful for doctors to identify patients suffering from diabetes. Further predicting the disease early leads to treating the patient before it becomes critical.\n']",https://github.com/niharikagulati,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
"Paderborn, Germany",28,46,99,45,['Pima-Indians-Diabetes-kaggle\nThis repo contains the solution of the [Pima Indians Diabetes Database] (https://www.kaggle.com/uciml/pima-indians-diabetes-database) given on kaggle.\n'],https://github.com/rrichajalota,"['4', 'JavaScript', 'Updated Nov 28, 2017', '7', 'MATLAB', 'Updated Nov 21, 2019', '68', 'Objective-C', 'Updated Feb 21, 2015', '53', 'Java', 'GPL-3.0 license', 'Updated Nov 26, 2020', '4', 'Jupyter Notebook', 'Updated Sep 12, 2019', '3', 'Jupyter Notebook', 'Updated Nov 28, 2016', '9', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Kotlin', 'Updated Oct 22, 2019', '5', 'C++', 'Updated Jul 24, 2017', '2', 'HTML', 'Updated Mar 28, 2018']"
India,7,10,39,458,"['Diabetis-Detection\nMachine Learning Practice - Diabetes Detection using Python Jupyter Notebook, PIMA Diabetes data etc\n']",https://github.com/AvinashKrSharma,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
"Changchun, Jilin",8,30,113,1,"['TianChi Diabetes Game\n大赛网址：https://tianchi.aliyun.com/competition/introduction.htm?spm=5176.11165320.5678.1.5bed6d79KvOsxW&raceId=231638\nIntroduction\n天池精准医疗大赛，其分为三个阶段初赛、复赛和决赛。初赛的题目是针对2型糖尿病的回归问题，根据受检者的体检数据和临床信息对血糖值进行预测。复赛的题目是针对妊娠糖尿病的二分类问题，通过体检信息和基因信息预测出是否患有妊娠糖尿病。决赛是在现场进行答辩。\n本人是积极向上团队中的队员，积极向上团队再精准医疗大赛中取得了初赛top-11和复赛top-6的成绩。当前代码仓库仅仅包含了本人参赛中的思路和代码，当公布初赛结果时，我发现初赛预测结果比我们提交的效果更好，后来也没有仔细分析，仅仅把当时的代码稍微整理一下。团队复赛最终提交版的天池社区技术圈：https://tianchi.aliyun.com/forum/new_articleDetail.html?spm=5176.8366600.0.0.36a8311fxpFaJX&raceId=231638&postsId=4714。\nPath\nTianChi-Diabetes\n|\n|-- preliminary：初赛代码\n|\n|-- repecharge：复赛代码\nPreliminary\n\n预处理：矩阵补全技术SoftImpute填充缺失值、标准化、归一化\n模型：lightgbm\n调参：grid search\n关键：样本中存在两类数据（正常血糖值、高血糖值），通过分类方法找到高血糖值得样本，对其进行整体预测值提高，达到精准得效果。\n运行方式\n\n数据预处理：preprocesskma.py\n模型预测：kma.py\n\n\n\nRepecharge\n\n预处理：SNP基因位点信息与其余信息进行分别填充，SNP填0，其余信息通过SoftImpute填充。\n模型：lightgbm\n调参：grid search\n关键：模型融合,多次填充取均值。\n运行方式（程序运行较慢）\n\npreprocess3.py\nlgb.py\n\n\n\nprerequisites\n\nnumpy\npandas\nscikit-learn\nlightgbm\nfancyimpute\n\n']",https://github.com/hekind,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
"Munich, Germany",75,55,100,1,"['Diabetes60 Dataset\nRGB-D images of 60 western dishes, home made. Data was recorded using a Microsoft Kinect V2. Feel free to read and cite our corresponding paper.\nRaw dataset\nThe raw dataset contains 60 chunks of RGBD pairs of typical german dishes. Within the current version, there are some duplicate dishes, so there may be more than 60 scenes in total.\nDownload the raw dataset from here.\nPython utilities\nUse the utilities in python/utils.py to load the data. Basically, images are dumped in plain .npz format, whereas color has 4 channels (BGRA) and depth has 1 channel. The helper function in the python package removes the alpha channel by default and performs a barrel roll such that the channel format becomes RGB. The Kinect sensor typically records depth values in millimeters so you can divide the depth values by a factor of 1000 to obtain meters.\nCite\n@InProceedings{Christ_2017_ICCV, author = {Ferdinand Christ, Patrick and Schlecht, Sebastian and Ettlinger, Florian and Grun, Felix and Heinle, Christoph and Tatavatry, Sunil and Ahmadi, Seyed-Ahmad and Diepold, Klaus and Menze, Bjoern H.}, title = {Diabetes60 - Inferring Bread Units From Food Images Using Fully Convolutional Neural Networks}, booktitle = {The IEEE International Conference on Computer Vision (ICCV)}, month = {Oct}, year = {2017} }\n']",https://github.com/PatrickChrist,"['2', 'JavaScript', 'Updated Oct 26, 2012', '2', 'Python', 'Updated Apr 7, 2019', 'HTML', 'Updated Jul 16, 2019', '6', 'Go', 'Updated Oct 21, 2020', '10', 'Jupyter Notebook', 'BSD-3-Clause license', 'Updated Sep 27, 2020', '8', 'Python', 'Updated Nov 8, 2017', '3', 'Python', 'Updated Apr 29, 2017', 'JavaScript', 'Updated Apr 15, 2019', '3', 'JavaScript', 'Updated Jul 10, 2013', '3', 'Jupyter Notebook', 'Updated Jul 16, 2017']"
UK,11,17,0,0,"['Diabetes-Classification\nPredict whether a patient has diabetes.\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict based on diagnostic measurements whether a patient has diabetes.\nI conducted a brief exploratory data analysis then ran three models: logistic regression, linear SVC and gradient boosting classification.\nLinks\n[1] - https://www.kaggle.com/uciml/pima-indians-diabetes-database\n']",https://github.com/mldataanalysis,"['JavaScript', 'Updated Aug 23, 2018', '1', 'Java', 'Updated Apr 14, 2018', '1', 'Python', 'Updated Jan 30, 2018', 'Jupyter Notebook', 'Updated Dec 15, 2019', '1', 'JavaScript', 'Updated Apr 26, 2014', 'Jupyter Notebook', 'Updated Oct 8, 2016', 'Makefile', 'Updated Mar 27, 2017', 'HTML', 'Updated May 4, 2017', '1', 'HTML', 'MIT license', 'Updated Sep 18, 2020', '1', 'Java', 'Apache-2.0 license', 'Updated May 12, 2019']"
"Dublin, Ireland",29,39,10,121,"['Trocaire Diabetes Management App Collection\nThe goal of this project is to provide tools to enable patients with diabetes to\ncommunicate their blood sugar level and blood pressure test results. These test\nresults data must be visualised for doctors so that they can track the health\nand wellbeing of their patients and take actions if necessary.\nClient Requirements\nIn countries like Somalia, in which poor health literacy is prevalent, diabetic\npatients are unable to attend frequent doctor appointments. Diabetes mellitus is\na chronic condition, predominantly affecting the pancreas, that fails to\nadequately produce insulin. This results in dangerously high blood sugar levels.\nThese spikes often cause comorbidities such as diabetic ulcers, blindness and\nhypertension. As these can rapidly develop, regularly scheduled doctor\nappointments are highly recommended to maximise patient care. However, poor\nonline infrastructure in Somalia has resulted in poor patient compliance for\nthese appointments as there is currently no digital platform for doctors to\ntrack and monitor their patients.\nSolution\nTo combat this problem we have developed an app entitled ""Korta"", that aims to\nresolve the disconnect between patients and doctors. This results in an\nimprovement in both patient compliance and overall care. Korta is a mobile and\nweb-based app designed for both diabetic patients and their doctors. Using the\napp, doctors can create individual patient profiles to allow for the ability to\nautomatically and securely upload patient data with minimal literary\nrequirements. The biometric data is displayed graphically for the clinician with\nany abnormalities highlighted. Notifications alert the doctor to contact a\npatient should they need to be called in for an appointment.\nOverall, a platform has been created to track and monitor diabetic patients in\nSomalia, thereby improving patient care. The app has the potential to be\ntranslated to other regions or to monitor additional biometrics like\ncholesterol.\nFinally, the app is particularly relevant to COVID-19 (of which diabetes is a\nlarge risk factor), as allowing doctors to remotely identify and monitor these\nhigh-risk patients without the need for an in-person assessment would reduce a\ndiabetic patient\'s risk of contracting the virus.\nPatient Android App\nAllows patients to input readings. Designed for illiterate users. Readings can\nbe inputted manually or through optical character recognition.\nDoctor Android App\nAllows doctors to sign-up patients and monitor them. Includes a visualisation\nand alert system, patient follow-up reminders and patient profiles.\nAdministrative Dashboard Web App\nAllows signing-up doctors, clinics and admins. This dashboard serves both\nadministrators and doctors. Includes an email verification procedure.\nTechnology Description: Front End\n\n\nAndroid Studio for the doctor and patient apps.\n\n\nGoogle Vision API and OpenCV for OCR.\n\n\nMPAndroidChart for visualisations.\n\n\nFirebase for authentication.\n\n\nTechnology Description: Back End\n\n\nNode.js for the server.\n\n\nExpress to handle requests.\n\n\nMySQL as the database.\n\n\nDeveloped using TypeScript.\n\n\nFirebase for authentication.\n\n\nAzure Blob Storage to store images.\n\n\nScreenshots\nPatient App\n\nDoctor App\n\nWeb App\n\nTeam\nDeveloped by a team comprising of Senior Sophister, BA (Mod.) Computer Science\nstudents and MSc Bioengineering students at Trinity College, Dublin.\nInstallation \xa0\nPlease get in touch with one of the contributors to discuss installation.\n']",https://github.com/sullaVM,"['3', 'JavaScript', 'Updated Jul 13, 2017', 'HTML', 'Apache-2.0 license', 'Updated Dec 17, 2016', '5', 'Jupyter Notebook', 'Updated Jun 30, 2019', '5', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'Jupyter Notebook', 'Updated Aug 5, 2020', '5', 'Java', 'Updated Jun 17, 2020', '2', 'Jupyter Notebook', 'Updated Jun 14, 2016', 'HTML', 'Updated Dec 5, 2017', '1', 'Java', 'Updated Nov 5, 2016', '1', 'HTML', 'Updated Jan 24, 2016']"
Pune,1,3,1,3,"['Pima-Indian-Diabetes-Prediction\nContext\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements\nincluded in the dataset. Several constraints were placed on the selection of these instances from a larger database.\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nContent\nThe datasets consists of several medical predictor variables and one target variable, Outcome.\nPredictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nSource : https://www.kaggle.com/uciml/pima-indians-diabetes-database\n']",https://github.com/akashtalla,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
India,0,0,6,20,"['pima-indian-diabetes-model-using-keras\nDiabetes Model Implemented in Keras Deep learning library. Here Pima-Indian-Diabetes data set is used.\nI have used Keras Sequential to create the model, https://keras.io/models/sequential/ \nData set CSV file link : https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\nData set Link: https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.names\nThere are eight input variables and one output variable (the last column) in the Dataset CSV file. We will be learning a model to map rows of input variables (X) to an output variable (y), which we often summarize as y = f(X).\n Input Variable (X) \n\n Number of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function \nAge (years)\n\n Output Variables (y)\n\n Class variable (0 or 1)\n\nKeras Diabetes Model Implementation Steps \n\n Load Data.\nDefine Keras Model.\nCompile Keras Model.\nFit Keras Model.\nEvaluate Keras Model.\nMake Predictions\n\n']",https://github.com/erdivyang10,"['HTML', 'Updated Oct 10, 2019', 'Updated Oct 14, 2019', '1', 'Updated Mar 1, 2012', 'Python', 'Updated Dec 11, 2019', 'Updated Jan 22, 2020', '2', 'Jupyter Notebook', 'Updated Jul 10, 2019', 'Jupyter Notebook', 'Updated Dec 19, 2018', 'Updated Nov 7, 2019', 'Updated Oct 24, 2019', 'Updated Feb 21, 2020']"
Montreal,1,0,0,1,"[""Diabetes EDA\nThis small project is an exploratory data analisis of a diabtes dataset from from Kaggle.\nProject structure\nNotebooks\nIn the root folder of the project you will find two notebooks prepended with a number:\n1. Preparation.ipynb\n2. Univariate analysis.ipynb\n3. Multivariate analysis.ipynb\n\nThis files are to be opened in order so that the flow in which the project was developed can be followed.\nData\nThe folder data contains the following paths:\n1_original: Contains the original data as was received. The contents of this folder should never be modified so we always have a backup.\n2_prepared: Data ready for analysis.\n\n## Project setup\n\nIn order to successfully run the project make sure that Anaconda (https://www.anaconda.com/downloads) is installed in your system since it is used as an \nenvironment/package manager. \n\nOnce conda is installed in your system navigate to the project's root in your terminal (where the file transit_env.yml) and run the\nfollowing command:\n\n```conda env create -f transit_env.yml```\n\nThis will create the environment that will be used to run the project. Once all the packages are installed run the command:\n\n```jupyter notebook```\n\n\n\n\n""]",https://github.com/lkronecker13,"['Jupyter Notebook', 'Updated Sep 22, 2019', 'Jupyter Notebook', 'Updated Oct 13, 2019', 'Jupyter Notebook', 'Updated Sep 24, 2019', 'Jupyter Notebook', 'Updated Feb 22, 2020', 'Jupyter Notebook', 'Updated Feb 24, 2020', 'Jupyter Notebook', 'Updated Nov 1, 2019', 'Jupyter Notebook', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Mar 1, 2020', 'Dart', 'Updated Apr 28, 2020', 'Jupyter Notebook', 'Updated Jul 10, 2020']"
"Plainsboro, New Jersey",8,8,2,362,['Diabetes\nAn application to measure how much pizza you have eaten...\n'],https://github.com/VirajShah21,"['R', 'Updated Apr 11, 2016', 'CSS', 'Updated Feb 14, 2015', 'Java', 'Updated Sep 28, 2015', 'Ruby', 'Updated Oct 1, 2013', 'CSS', 'Updated Sep 19, 2014', 'CSS', 'BSD-3-Clause license', 'Updated Sep 29, 2014', 'R', 'Updated Sep 14, 2012', 'Updated Dec 18, 2018', 'Jupyter Notebook', 'Updated Dec 7, 2018', 'R', 'Updated Feb 3, 2018']"
Mumbai,46,6,21,209,['PIMA-Diabetes-DNN\n'],https://github.com/vidit0210,"['Jupyter Notebook', 'Updated Nov 21, 2020', '4', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Python', 'MIT license', 'Updated Feb 9, 2019', '2', 'Jupyter Notebook', 'Updated May 5, 2020', '1', 'Jupyter Notebook', 'Updated Nov 3, 2020', '2', 'Jupyter Notebook', 'Updated Sep 4, 2018', '2', 'Jupyter Notebook', 'Updated May 4, 2018', 'Python', 'Updated Jun 27, 2015', 'CSS', 'Updated Jun 22, 2015', 'Updated Apr 2, 2015']"
Arinos,4,13,0,218,"[""Python: Getting Started\nA barebones Django app, which can easily be deployed to Heroku.\nThis application supports the Getting Started with Python on Heroku article - check it out.\nRunning Locally\nMake sure you have Python 3.7 installed locally. To push to Heroku, you'll need to install the Heroku CLI, as well as Postgres.\n$ git clone https://github.com/heroku/python-getting-started.git\n$ cd python-getting-started\n\n$ python3 -m venv getting-started\n$ pip install -r requirements.txt\n\n$ createdb python_getting_started\n\n$ python manage.py migrate\n$ python manage.py collectstatic\n\n$ heroku local\nYour app should now be running on localhost:5000.\nDeploying to Heroku\n$ heroku create\n$ git push heroku main\n\n$ heroku run python manage.py migrate\n$ heroku open\nor\n\nDocumentation\nFor more information about using Python on Heroku, see these Dev Center articles:\n\nPython on Heroku\n\n""]",https://github.com/ademirrocha,"['Updated Sep 16, 2019', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'Updated Nov 24, 2019', 'Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', 'Updated Oct 10, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019']"
"Leeds, West Riding, UK",29,0,4,1092,['Diabetes\nThis project was generated with Angular CLI version 6.0.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\ndiabetes\n'],https://github.com/KevinMayfield,"['PHP', 'Apache-2.0 license', 'Updated Jan 28, 2016', 'Updated Dec 28, 2017', 'Jupyter Notebook', 'Updated Oct 12, 2018', 'Updated May 22, 2018', 'Jupyter Notebook', 'Updated Apr 3, 2018', 'TypeScript', 'Updated Jul 18, 2018', 'Updated Apr 26, 2019', 'Updated Jul 5, 2019', 'Jupyter Notebook', 'Updated Aug 3, 2019', 'Updated Aug 8, 2019']"
"Castle Rock, CO",5,6,14,643,['diabetes\nThis script was written to track measurements collected by diabetics.\nd_monitor.py\n-> Prompts the user to update data files.\n-> Reads information from files and creates graphical representations of the data.\n-> Prompts the user to create a back up of the data files.\nd_update.py\n-> Accelerates the input of routine entries into the data files.\n'],https://github.com/TimothyHelton,"['2', 'Python', 'Updated Aug 2, 2020', '2', 'JavaScript', 'Updated Aug 3, 2012', '2', 'Updated Dec 8, 2018', '2', 'Jupyter Notebook', 'Updated Jul 24, 2020', '2', 'R', 'MIT license', 'Updated Mar 12, 2020', 'Python', 'Updated Jul 7, 2014', 'Java', 'Updated Mar 4, 2017', '1', 'Java', 'Updated Aug 24, 2017', 'Updated Dec 31, 2016', 'Updated Dec 8, 2017']"
Roodeport,5,6,14,0,['diabetesCMS\n'],https://github.com/SMhlengi,"['Java', 'Updated Dec 30, 2019', 'CSS', 'Updated May 12, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Dec 14, 2019', '1', 'Updated Nov 5, 2020', 'Python', 'Updated Oct 14, 2020', 'Classic ASP', 'Updated Jan 11, 2015', 'Updated Apr 15, 2015', 'Updated Oct 6, 2015', 'Updated Nov 9, 2017', 'Updated Dec 5, 2017']"
Karachi Pakistan,6,5,1,449,['Diabetes_Identification\nDiabetes_Identification\n'],https://github.com/MuhammadUsama100,"['1', 'Ruby', 'Updated Oct 22, 2012', 'Jupyter Notebook', 'Updated Apr 21, 2017', 'Updated Feb 28, 2018', 'Updated Sep 18, 2019', 'Jupyter Notebook', 'Updated Sep 9, 2019', 'Jupyter Notebook', 'Updated Mar 13, 2020', 'HTML', 'Updated Sep 18, 2020', 'Python', 'Updated May 14, 2017', 'Updated Oct 26, 2016', 'Java', 'Updated Nov 25, 2016']"
"Cuiabá, MT",27,13,4,94,['DiabetesProject_git\n'],https://github.com/eduardomartinsl,"['Updated Nov 19, 2020', 'Objective-C', 'Updated Nov 25, 2013', 'Swift', 'Updated Apr 25, 2016', 'Java', 'Updated Jul 2, 2017', '1', 'Java', 'Updated Sep 12, 2017', 'C#', 'Updated Aug 17, 2017', 'R', 'Updated Oct 3, 2017', 'Java', 'GPL-3.0 license', 'Updated Oct 25, 2017', 'Python', 'Updated Jan 5, 2018', 'Java', 'Updated Feb 15, 2018']"
"Nairobi, Kenya",2,1,1,71,['DiabetesPrediction\nDiabetes Prediction Challenge\n'],https://github.com/fonyango,"['TSQL', 'Updated Jul 3, 2019', 'Java', 'Updated Jul 11, 2018', 'Python', 'Updated Jan 20, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2019', 'Updated Oct 15, 2019', 'Jupyter Notebook', 'Updated Dec 16, 2019', 'Python', 'Updated Dec 15, 2019', 'Kotlin', 'Updated Jan 3, 2020', 'Updated Dec 19, 2019', 'C#', 'Updated May 12, 2020']"
North America,2,0,1,47,"['diabetes\nAnalysing Pima Indians Diabetes dataset with Weka and Python\nReproducing/Expanding in Weka\nAbstract\nReproducing case study of Shvartser [1] posted at Dr. Brownlee\'s comprehensive ML learning website [2].\n\nReproducing the study and explicitly stating the filters used\nExpanding on the case study by:\n\nbalancing classes by over and under sampling minority and majority classes, respectively\nannotating predictions with probabilities\nexercising control over probability threshold to reduce false negatives at the cost of false positives\n\n\n\nReproducing\nIn part 1 of the case study, The case study claims that ""Larger values of plas combined with larger values for age, pedi, mass, insu, skin, pres, and preg tends to show greater likelihood of testing positive for diabetes.""\nI don\'t see much likelihood from the scatter plot. Both positive and negative data points for the said attributes overlap for the most part.\nThe datasets are reproduced with the following filters:\n\ndiabetes.arff: original unchanged dataset.\ndiscretize.arff: supervised.attribute.Discretize\nmissing.arff: It is ambiguous which filter was applied to generate this dataset in the case study, so I skip this file. Instead, I provide further treament in (5) and (6).\nnormalized.arff: unsupervised.attribute.Normalize on all attributes. Not applied on the class, which is nominal anyways.\nremove_missing.arff: Fellow user (credits due) at The UCI ML repository [3,4] observes there are zeros in places where they are biologically impossible, such as the blood pressure. They are likely missing values. I further checked the remaining attributes. Except pregnancy, they either cannot be zero (e.g. mass) or don\'t have zero (e.g. pedigree). In the former case, I assume zero indicates missing values, and use Dr. Brownlee\'s post [1] to remove the missing values. This reduces the number of instances from 768 to 392. Needless to say, this purges dataset by half.\nreplaced_missing.arff: Following on comment on (5), I again use Brownlee\'s post [5] to replace the missing values with the mean of the attribute value.\nsquare.arff: \nstandardized.arff: unsupervised.attribute.Standardize\n\nWith these datasets, I have been able to reproduce the Weka Experiment in part 2. I added one more algorithm for establishing a baseline namely, ZeroR. The numbers are highly similar as reported by Shvartser [5]. We have considered both linear, e.g. Logistic Regression (LR), and non-linear, e.g. Random Forest (RF), classifiers. We also see that their evaluation metrics are not statistically different. In such a case, linear model is preferable and I use LR for further analysis.\nExpansion\nNow, the case study rightly notices that there is class imbalance: 65% -ve, and 35% +ve. In part 2, I am unsure if the class was balanced in cross validation. In the interest of reproducing the study, I do not balance the classes for the above datasets, namely (1-8). As you may know, class imbalance leads to a majority classifier, and we see this artifact when ZeroR gives us about 65% accuracy. To balance the classes, I generate two additional datasets:\n\noversampling.arff: increases the number of minority class (+ve) instances by a specified percentage. I specify the default of 100%, and that increases the number of +ve instances to be at par with the majority class (-ve) instances. I applied the SMOTE and Randomize filters in that order. The total instance count becomes 1,036. This mildly contaminates the pure data samples with synthethic ones. See Shams youtube for step-by-step method for applying SMOTE and Randomize filters [7].\nundersampling.arff: I use SpreadsubSample and Randomize filters in that order to reduce the number of majority class instances to be at par with minority class instances, namely 268. The total number of instances are now 536. Again, see Shams second video [8] for step-by-step procedure. This method removes valuable instances of the majority class.\n\nIntuitively, acquiring additional instances is likely to be more effective than undersampling the majority class or just oversampling the minority class.\nThe accuracy or percent_correct in the Weka Experiment are stated below:\nDataset        \t\t    ZeroR |   LR \ndiabetes.arff       \t65.11 |   77.10 v\noversampling.arff   \t51.74 |   75.51 v\nundersampling.arff  \t49.62 |   73.73 v\n\nwhere v represents the statistical difference.\nNote, the accuracy of ZeroR dropped to about 50% as anticipated. The accuracy of LR is still close to our previous best. Determining statistical significance of accuracies for LR across the datasets is still outstanding.\nNext, the Area under ROC in the Weka Experiment are stated below:\nDataset        \t\t   ZeroR |   LR \ndiabetes.arff       \t0.50 |   0.83 v\noversampling.arff   \t0.50 |   0.84 v\nundersampling.arff  \t0.50 |   0.82 v\n\nFinally, the F-Measures in the Weka Experiment are stated below:\nDataset        \t\t   ZeroR |   LR \ndiabetes.arff       \t0.79 |   0.83 v\noversampling.arff       0.00^|   0.75 v\nundersampling.arff  \t0.50 |   0.74 v\n\n^Note, F-Measure of ZeroR for oversampling is 0.00. This seems incorrect, and is different (0.446) to the same metric, algorithm and dataset in Weka Explorer.\nControlling the number of false negatives\nIt might be nice to see the associated probabilities with a prediction. Incidentally, LR provides associated probability out-of-the-box. The following direction will allow you to store the predictions in csv.\nWeka Explorer -> Classify -> More options -> Output predictions Choose -> CSV file\nI build LR model with ""Use training set"" and store the predictions in the pred.csv file. A sample:\ninst#,actual,predicted,error,neg_prob,pos_prob\n1,1:tested_negative,1:tested_negative,,*0.744,0.256\n2,1:tested_negative,1:tested_negative,,*0.577,0.423\n3,1:tested_negative,1:tested_negative,,*0.829,0.171\n4,1:tested_negative,1:tested_negative,,*0.994,0.006\n5,1:tested_negative,2:tested_positive,+,0.424,*0.576\n\nthe * sign indicates the probability of the predicted class.\nthe + sign indicate an incorrect prediction.\nWhichever class has the highest probability i.e. greater than 0.5 is the predicted class. The confusion matrix for building LR across the whole dataset:\n=== Confusion Matrix ===\n   a   b   <-- classified as\n 446  54 |   a = tested_negative\n 111 157 |   b = tested_positive\n\nThe false positives (54 above) cause unnecessary worry, and typically follows another test to confirm the result. The false negatives (111 above) are really bad. In this case, LR is predicting that a subject does NOT have a disease where they may have actually got one. Naturally, a physician might want to reduce the number of false negatives at the cost of increasing false positives. I could not adjust the probability threshold from 0.5 to an another value in Weka.\nI did a work around by building on pred.csv file. At the bottom of diabetes_proc tab in the diabetes.xlsx file, positive probability and trigger are drawn. The positive probability has been sorted and hence the ascending curve is seen. As the probability crosses 0.5+delta, the trigger happens and the prediction is a positive test.\nI invite you to change the value of delta to see the effects on the chart and the confusion matrix. The value of false negatives reduces from 112 to 84 when the delta value is reduced from zero to -0.10. As a side effect, false positives also increase from 69 to 94 with this delta change.\nOutstanding\n\nSo far, we have prepared and identified which datasets and algorithms seem most suitable. An actual model to generate predictions is pending. I see that as a simple exercise, and is documented in the lesson 14 of the 14-day mini course on Weka [10].\nDetermining statistical significance of accuracies for LR across the datasets is still outstanding.\n\nReproducing/Expanding in Python\nAfter reproducing and expanding the case study in Weka, I decided to reproduce them in Python. Reasons:\n\nI have developed understanding of the problem\nWeka case will serve as a baseline for comparison\nI want to get an idea on the amount of effort and flexibility both platforms provide on the same problem\n\nFor the warm up, I worked through Dr. Brownlee\'s ""Your First Machine Learning Project in Python Step-By-Step"" [11]. I wrote up the code with headings to allow the follower of the output to see what is going on.\nIn addition to my expanded Weka case study, the Python part expands the case study further by:\n\nadditional algorithms for spot checking\nbalancing class labels using LR parameter\ngrid search on the hyperparameters\nsearching for the cross over point between sensitivity and specificity\nplotting roc curve\nsensitivity and specificity cross over\n(not too exciting) saving and loading the model from disk\n\nReproducing & Expansion\nSimilar to Python Step-By-Step [11], I summarize and visualize the datasets, generating plots where possible. I\nIn contrast to creating different files for each datasets, I store the datasets in memory. I rescale the data, both normalization and standardization as suggested in the post [12]. I observe that that the mean and standard deviation are very close to zero and one, respectively, but not exactly. I posted this as a question on the blog [12], and assume that these close-enough values are acceptable in the community and move forward.\nI feed the dataset to the algorithms. For each dataset, a comparison plot is generated, where each algorithm performance is drawn using a box plot.\nWhile not too worried about the average accuracy value being different, I notice the Weka and Python are report differences in the statistical significance for the same algorithms. This merits further investigation.\nNonetheless, the algorithms have similar performance. One exception is SVM, which has consistently lower accuracy. The algorithms are instantiated with their default parameters, arguably sufficient for the first run. The algorithms contain both linear (LR and LDA) and nonlinear (KNN, CART, NB etc.) algorithms. In all the cases, I see that LR performs well with high accuracy either LR has the highest accuracy or statistically insignificant to others having higher accuracy. One exception is where RF provides statistically significant better accuracy compared to LR. One possible way forward is to fine tune RF to see if we can further improve the accuracy. This is left as future work.\nGrid Search\nI take LR to the next rounds. Next step is to fine tune LR. I perform a grid search [13] for LR over C and penalty parameters. LogisticRegression implementation in scikit takes a class_weight parameter, which when set to \'balanced\' automatically adjust weights inversely proportional to class frequencies in the input data. I prefer this over oversampling minority class with SMOTE, as that contaminates the samples mildly. I use test_size = 0.33 for splitting train/test sets for grid search.\nBefore the actual grid search, I get a baseline accuracy of LR with default parameters and the train/test datasets, namely about 0.76. To my surprise, optimal C and penalty_model parameters from grid search also give us about the same accuracy i.e. 0.76. It turns out the optimal and default C value is the same i.e. 1. However, there is a difference in the penalty model i.e. default is l2 and the optimal is l1. The different penalty model apparently had no effect on the accuracy.\nNext I did a quick store and load of the model, and confirm the accuracy score remains the same.\nWith the loaded model, I generate the evaluation metrics on the test set (X_test):\n\naccuracy_score (about 0.76)^1\nconfusion_matrix (\'tn, fp, fn, tp:\', 121, 41, 21, 71 )\nsensitivity or true positive rate (tpr) (about 0.63)\nspecificity or ture negative rate (tnr) (about 0.75)\nclassification report\nroc area under the curve (auc) (about 0.84)\n\nControlling number of false negatives -- The sensitivity and specificity trade off\nRecall, we want to exercise control over false negatives by adjusting the value of delta i.e. as the positive probability crosses 0.5+delta, the trigger happens and the prediction is a positive test. In general, sensitivity and specificity trade off against each other. Recall, we saw an example in the diabetes.xlsx when we changed the value of delta. The original paper [14] that provides the dataset shows that sensitivity and specificity cross over when their values are about 0.76^1. This may be considered a good balance between tpr and tnr. The default value of zero delta provide us with tpr and tnr of 0.63 and 0.75, respectively. I determine the value of delta where sensitivity and specificity cross by looping through a set of delta values and generating respective tpr and tnr values. Note, I am superimposing the delta value on the underlying LR model and probabilities, and then generating predictions and other metrics on the superimposed perspective. The underlying LR model remains unchanged. I looked into pushing the delta value into the underlying but decided against it due to the reasoning by lejlot at stackoverflow [15].\nI draw a plot show the changing values of sensitivity and specificity with each delta value. From the plot, it can be seen that sensitivity and specificity cross when delta is about 0.026. The rate value of sensitivity and specificity is about 0.76. We have reproduced the result of the paper by LR. In the shell output, we can also see that false negative (fn) increase when the value of delta increases.\n\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', -0.02, 0.7717391304347826, 0.7407407407407407)\n(\'confusion_matrix: tn, fp, fn, tp:\', 120, 42, 21, 71)\n...\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', 0.06, 0.7391304347826086, 0.7654320987654321)\n(\'confusion_matrix: tn, fp, fn, tp:\', 124, 38, 24, 68)\n...\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', 0.12, 0.717391304347826, 0.7777777777777778)\n(\'confusion_matrix: tn, fp, fn, tp:\', 126, 36, 26, 66)\n\nLet delta = -0.10\nThe evaluation metrics on the test set (X_test):\n\naccuracy_score (about 0.74)\nconfusion_matrix (\'tn, fp, fn, tp:\', 111, 51, 16, 76) <= reduced from 21 when delta=0\nsensitivity or true positive rate (tpr) (about 0.83) <= increased\nspecificity or ture negative rate (tnr) (about 0.67) <= decreased\nclassification report\n\nFinally, we can also plot the probability values for sorted positive tests and their respective triggers, and visualize them graphically.\nFuture work\n\nInvestigate why Weka and Python report differences in the statistical significance with their default parameters.\nExplore if fine tuning RF further improve the accuracy of predictions\n\nReproducing in Jupyter and Databrick notebooks\nAfter reproducing and expanding the case study in Python, I first reproduced it in Jupyter notebook (diabetes.ipynb). The motivation is to get hands-on with Jupyter notebook. In hindsight, it might be natural to explore and develop a data science case study with the notebook first and then transform it into a script. This is because the notebook allows more interactive to and fro modications and micro executions.\nOnce the Jupyter notebook is complete, I move on to Databricks platform [16]. Databricks aims to help users with cloud-based big data processing using Spark. Also, It has a notebook similar in principle to Jupyter. The community edition offers a single node cluster and associated workspace to create and execute multiple notebooks. The cluster springs to life within minutes, and I use Databricks Runtime Version 4.1(includes Apache Spark 2.3.0, Scala 2.11). I see the Databricks notebook over spark cluster as a jumping board to perform data science at scale. So, I transform diabetes.py into a Databricks notebook [17]. Naturally, I need to upload the data (diabetes.data) to the cluster. It turns out to be mostly a copy paste job except with the following (annoying) differences:\n\nWith present version of sklearn (0.18.1) in Databricks cluster, the latest version of SMOTE package does not work. I installed an older compatible version.\nThe plot.show() needs to be followed by display() for the plot to appear.\n\nAfter you sign up to Databrciks (say community edition) and setup a cluster, you may import my notebook with a click of a button [17]. Isn\'t that nice? :-) The only caveat is notebook available for 6 motnhs after publishing. So, I also export it as diabetes_databricks.ipynb so that it remains eternal. It is possible to load Jupyter notebook in Databricks [18], though I haven\'t tried myself. I need to see how can I use pyspark and scala/spark, perhaps in a different sitting.\nConclusions\nPersonally, I feel drawing a visual grid of too many attributes is overwhelming, especially for scatter plot between attributes. I found a correlation matrix much more helpful in quantifying relationships. In this tutorial, we didn\'t address any outliers or performed any feature engineering. One reason that jumps out is that it is highly curated dataset.\nMy thoughts are Weka Explorer and Experimenter are excellent tools to get quick and dirty analysis with algorithms and datasets without writing code. For run time changes and further fine tuning, coding seems necessary.\nReferences\n \n[1] https://machinelearningmastery.com/case-study-predicting-the-onset-of-diabetes-within-five-years-part-1-of-3/\n[2] https://machinelearningmastery.com/start-here/\n[3] https://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\n[4] Lichman, M. (2013). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n[5] https://machinelearningmastery.com/how-to-handle-missing-values-in-machine-learning-data-with-weka/\n[6] https://machinelearningmastery.leadpages.co/leadbox/144d0b573f72a2%3A164f8be4f346dc/5675267779461120/\n[7] https://www.youtube.com/watch?v=w14ha2Fmg6U&t=242s\n[8] https://www.youtube.com/watch?v=ocOlm73HeNs\n[9] https://social.msdn.microsoft.com/Forums/azure/en-US/71d0efe7-4de0-4434-a4a6-5c27af876c1b/smote-consequences-a-question-and-an-alternative?forum=MachineLearning\n[10] https://machinelearningmastery.com/applied-machine-learning-weka-mini-course/\n[11] https://machinelearningmastery.com/machine-learning-in-python-step-by-step/\n[12] https://machinelearningmastery.com/rescaling-data-for-machine-learning-in-python-with-scikit-learn/#comment-425333\n[13] https://machinelearningmastery.com/how-to-tune-algorithm-parameters-with-scikit-learn/\n[14] https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/pdf/procascamc00018-0276.pdf\n[15] https://stackoverflow.com/questions/19984957/scikit-predict-default-threshold\n[16] https://databricks.com/try-databricks\n[17] https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/6710283852221561/2246037980686797/3061735664085706/latest.html\n[18] https://vincentlauzon.com/2018/02/27/import-notebooks-in-databricks/\n\n']",https://github.com/dr-riz,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
"Dublin, Ireland",4,4,4,1,"['Abbot FreeStyle Libre flash glucose meter Parser/Viewer\nObjective\nCreate a library to read and manage TSV files created by the FreeStyle libre app to better understand and visualize the report data\nHow to install\nnpm install\nHow to use the Viewer (user)\nMount a local web-server (for example using node\'s http-server) and browse to the index.html (for example http://127.0.0.1:8080/index.html) to open the main view that lets you import a tsv file generated from the Abbott FreeStyle Libre app (or use the test.tsv example file) and visualize the data in the HighChart chart.\nHow to use the FreeStyleLibreLib (developer)\nvar reader = new FileReader();\nreader.readAsText(file);\nreader.onload = function() {\n    var report = FreeStyleLibreLib.parseReport(reader.result);\n}\nTSV File Format (Tab separated values, like a CSV but with tabs)\nThis is the format of the exported file generated by the Abbot FreeStyle Libre app when running the File->Export Data menu option with the meter connected.\n\nLine 1:\n\nPatient name\n\nthis non-standard tsv line, break standard parsers\n(Is this line optional?)\n\n\n\n\nLine 2:\n\nHeaders\n\nID\nTime (Is YYYY/MM/DD HH:mm the only possible date format?)\nRecord Type\n\n0: Historic Glucose\n1: Scan Glucose\n2: ?\n3: ?\n4: Insulin (Need to read if Rapid-Acting Insulin (units) or Long-Acting Insulin (units) has data to know witch is witch, probably appies to the ""non numeric"" ones too, but is not tested)\n5: Food\n6: Date change (Not implemented)\nIs there anything beyond type 6?\n\n\nHistoric Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nScan Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nNon-numeric Rapid-Acting Insulin\nRapid-Acting Insulin (units)\nNon-numeric Food\nCarbohydrates (grams)\nNon-numeric Long-Acting Insulin\nLong-Acting Insulin (units)\nNotes\nStrip Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nKetone (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nMeal Insulin (units)\nCorrection Insulin (units)\n\nIt seems that this is not used for insulin units\n\n\nUser Change Insulin (units)\n\nIt seems that this is not used for insulin units\n\n\nPrevious Time\n\nFor Record type 6\n\n\nUpdated Time\n\nFor Record type 6\n\n\nAre these all the possible columns?\nCan the columns have another name if the meter or app is set up in other language?\n\n\n\n\nLines > 2\n\nData\n\n\n\nHow it looks\n\n']",https://github.com/nahog,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
beijing,4,31,26,6,['<<<<<<< HEAD\n#diabetes_manage_app\ndiabetes_manage_app\n糖尿病管理系统安卓app\n\n\n\n\n\n\n\nc2b60bbedb1b4c258c2d71cd42b71fa7b5b152c0\n\n\n\n\n\n\n\n'],https://github.com/ZhouBey,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
Germany,8,6,51,97,['\n\n\nOpenDiabetesVault\n'],https://github.com/juehv,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
Kolkata,17,21,17,9,"['Diabetes_Prediction_Software\nThis is Diabetes Prediction Software, using Python. This is a Machine Learning model. Here, I use KNN algorithm.\nYou need to install:\n\npip install pywin32 (for windows)\npip3 install pywin32 (Linux or Mac)\nIf this is not working, then try both pip install pywin32 and pip install pypiwin32\npip install sklearn\npip install pandas\npip install matplotlib\n\nDownload this, and put into a same folder.\nOpen jupyter notebook on this folder.\nThen run the ""Diabetes_Prediction_Software.ipynb"" or diabetes prediction software.py (use any ide for .py)\nEnter values for prediction\nIf you want to watch prediction time, graphs, etc. Then run the “knn.py”\nTry this values:\n148,72,35,0,33.6,0.6277,50 for diabetes\nand try this for non diabetes\n89,66,23,94,28.1,0.167,21\n']",https://github.com/codeingschool,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
"Pokhara, Nepal",62,31,276,1990,"['Disease Predictor\nA web app for heart disease prediction, diabetes prediction and breast cancer prediciton using Machine Learning based on the Kaggle Datasets.\nGetting Started\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\nInstallation\nFollow the instructions to run the system on your local machine :\nFirst, clone the project and\nhttps://github.com/theArjun/disease-predictor.git\n\nInstall the virtual environment.\npip install virtualenv\n\nThen,\nvirtualenv myenv\n\nAfter that, activate the virtual environment\nsource myenv/bin/activate\n\nSubsequently, install the dependencies on your local machine.\npip install -r requirement.txt\n\nFinally, run the application.\npython manage.py runserver\n\nBuilt With\n\nDjango - The web framework used\nPIP - Dependency Management\n\nContributing\nPlease fork this project and send us a pull request.\nAuthors\n\nArjun Adhikari\n\n']",https://github.com/theArjun,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
"Oakland, CA",111,16,94,56,['README\nA simple web app to help calibrate Medtronic MiniMed insulin pumps and CGM sensors.\nDevelopment\n\nnpm i to install development dependencies\nnpm run start to start a development server\nnpm run build to create a production ready build located in the build folder\n\n'],https://github.com/ryanwiemer,"['1', 'JavaScript', 'Updated Mar 3, 2017', '1', 'R', 'MIT license', 'Updated Jan 22, 2020', '5', 'Python', 'Updated May 7, 2019', 'Jupyter Notebook', 'Updated Jul 20, 2018', 'CLIPS', 'GPL-3.0 license', 'Updated Apr 12, 2017', '8', 'Updated Mar 10, 2015', '6', 'CSS', 'MIT license', 'Updated Jul 22, 2019', '3', 'Python', 'MIT license', 'Updated Oct 23, 2020', '4', 'R', 'Updated Jul 23, 2018', '4', 'JavaScript', 'Updated May 1, 2018']"
Montreal,30,27,41,235,"[""FreshPulse\nBuilt by @edumonteiro, @fantasticjimmy, @prateeksan\n\nFreshPulse is an app built to make life a little easier for diabetes patients. It offers an interactive and robust way to record meals, medications and medical readings. Furthermore, it uses this data to monitor BMI and nutritional intakes, make dietary recommendations and generate reports which may be equally useful for the patient and his or her doctor.\n\nTech-Stack\n\nServer-Side: Ruby -v 2.2.3, Sinatra (Sinatra-Contrib, Sintra-ActiveRecord, Sintra-Partial), Rake, ActiveSupport, Faker, Prawn, Puma, Tux, Google Charts.\nClient-Side: HTML/CSS, Normalize CSS, Bootstrap, Font-Awesome, Javascript, JQuery, ChartJS, ClassieJS\n\nDemo\nImportant Note: FreshPulse's current deployment is for demonstration purposes only. Please do not use this site for any other purposes. It has not been built or verified by medical professionals and none of its content should be treated as a credible source of information or advice. If you visit our site to test it's features, please keep the aforementioned in mind and treat it as nothing more than an experimental model.\nClick Here  to visit the site.\n\nUsername: test0\nPassword: 1234\n\nFeatures\nFollowing are a few of FreshPulse's nifty features:\n\nMaintain an up-to-date profile with medical history and other important details.\nTrack all meals and medications with a robust entry logging system.\nRecord blood pressure and blood sugar levels daily.\nAccess automatically generated analytics and interactive reports based on previous entries.\nReceive daily nutritional recommendations based on BMI calculations, recent meals and other relevant factors.\nAll this and more in a clean and compact user-interface!\n\nScreenshots\nLog In Screen\nUser authentication and encryption architecture built using BCrypt. The app maintains sessions for previously authenticated users.\n\nSign Up Page\nForm fields contain server-side validations to ensure all important information is submitted in proper format.\n\nDashboard\nThe user's personalized dashboard is accessible upon login. It links to all other components of the app and displays important information about daily nutritional intake, BMI measurements, and dietary recommendations.\n\nMeal Reports\nA breakdown of daily nutritional intake along with a list of all foods consumed per day and the total calorific consumption.\n\nNew Entry Forms\nForms for recording meals, medications, blood pressure readings, and blood sugar level readings. The form displayed below is for recording medications. FreshPulse comes loaded with a database of every single medicine legally registered in Canada as of February 2016, along with its Drug Identification Number. This database is integrated with the autocomplete feature of the input field for new medicines. The Drug Identification Number is updated automatically and can be shown to a doctor or pharmacist for precise drug identification (A similar database is also integrated for food items and their estimated nutritional value).\n\nEntry Logs\nAutomatically generated logs for all recorded meals, medications and readings in the user's recent history. All logs are categorized by date and ordered by time of consumption/reading. A user can edit previous entries recorded in the logs.\n\nReadings Report\nA patient-friendly and doctor-friendly report containing the user's blood pressure readings, blood sugar levels and weight readings in interactive graphs. This page also contains other important analytics computed by the app including the average, highest and lowest readings for each of the aforementioned parameters.\n\n""]",https://github.com/prateeksan,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
"Pune, India",29,37,437,155,"['Diabetes Prediction\n\nOnset of diabetes binary classification.\n\nPartial implementation of MLP as described in this paper.\nDataset - pima-indians-diabetes\nMultilayer perceptron neural network with 8 inputs in the visible layer, 32 and 16 neurons in the 2 hidden layer with ReLu activation function and 1 neuron in the output layer with sigmoid activation function.\nNetwork trained for 700 epochs with batch size of 10 using ADAM optimizer and binary_crossentropy loss function.\nAttribute Information:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\n']",https://github.com/nirajpandkar,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"Warsaw, Poland",6,3,9,90,"['Diabetes Diagnosis and Classification using Machine Learning ( Neural Networks )\nTech: Paul Walczak, Konrad Sobolewski\nMed: Doctor Agata Walczak-Bogatek\n\n']",https://github.com/WalczakPaulo,"['3', 'Python', 'Updated Jan 14, 2018', '7', 'Python', 'Updated Aug 2, 2020', '1', 'Python', 'Updated Dec 2, 2014', 'C#', 'GPL-3.0 license', 'Updated Jun 7, 2017', 'JavaScript', 'Updated Oct 30, 2020', '5', 'Jupyter Notebook', 'Updated Jun 27, 2019', '5', 'Python', 'Updated May 23, 2017', 'CSS', 'Updated Aug 14, 2020', 'Jupyter Notebook', 'Updated Jun 27, 2019', '1', 'Jupyter Notebook', 'Updated Oct 7, 2020']"
fuzhou,17,10,47,0,"['DiabetesArithmetic_version3.0\nThis resource includes the use of a variety of machine learning methods (KNN,  DecisionTree, random forest, logistic regression, support vector machine , etc.) to predict diabetes\n']",https://github.com/hanlaoshi,"['Jupyter Notebook', 'Updated Feb 5, 2018', '1', 'Updated Aug 11, 2020', '6', 'Python', 'MIT license', 'Updated Aug 11, 2018', 'Jupyter Notebook', 'Updated Sep 15, 2019', 'Jupyter Notebook', 'Updated Nov 16, 2016', '2', 'Python', 'Updated Jun 11, 2018', '3', 'Jupyter Notebook', 'Updated Jul 24, 2018', '2', 'MIT license', 'Updated Nov 25, 2018', '2', 'R', 'Updated May 3, 2019', '3', 'Jupyter Notebook', 'Updated Oct 4, 2019']"
sector 35 b chandighar,7,6,45,77,['pima-diabetes-prediction-using-tensflow\n'],https://github.com/adilshagoo87,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
VIT Vellore,10,5,192,105,"['FeCare\nWith an intention of Fekar (care in Hindi) towards the health of Indian women.\nWeb App link\nTo view demo scroll to the end\nResearchers have identified a bunch of districts in India that have a maximum prevalence of diabetes among women. At least 50 of the 640 districts studied have a high prevalence of diabetes — greater than one in every 10 among women.\nAnd hence, FeCare classifier model aims to detect diabetes in Indian women. The clasifier was trained using Pima Indians Diabetes Dataset\nDataset info:\nThe dataset consists of several medical predictor variables and one target variable, Outcome. Predictor variables include:\n\nNumber of times pregnant\nPlasma glucose concentration, 2 hours in an oral glucose tolerance test (not included in training)\nDiastolic blood pressure (mm Hg)\nTriceps skinfold thickness (mm)\n2-Hour serum insulin (mu U/ml) (not included in training)\nBody mass index\nDiabetes pedigree function\nAge (years)\n\nAs you can notice that two variables were not included in the training process, this was due to the reason that the Glucose Tolerance Test (GTG) can give very inaccurate results when conducted at home using a blood sugar measuring device. And same is the case for finding the reading of 2-Hour serum Insulin.\nAs this project aims to provide regular Diabetes check-up for all women(above the age of 20 years) irrespective of their work engagement(house-wives and working women), it is not possible in all cases that user will have the required tools, skills, and experience to execute the required test at home. And hence the above features were eliminated from the training process.\nRequirements:\n\nThe user should know her general information(Age, Height, Weight, and Pregnancies)\nTo know the reading of Diastolic Blood Pressure, the user should have a Blood Pressure monitor like this which costs less than 100$\n\n\n\nTo know the Tricep Skinfold Thickness value, the user should have a Skinfold Caliper and take the reading in the following manner:\n\n\nThe cost of Skinfold Caliper is less than 4$\n\n\nIf the user do not know her Diabetes Pedigree Function, then it can be calculated on the web application using the following:\n\n\n\nReference\nThe user can input relative’s details(as much she knows) in the web-application, and Diabetes Pedigree Function will be calculated.\nNote that the value of the DPF increases as the number of relatives who developed DM increases, as the age at which those relatives developed DM decreases, and as the percentage of genes that they share with the subject increases. Also notice that the value of the DPF decreases as the number of relatives who never developed DM increases, as their ages at their last examinain increase, and as the percent of genes that they share with the subject increases.\nSteps for pre-processing data and training classifier:\n\nThe data has a very less number of 1s in Output(cases with positive diabetes), and hence this can affect the classifier’s accuracy to differentiate with 1s and 0s.\n\nDue to this reason, almost equal amount of data for 1s and 0s were taken in the training set(for which the data was divided into two parts on the same basis and then segregated for training data)\n\n\nNow the two data frames(with 1s and 0s) were concatenated so that they can be accessed easily\n\n\nFixing missing values(zeros in all other variables except ‘Pregnancies’):\n\n\nMissing values in  ‘Glucose’ =5 \nMissing values in  ‘BloodPressure’ =35 \nMissing values in  ‘SkinThickness’ =227 \nMissing values in  ‘Insulin’ =374 \nMissing values in  ‘BMI’ =11 \nMissing values in  ‘DiabetesPedigreeFunction’ =0 \nMissing values in  ‘Age’ =0\nThese values were fixed using the following algorithm:\nLet’s say a data frame has 3 variables as shown below:\n\nThe missing value is 1st value in Var1, now the 1st values of Var2 and Var3 are noted, which are 500 and 0.35 respectively. Now we try to find similar values (500, 0.35) in Var2 and Var3. Which in this case are 3rd value in Var2 and 0th value in Var3. The missing value is then replaced by the average of Var1 values at these positions(3rd and 0th). In this case: (89+81)/2 = 85= Var1(1)\nCode:\n\nThe above algorithm is used to fix missing values in the following way:\n\n\nGlucose values from similar Age and Outcome values (fix_miss_value(data, ""Glucose"", [""Age"", ""Outcome""])\n\n\nBloodPressure values from similar Age and Glucose values\n\n\nBMI values from similar Age, BloodPressure and Glucose values\n\n\nSkinThickness values from similar Age, Outcome, Glucose, BMI values\nThe rest variables used in training(Age and DiabetesPedigreeFunction) had no missing values.\n\n\nScaling us the DiabetesPedigreeFunction values:\nThese values were less than ‘1’ while the other values were greater than 1. And hence these values were multiplied by ‘100’.\n\n\nSplitting data into Training and Testing set:\n\nFor Training data, 300 entries with ‘0’ Outcome and 250 values with ‘1’ Outcome were taken. This collectively was 71% of the total data. Now the training data was ready.\nThe remaining 29% of data was further split into the 13% testing and 13% validation dataset.\n\n\n\nNeural Network Definition(model_architecture.py):\nNetwork(\n(fc1): Linear(in_features=6, out_features=40, bias=True)\n(fc2): Linear(in_features=40, out_features=81, bias=True)\n(fc3): Linear(in_features=81, out_features=36, bias=True)\n(fc4): Linear(in_features=36, out_features=19, bias=True)\n(out): Linear(in_features=19, out_features=2, bias=True)\n)\nThe training data was passed to the above Network and was trained for 1250 epochs. The best Trained Network which had the least validation loss was saved and was further used to made predictions on test data. The training accuracy given by the best model was 96.36% and the test accuracy was 85% (FeCare.ipynb)\nThe pickle file(\'FeCare.pkl\') of this best-trained model was saved and was further used to make predictions in the web-application.\n\n\nWeb-Application(app.py):\n\nGeneral Instructions to user for providing required inputs.\nA “Know” button for user to know how she can measure the Tricep Skinfold Thickness\nTaking the required inputs(except Diabetes Pedigree Function)\nInformation about what Diabetes Pedigree Function and how we can calculate that.\nTaking input of Diaetes Pedigree Function if user already knows, else taking inputs of the relatives information for calculating diabetes pedigree function\nA “Submit Info” button when the user is done inputting all the required information for calculating Diabetes Pedigree Function.\nAnd finally the “Results” button which will display weather the user has diabetes or not. If the user is found diabetic, the user is adviced to do Glucose - Tolerence Test(as next prefrence) at the nearest laboratory to confirm results.\n\n\nDemo(when Diabetes Pedigree Function is unknown)\n\n\n\nDemo(when Diabetes Pedigree Function is known)\n\n']",https://github.com/Rushanksavant,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
"Poland, Kraków",38,77,252,1055,"[' \n\n\n\n\n \n\n\nDiaBeFriend\nSimple android application that is dedicated to help you handle your diabetes\nDiaBeFriend is not currently available on Google Play Store, but you can download it from the link below:\nhttps://1drv.ms/u/s!AhhUCOE2-Bg2-W_YY03_FiCEAkjb\nFeatures provided by the app:\n\nYou can use offline database with nutritional data like: kilocalories, carbohydrates, fat and proteins.\nJust provide app with product name (you may choose product name from the list of about 7000 products) and its weight\n\n\n\n\n\nI am diabetic myself and for me it is crucial to be reminded about the necessity of measurement after meal.\nTherefore you are welcomed to use the measurement feature. You can enter how many carbohydrates there is in your meal,\nhow many insulin units you gave yourself and sugar level before the meal. You will be reminded about testing sugar level after 2 hours.\nThen your whole measurement will be summarized, which will help you keep your diary.\n\n\n\n\nSummary examples:\n\n\n\n\n\n\nTimer:\n\n\n\nProgress bar can be seen after a little while:\n\n\n\nInformation about dosage:\n\n\n\n']",https://github.com/jakubowiczish,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
India,10,14,97,1584,"['Diabetes Prediction using Machine Learning.\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features like Number of Pregnancies, Insulin Level, Age, BMI.The data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not.""\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displyed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\n\nRUN\n\nExecute the command: python app.py\n\nBug Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nowner\nSarvesh Kumar Sharma\nLICENSE\n-GNU GENERAL PUBLIC LICENSE Version 3\n']",https://github.com/shsarv,"['2', 'R', 'MIT license', 'Updated Jul 9, 2018', '2', 'Java', 'GPL-3.0 license', 'Updated Jan 31, 2019', '2', 'Jupyter Notebook', 'Updated Jan 24, 2020', '2', 'Jupyter Notebook', 'Updated Sep 14, 2020', '2', 'JavaScript', 'MIT license', 'Updated Apr 20, 2015', '2', 'Jupyter Notebook', 'Updated Dec 27, 2019', '2', 'HTML', 'GPL-3.0 license', 'Updated Sep 17, 2020', '2', 'Java', 'GPL-2.0 license', 'Updated Oct 19, 2020', 'Updated Apr 30, 2018', 'Updated Mar 1, 2018']"
"Denver, Colorado",10,14,97,6,"['diabetes\nA test case illustrating the use of Spark on real-time IoT data.\nchallenge\nThe standard of care for Type 2 Diabetes includes monitoring average blood insulin level over three months.  New advances in medicine and data engineering allow for granular monitoring and care recommendations.  Our challenge is to ingest data from personal health monitors, securely transmit that data to the cloud, apply data science analysis, and display current status to the patient and care givers.\nsolution\nThe first prototype uses Python code on a Raspberry Pi to generate mock patient data streams, simulating an OEM diabetes monitor. We ingest JSON data as MQTT packets into Amazon AWS IoT. Subsequent iterations used a direct connection to Kafka running on an EC2 instance which allows us to ingest streams from multiple patients, maintain fault tolerance, and enable multiple consumers to subscribe. Kinesis was also tested as an alternative to Kafka.\nFrom Kafka, Kinesis, or AWS IoT, the next step is to subscribe to topics and ingest the data into longer term storage in S3. A small Spark 2.1 cluster running on EC2 instances is used for this purpose.  We wrote code for Spark in Scala which reads JSON streams from a Kafka topic, transforming and joining the data into normalized formats, then writing out the stream to Parquet files on S3 that are partitioned by time and patientID.\nFor analysis and display of the patient condition, the Parquet files are analyzed in Databricks Notebooks running Spark 2.2. The notebooks use regression and classification algorithms to score the current status of the patient and prioritize patients for home care visits.\n']",https://github.com/brantseibert,"['NetLogo', 'Updated Jul 15, 2015', 'CSS', 'Updated Nov 6, 2014', 'PHP', 'Updated Jun 29, 2014', 'Java', 'Updated Apr 18, 2017', 'Updated Jan 29, 2018', 'Objective-C', 'Updated May 27, 2017', 'Updated Jan 3, 2018', 'Updated Mar 27, 2017', 'Updated Nov 10, 2017', 'Swift', 'Updated Dec 14, 2016']"
"Chicago, IL",204,146,220,555,['diabetes\nResearch Files for NSHAP Diabetes Project\n'],https://github.com/fgregg,"['R', 'Updated Apr 11, 2016', 'CSS', 'Updated Feb 14, 2015', 'Java', 'Updated Sep 28, 2015', 'Ruby', 'Updated Oct 1, 2013', 'CSS', 'Updated Sep 19, 2014', 'CSS', 'BSD-3-Clause license', 'Updated Sep 29, 2014', 'R', 'Updated Sep 14, 2012', 'Updated Dec 18, 2018', 'Jupyter Notebook', 'Updated Dec 7, 2018', 'R', 'Updated Feb 3, 2018']"
"kathmandu,Nepal",0,1,0,3,['Diabetes-prediction\nDiabetes prediction from pima indian diabetes database\n'],https://github.com/Basantakatuwal,"['1', 'HTML', 'Updated May 17, 2020', 'HTML', 'Updated Aug 18, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Swift', 'Updated Aug 10, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Jan 28, 2020', '3', 'Python', 'Updated Aug 7, 2020', 'Java', 'Updated Feb 16, 2016', 'R', 'Updated Jun 24, 2018']"
delhi,3,4,0,20,"['diabetes\nlogistic reg model\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\ndata = pd.read_csv(\'diabetes2.csv\', header = 0)\nprint(data.head(5))\nprint(data.tail(5))\ndata.info()\ndata.corr()\nY=data[\'Outcome\']\nX=data.drop(\'Outcome\',axis=1)\nX = pd.get_dummies(X, drop_first = True)\nX.head()\nsns.pairplot(data,kind=\'reg\')\nplt.show()\nsns.heatmap(data.corr())\nplt.show()\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7 , test_size=0.3, random_state=10)\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(solver = \'liblinear\', class_weight=""balanced"")\nlog_reg.fit(X_train,y_train)\ny_pred = log_reg.predict(X_test)\nprint(y_pred)\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score, roc_curve, auc, roc_auc_score,confusion_matrix,classification_report\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(\'Accuracy is  :\' ,accuracy)\nprint(\'Precision is  :\',precision)\nprint(\'Recall is  :\',recall)\nprint(\'Roc Auc is  :\',roc_auc)\nprint(\'Confusion Matrix is  :\\n\',cm)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nplt.plot(false_positive_rate, true_positive_rate)\nplt.plot([0,1],[0,1],\'y--\')\n#plt.xlim([0,1])\n#plt.ylim([0,1])\nplt.title(\'Receiver Operating Characteristic\')\nplt.ylabel(\'True Positive Rate(Sensitivity)\')\nplt.xlabel(\'False Positive Rate(1-Specificity)\')\nplt.show()\nprint(""Area under the curve: "",round(auc(false_positive_rate, true_positive_rate),3))\n']",https://github.com/Pallavi7597,"['Updated Nov 7, 2019', 'Updated Nov 24, 2019', 'Updated Dec 29, 2019', 'Updated Mar 8, 2020', 'Jupyter Notebook', 'Updated Jun 23, 2020', 'Jupyter Notebook', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 2, 2020', 'Jupyter Notebook', 'Updated Mar 17, 2020', 'TypeScript', 'Updated Sep 28, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020']"
beijing,4,31,26,6,['<<<<<<< HEAD\n#diabetes_manage\ndiabetes_manage_server\n糖尿病管理系统服务端\n\n\n\n\n\n\n\nc1884651ed7e3cb4d246f51426e026ec3c9c8cce\n\n\n\n\n\n\n\n'],https://github.com/ZhouBey,"['Updated Jul 29, 2020', 'Jupyter Notebook', 'Updated May 22, 2020', 'Jupyter Notebook', 'Updated Aug 13, 2020', 'HTML', 'Updated Oct 24, 2020', 'Python', 'Updated Oct 24, 2020', '4', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Java', 'Updated Mar 30, 2016', '2', 'Jupyter Notebook', 'Updated Jun 21, 2020', '2', 'Jupyter Notebook', 'Updated Oct 27, 2020', '2', 'MATLAB', 'Updated Jul 15, 2016']"
127.0.0.1,29,297,2000,444,"['Diabetes\n🍭 Data Mining in Python, R and Weka\n\nAttributes\n\n\nNumber of times pregnant\n\n\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n\nDiastolic blood pressure ( Mm Hg )\n\n\nTriceps skin fold thickness ( Mm )\n\n\n2-Hour serum insulin ( Mu U / Ml )\n\n\nBody mass index ( Weight in kg / ( Height in m ) ^ 2 )\n\n\nDiabetes pedigree function\n\n\nAge ( Years )\n\n\n']",https://github.com/Sphinxs,"['MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018', 'Updated Apr 7, 2018']"
"Wales, UK",826,2,57,2526,"['dboard\nA dashboard for Type 1 Diabetes.\nVisualize your historical blood glucose levels in a calendar-like view, with weekly summaries\nof a few key metrics.\nGenerated from data stored in Nightscout.\n\nUsage\nInstall Python dependencies:\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\nExport data from Nightscout\nmongoexport -h <host> -d <database> -u <user> -p <password> \\\n  -c entries \\\n  --fields type,sgv,mbg,date,dateString \\\n  --type csv \\\n  -o /tmp/entries.csv\nPublish locally\n./dboard.py --bg_lower 3.9 --bg_upper 8 /tmp/entries.csv out\npython3 -m http.server 8000\nThen open http://localhost:8000/out in a browser.\nAlternatively, publish to Google Cloud to keep a permanent record\nexport GOOGLE_APPLICATION_CREDENTIALS=... # see https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\n./dboard.py --bg_lower 3.9 --bg_upper 8 /tmp/entries.csv gs://<bucket>\nThen open https://storage.googleapis.com/<bucket>/index.html in a browser.\nHow it works\nThere is a single web page, index.html, that has a small amount of JavaScript (no libraries)\nto load data from a metadata file, index.json and display the images for each day.\nHere\'s a snippet of index.json:\n[\n    {\n        ""week_start"": ""03/09/2018"",\n        ""plots"": [\n            ""2018/09/03/plot.png"",\n            ""2018/09/04/plot.png"",\n            ""2018/09/05/plot.png"",\n            ""2018/09/06/plot.png"",\n            ""2018/09/07/plot.png"",\n            ""2018/09/08/plot.png"",\n            ""2018/09/09/plot.png""\n        ],\n        ""range_low"": 3.9,\n        ""range_high"": 8.0,\n        ""tir"": ""81.0%"",\n        ""average_bg"": ""6.7"",\n        ""est_hba1c"": ""40.1""\n    },\n    {\n        ""week_start"": ""10/09/2018"",\n        ""plots"": [\n            ""2018/09/10/plot.png"",\n            ""2018/09/11/plot.png"",\n            ""2018/09/12/plot.png"",\n            ""2018/09/13/plot.png"",\n            ""2018/09/14/plot.png"",\n            ""2018/09/15/plot.png"",\n            ""2018/09/16/plot.png""\n        ],\n        ""range_low"": 3.9,\n        ""range_high"": 8.0,\n        ""tir"": ""80.3%"",\n        ""average_bg"": ""6.2"",\n        ""est_hba1c"": ""37.0""\n    }\n]\nThe plots element contains paths to the images for each day in the week.\nThe JSON and PNG files are generated by the dboard Python package.\nThe traces library is used to interpolate\nBG values to every minute; this ensures that accurate statistics can be produced from the data\n(Time In Range, Average, Estimated HbA1c). For plotting,  Matplotlib is used to render\neach daily plot.\nReports\nThere are a few other reports (daily carbs, insulin) that are produced separately.\nmkdir -p reports\n./dboard.py /tmp/treatments.csv reports\nThen look in the reports directory.\nTesting\npytest\nCoverage\npip install pytest-cov\npytest --cov-report html --cov=dboard\nopen htmlcov/index.html\n']",https://github.com/tomwhite,"['1', 'Jupyter Notebook', 'Updated Oct 5, 2020', 'NetLogo', 'Updated Nov 11, 2020', 'Updated Nov 18, 2020', '2', 'R', 'Updated Nov 13, 2020', 'JavaScript', 'Updated Feb 2, 2017', 'Updated Nov 12, 2019', '2', 'Python', 'Apache-2.0 license', 'Updated Dec 31, 2018', '2', 'Jupyter Notebook', 'Updated Sep 27, 2019', 'JavaScript', 'Updated Mar 4, 2019', 'Java', 'Updated Jul 11, 2016']"
Paris,826,2,57,22,"['Diabetes\nThe data was collected and made available by “National Institute of Diabetes and Digestive and Kidney Diseases” as part of the Pima Indians Diabetes Database. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here belong to the Pima Indian heritage (subgroup of Native Americans), and are females of ages 21 and above.\nFirst of all, download and read the data from the CSV file and manipulate it as desired.\n']",https://github.com/jose3g,"['Jupyter Notebook', 'Apache-2.0 license', 'Updated May 15, 2020', 'Jupyter Notebook', 'Updated Jul 8, 2020', 'Python', 'GPL-3.0 license', 'Updated Jul 14, 2020', 'Python', 'Updated Jul 21, 2020', '1', 'Jupyter Notebook', 'Updated Jul 7, 2020', '1', 'Java', 'Updated Dec 11, 2019', 'Updated Apr 9, 2020', 'Updated Mar 26, 2020', 'Python', 'MIT license', 'Updated Apr 19, 2020', 'Jupyter Notebook', 'Updated Aug 12, 2020']"
Hamburg/ Germany ,1,1,1,13,['DiabetesRecords\nAndroid Project for Diabetes Patients\n'],https://github.com/viswesvar,"['Jupyter Notebook', 'Updated May 6, 2020', 'Jupyter Notebook', 'Updated Sep 14, 2020', 'Python', 'Updated Nov 25, 2020', 'HTML', 'Updated Feb 29, 2016', 'Java', 'Updated Jun 17, 2016', 'Java', 'Updated Aug 5, 2017', 'Java', 'Updated May 19, 2017', '1', 'Jupyter Notebook', 'Updated Apr 25, 2017', 'Python', 'Updated Jul 27, 2018', 'R', 'Updated Jul 24, 2018']"
"Charlotte, NC",0,0,2,0,"['DiabetesDiagnosis\nPredicted whether a patient has diabetes and found out the common symptoms for providing accurate analysis.\nUsed ggplot2 and lattice libraries to create customized charts and mice library for data imputation in R.\nPerformed classification algorithms like Decision Tree, Neural Networks, KNN on model achieving 70% overall\naccuracy.\nUsed CRISP-DM methodology for structured approach and Tableau for creating Dashboards and statistical analysis.\n']",https://github.com/rachitchoksi,"['Updated Dec 5, 2017', '1', 'JavaScript', 'MIT license', 'Updated May 14, 2018', 'JavaScript', 'Updated Jan 22, 2018', 'R', 'Updated Sep 6, 2018', 'R', 'Updated Oct 9, 2019', 'Java', 'MIT license', 'Updated May 3, 2018', 'R', 'Updated Jun 14, 2018', 'Jupyter Notebook', 'Updated Sep 22, 2018', 'Python', 'Updated Dec 16, 2018', 'TypeScript', 'Updated Apr 26, 2019']"
"Nairobi , Kenya",10,4,2,247,"['Diabetes Prediction using Logistic regression and Scikit-Learn\nFirst we will have to import the necessary modules\nYou can use either Anaconda, Jupyter notebook or Vs code to write your code\nWe’ll be using Python and some of its popular data science related packages. First of all, we will import pandas to read our data from a CSV file and manipulate it for further use. We will also use numpy to convert out data into a format suitable to feed our classification model. We’ll use seaborn and matplotlib for visualizations. We will then import Logistic Regression algorithm from sklearn. This algorithm will help us build our classification model. Lastly, we will use joblib available in sklearn to save our model for future use.\nYou can install the necessary dependencies using pip\npip3 install matplotib\npip3 install seaborn\npip3 install scikit-learn\npip3 install joblib ##for storage of data for future use\npip3 install pandas\n']",https://github.com/oyugirachel,"['Java', 'Updated Mar 21, 2019', 'R', 'Updated Jan 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'C#', 'Updated Apr 16, 2020', 'Jupyter Notebook', 'Updated Jun 13, 2020', 'Objective-C', 'Updated Sep 28, 2020', 'Python', 'Updated Nov 8, 2020', '1', 'Python', 'Updated Nov 19, 2020', 'Java', 'Updated Jun 15, 2020', 'Python', 'Updated May 14, 2017']"
Curitiba Paraná,19,44,227,1124,"['DiabetesApp\nFor running this project you will need to put your Google Vision api key inside gradle.properties\nVisionApiKey = ""<your api key>""\n\n']",https://github.com/FilipeLipan,"['Updated Oct 26, 2016', 'Java', 'Updated Nov 25, 2016', 'Java', 'Updated Apr 14, 2016', 'Java', 'Updated Mar 14, 2016', 'Python', 'Apache-2.0 license', 'Updated Aug 14, 2016', 'TypeScript', 'Updated Nov 1, 2017', 'Java', 'Updated Aug 4, 2018', 'HTML', 'MIT license', 'Updated Jul 16, 2019', 'Jupyter Notebook', 'Updated Dec 5, 2019', 'Jupyter Notebook', 'Updated Feb 26, 2020']"
istanbul,8,9,25,49,"[""DiabetesTracker\nProject Description\nDiabetes is a diseas that widespread in today's world. Because of there is no permanent cure for it, people with diabetes should learn how to live their lives and struggle with the difficulties they will face on their own. In other words, they are all alone on it. Our main purposes on that project are give informations to patients about what they need to do according to their test results and Body Mass Index (BMI), create an opportunity of taking ideas from experts on subject. Users must add their personal details such as their ages and weights, medicines they use or details on previous illnesses if they had etc. While registering. Storing this kind of information will help for improve any further website activities. The system also have doctors and fitness instructors which are experts on their areas as user beside diabetic patients. It is expected that users can be able to ask questions to experts on topics that they are curious about. The system will provide exercise plans, eating schedules and also charts about their conditions that changing daily, weekly and monthly based on patients' blood glucose level which updated daily by them. It is demanded from system that create a base which users can contact with others who at same level of disease and mutually help each other basis on their own experiences.\nSpecific Requirements\nFunctional requirement 1.1\nTitle: Sign Up\n\n1.1. System shall provide register page for users.\n1.2. System must provide three login options to obtain account type.\n1.3. System must redirect user to another page according to chosen account type.\n1.4. System shall show a message that says users should upload document which can confirm account type to all users.\n1.5. System shall send user's information to system administration automatically.\n1.6. System will provide text boxes according to chosen account type.\n1.7. System must save name, surname, password, e-mail, phone number, birth date, gender, height, weight, profile picture and short CV.\n1.8. System shall contain document upload button.\n1.9. The confirmation document can be Dietician report for diabetes or expert report from an institution.\n1.10. System must warn users if there is any empty box.\n\n2 Functional requirement 1.2\nTitle: Sign In\n\n2.1. System will show two text boxes.\n2.2. System must check validity of given information and automatically send to home page.\n2.3. System must show warning if given information is wrong.\n\n3 Functional requirement 1.3\nTitle:Account Recovery\n\n3.1. System will show a text box.\n3.2. System must check validity of e-mail address.\n3.3. System shall send mail that contain recovery link to given e-mail address.\n3.4. System must show warning if given e-mail address is wrong.\n3.5. System must redirect users to password changing page that contains two text boxes. 3.6. System will accept password change if two written password equals.\n\n4 Functional requirement 1.4\nTitle: Adding New Contacts\n\n4.1 System must provide a button for adding a user when user see an overview of profile.\n4.2. If user click that button system must send a friend request to that user. Show notification on requested profile.\n4.2.1. If other user accepts the friend request users automatically added their contact lists.\n4.2.2 If other user rejects the friend request, friend request must be deleted.\n\n5 Functional requirement 1.5\nTitle: Send Message\n\n5.1 System should provide a list of text boxes to obtain users in the system.\n5.2 System must provide a text box and a send button. Each user should be able to send instant message to any contact on users’ contact list.\n5.3 System will provide a message box that will display an error when trying to send a message that has more than 400 characters.\n5.4 System will provide a text box to display the message when the send message button is pressed.\n\n6 Functional requirement 1.6\nTitle: Show Message\n\n6.1 The system should provide a list of incoming messages alongside the message box.\n6.2 The system should provide a text box showing the user name of the sender of the message and a short preview of the incoming message to the list showing the new incoming messages.\n6.3 When the system clicks on the incoming message, it will redirect to the message sending page and provide a list of text boxes to display incoming and outgoing messages.\n6.4 The system should provide text boxes with the date and time that they are sent alongside the text boxes where the messages are located.\n\n7 Functional requirement 1.7\nTitle: Show Notification\n\n7.1. The system must alert user if they are online by pop-ups when there is notification.\n7.2. The system should provide notification box on the menu where users can view their recent notifications up to date.\n7.3. The system must send notifications when users' daily and weekly posted. 7.4. The system should allow users to clear their notification list.\n\n8 Functional requirement 1.8\nTitle: Search Dieticians and Fitness Coaches\n\n8.1. The system must let user to search Dieticians and fitness coaches in search bar on the menu.\n8.2. The system should display profile pictures, names and surnames and specific profession of the entered search.\n8.3. The system must display error message if there is no matching result.\n\n9 Functional requirement 1.9\nTitle: Show Users' Best Matches\n\n9.1. The system must create a database by given information’s while registering and match the users at same level of disease.\n9.2. The system should display profile pictures, names and surnames and brief factors that cause the matching of users in the best matches menu.\n9.3. The system must display accounts by relevance order.\n9.4. The system should allow users to directly contact by putting send message button in that menu.\n9.5. The system must update best matches list weekly according to users' data’s.\n9.6 The only users who has registered as patient must see the best matches. 9.7 Users must see bests matches on their home page.\n\n10 Functional requirement 1.10\nTitle:Add Diet and Exercise List\n\n10.1 System must include a button for adding a Diet and Exercise list. 10.2 System must include text box areas and a save button.\n10.3 System must allow to add and save Diet and Exercise list for the users who registered as Dieticians or fitness coaches.\n10.4 Users shall be able to add additional information’s on Diet and Exercise list. These are type of the diabetes, age range, gender, weight range and height range, using insulin or not.\n10.5 System must save the given additional information and the writer information as a metadata for the Diet and Exercise list.\n\n11 Functional requirement 1.11\nTitle: Match Diet and Exercise List with Users\n\n11.1. System shall be able to compare users’ some information.\n11.1.1 If the users’ insulin usage and type of the diabetes information’s are unknown system must warn the user for a once and until user enter his/her these information’s system does not match for a Diet and Exercise list.\n11.1.2 System must compare gender, age, body mass index, type of diabetes and insulin usage information between user and Diet and Exercise lists and save it ones a day if the user online at that day.\n\n12 Functional requirement 1.12\nTitle: Show the Diet and Exercise List\n\n12.1 System must include a text area.\n12.1.1 System must show the Diet and Exercise list if the user saved a Diet and Exercise list before.\n12.1.2 System must show a message in that area inform users about this are for the Diet and Exercise list.1\n12.2 System must include a second text area and a button.\n12.2.1 System must show the recommended Diet and Exercise lists when user press that button in that area.\n12.2.2 System must show the writer of the lists below every list. 12.2.3 System must include a save button for every list.\n12.2.4 System must save the lists for that user.\n\n13 Functional requirement 1.13\nTitle: Show Users Diabetes rate\n\n13.1 Users will be entering their blood sugar level according to their measurement on blood sugar meter.\n13.2 The system will be having three levels which are corresponding to low level, normal level, high level.\n13.3 The system will be Showing a warning message for the user when it is low or high.\n\n14 Functional requirement 1.14\nTitle:Entrance for user information\n\n14.1. The system will be containing an add previous diseases section in each users personal pages.\n14.1.1 Users will enter their chronical diseases.\n14.1.2 Users will enter their surgery history if there exists any.\n14.2. The system must provide an area for user to add blood sugar level on home page.\n14.3 The system must provide update button for any blood sugar level, previous diseases and personal information.\n\n15 Functional requirement 1.15\nTitle:Show popular users who are fitness coaches or Dieticians\n\n15.1 System must show popular users who has registered as patient.\n15.2 There will be a rating star button for each fitness coach. Users will rate them.\n15.2.1 There will be a Top list on the right of the page who has the most star.\n\n16 Functional requirement 1.16\nTitle: Categorize\n\n16.1 The system will be having a two different type of diabetes level for users.\n16.1.1Type 1 will be containing the users who are just diagnosed diabetes patients\n16.1.2 Type 2 will be containing the users who are using Insulin\n16.2 The system categorizes users according to their body mass index and their age ranges.\n\n17 Functional requirement 1.17\nTitle: Show Graphical data\n\n17.1 The System will be showing the last 7 days entrance for blood sugar.\n17.2 The system will be calculating the difference for each day by subtracting current blood sugar value from normal blood sugar value the dividing the result with current blood sugar.\n17.3 The system will be having information about sugar level whether it is on the range or not. If it is not in the range, it will show how far from the normal value.\n17.3.1 For each day, If the blood sugar is not in the range, it will be red on the graphic.\n17.3.2 For each day, If the blood sugar is in the range, it will be green on the graphic.\n17.4 The system will be storing these graphics at most one year in its database. There will be a button to show previous graphics.\n\n18 Functional requirement 1.18\nTitle: See Detailed Profile of Contacts\n\n18.1 The system must provide a that user can see their friends detailed information.\n18.2 The user can see all information except users’ private information such as e-mail, phone number, password, confirmation document and messages.\n\n""]",https://github.com/malionde,"['JavaScript', 'Updated Dec 27, 2015', '1', 'Jupyter Notebook', 'Updated Feb 7, 2016', 'Swift', 'Updated Mar 2, 2016', 'Java', 'Updated Jul 28, 2014', 'Java', 'Updated Nov 15, 2017', 'JavaScript', 'Updated Jan 19, 2017', '1', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2018', 'Java', 'Updated Feb 20, 2018', 'Jupyter Notebook', 'Updated Jul 1, 2019', 'MIT license', 'Updated Dec 6, 2018']"
Toronto,0,1,2,60,"['Diabetes Prediction\nPython Flask APIs, Anaconda Environment\nSummary: Data Analytic Application which can predict Diabetes based on various variables\nFramework and Libraries:\n\nFlask\nPanda, Matplotlib, Numpy, Pydot, Decision Tree, Logistic Regression\n\nAlgorithms Model: Decision Tree and Logistic Regression\nDataset for training model:\n\nVariables\n\nMain Screen\n\nData Vizualization\n\n']",https://github.com/kelvintrinh174,"['TSQL', 'Updated Jul 3, 2019', 'Java', 'Updated Jul 11, 2018', 'Python', 'Updated Jan 20, 2020', 'Jupyter Notebook', 'Updated Sep 28, 2019', 'Updated Oct 15, 2019', 'Jupyter Notebook', 'Updated Dec 16, 2019', 'Python', 'Updated Dec 15, 2019', 'Kotlin', 'Updated Jan 3, 2020', 'Updated Dec 19, 2019', 'C#', 'Updated May 12, 2020']"
Mumbai,314,6,12,375,"[""Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://predicting-diabetes.herokuapp.com/\n• If you are searching for Code, Algorithms used and Accuracy of the model.. you won't find it here. Click the link mentioned below for the same:\nLink: https://github.com/anujvyas/Machine-Learning-Projects/tree/master/Diabetes%20Prediction\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n----- Important Note -----\n• If you encounter this webapp as shown in the picture given below, it is occuring just because free dynos for this particular month provided by Heroku have been completely used. You can access the webpage on 1st of the next month.\n• Sorry for the inconvenience.\n\n""]",https://github.com/anujvyas,"['47', 'Python', 'Updated Jul 16, 2018', '330', 'Java', 'GPL-3.0 license', 'Updated Aug 20, 2018', '89', 'C#', 'Updated Oct 7, 2019', '191', 'Jupyter Notebook', 'Updated Mar 22, 2018', '26', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jul 12, 2019', '135', 'Python', 'Updated Oct 4, 2020', '201', 'Makefile', 'MIT license', 'Updated Nov 15, 2020', '65', 'HTML', 'Updated Oct 20, 2020', '18', 'Python', 'Updated Jan 30, 2018', '80', 'Python', 'BSD-3-Clause license', 'Updated Feb 5, 2019']"
San Francisco,244,63,646,91,"[""# set ft=rst :\n-- restructuredtext --\n\nHacking diabetes\n\nFidelity of Care\nCirca 2011\nDespite many novel applications of technology to the\nmedical field, therapies for chronic disease lacks enough\ntransparency and credibility to humanely empower users to\nmanage therapy.\n\nDiabetes Data Bus\nThere's a rising notion of a diabetes data bus.  A system\nwhich integrates data collected from a variety of systems,\nand communicates that data to authorized users.  In\naddition, this infrastructure would support agents from an\nexpert systems presenting analyses and simulations of\nexpected results.\nDiabetics own multiple mobile computers that record\nbiometric data on a regular basis.  This typically\nincludes a menagerie of glucometers, of which I own at\nleast 5, 2 of which are in active rotation at any given\ntime.  I also use an insulin pump, like many diabetics,\nand it keeps logs of insulin given, as well as performs\nopaque simulations on expected results.  In addition,\nthere are ancillary devices that measure interstitial\nglucose levels on a real-time basis, as well as\npedometers, sleep monitors, and the list goes on ad\nnauseum.\nWith so many sources of data critical to managing medical\ntherapy, it is impossible to predict the new sources of\ndata that will arise.  It's also impossible to replace all\nthe existing devices with new devices that are designed to\ncooperate with one another.  However, all existing devices\nhave a serial port with which an authorized agent can\ncommunicate with the device in order to audit therapeutic\ndetails.  Therefore, it's much easier to adapt existing\ndevices into a common framework that knows how to present\ndata to expert systems, knows how to store data over time,\nand knows how to keep the user connected to that data in\nways that allow better decision making.\nDespite all the data currently logged by devices, how much\nof it is leveraged to drive ongoing decisions?  The\nproprietary software offered by medical industry offers\nsnapshots of interesting data from the past, and then asks\nthe user to manually fill in any missing data.  Each\nmanufacturer offers a perspective that their software\nknows everything about managing diabetes, and in so doing\nfails to offer a holistic perspective on therapy.\nInstead, a data bus accepts input from a variety of\nsources, aggregates it with other available sources, and\nmakes it available to the user at any time and any place.\nThe user can choose which applications can subscribe to\ndata, as well as re-route and transform data into those\napplications.  Indivo already provides the container for\naggregating a user's data with customizable schema types.\nCube offers a great presentation engine for arbitrary\ndata.  When the two are tweaked to manage the data from\ndiabetic therapy, we have a diabetic data bus.\n\n\nlog - December's sugars and pump histories as of\n2011 ??\n\n\n\n\nset\n""]",https://github.com/bewest,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
"Kolkata, West Bengal, India",9,14,10,12,['Diabetes predictions application in Python\nThis application is made using sklearn machine learning libraries and pyqt5 for its graphical user interface.\nSupport Vector Machine classifies input data with a 80% accuracy. We have choosen the PIMA indians diabetes dataset from UCI archive.\n\nUSAGE\nFirstly install all dependencies via the following command.\npip3 install -r requirements.txt\nNow train the application in you pc as\npython3 diabetes.py\nFinally run the application :\npython3 gui.py\nNow insert all the requires details.\n'],https://github.com/pritesh-ranjan,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
San Francisco,21,12,151,20,['http://diabetesvis.herokuapp.com/\n'],https://github.com/benrudolph,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
"Saint Louis, MO",40,54,60,132,"['Diabetes Food Database\nFood information for people with diabetes. Visit the website at\nhttps://dfdb.netlify.com/ and search for a food item.\nContributing\nThe infrastructure for this app is there, but the database itself is extremely lacking. Pull\nrequests are welcome! Please look at modifying src/database.json.\nWhen adding a new food, please include the following properties:\n\nname - The name of the food. Will be used for searching. Must be unique, singular (smoothie\ninstead smoothies) and all lowercase (carrot instead of Carrot).\ndisplayName - A prettier name of the food. If the name is sugar, the displayName might be\nSugar (with capitalization).\nalternateNames - An array of names people might also use when searching for this food. Should\nalso be singular and all lowercase.\nlevel - A number from 1 to 5.\n\n1 = Avoid - Diabetic people should stay away from this food.\n2 = Caution - This food can be eaten in moderation or under certain conditions.\n3 = Okay - Neutral. No significant positive or negative health effects.\n4 = Good - Food that is good for a diabetic person to eat.\n5 = Great - Foods at this level are among the healthiest options.\n\n\nexplanation - A reason why this food is or is not healthy.\nsuggestions - Actions to take regarding this food. Alternatives to this food if it is\nunhealthy.\ningredients - An array of items that make up this food. Items in this array must match the\nname of another food in the database.\n\nRunning the application locally for development\nClone the repository and install dependencies\n> git clone https://github.com/travishorn/diabetes-food-database.git\n> cd diabetes-food-database\n> npm install\n\nStart the backend lambda service and serve the client\n> npm run start:lambda\n> npm run start:vue\n\nThe user interface will be available at http://localhost:8080/\nBuilt with\n\nAxios - Querying the database from the client\nFuse - Fuzzy text search\nIcons8 - Icon/favico\nNetlify - Hosting the client and the database API\nPluralize - Helping normalize search queries\nVue - User interface\nwebpack-auto-inject-version - Place version at bottom of client\n\nLicense\nMIT License\nCopyright (c) 2018 Travis Horn\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n']",https://github.com/travishorn,"['6', 'Python', 'Updated Feb 25, 2018', '4', 'JavaScript', 'Updated Oct 20, 2020', '6', 'Jupyter Notebook', 'Updated Apr 22, 2019', '18', 'Kotlin', 'GPL-3.0 license', 'Updated Sep 27, 2020', '13', 'Jupyter Notebook', 'Updated Jul 7, 2019', '37', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '6', 'Jupyter Notebook', 'Updated Sep 27, 2016', '6', 'Vue', 'MIT license', 'Updated Oct 3, 2020', '3', 'Jupyter Notebook', 'MIT license', 'Updated Nov 5, 2019', '28', 'HTML', 'MIT license', 'Updated Nov 13, 2020']"
San Francisco,244,63,646,91,"['Bayer Contour, Contour NextLink\nBoth are USB devices, and require a usb library to access.\nBayer Contour\nlsusb\nBus 002 Device 008: ID 1a79:6002 Bayer Health Care LLC\n\n\nImplemented by\nglucodump.\nIncludes a block storage device.\nAdvertises as an HID device.\nsyslog\nJun  1 11:35:58 paragon kernel: [31023.517052] usb 2-2.2: USB disconnect, device number 6\nJun  1 11:36:53 paragon kernel: [31078.713849] usb 2-2.2: new full-speed USB device number 7 using uhci_hcd\nJun  1 11:36:54 paragon mtp-probe: checking bus 2, device 7: ""/sys/devices/pci0000:00/0000:00:11.0/0000:02:00.0/usb2/2-2/2-2.2""\nJun  1 11:36:54 paragon kernel: [31078.946724] generic-usb 0003:1A79:6002.000E: hiddev0,hidraw2: USB HID v10.10 Device [Bayer HealthCare LLC Contour USB] on usb-0000:02:00.0-2.2/input0\nJun  1 11:36:54 paragon mtp-probe: bus: 2, device: 7 was not an MTP device\n\nusb-devices\nT:  Bus=02 Lev=02 Prnt=03 Port=01 Cnt=02 Dev#=  7 Spd=12  MxCh= 0\nD:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1\nP:  Vendor=1a79 ProdID=6002 Rev=01.00\nS:  Manufacturer=Bayer HealthCare LLC\nS:  Product=Contour USB\nS:  SerialNumber=0000000002902076\nC:  #Ifs= 2 Cfg#= 1 Atr=80 MxPwr=500mA\nI:  If#= 0 Alt= 0 #EPs= 2 Cls=03(HID  ) Sub=00 Prot=02 Driver=usbhid\nI:  If#= 1 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=usb-storage\n\n\nSee [ubuntu_sys_bus_usb.markdown] and [pci_tree.markdown].\n$ find /dev/hid*\n/dev/hidraw0\n/dev/hidraw1\nbewest@paragon:~/src/decoding-bayer$ \n\nNextLink\nDifferent device, no block storage\nSOCAT\nWhat\'s the easiest way to provide socat with an interface to read/write data\nfrom configured USB endpoint?\nHow to configure endpoint in python, connect it to one of:\n\nunix domain socket\ntcp port\nserial device/pty/tty\nloopback example\n\nI had thinking to re-use the\nmail.sh,\nand\nftp.sh examples\n\nhttp://www.tldp.org/LDP/abs/html/ioredirintro.html\nhttp://stackoverflow.com/questions/11030766/one-virtual-serial-port-with-socat\nhttp://stackoverflow.com/questions/2174071/how-to-use-dev-ptmx-for-create-a-virtual-serial-port\nhttp://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES\n\nThe reason I\'d like to do all this is to connect the usb device to a\nserver implementation like this:\n\nhttps://github.com/bewest/insulaudit-ssh-tools\n\nkernel\n\nhttp://www.linux-usb.org/USB-guide/x75.html\nhttp://code.activestate.com/recipes/576834-interrogating-linux-devusbhiddev0-in-python/\nhttps://www.kernel.org/pub/linux//kernel/people/marcelo/linux-2.4/Documentation/usb/hiddev.txt\nhttp://www.linux-usb.org/USB-guide/x194.html\nhttp://www.linux-usb.org/USB-guide/x173.html\nhttp://www.linuxjournal.com/article/6573?page=0,1 - example usbserial device driver\nhttps://www.kernel.org/doc/Documentation/usb/proc_usb_info.txt\nhttps://www.kernel.org/pub/linux//kernel/people/marcelo/linux-2.4/Documentation/usb/hiddev.txt\nhttp://www.linux-usb.org/gadget/usb.c\nhttp://www.linux-usb.org/gadget/\nhttp://www.linux-usb.org/usb.devices.txt\nhttp://www.linuxjournal.com/article/6434?page=0,1 - usb serial drivers explained\n\nBecause the Bayer advertises itself as an HID type, linux fails to hook it up\nto usbserial for the generic serial adapter?\nA simple kernel driver could fix this?\n1359\n']",https://github.com/bewest,"['11', 'Python', 'GPL-3.0 license', 'Updated Jan 28, 2020', '2', 'Updated Apr 20, 2016', '6', 'Kotlin', 'Updated Jun 8, 2016', '3', 'Jupyter Notebook', 'Updated Feb 11, 2016', '6', 'Jupyter Notebook', 'Updated Nov 24, 2019', '4', 'Jupyter Notebook', 'Updated Dec 7, 2016', '17', 'TypeScript', 'Updated Jun 20, 2018', '9', 'Python', 'Updated May 26, 2015', '5', 'Jupyter Notebook', 'Updated Dec 21, 2018', '6', 'Java', 'Updated Nov 21, 2015']"
"Stanford, CA",11,1,17,37,"['Diabetes Classification with Scikit-Learn\n\nThis is an example of a Datmo model which uses a dataset of patient attributes and predicts the likelihood of a patient having diabetes\nYou can take a look at the Dataset details here\nCheck out the Snapshots tab above for information on snapshots that were taken with various parameters. Search and filter them to find the best ones.\nClone this model on your local machine with the Datmo CLI\n$ datmo clone shabazp/diabetes-classification\n\nFirst you can check out all of the snapshots that have already been created by the user. This is equivalent to checking out the snapshots tab on Datmo except without the search and filter capabilities available on the GUI.\n$ datmo snapshot ls \n\nOnce you have viewed all of the existing snapshots, you can start by running an experiment by simply running the code below which runs the fraud detection training code.\n$ datmo task run ""python regression.py""\n\nCreate your first snapshot, by running the following command\n$ datmo snapshot create -m ""my first snapshot""\n\nFor reference, here are few more quick details about what you can find in the repository.\nDockerfile: this is meant to keep track of your environment. For example, this Dockerfile ensures that our environment has all of the requirements needed to run our model. You can manage, edit, and create new enviroments with the datmo env command. Each session you create with datmo will have a default environment associated with it.\n\nThe commands and quick reference above is by no means meant to be comprehensive. Please refer to the CLI documentation for more details on the various Datmo commands to use and file structures present in Datmo.\nHappy Building :)\n']",https://github.com/shabazpatel,"['9', 'TypeScript', 'MIT license', 'Updated Nov 13, 2020', '2', 'Jupyter Notebook', 'Updated Nov 10, 2016', '6', 'Jupyter Notebook', 'Updated Feb 28, 2020', '7', 'CoffeeScript', 'MIT license', 'Updated Jan 11, 2015', 'Jupyter Notebook', 'Updated Jan 30, 2018', '5', 'Updated Jul 2, 2019', '5', 'JavaScript', 'Updated Oct 28, 2020', 'Python', 'Updated Nov 14, 2017', '12', 'C#', 'MIT license', 'Updated Nov 11, 2020', '4', 'Python', 'Updated Feb 19, 2016']"
"Toronto, canada",96,0,0,20,"['Exploratory-Data-Analysis-and-Prediction-on-Diabetes-Dataset-using-R\nThis project first conducts Exploratory Data Analysis (EDA) and data visualization on the  diabetes dataset and then predict the disbetes using machine learning.\nDataset\nDiabetes data can be downloaded from\nhttp://biostat.mc.vanderbilt.edu/wiki/Main/DataSets?CGISESSID=10713f6d891653ddcbb7ddbdd9cffb79\nExploratory Data Analysis (EDA)\n\nDescriptive statistics\n\nattribute type, class distribution, mean, stadard deviation, median, quartile, Skewness, correlation\n\nData visualization\n\nHistogram plot\nDensity plot\nBox and Whisker plot\nBar plot\nMissing data map\nPair-wise correlation plot\nPrediction on Diabetes\nWe compare the performance for the following classifiers:\n\n\nLogistic Regression\n\n\nSupport Vector Machine (SVM)\n\n\nrandom Forest\n\n\n']",https://github.com/Yifeng-He,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
"Nottingham, United Kingdom",33,26,9,457,"['Pima-Indians-Diabetes-DataSet-UCI\nThe test problem we will use in this repository is the Pima Indians Diabetes problem taken from Machine Learning Repository UCI:\nhttps://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\nThis problem is comprised of 768 observations of medical details for Pima indians patents. The records describe instantaneous measurements taken from the patient such as their age, the number of times pregnant and blood workup. All patients are women aged 21 or older. All attributes are numeric, and their units vary from attribute to attribute.\nEach record has a class value that indicates whether the patient suffered an onset of diabetes within 5 years of when the measurements were taken (1) or not (0).\nThis is a standard dataset that has been studied a lot in machine learning literature. A good prediction accuracy is 70%-76%.\nIn this repository, we study this dataset by using K nearest neighbour classification method\n']",https://github.com/LamaHamadeh,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
Italy,109,8,10,763,"[""Introduction\nThe Pima are a group of Native Americans living in Arizona. A genetic predisposition allowed this group to survive normally to a diet poor of carbohydrates for years. In the recent years, because of a sudden shift from traditional agricultural crops to processed foods, together with a decline in physical activity, made them develop the highest prevalence of type 2 diabetes and for this reason they have been subject of many studies.\nDataset\nThe dataset includes data from 768 women with 8 characteristics, in particular:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\n\nThe last column of the dataset indicates if the person is affected (1) by diabetes or not (0).\nSource\nThe original dataset is available at UCI Machine Learning Repository and can be downloaded from this address: http://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nThe problem\nThe type of dataset and problem is a classic supervised binary classification. Given a number of elements all with certain characteristics (features), we want to build a machine learning model to identify people affected by type 2 diabetes.\nTo solve the problem we will have to analyse the data, do any required transformation and normalisation, apply a machine learning algorithm, train a model, check the performance of the trained model and iterate with other algorithms until we find the most performant for our type of dataset.\nNote\nFor the presentation part I've used RISE, which is being installed by requirements.txt but it has to be configured. You can find all the instructions on the original website: https://damianavila.github.io/RISE/index.html\n""]",https://github.com/andreagrandi,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
Lagos,18,21,96,65,['Diabetetics Neural Net\nA javascript & MATLAB neural network written to predict the possibility of having diabetes in percentile.  The training dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nRequired tools\n\nMATLAB Neural Net Toolbox: used to train the Neural Network.\n\nCurrent Stage\n\nTrained Models\nUtilized trained data in javascript library\nSupport PHP to utilize library (enables live testing)\nInclude  procfile for deployment on Heroku. Visit Diabetics prediction heroku deployed\n\nFuture plans\n\nRetrain the network using tenserflow and LSTM for better accuracy.\n\nImprovement\nVisit Kaggle: Pima Indians Diabetics Database for better ways of training this model.\n'],https://github.com/virgincodes,"['3', 'R', 'Updated Oct 2, 2017', '3', 'Python', 'Updated Apr 1, 2018', '6', 'SQLPL', 'Updated Oct 9, 2018', '3', 'Jupyter Notebook', 'MIT license', 'Updated Feb 28, 2019', '17', 'PHP', 'Updated Aug 20, 2018', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Jupyter Notebook', 'Updated Feb 3, 2019', '1', 'JavaScript', 'Updated Mar 30, 2019', '1', 'Updated Sep 29, 2020', '5', 'Java', 'Updated Apr 8, 2018']"
Knoxville,10,7,142,222,"['Project Glucose Tracker\nTeam Name: Code Bashers\nProject Owner: Kawsar Project\nTeam Members: Aaron Barlow, David Beverley, Grant Watson, Josiah Smythe, Justin Cathelyn, and Thomas Burtner\nScrum Master: David Beverley\nProduct Owners: Aaron Barlow & Josiah Smythe\nBrief Description\nPatients submit their food intake, blood glucose level and exercise information from their phone applications and doctors can view those information graphically from a phone application or web app\nLanguages, Frameworks, and Libraries\nLanguages: JavaScript & CSS\nFrameworks: React & React Native\nLibraries: React Native Paper, Firebase, DataTable, React Timeseries Charts, React Native Chart Kit, React Icons, and Pond.js\nRunning Mobile and Web App\n\tPre-Conditions: Must have node.js install and have the expo app on your phone\n\t   https://facebook.github.io/react-native/docs/getting-started.html\n\t   https://nodejs.org/en/download/\n\n\tMobile:\n\t   1) Download the glucose tracker zip file and extract it\n\t   2) In file explorer inside of the GlucoseTracker file and type cmd in the top bar\n\t   3) Install react by running the command “npm install react-native""\n\t   4) Once installed run the command “npm start”\n\t   5) After a short while, there should be a QR code. Scan the code with the expo app for Android or with the camera app for iPhone\n\t   6) Allow the application to build and it will start automatically\n\n\tWeb:\n\t   1) Download the glucose tracker zip file and extract it\n\t   2) In file explorer inside of the GlucoseTracker\\web and type cmd in the top bar\n\t   3) Install react by running the command “npm install react-native""\n\t   4) Once installed run the command “npm start”\n\t   5) The application will build and then open up in your web browser\n\nPublishing the Application\nWeb: (1) Follow the Running Mobile and Web App guideline, (2) Host on a Linux server, and (3) run npm start in the web directory\nAndroid: expo build:android\nIOS: expo build:ios\nMobile ScreenShots\n\n\n\nPatient Login\nPatient SignUp\nPatient Settings Page\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlucose List\nAdd Glucose\nAdd Nutrition\nAdd Exercise\n\n\n\n\n\n\n\n\n\n\n\nWeb ScreenShots: Admin View\n\n\nWeb ScreenShots: Doctor View\n\n\n\n\n\n']",https://github.com/AroSwift,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
Bangalore,12,60,18,259,"['Pima-Indians-onset-of-diabetes-dataset-Prediction-using-Neural-Networks-in-Keras\nThis is a simple Neural Network Implementation using Keras.\nI have used the Pima-Indians-onset-of-diabetes-dataset which you can find on this link: http://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nYou can also fit other data sets of the same type, which can be downloaded from the UCI Machine Learning Repository\nPre-Requisities:\n1) Python 2 or 3 installed and configured.\n2) You have SciPy (including NumPy) installed and configured.\n3)You have Keras and a backend (Theano or TensorFlow) installed and configured.\nAlgorithm:\n1) Initialize the random number generator with any seed you like(I have taken 10)\n2) Download the data set in .csv format and put it in the local working directory as NN.py\n3) Load the data set using loadtxt()\n4) Split the data set into the Independent Variables and the Class to be predicted into Z and Q\n5) Create a Sequential model and add layers:\n^First layer contains 12 neurons and will take 8 input variables(Activation Funtion=rectifier activation functio)\n^Second layer contains 8 neurons(Hidden layer: Activation Funtion=rectifier activation function)\n^Output layer will contain one neuron(Activation Funtion=Sigmoid Function:Because its a binary classification: 0 or 1)\n6)Fit the data in the model using fit()(The training process will run for a fixed number of iterations through the dataset called                                                   epochs, that we must specify using the nepochs argument)\n7)Set the number of instances that are evaluated before a weight update in the network is performed, called the batch size\n8)Used model.predict() to predict the class variables.\nUnder update! please be patient\n']",https://github.com/architsingh15,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
Israel,45,21,319,2494,['Glycemic Load Calculator https://glcalc.com\n'],https://github.com/assafmo,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
"Accra,Ghana",83,63,39,0,"['Introduction\n\nThis is a python project that we are looking for contributors to re-build this code into a solution that helps minimize the rise of diabetes in Africa.All you need to do is re-write this code in any programming language, put life into to this code and automatically we will employ you as a developer at Oasis WebSoft Organisation.\n']",https://github.com/raindolf,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"Tehran, Iran ",86,283,185,337,"['Pima indian diabetes Deep Learning\n\n\n\nDiabetes prediction with deep MLP models webapp (StreamLit.io) + ipynb\nData\nthe datasets consist of several medical predictor (independent) variables and one target (dependent) variable, Outcome. Independent variables include the number of pregnancies the patient has had, their BMI, insulin level, age, and so on. link of data in kaggle\nColumns\n\n\n\nColumns\nDescription\n\n\n\n\nPregnancies\nNumber of times pregnant\n\n\nGlucose\nPlasma glucose concentration for 2 hours in an oral glucose tolerance test\n\n\nBloodPressure\nDiastolic blood pressure (mm Hg)\n\n\nSkinThickness\nTriceps skin fold thickness (mm)\n\n\nInsulin\n2-Hour serum insulin (mu U/ml)\n\n\nBMI\nBody mass index (weight in kg/(height in m)^2)\n\n\nDiabetesPedigreeFunction\nDiabetes pedigree function\n\n\nAge\nAge (years)\n\n\nOutcome\nClass variable (0 or 1) 268 of 768 are 1, the others are 0\n\n\n\nContext\nThis dataset is originally from the National Institute of Diabetes, Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nAcknowledgements\nSmith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). Using the ADAP learning algorithm to forecast the onset of diabetes mellitus. In Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). IEEE Computer Society Press.\nInspiration\nCan you build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes?\nTODO\n\n add unblacend class\n  train/dev/test\n add normalizing\n regularizer\n Linear Regression\n Support vector machine\n Naive bayes\n Streamlit\n Deep Learning\n Graduation Project Report\n batch norm\n lr tuner\n lime\n production tips for speed ( tf.server, purning, qunatization)\n deploy diabetes_large data\n Persian Blog\n English Blog\n upload dataset to kaggle\n transfer learning\n online learning\n adding more languages for UI\n refactor paging capability\n dockerize it (fandoughe for eg or my vps)\n flask api\n flutter app\n error analysis\n feature enginearing\n database for patients\n test learning curve\n fill missing data (with a model or other stuff)\n\n']",https://github.com/AminTaheri23,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
Île-de-France,18,60,237,622,"['Diabetes-Analysis\nMain side project of Gustavo Magaña López\nContact me at gmaganna.biomed@gmail.com.\nDisclaimer :\nThis is a personal project. It has two and only two scopes:\n\nHelp me understand better my diabetes, i.e. quench a personal and academic  curiosity.\nExplore different ways of adjusting my therapy, finding patterns through diverse techniques and algorithms.\n\nIf you decide to test it on yourself it is YOUR RESPONSIBILITY. Nothing within this repo is enodorsed by Medtronic or MySugr App. I am merely a patient using his own data and applying algorithms to it.\nBibliography\nThis project departed from my own knowledge of diabetes physiopathology. However, to make of this a valuable state-of-the-art tool I have decided to add also some docs. Publicly available scientific papers. These will be found in Docs/. If you want to consult them, these are the original sources:\n\nreview_of_formulas.pdf\nglycaemic-variability.pdf\n\nIf you have found anything that you consider pertinent/valuable for this project and have the proper copyright/ownership rights to share it, please do so! I\'d be ravished to include it in the project (email it to me, or add it to your fork of this repo and send me a pull request).\nRequirements and dependencies :\nTested Hardware\nThis software has been tested on\n\n\nA 13-inch, Mid 2012 MacBookPro which is considered vintage (a.k.a. pre-obsolete). I\'ve tampered with it, so it has 8 GiB RAM and a Samsung 1TB SSD. Latest (and last) test using macOS Mojave 10.14.6.\n\n\nA System 76 Oryx Pro.\n\n\nVirtual environments using poetry\nGiven the lack of reproducibility that Anaconda\'s virtualenvs have displayed in my personal experience, I\'ve decided to fully migrate to poetry. These virtual environments have proven to be reliable, resisting constant migration between machines and operating systems.\n[DEPRECATED] Create a virtual environment using  conda\nAll of the code has been developed using conda. Using the provided files within the repo ""env.yml"" and ""requirements.txt"" will facilitate running the scripts and notebooks here present. For futher information consult:\n\nAnaconda distribution.\nconda environment\n\nTo create the virtual environment, make sure you have installed the latest version of Anaconda.\nRun the following command replacing ENV_NAME with the name you would like to give to the virtual environment:\n conda env create --name ENV_NAME --file env.yml\n\nYou will be prompted for confirmation, accept typing \'y\' on the interactive session.\nTo activate the newly created environment, type the following command on your terminal:\n conda activate ENV_NAME\n\nSome dependencies (those which could not be installed through conda) were installed using pip. This is not the standard installation found on your machine (if you already had Python installed). Verify that you are using the correct pip by activating the virtual environment that you have designated for this repo (can be done via which pip).\nBefore installing dependencies via pip, make sure you have activated the virtual environment running conda activate ENV_NAME . Afterwards type:\npip install -r requirements.txt \n\nNow you\'re ready to run the scripts and notebooks found on this repo.\n']",https://github.com/gmagannaDevelop,"['2', 'Java', 'Updated Sep 14, 2016', '4', 'Jupyter Notebook', 'Updated Jun 4, 2020', 'Jupyter Notebook', 'Updated Oct 14, 2018', '4', 'Jupyter Notebook', 'Updated Oct 5, 2020', '2', 'JavaScript', 'Updated Feb 11, 2020', '2', 'Jupyter Notebook', 'Updated Jul 26, 2019', '3', 'Objective-C', 'MIT license', 'Updated Mar 12, 2017', '3', 'Jupyter Notebook', 'Updated Nov 23, 2020', '3', 'Java', 'BSD-2-Clause license', 'Updated Mar 5, 2018', '3', 'Jupyter Notebook', 'Updated May 9, 2020']"
"Washington, DC",39,21,14,12,['meta-insulaudit\nOE meta layer for hacking diabetes. Related to bewest/insulaudit\nThis layer depends on\nopenembedded-core/meta\nmeta-openembedded/meta-oe\nmeta-openembedded/meta-networking\n'],https://github.com/n-west,"['3', 'JavaScript', 'MIT license', 'Updated Dec 23, 2015', '3', 'Jupyter Notebook', 'Updated Feb 28, 2018', '4', 'Python', 'Updated Sep 8, 2020', '1', 'Jupyter Notebook', 'Updated Aug 30, 2020', '2', 'Java', 'Apache-2.0 license', 'Updated Oct 27, 2018', '2', 'Jupyter Notebook', 'Updated Oct 3, 2019', '2', 'Jupyter Notebook', 'Updated Oct 17, 2020', '1', 'BlitzBasic', 'GPL-3.0 license', 'Updated Jan 13, 2014', '3', 'Jupyter Notebook', 'Updated Jun 16, 2018', '2', 'Jupyter Notebook', 'Updated Jan 25, 2020']"
"Amrita Vishwa Vidyapeetham Amritapuri ,Kollam, India",15,27,31,191,['Diabetes-detection-using-Python\n'],https://github.com/devtechnocode,"['1', 'Python', 'Updated Nov 30, 2015', '1', 'JavaScript', 'BSD-2-Clause license', 'Updated Sep 22, 2017', 'R', 'Updated May 2, 2018', '3', 'JavaScript', 'MIT license', 'Updated Mar 14, 2020', '3', 'Jupyter Notebook', 'Updated Mar 25, 2019', '3', 'JavaScript', 'Updated Jun 25, 2019', '2', 'HTML', 'MIT license', 'Updated Jul 6, 2019', '3', 'Jupyter Notebook', 'Updated Sep 28, 2020', '3', 'Python', 'Updated Sep 10, 2012', '2', 'JavaScript', 'Updated Oct 22, 2012']"
Hyderabad,15,27,31,3,['Diabetes\nDiabetes Prediction using Machine Learing Algorithms\n'],https://github.com/Muzammil-A90,"['Jupyter Notebook', 'Updated Sep 22, 2019', 'Jupyter Notebook', 'Updated Oct 13, 2019', 'Jupyter Notebook', 'Updated Sep 24, 2019', 'Jupyter Notebook', 'Updated Feb 22, 2020', 'Jupyter Notebook', 'Updated Feb 24, 2020', 'Jupyter Notebook', 'Updated Nov 1, 2019', 'Jupyter Notebook', 'Updated Jan 7, 2020', 'Jupyter Notebook', 'Updated Mar 1, 2020', 'Dart', 'Updated Apr 28, 2020', 'Jupyter Notebook', 'Updated Jul 10, 2020']"
Hyderabad,0,0,1,26,['diabetes\nUsing various machine learning algorithms to get the best prediction accuracy if possible for the Pima Indians dataset.\nThe best result was found with Random Forest with an accuracy of 83%.\nINSTALL\nPython version used in this project: 3.6.6\nLIBARIES USED:\nPandas 0.23.4\nNumpy 1.15.3\nMatplotlib 2.2.2\nScikit-learn 0.20.0\n'],https://github.com/nishithagampa,"['Updated Sep 5, 2019', 'Updated Nov 27, 2019', 'Jupyter Notebook', 'Updated Jan 11, 2020', 'HTML', 'Updated Mar 24, 2019', 'Updated Oct 3, 2019', '1', 'HTML', 'Updated Dec 18, 2019', 'Jupyter Notebook', 'Updated Mar 23, 2020', 'Updated Apr 6, 2020', 'Jupyter Notebook', 'Updated Jun 26, 2020', 'Java', 'Updated Apr 29, 2020']"
"Chittagong, Bangladesh",14,110,19,192,"[""Diabetes-Dataset-Analysis-using-Machine-Learning\nDiabetes Dateset Analysis using Machine Learning Classification Algorithm\nReferences:\n\nhttps://www.who.int/news-room/fact-sheets/detail/diabetes [About Diabetes and it's symptoms]\nhttps://www.kaggle.com/uciml/pima-indians-diabetes-database [About Data-Set]\n\n""]",https://github.com/sayanta28,"['1', 'HTML', 'Updated May 17, 2020', 'HTML', 'Updated Aug 18, 2020', 'Jupyter Notebook', 'Updated Sep 30, 2020', 'Swift', 'Updated Aug 10, 2020', 'Python', 'Updated Nov 17, 2020', 'Python', 'Updated Nov 21, 2020', 'Jupyter Notebook', 'Updated Jan 28, 2020', '3', 'Python', 'Updated Aug 7, 2020', 'Java', 'Updated Feb 16, 2016', 'R', 'Updated Jun 24, 2018']"
Spain,1,1,1,1,"['diabetes\nApp de ayuda en tratamiento de Diabetes Mellitus tipo I, dosificación de insulina y predicción de hipoglucemias.\nEl trabajo se va a realizar sobre las siguientes fases:\n1.- creación en java del sistema de dosificación de insulina.\nActualmente resuelto y probado con Junit para todas las situaciones posibles.\n2.- app de android, para gestionar el histórico de glucosas e insulina.\nFinalizada.\n3.- machine learning para predecir y evitar hipoglucemias.\nFinalizado.\n']",https://github.com/efervescencia,"['MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018', 'Updated Apr 7, 2018']"
127.0.0.1,29,297,2000,444,"['Diabetes\n🍭 Data Mining in Python, R and Weka\n\nAttributes\n\n\nNumber of times pregnant\n\n\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n\nDiastolic blood pressure ( Mm Hg )\n\n\nTriceps skin fold thickness ( Mm )\n\n\n2-Hour serum insulin ( Mu U / Ml )\n\n\nBody mass index ( Weight in kg / ( Height in m ) ^ 2 )\n\n\nDiabetes pedigree function\n\n\nAge ( Years )\n\n\n']",https://github.com/Sphinxs,"['2', 'Jupyter Notebook', 'Updated Jun 25, 2020', 'MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018']"
"St charles, MO",29,297,2000,28,['diabetes\nBuild models and compared different models accuracy\n'],https://github.com/tle1000,"['HTML', 'Updated Jul 9, 2020', 'Updated Jul 22, 2020', 'TypeScript', 'MIT license', 'Updated Aug 7, 2020', 'Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015']"
"Chicago, IL",0,0,1,16,['diabetes\nDSC 540 Project\n'],https://github.com/salikhussaini,"['Updated Nov 13, 2019', 'C#', 'Updated Oct 21, 2017', '1', 'Java', 'Updated May 7, 2020', 'Updated Jun 14, 2020', 'Updated Jul 8, 2020', 'Python', 'Updated Jul 11, 2020', 'Jupyter Notebook', 'Updated May 19, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'HTML', 'Updated Jun 12, 2020', 'HTML', 'Updated Jul 9, 2020']"
Arinos,4,13,0,218,"[""Python: Getting Started\nA barebones Django app, which can easily be deployed to Heroku.\nThis application supports the Getting Started with Python on Heroku article - check it out.\nRunning Locally\nMake sure you have Python 3.7 installed locally. To push to Heroku, you'll need to install the Heroku CLI, as well as Postgres.\n$ git clone https://github.com/heroku/python-getting-started.git\n$ cd python-getting-started\n\n$ python3 -m venv getting-started\n$ pip install -r requirements.txt\n\n$ createdb python_getting_started\n\n$ python manage.py migrate\n$ python manage.py collectstatic\n\n$ heroku local\nYour app should now be running on localhost:5000.\nDeploying to Heroku\n$ heroku create\n$ git push heroku main\n\n$ heroku run python manage.py migrate\n$ heroku open\nor\n\nDocumentation\nFor more information about using Python on Heroku, see these Dev Center articles:\n\nPython on Heroku\n\n""]",https://github.com/ademirrocha,"['Updated Sep 16, 2019', 'Updated Oct 3, 2019', 'Jupyter Notebook', 'Updated Nov 24, 2019', 'Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 29, 2020', 'HTML', 'Updated Oct 20, 2020', 'Python', 'Updated Apr 9, 2016', 'Python', 'Updated Oct 7, 2015']"
"Nairobi, Kenya",36,27,71,344,"['NTW_Diabetes_Model\nDiabetes prediction model using retina images\nMore Documentation to come, Sorry!!\nTest the model by passing it together with an image to the model_test.py file.\nAdditional Model documentation will be doen in a ((2)) weeks.\n']",https://github.com/anthonymiyoro,"['Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015', '2', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Feb 10, 2020', '2', 'CSS', 'MIT license', 'Updated Jul 30, 2020', '2', 'Updated Mar 13, 2016']"
"Canada, Edmonton,AB",1,6,15,9,['Pima-Indians-Diabetes-Database\nThe Pima indian diabetes dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict if a patient has diabetesor not  based on diagnostic measurements of eight simple features:\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nyou can download the dataset from this link https://www.kaggle.com/uciml/pima-indians-diabetes-database\n'],https://github.com/khatabi-abderrahim,"['1', 'Jupyter Notebook', 'Updated Oct 5, 2020', 'NetLogo', 'Updated Nov 11, 2020', 'Updated Nov 18, 2020', '2', 'R', 'Updated Nov 13, 2020', 'JavaScript', 'Updated Feb 2, 2017', 'Updated Nov 12, 2019', '2', 'Python', 'Apache-2.0 license', 'Updated Dec 31, 2018', '2', 'Jupyter Notebook', 'Updated Sep 27, 2019', 'JavaScript', 'Updated Mar 4, 2019', 'Java', 'Updated Jul 11, 2016']"
"Paris, France",29,6,8,14,"['Demo XebiCon\'18\nUse case Diabetes Progression\nUses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet.\nThe predicted ""progression"" column is a quantitative measure of disease progression one year after baseline\nExplicative variables (10):\n\nAge\nSex\nBody Mass Index (BMI)\nBlood pressure (BP)\nSerum measurements\n\nReferences\nscikit-learn datasets\nLeast Angle Regression - Efron, Hastie, Johnstone, Tibshirani, 2003\n']",https://github.com/giulbia,"['Updated Jul 20, 2017', 'Updated Sep 23, 2016', 'Updated May 19, 2017', '1', 'R', 'Updated Mar 2, 2017', 'Updated Jun 11, 2018', 'R', 'Updated Aug 17, 2018', 'Updated Sep 19, 2018', '1', 'Jupyter Notebook', 'Updated Nov 19, 2018', 'Java', 'Updated Feb 23, 2018', 'Updated Feb 8, 2018']"
Berlin,1,4,36,371,['EDA and Modelling for diabetes dataset\n'],https://github.com/tu-artem,"['Jupyter Notebook', 'Updated Apr 20, 2019', 'Java', 'Updated Apr 11, 2019', 'HTML', 'Updated Feb 23, 2019', 'Updated Oct 9, 2019', 'Updated Dec 25, 2019', 'Updated Feb 6, 2020', 'Jupyter Notebook', 'Updated Oct 16, 2019', 'Jupyter Notebook', 'Updated May 29, 2019', 'Java', 'MIT license', 'Updated Sep 13, 2019', 'Updated Sep 15, 2019']"
"Dublin, IRE",11,24,35,147,['DiabetesApp\n'],https://github.com/mikeyPower,"['6', 'Python', 'Updated Jun 17, 2020', 'C#', 'Updated May 23, 2015', 'JavaScript', 'MIT license', 'Updated Apr 27, 2015', '1', 'PHP', 'Updated May 7, 2014', 'Python', 'Updated Jul 19, 2017', 'Jupyter Notebook', 'Updated Jan 26, 2018', 'Python', 'Updated Apr 10, 2017', '1', 'Java', 'Updated Apr 7, 2017', 'Python', 'Updated Oct 29, 2018', 'Updated Aug 3, 2018']"
"Chennai, Tamilnadu, India",10,75,0,12,['DiabetesPrediction\nThis repository contains python notebook for Diabetes Readmission prediction dataset.\nThis is mere replication & learning from medium article\nhttps://medium.com/@uraza/how-to-use-machine-learning-to-predict-hospital-readmissions-part-1-bd137cbdba07\n'],https://github.com/balajivenky06,"['Updated Dec 5, 2017', '1', 'JavaScript', 'MIT license', 'Updated May 14, 2018', 'JavaScript', 'Updated Jan 22, 2018', 'R', 'Updated Sep 6, 2018', 'R', 'Updated Oct 9, 2019', 'Java', 'MIT license', 'Updated May 3, 2018', 'R', 'Updated Jun 14, 2018', 'Jupyter Notebook', 'Updated Sep 22, 2018', 'Python', 'Updated Dec 16, 2018', 'TypeScript', 'Updated Apr 26, 2019']"
"Edison, New Jersey",4,5,0,178,"[""DiabetesDetection\nThis is an application used to detect whether a user has diabetes given certain parameters and locate the nearest doctor.\nFeatures\n\nPredicts Whether User May Have Diabetes: Uses a custom machine learning model which has been trained by using over 10000 data points of users with diabetes and their pre-exisitng conditions. This machine learning model has been trained to an accuracy of 99.6% on microsoft azure's machine learning service.\nRecomends Nearest Docter: Using Google Maps API and Better Doctors API, this application recommends the highest rated doctors within the span of 20 miles of your current locaitonl\n\nTech Stack\n\nApp Development: Xamerin C#\nLocation and Maps: Google Maps API\nDiabetic Detection ML model: Azure Machine Learning Service\n\n""]",https://github.com/jeevanantham2002,"['Jupyter Notebook', 'Updated Nov 26, 2019', 'Jupyter Notebook', 'Updated Aug 29, 2017', 'R', 'Updated Apr 24, 2020', 'HTML', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Sep 15, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'R', 'Updated Jul 31, 2020', 'C#', 'Updated Aug 29, 2020', 'Updated Oct 10, 2020', 'Updated Nov 19, 2020']"
"Nairobi , Kenya",10,4,2,247,"['Diabetes Prediction using Logistic regression and Scikit-Learn\nFirst we will have to import the necessary modules\nYou can use either Anaconda, Jupyter notebook or Vs code to write your code\nWe’ll be using Python and some of its popular data science related packages. First of all, we will import pandas to read our data from a CSV file and manipulate it for further use. We will also use numpy to convert out data into a format suitable to feed our classification model. We’ll use seaborn and matplotlib for visualizations. We will then import Logistic Regression algorithm from sklearn. This algorithm will help us build our classification model. Lastly, we will use joblib available in sklearn to save our model for future use.\nYou can install the necessary dependencies using pip\npip3 install matplotib\npip3 install seaborn\npip3 install scikit-learn\npip3 install joblib ##for storage of data for future use\npip3 install pandas\n']",https://github.com/oyugirachel,"['TypeScript', 'Updated May 3, 2019', 'Java', 'Updated Mar 21, 2019', 'R', 'Updated Jan 24, 2020', 'Jupyter Notebook', 'Updated Aug 24, 2020', '1', 'C#', 'Updated Apr 16, 2020', 'Jupyter Notebook', 'Updated Jun 13, 2020', 'Objective-C', 'Updated Sep 28, 2020', 'Python', 'Updated Nov 8, 2020', 'Java', 'Updated Jun 15, 2020', '1', 'Python', 'Updated Nov 19, 2020']"
San Francisco,244,63,646,91,"['insulaudit\nHomepage: https://github.com/bewest/insulaudit\nThis python package provides a toolkit for dealing with data used and\ncreated by a ""modern,"" circa 2010, insulin therapy regimen.\nWe provide a command line text based tool, and a python\nlibrary to audit therapeutic data from a variety of\nmedical devices widely used.\nTarget Devices\n\n\nMedtronic Minimed Paradigm Series insulin pumps\nusing the usbstick\n\nobserved working with a 522\n\n\n\nLifescan Glucose Meters:\n\nOnetouch series\nMini/Profile\n\n\n\nDexcom, Onetouch Ping, Bayer, omnipod.  In no particular order.\n\n\nBayer, coming soon: thanks to iko, https://bitbucket.org/iko/glucodump/src/e37ea2a38776/glucodump/usbcomm.py\n\n\nUsage\n  insulaudit [opts] [command]\n  insulaudit <device> [opts] [command]\n  insulaudit [device] [command] [opts]\n\n  insulaudit --help\n  insulaudit clmm scan\n\n\nLifescan\nNothing special, my system registers a serial device right\naway.\nMinimed\nIn linux, you need to poke the usbserial module with some\nparameters to make it work.  This only needs to be done\nonce::\nsudo modprobe usbserial vendor=0x0a21 product=0x8001\n# or\nsudo ./reset.sh\n# which runs ./remove.sh and ./insert.sh, the latter\n# of which does the modprobe for you.\n\nI\'ve observed runs working up to 5 times in a row, at\nwhich point I needed to reset the usbstick by removing it\nand re-inserting into the PC.\nOn mac, I can\'t recall if this is necessary.  We just need\na generic usb-serial adapter.  I haven\'t tried it, but I\nsuspect COM1 will likely work on M$, although\nauto-scanning will not detect it.  If your mac inserts the\ndevice somewhere under /dev/usb.serial* we will likely\nscan it.\nIn dmesg, you should see a message like this when you\ninser the usb stick::\n[201197.513266] usb 2-1: new full speed USB device using uhci_hcd and address 3\n[201197.919110] usb 2-1: configuration #1 chosen from 1 choice\n[201205.729621] usbcore: registered new interface driver usbserial\n[201205.730808] USB Serial support registered for generic\n[201205.731143] usbcore: registered new interface driver usbserial_generic\n[201205.731145] usbserial: USB Serial Driver core\n[201205.806220] USB Serial support registered for pl2303\n[201205.806248] pl2303 2-1:1.0: pl2303 converter detected\n[201208.305166] usb 2-1: pl2303 converter now attached to ttyUSB0\n[201208.305187] usbcore: registered new interface driver pl2303\n[201208.305189] pl2303: Prolific PL2303 USB to serial adaptor driver\nbewest@mimsy:~/Documents/bb/diabetes/src/mock$ \n\nInstalling insulaudit\nThere is no official release of insulaudit, only some pieces of code\ntowards establishing a tool.  Pull requests welcome.\n:::\n# Download the source\n# https://github.com/bewest/insulaudit\n# or fork it on github\ngit clone http://github.com/bewest/insulaudit.git\n# install insulaudit in your python runtime so you can\n# hack on it from here\npython setup.py develop\n\nStatus quo\nAs Thucydides said\n\nRight, as the world goes, is only in question between\nequals in power, while the strong do what they can and\nthe weak suffer what they must.\n\ndecoding-carelink\nMedtronic is partially decoded.  We will be adding support to\ninsulaudit when things are better/tested and cleaned up.  Have a\nMedtronic pump?  Help us analyze the data, and visualizations are that\nmuch closer.  At this point, we just need people to help line up\nrecords with the CSV output, and confirm accuracy or highlight\nproblems.\ndecoding-omnipod\nNeed captures/traces.\ndecoding-dexcom\nNeed captures/traces.\ndecoding-onetouchping\nNeed captures/traces.\nHow to run (outdated)\nThe commands using PYTHONPATH assume you are in the root\ndirectory of the repo.\nThe commands using insulaudit assume you have installed\ninsulaudit on your system (including the develop version).\nUses flaky port scanning feature to test if we are able to\ntalk to a pump.  Exchange a few bytes, nothing more::\n# fails\nPYTHONPATH=src/ python -m insulaudit.main -v clmm   hello\ninsulaudit -v clmm hello\n\nSpecifying a port seems to work.  If it doesn\'t, retry a\nfew times. ::\n# using the subcommand stuff:::\nPYTHONPATH=src/ python -m insulaudit.main -v clmm --port /dev/ttyUSB0  hello\ninsulaudit -v clmm --port /dev/ttyUSB0 hello\n\n# run the protocol exercise directly\nPYTHONPATH=src/ python src/insulaudit/devices/clmm/proto.py /dev/ttyUSB0\npython -m insulaudit.devices.clmm.proto.py /dev/ttyUSB0\n\n# read-pump-model.log - protocol exercise to read pump\nmodel number.  Log of it running successfully 5 times\nbefore it starts failing.  stderr and timestamps were\nnot capture. :-(\n\nTODO\nNow that the basic framework is taking shape, the protocol\nsupport needs to be stabilized and the framework needs to\ncontinue to gel a bit.\n\n\nconvert hello to some kind of scan\n\n\nintroduce new device flows\n\n\nintroduce device profiles/console flows\n\n\nrecord logs\n\n\nreview logs\n\n\naudit logs\n\nmerge logs\nsearch\nreformat\n\n\n\n##cli tool insulaudit\n\n\ninit - set up a config, from default\n\n\ncheckPort/scan - scan for a port/device\n\n\ndevice\n\nprofile\nlog\n\n\n\n::\nLicense\nAuthor\nBen West bewest+insulaudit@gmail.com\nThis experimental software is provided under the MIT license_, so you can do with it whatever you wish except\nhold me responsible if it does something you don\'t like.\n.. _MIT license: http://www.opensource.org/licenses/mit-license.php\nBlather\nhttp://www.diabetesmine.com/2013/01/the-ethical-imperative-of-diabetes-interoperability.html\nInteroperability is my middle name.  Just give us the raw data, and\nwe\'ll make it interoperable.\nFidelity of Care\nPatients need open access to all the elements of\ntechnology involved in therapy in order to ensure safety.\nOne of many concrete examples involves generating safe\ninsulin doses.  The vendor hard coded the active lifetime\nof insulin into all models earlier than the 515 series.\nThis guarantees that patients receive the wrong amount of\ninsulin.  The only feasible way of getting safer doses of\ninsulin is to buy a pump in the 515 series or newer.\nUsers who do choose to buy a new pump can customize this\nvariable but the variable remains static and mostly\nincorrectly calibrated until it\'s manually changed again.\nIn reality, your sensitivity to insulin varies, and the\namount of insulin one should receive also varies\ndramatically throughout the day depending on what life\nthrows your way.\nHowever, the pump has an administrative protocol that\nallows software to automatically audit logs, reconfigure\nsettings, create and administer dosing schedules.  If\nusers had access to this protocol we could use it to work\naround bugs like incorrect insulin calibrations in order\nto tune our doses.  We can also use the protocol to audit\nthe logs, allowing us to independently verify that pump\ntherapy is safe.\nThere are many other examples where having direct access\nto all the technology involved in therapy provides an\nepistemic certainty integral to basic science.  As\npatients and users of medical technology, we want to\nbelieve that it is safe.  The only way to do this is to\nempirically study all the relevant details of vendor\ntechnology with our peers and to study it for bugs and\nsafety.  In the process of doing this we discovered that\nthe same commands used to audit the native therapeutic\nlogs can also be used to reconfigure the device, and\nadminister insulin in ways that can work around bugs that\nare currently ensuring unsafe dosing for pump users.\nThe manufacturer is content to give me inaccurate dosings,\nbut refuses to share information about the protocol needed\nto quickly, safely and independently manage my therapy.\nAs patients we need access to all the technology in our\ntherapy so that we can have epistemic certainty that it is\nsafe.\nWe set out to use the protocol in order to audit logs more\neffectively and found out it\'s possible to generate safer\ndoses and work around bugs in vendors\' therapeutic\nsoftware.  The protocol is actively kept from our use, but\nwe need it in order to secure safe therapy.  Without\nhaving investigated the technology involved in our\ntherapy, we cannot believe it is safe, and we would not\nhave learned about it\'s true capabilities.\nThought exercises\nIf a doctor approached you with a syringe, said you needed\nsome of it but wasn\'t personally sure a.) how much was in\nthe syringe, that b.) the syringe sometimes injects the\nwrong amount, and c.) what contents of the syringe might\ndue to the way the syringe performs, but that someone told\nhim this would probably be ""ok"" would you allow yourself\nto be injected?  What if the consequences for refusing the\nsyringe was death?  What if the reason for the uncertainty\nwas because someone had wiped off most of the calibration\nmarkings before giving it to the doctor to fill?  What if\nthe person who had wiped off the markings was the same\nperson insisting it was safe and selling you the syringes,\nand no one else makes syringes?\nFor the argument ""Most users won\'t need access to\ntechnology to get what they need.""  This isn\'t an argument\nfor preventing patients from accessing critical parts of their\nown therapy.  This is like arguing no one would need to do\nanything more than borrow a book from a library shortly\nafter the printing press because the population was\nunlettered and homes lacked bookshelves to house the\nbooks.\nBlather\n""Blah blah blah.""\nDiabetes therapy is wasteful, unscientific, and dangerous.\nDespite a variety of companies offering software to manage\nthe condition, very little data is used to drive real time\ndecision making during the course of therapy.  Many users\ntake error prone and time consuming handwritten\ntranscriptions of their devices, because the software\nprovided is incapable of communicating or managing\ntherapeutic details in any useful way.  Some users\nactually take pictures, and upload those pictures to\nwebsites, finding that the easiest way to share critical\ntherapy data.\nDespite all the hard work diabetics undertake in efforts\naudit and control ongoing therapy, most use a variety of\nmobile devices that automatically log many details.\nIn 2011, we have a nascent highly connected world where\nrelationships construct a social graphs traversable on\nthe web with enough security to trust these relationships\nfor authentication.  Despite all the technical\nadvancement in our world, the medical community asks\ndiabetic patients to live inhumane lives maintaining open\nwounds while blaming them for lack of control and failing\nto explain cause and effect.\nInsulin is a powerful drug best administered by a\npancreas.  When we use a syringe to inject a large dose\nall at once, it is no surprise to see dangerous\nconsequences.  However, instead of developing ever\nincreasingly accurate predictions, the use of software in\nmanaging diabetes mostly involves entering and massaging\nlots of data.  As a result, many diabetics suffer\nneedlessly, blamed for the effect ""their condition"" has on\nthem due to their poor control, even though the\nconsequences are likely aggravated or caused by the very\ntherapy they are trying to participate in.  This is poor\nfidelity of care.\nThe best example for this is the NPR obituary for a\nbaseball hall of famer who died of diabetic complications.\nWhile he was praised for his adherence to his regimen, he\nwas also praised his tenacity on the field, despite the\nterrible shakes attributed to ""his condition.""  However,\nthey failed to mentioned that the shakes he suffered were\ndue to the therapy for his condition; the only way a type\n1 diabetic suffers shakes like that is when too much\ninsulin has been delivered, an all too familiar mishap.\nPoor fidelity of care is not knowing what to expect,\ndespite adhering to a therapy.\nBy applying the fundamentals of the scientific method to\ntherapy, and to the application of technology to therapy,\nwe get a unique perspective on what the technology should\ndo, and the role people have in therapy.\nThe only data we should be entering are corrections on what we\npredict will happen.  This is  be one of the ideal\napplications of technology to therapy through a lense I\ncall high ""fidelity of care."" Together, we adjust our\nexpectations to match what is possible so that over time\nthe observations of therapy exactly match the expectations\nwe recorded as predictions earlier.\nAs we integrate calendar data and predictions along side\npast observations, we get a better understanding of causes\nand effects in the outcomes of our own therapy while\ngaining tools to communicate these understandings with our\ntherapeutic team, composed of any individual we choose.\nThe therapeutic team may well be mostly composed of\nmembers outside the medical community, because social\nsupport is often important in maintaining habits and\nlifestyle.\nThis meta observation of the delta between hypothesis and\nempirical data is a principle component of the scientific\nmethod, but entirely absent from therapeutic software,\nleading to a dearth in fidelity of care.  My hope is that\ninsulaudit can help to increase the fidelity of care.  The\nscientific method involves recording high fidelity\nobservations, making predictions based on that data,\nperforming an experiment, and then analyzing the\ndifferences between the observations and the expectations.\nTherapy should not be any different.  However, until we\ncan get transparent access to audit the raw data produced\nby our therapy, we cannot get an accurate perspective of\nour own health.\nTherefore, the first fundamental principle of high\nfidelity care is open access to all the intimate details\nof therapeutic care in as close to the native format as\npossible.  It includes access to the protocols\ntransporting the data, so that novel applications can\naugment therapeutic fidelity in ways unforeseen by the\noriginal makers, for the benefit of the patient, and their\ncaregivers.\nThe second is peer review.  A caregiver may be a friend,\nor even a good samaritan in a time of need, who needs\ninstructions on what to do next.  A caregiver may be a\nresearcher who needs access to data for simulations.  It\nincludes access to the firmware, because it is outrageous\nthat the software that governs lives has not gone through\nopen source review for bugs and safety.\nWith these in place, safe and effective from insulaudit,\nSMART, DUBS, GCCS, and many other collaborators can help\ninfuse therapeutic practice with high fidelity care.\nThe needs of the patient in the practice of high fidelity\ncare are not unique to diabetics.  We believe all patients\nwill benefit from the application of these principles\nthroughout their care.\n~ insulaudit collaborators\n']",https://github.com/bewest,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
Switzerland,37,6,1,153,"[""OmniCore\nOmniCore is a platform for controlling and automating drug delivery using the Omnipod system.\nUpdate 03.01.2020:\nDear podders\nMissed the deadline due some undiscovered issues in the very last minute (Murphy's law) - that sparked a need for a thorough review and in some cases re-write. Since the next release is targeting stability and I am very picky about it, it took several sleepless nights to dissect everything apart to look for potential problems of similar nature.\nNow the issues are fixed and consciousness cleared, I can finally write this update. It still requires some time to fit back all the screws, which isn't a lot of work but I can start earliest mid next week (around the 8th).\nMy apologies to everyone expecting the release sooner and many thanks to those who have donated to make life bearable. (it absolutely does)\nUpdate 29.12.2019:\nBeta v1.0 is scheduled for release in 2019 - so happy new year!\nI'm overwhelmed with all kinds of work for the moment, so expect documentation and more information to appear in due time following the release. In the meantime, check out the updated roadmap:\nhttps://github.com/winemug/OmniCore/wiki/Roadmap\nAll thanks to\nJoe for his original work on the Omnipod,\nEddie for the thousand pods and thousand words,\nJeremy for his work on AndroidAPS customizations,\nDan, [Tim], Jeff, Jordan, Theo, [Jacob], Rene, [Miguel], [Maite], [Yann], [Rick], [Edward], [Mark], [Mike] for donating their precious time and resources,\nAdrian for all the insight\nJetbrains for being awesome (seriously, check out Rider)\nand Insulet for being a bro so far.\nDownloads\nAlpha builds are located in Microsoft AppCenter: https://install.appcenter.ms/users/winemug/apps/omnicore/distribution_groups/alpha%20testing\nBeta and other releases will be available in GitHub\nAndroidAPS for OmniCore: https://github.com/winemug/AndroidAPS/releases\nSupport\nFacebook page for announcements and feedback: https://www.facebook.com/OmniCorePdm/ (new)\nSupport group on facebook: https://www.facebook.com/groups/2141146659318874/ (managed by community members)\nJoin the live discussion on slack: invite link\nContributions\nIf you have the means to do so, please consider donating money, resources or time for the project, all of which I am currently struggling to afford.\nDirect donations:\nPayPal:  https://paypal.me/winemug/ \nSponsorship:\nGitHub: https://github.com/winemug/\nIf you can:\n\ndonate hardware such as Pods (expired or not, especially Omnipod Dash), used phones (Android or iOS), radio equipment and electronic tools\ndonate cloud resources\nwrite code on .NET/Xamarin, Tizen, Android, iOS or develop a back-end\nmake things look better and more usable\nmake text read in other languages \n\nthen please send an e-mail to my e-mail address below.\nContact\nbarisk@gmail.com\nOmniCore is the follow-up project to OmniPy\nRamblings and otherwise: https://balya.net/\n""]",https://github.com/winemug,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
"Pune, India",4,24,58,95,"['Diabetes Predictor\n\nPredict Diabetes using Machine Learning.\n\nIn this project, our objective is to predict whether the patient has diabetes or not based on various features like Glucose level, Insulin, Age, BMI. We will perform all the steps from Data gathering to Model deployment. During Model evaluation, we compare various machine learning algorithms on the basis of accuracy_score metric and find the best one. Then we create a web app using Flask which is a python micro framework.\n\nRead more about it in my Blogpost.\n\nScreenshot\n\nInstallation\n\n\nClone this repository and unzip it.\n\n\nAfter downloading, cd into the flask directory.\n\n\nBegin a new virtual environment with Python 3 and activate it.\n\n\nInstall the required packages using\npip install -r requirements.txt\n\n\nExecute the command:\npython app.py\n\n\nOpen http://127.0.0.1:5000/ in your browser.\n\n\n']",https://github.com/Aditya-Mankar,"['6', 'Python', 'Updated Feb 25, 2018', '4', 'JavaScript', 'Updated Oct 20, 2020', '6', 'Jupyter Notebook', 'Updated Apr 22, 2019', '18', 'Kotlin', 'GPL-3.0 license', 'Updated Sep 27, 2020', '13', 'Jupyter Notebook', 'Updated Jul 7, 2019', '37', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '6', 'Jupyter Notebook', 'Updated Sep 27, 2016', '6', 'Vue', 'MIT license', 'Updated Oct 3, 2020', '3', 'Jupyter Notebook', 'MIT license', 'Updated Nov 5, 2019', '28', 'HTML', 'MIT license', 'Updated Nov 13, 2020']"
Bangalore,27,11,25,33,['Diabetes-Detection\nThis is my diabetes detection C++ project/program which uses file handling as well. The program tells wheather the person has diabetes or not after testing most of the things.\nThe program can:\n1.Fix Appointment\n2.Can Proceed With Testings\n3.Will-generate Pre-report\n4.Will-generate Final-Report\n5.Has a paitent login\n6.Generate tips\n7.Admin Login\n8.Query-Reply sending application\n9.Allow you to buy Medicine\n10.Medicine Bill\n11.Many More things are there\nThere are many bugs also in some places so help me out in figuring them:)\n'],https://github.com/Amit3200,"['4', 'JavaScript', 'Updated Nov 28, 2017', '7', 'MATLAB', 'Updated Nov 21, 2019', '68', 'Objective-C', 'Updated Feb 21, 2015', '53', 'Java', 'GPL-3.0 license', 'Updated Nov 26, 2020', '4', 'Jupyter Notebook', 'Updated Sep 12, 2019', '3', 'Jupyter Notebook', 'Updated Nov 28, 2016', '9', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Kotlin', 'Updated Oct 22, 2019', '5', 'C++', 'Updated Jul 24, 2017', '2', 'HTML', 'Updated Mar 28, 2018']"
"Utrecht, NL",22,8,106,1671,['Diabetes-App\nDiabetes android application for the diabetes app challenge UK\n'],https://github.com/philleonard,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
New York,253,5,29,269,['Machine-Learning-Predict-Whether-Patient-Suffer-from-diabetes\nMachine Learning Predict Whether Patient Suffer from diabetes\n'],https://github.com/soumilshah1995,"['1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018', '3', 'Jupyter Notebook', 'Updated Aug 13, 2019', '10', 'Go', 'MIT license', 'Updated Jun 27, 2019', '12', 'MATLAB', 'Updated Oct 3, 2019', '2', 'Java', 'Updated Apr 20, 2018', '2', 'Vue', 'Updated Nov 5, 2020', '4', 'Java', 'Updated Mar 28, 2016', '4', 'Python', 'Updated Nov 17, 2017', '3', 'Jupyter Notebook', 'AGPL-3.0 license', 'Updated May 17, 2019', 'Updated Apr 6, 2017']"
"Dhaka, Bangladesh",39,0,1,13,['pima-diabetes-dataset-machine-learning-approach\nDataset : Pima Indian Diabetes Study\nDataset info : https://www.kaggle.com/kumargh/pimaindiansdiabetescsv\nLanguage: Python\n\nBasic by Tamim Shahriar\nAdvanced - freeCodeCamp.org\n\nLibrary:\n\nAnaconda\nJupyter Notebook\nSciKitLearn\nPandas\nMatplotli\nNumpy\n\nAnaconda: open-source distribution of the Python.\n\nDownload.\nInstallation\n\nJupyter Notebook\n\nHow to use\n\nThe model try to predict the risk of diabetes for an out of sample patien\n'],https://github.com/mahemon,"['1', 'Jupyter Notebook', 'Updated Sep 27, 2017', '4', 'Pascal', 'GPL-3.0 license', 'Updated Oct 20, 2020', '15', 'Python', 'GPL-3.0 license', 'Updated May 18, 2019', '1', 'Jupyter Notebook', 'Updated Jun 28, 2016', '4', 'HTML', 'Updated Oct 24, 2020', '24', 'JavaScript', 'Updated Nov 2, 2018', '3', 'Java', 'Updated Dec 29, 2018', '2', 'HTML', 'MIT license', 'Updated Apr 12, 2018', '5', 'Jupyter Notebook', 'MIT license', 'Updated Apr 8, 2019', '2', 'Python', 'Updated May 15, 2019']"
"Accra,Ghana",83,63,39,0,['It is a simple web application that allows you to know your diabetes status. You can test it from here and it is live http://diabetes.oasiswebsoft.com/\n'],https://github.com/raindolf,"['2', 'JavaScript', 'Updated Oct 26, 2012', '2', 'Python', 'Updated Apr 7, 2019', 'HTML', 'Updated Jul 16, 2019', '6', 'Go', 'Updated Oct 21, 2020', '10', 'Jupyter Notebook', 'BSD-3-Clause license', 'Updated Sep 27, 2020', '8', 'Python', 'Updated Nov 8, 2017', '3', 'Python', 'Updated Apr 29, 2017', 'JavaScript', 'Updated Apr 15, 2019', '3', 'JavaScript', 'Updated Jul 10, 2013', '3', 'Jupyter Notebook', 'Updated Jul 16, 2017']"
"Beijing, China",100,18,139,338,"['Readmission Prediction\n\n\n\n\n\n1. Dependencies\npython>=3.6\nLibraries:\n- numpy\n- pandas\n- scipy\n- imbalanced-learn\n- seaborn\n- XGBoost\n- scikit-learn\n- matplotlib\n\n2. Datasets\nRaw dataset Diabetes 130-US hospitals for years 1999-2008 Data Set can be found hear.\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes over 50 features representing patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria.\n\n(1) It is an inpatient encounter (a hospital admission).\n(2) It is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\n(3) The length of stay was at least 1 day and at most 14 days.\n(4) Laboratory tests were performed during the encounter.\n(5) Medications were administered during the encounter. The data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\n\n3. Files\nReadmission prediction task can be concluded by the figure below:\n\npreprocess.py: used for preprocessing data, generate the processed data file preprocessed_data.csv which saved in folder data.\ntrain.py: used for training and output, test models are XGBoost and Random Forest. Accuracy, confusion matrix and overall report of models will shown after running.\n4. Usage\n>_ python3.6 preprocess.py\n>_ python3.6 train.py\n\n5. Performances\nXGBoost\nConfusion matrix:\n\nTop 10 importent features:\n\nRandom Forest\nConfusion matrix:\n\nTop 10 important features:\n\n6. License\n\n']",https://github.com/freesinger,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
"Cuttack , Odisha , India",13,10,8,32,"['Pima-Diabetes-Prediction\nDiabeties Prediction Model from pima data set\npima dataset :\nOriginal Owners:\nNational Institute of Diabetes and Digestive and Kidney Diseases\nData Set Information:\nSeveral constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage. ADAP is an adaptive learning routine that generates and executes digital analogs of perceptron-like devices. It is a unique algorithm; see the paper for details.\nAttribute Information:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nThe reformatted data set csv used in the project can be found here\n.. ML Algorithim\nEntire prdeicition model is written with Python3 and Jupyter Notebook.\nused python lib : pandas, numpy , matplot-lib , scikit.\nEntire notebook source in pdf here\n']",https://github.com/DevSurya,"['Python', 'GPL-3.0 license', 'Updated Dec 15, 2017', '4', 'MATLAB', 'MIT license', 'Updated Jun 27, 2020', '5', 'Python', 'Updated Nov 4, 2015', '1', 'Java', 'Updated Feb 29, 2016', '2', 'Python', 'Updated Sep 4, 2018', 'Jupyter Notebook', 'Updated Feb 12, 2019', 'Python', 'Updated Feb 8, 2020', '1', 'Jupyter Notebook', 'Updated Nov 25, 2020', '1', 'Jupyter Notebook', 'Updated Oct 8, 2017', 'Swift', 'Updated Mar 22, 2019']"
Jakarta,2,4,1,274,['Program Diagnosa Diabetes\nInstall requirements\n$ pip install -r requirements.txt\nJalankan\n$ py app.py\n'],https://github.com/alfarelrizky,"['2', 'Java', 'AGPL-3.0 license', 'Updated Aug 1, 2019', '2', 'Jupyter Notebook', 'Updated Oct 12, 2019', '2', 'CSS', 'Updated Oct 30, 2020', '2', 'R', 'Updated Dec 16, 2019', '4', 'Pascal', 'MIT license', 'Updated Jan 10, 2019', '3', 'JavaScript', 'Updated Feb 18, 2019', '7', 'JavaScript', 'Updated Apr 24, 2016', '17', 'JavaScript', 'MIT license', 'Updated Sep 7, 2020', 'Python', 'Updated Nov 27, 2020', '1', 'PHP', 'MIT license', 'Updated Oct 8, 2015']"
"London, Ontario",12,11,217,54,"[""OpenDataBetes\n###an all-inclusive data-format to store diabetes treatment information.\nWe are currently at version 0.000, so there's not much to download, but there's a lot of work to be done\nOnce the dataformat is all shiny and nice, the primary focus will shift to providing conversions for other systems into the opendatabetes format. Ultimately it would be completely awesome to have a conversion for every pump, glucometer and diabetes app out there.\nRight now there are hundreds of fragmented solutions for tracking blood glucose and insulin, exercise, life information that relate to living with diabetes. Most are proprietary. Every company has its own method of tracking and storing the data and they don't tend to play nice with each other.\nOpen-data-betes started because I wanted to make my own Diabetes management application, but I didn't want to exclude users of specific devices or treatment strategies. I was disappointed that with the proliferation of Diabetes Management tools, nothing existed that was really universal, and all the valuable data was essentially being siloed.\nAfter completing a rough prototype of Sanguine Diabetes Manager, I realized that there was a better first step. Rather than adding one more management application to help expediate putting any tech-using diabetic into decision paralysis, I ought to focus on the foundation of the community: Encourage DiabetesIT development to behave in a progressive, open, helpful way; much like the front-end web community does.\nSo to get the ball rolling, here is a github repo and a readme.\nIf you're interested in contributing to this project, or if there's other projects already doing this that I haven't found please contact me.\nFor an inventory of existing formats in the wild, the Diabetes Data Wiki is a good place to start, the author farrell paper also has some suggestions.\n\n~bewest\nIs there a way to re-use git/npm/egg style compilations of data, so that there is a sane structure of plain text files?\nThese are easy to work with/reformat into csv/json/xml, etc, and we will need many adapters.\nThis way, I could point the tool, sanguine <git://github.com/bewest/my-data.git> or insulaudit upload git@github.com:bewest/my-phr.git\nWe can bundle some basic tools to verify/reformat data, and it provides a nice audit trail on what software has done to it, and is endlessly extensible.\n\n\n~thedamon\nI'm not familiar with those, personally.\nI was thinking of using straight up JSON because of its seeming ubiquity and ease of parsing it in most circumstances. With JSON you get a low point of entry for people wanting to plug things in and play around.\nBut if one of these formats is more easily parsed, that could make sense.\n\n""]",https://github.com/thedamon,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"Berlin, Germany",13,14,394,596,"['gmi\n\n\n\n\n\n\ngmi (glucose metabolism indices) is an R package that bundles\npopular insulin sensitivity and beta cell function indexes, so you don\'t need an\nextra excel sheet, to copy-paste a function, or to write the formula yourself.\nInstallation\nOnly the developmental version is currently available.\n# install.packages(""remotes"")\nremotes::install_github(""jcpsantiago/gmi"")\nIf you use gmi please cite it using the DOI: 10.5281/zenodo.2631368.\nIndexes\nComparisons between each index and the hyperinsulinaemic-euglycaemic clamp are discussed in Otten et al., 2014\nThe following indices are currently implemented:\nFasting indices:\n\nFIRI\nHOMA-IR\nQUICKI (both original and revised)\n\nOGTT indices:\n\nCederholm\nGutt (ISI0,120)\nMatsuda (Composite Index)\nNEFA-ISI\nStumvoll-ISI\nStumvoll-MCR\n\nTODO\n\nImplement OGIS.\n\n']",https://github.com/jcpsantiago,"['Jupyter Notebook', 'Updated Feb 5, 2018', '1', 'Updated Aug 11, 2020', '6', 'Python', 'MIT license', 'Updated Aug 11, 2018', 'Jupyter Notebook', 'Updated Sep 15, 2019', 'Jupyter Notebook', 'Updated Nov 16, 2016', '2', 'Python', 'Updated Jun 11, 2018', '3', 'Jupyter Notebook', 'Updated Jul 24, 2018', '2', 'MIT license', 'Updated Nov 25, 2018', '2', 'R', 'Updated May 3, 2019', '3', 'Jupyter Notebook', 'Updated Oct 4, 2019']"
The Internet,64,88,297,230,['WowDiabetesWebsite\nWebsite for WoW Addon for diabetes research\nAddon Repo\nSetup\nnpm install\ngulp\n\nFor production build:\ngulp production\n\nIcon Font\ngulp iconFont\n\n'],https://github.com/lcb931023,"['1', 'HTML', 'Updated Jan 24, 2016', '4', 'Jupyter Notebook', 'Updated Aug 19, 2020', '4', 'Jupyter Notebook', 'Updated Oct 30, 2020', '2', 'Python', 'Updated Oct 6, 2017', 'Java', 'Updated Nov 12, 2016', 'Scala', 'Updated Sep 11, 2016', '6', 'Jupyter Notebook', 'Updated Jan 27, 2020', '5', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jun 11, 2020', 'HTML', 'MIT license', 'Updated Jun 30, 2015', 'Python', 'Updated Oct 22, 2018']"
Nairobi Kenya,90,77,90,1358,['DiabetesChatbot\nA chatbot model notebook to answer all your diabetes queries using Tensorflow library.\nHow to use\nDownload all the required libraries and run the code in an Ipyhton File e.g Jupyter Notebook\n'],https://github.com/WanjiruCate,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
São Paulo,51,4,0,7,"['pima-indians-diabetes-ML_.NET\nIn this example using the pima-indians-diabetes dataset, we will perform a classification between people with positive and negative diagnoses, to perform the classification we use:\n#.net core 2.1 ML\n#.NET 0.5 previews\n']",https://github.com/thayssa1186,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
Boston,18,15,29,0,"['Diabetes Manager\nGeneral Assembly Web Development Immersive, Project 2\nOverview and Purpose\nTHe purpose of this project was to demonstrate coding CRUD actions in a full-stack application. I coded this after having been in GA\'s web deveopment program for six weeks. The the back end uses Ruby on Rails with a PostgresSQL database, and the front end uses Javascript and jQery to manipulate the DOM.\nUser Instructions\nSign up with a username and password, then sign in. Can create ""doses"". Each dose is stored in the database with a medicine. Users can create new medicines to assign to a dose from the dose window.\n']",https://github.com/MFBrewster,"['4', 'Jupyter Notebook', 'Updated Feb 6, 2019', '2', 'Jupyter Notebook', 'Updated Aug 17, 2020', '2', 'HTML', 'MIT license', 'Updated Nov 22, 2020', '2', 'R', 'Updated Aug 16, 2017', 'Updated Dec 22, 2014', 'Python', 'Updated Aug 11, 2017', '2', 'Updated Apr 6, 2018', '2', 'Java', 'Updated May 4, 2020', '2', 'JavaScript', 'Updated Apr 25, 2016', '2', 'C#', 'Updated Sep 11, 2014']"
"Panjab University, Chandigarh",3,4,0,1,['Diabetes\n'],https://github.com/kundumeenu,"['Updated Jan 3, 2018', 'Updated Mar 27, 2017', 'Updated Nov 10, 2017', 'Swift', 'Updated Dec 14, 2016', 'Jupyter Notebook', 'Updated Mar 7, 2018', 'Updated Mar 12, 2018', 'Updated Mar 24, 2019', 'Python', 'Updated Jun 30, 2019', 'Python', 'Updated Feb 8, 2019', 'Jupyter Notebook', 'Updated Oct 30, 2019']"
"Los Angeles, CA",5,5,5,419,"['This project was bootstrapped with Create React App.\nAvailable Scripts\nIn the project directory, you can run:\nyarn start\nRuns the app in the development mode.\nOpen http://localhost:3000 to view it in the browser.\nThe page will reload if you make edits.\nYou will also see any lint errors in the console.\nyarn test\nLaunches the test runner in the interactive watch mode.\nSee the section about running tests for more information.\nyarn build\nBuilds the app for production to the build folder.\nIt correctly bundles React in production mode and optimizes the build for the best performance.\nThe build is minified and the filenames include the hashes.\nYour app is ready to be deployed!\nSee the section about deployment for more information.\nyarn eject\nNote: this is a one-way operation. Once you eject, you can’t go back!\nIf you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\nYou don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\nLearn More\nYou can learn more in the Create React App documentation.\nTo learn React, check out the React documentation.\nCode Splitting\nThis section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting\nAnalyzing the Bundle Size\nThis section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\nMaking a Progressive Web App\nThis section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nAdvanced Configuration\nThis section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration\nDeployment\nThis section has moved here: https://facebook.github.io/create-react-app/docs/deployment\nyarn build fails to minify\nThis section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\n']",https://github.com/angelo1104,"['Jupyter Notebook', 'Updated Jul 31, 2020', '1', 'Jupyter Notebook', 'Updated May 30, 2020', '1', 'Python', 'Updated Feb 13, 2018', 'Jupyter Notebook', 'Updated Jun 15, 2020', 'Updated Jun 15, 2020', 'Jupyter Notebook', 'Updated Jun 18, 2020', 'HTML', 'Updated Jul 2, 2020', '1', 'Jupyter Notebook', 'Updated Oct 20, 2020', 'JavaScript', 'Updated Oct 28, 2020', 'HTML', 'Updated Nov 9, 2020']"
Pittsburg CA,1,1,1,7,"['ETL of 2012 and 2014 data on adult diabetes and childhood obesity from the Centres for Disease Control and Prevention\nIntroduction\nDiabetes is a group of diseases which is marked by the body\'s inability to produce sufficient amounts, or to respond appropriately to insulin. It is not curable but it is highly treatable. Diabetes types 1 and 2 are the most common types of diabetes. Type 1 patients need insulin for survival because their immune systems are are destroying their pancreas beta cells (those that produce insulin). Type 2 patients exhibit ""insulin resistance"" or ""relative insulin deficiency"". Obesity in children, on the other hand, is defined by the Centres for Disease Control and Prevention (CDC) as the 95th percentile or greater of the body mass index (BMI) distribution of children of the same age and sex. Hillier et al. (2007) reported that the risk of childhood obesity and gestational hyperglycaemia (diabetes) are positively correlated. Hence, these two diseases are of high concern. Moreover, the CDC reported that more than 100 million adults are living with diabetes in the U.S.A.  and Cheung et al. 2016 reported that childhood obesity is a public health concern in the country. A possible first step in alleviating the effects of these diseases is to determine their prevalence in the 54 the states or territories of the U.S.A.\nThis project aimed to extract data from publicly available CDC information about adult diabetes and childhood obesity, transform the data, and load the data into a database. It also aimed to create a Flask app which would render the transformed data into HTML.\nMethodology\nThree Jupyter notebooks were used for extracting, transforming, and loading the diabetes and obesity data:\n\nClean_Chronic_Disease_indicators.ipynb\nClean_Nutrition_Data.ipynb\nJoin_obesity_diabetes_tables.ipynb\n\nIn addition, the MySQL database diabetes_db was created using the Diabetes.sql script. On the other hand, a Flask app (diabetes_app.py) was developed to display the table and plots generated from the data onto html. This app is not yet online and currently lives on the localhost upon download. The code for these plots are found in  Join_obesity_diabetes_tables.ipynb.\nExtraction\nData was extracted from two datasets provided by the CDC: (1) on chronic disease indicators in the U.S.A. and (2) on nutrition, physical activity, and obesity in women, infants, and children.\nBoth datasets were downloaded as csv files and extracted using Python (version 3.6) Pandas module in separate Jupyter Notebooks.\n# Dependencies\nimport pandas as pd\nThe chronic diseases indicators file contains the statistics for diabetes prevalence in adults 18+ years old. On the other hand, the data for occurrence of obesity in children 2–4 years old are found in the nutrition, physical activity, and obesity file.\n# Load CSV file as dataframe\n    # The csv files are stored locally in a Resources folder. But because they exceed GitHub\'s file size requirement, \n    # links to the Google Drive copy of the files are provided.\ndiseasedata = pd.read_csv(""Resources/U.S._Chronic_Disease_Indicators__CDI_.csv"")\n\nnutr_df = pd.read_csv(""Resources/Nutrition__Physical_Activity__and_Obesity_-_Women__Infant__and_Child.csv"")\nTransformation\nFiltering the dataframe for the most relevant columns\nThe columns of interest in diseasedata were those that provided information about the crude prevalence of adult diabetes in 2012 and in 2014. Hence, the dataframe chronic_df was generated as follows:\nchronic_df = diseasedata[[""YearEnd"", ""LocationDesc"", ""Topic"", ""Question"", ""DataValueUnit"", ""DataValueType"", \n""DataValue"", ""Stratification1""]]\nThe columns of interest in nutr_df provided information about obesity in children 2–4 years old in 2012 and in 2014. Therefore, the next iteration of the dataframe was generated with the following code.\nnutr_df2 = nutr_df[[""YearEnd"", ""LocationDesc"", ""Question"", ""Data_Value"", ""StratificationID1""]]\nSelect the values for 2010, 2012, and 2014\nOriginally, this project intended to extract data for three years (2010, 2012, and 2014). Hence, the codes used to subset the dataframes for the identified years were:\nYears = [2010, 2012, 2014]\nchronic_df2 = chronic_df[chronic_df[""YearEnd""].isin(Years)]\nnutr_df3 = nutr_df2[nutr_df2[""YearEnd""].isin(Years)]\nSelect diabetes as the chronic disease of interest\nThere were numerous chronic diseases in the chronic_df dataframe. Because diabetes in adults was of interest, rows pertaining for this disease were selected:\nchronic_df3 = chronic_df2[chronic_df2[""Topic""] == ""Diabetes""]\nObesity was not selected in the nutr_df dataframe because all rows were associated with obesity and weight status.\nSelect rows on US states and territories\nThe chronic diseases dataframe featured data for each U.S. state and territory and country-wide data. The country-wide data was removed from the dataframe since this project was focused only on data from the different states and territories.\nchronic_df4 = chronic_df3[chronic_df3[""LocationDesc""]!=""United States""]\nThis step was not performed in the nutrition dataframe because it did not contain country-wide data; just for each state and territory.\nSelect rows with no stratification (value = ""Overall"")\nThe values to be presented were for overall prevalence. Hence, the other stratification (e.g., age, gender, ethnicity) were filtered out. For the latest iteration of nutr_df, the dataframe was also filtered for the target question (obesity in 2–4 year-old children). For the latest iteration of chronic_df, rows pertaining to crude prevalence were retained.\nnutr_df4 = nutr_df3.query(""StratificationID1 == \'OVERALL\'& \\\n                          Question == \'Percent of WIC children aged 2 to 4 years who have obesity\'"")\n\nchronic_df5 = chronic_df4.query(""DataValueType == \'Crude Prevalence\' & Stratification1 == \'Overall\'"")\nThe filtering of chronic_df was refined by selecting the prevalence of diabetes in adults 18+ years.\nchronic_df6 = chronic_df5[chronic_df5[""Question""] == ""Prevalence of diagnosed diabetes \\\namong adults aged >= 18 years""]\nRemoval of columns that showed the same information\nAfter all the filtering, the latest iteration of the dataframes, nutr_df4 and chronic_df6, contained category columns that contained the same values in their rows. Hence, these columns had to be removed and their values were used as names of the data columns.\n# Rename columns for clarity\nchronic_df6 = chronic_df6.rename(columns = {""YearEnd"": ""Year"",\n                                            ""LocationDesc"": ""US_State"",\n                                            ""DataValue"": ""Adult_Diabetics_Percent""})\n\nnutr_df4 = nutr_df4.rename(columns = {""YearEnd"": ""Year"",\n                                      ""LocationDesc"": ""US_State"",\n                                      ""Data_Value"": ""Obese_Children_Percent""})\n\n# Further clean the dataset\nchronic_df7 = chronic_df6[[""Year"", ""US_State"", ""Adult_Diabetics_Percent""]]\nnutr_df4 = nutr_df4[[""YearEnd"", ""LocationDesc"", ""Data_Value""]]\nCreating a database\nThe nutrition and the chronic dataframes could now loaded into the diabetes_db which has been written in MySQL. Two tables were created in this database: (1) obesity; and (2) diabetes.\nLoading into the database\nThe obesity data (from nutr_df4) was loaded into the obesity table while the diabetes data (from chronic_df) was loaded into the diabetes table through SQLAlchemy.\n# Dependencies\nfrom sqlalchemy import create_engine\nfrom config import password\nThe config.py file containing the password to MySQL was not included in the GitHub repository for security purposes.\nA connection to diabetes_db was created as follows:\nconn = ""root:{0}@localhost:3306/diabetes_db"".format(password) # Password is in a separate file\nengine = create_engine(f""mysql://{conn}"")\nThe presence of the two tables in diabetes_db was first confirmed before loading data.\nengine.table_names()\nThe data was then loaded using the following script. if_exists is set to ""replace"" so that if the code were to be run again, the data wouldn\'t be appended as duplicates. index was set to ""False"" so that the index assigned to the data in the dataframes would not be saved in the database.\nchronic_df7.to_sql(name = ""diabetes"", con = engine, if_exists = ""replace"", index = False)\nnutr_df4.to_sql(name = ""obesity"", con = engine, if_exists = ""replace"", index = False)\nJoining tables and a second ETL\nA third table was created in diabetes_db, called \'merged\'. This would contain the resulting data from joining the data from the \'obesity\' and the \'diabetes\' tables. SQLAlchemy was used to create a connection to the updated database and the presence of the three tables was confirmed using the code above.\nTo extract the data from the \'obesity\' and the \'diabetes\' table, Pandas was used:\n# Read the table contents (for diabetes)\ndiabetes = pd.read_sql(""select * from diabetes"", con = engine)\ndiabetes = diabetes.sort_values(by = ""US_State"")\n\n# Read the table contents (for obesity)\nobesity = pd.read_sql(""select * from obesity"", con = engine)\nobesity = obesity.sort_values(by = ""US_State"")\nThe data was sorted in alphabetical order of the U.S. state or territory. Then, the data was transformed by merging the two dataframes, diabetes and obesity based on year and U.S. state.\n# Merge diabetes and obesity dataframes\nmerged = pd.merge(diabetes, obesity, on=[\'Year\',\'US_State\'], how=\'inner\')\nUsing ""inner"" to merge the two dataframes caused rows pertaining to 2010 data to be removed. Hence, only data for two years, 2012 and 2014, were retained. The resulting dataframe was loaded into the \'merged\' table of diabetes_db:\nmerged.to_sql(name = ""merged"", con = engine, if_exists = ""replace"", index = False)\nThe newly loaded data could be read either using MySQL or pandas.\nIn Jupyter notebook:\npd.read_sql_query(""select * from merged"", con = engine).head()\n\nOR \n\nIn MySQL Workbench:\nSELECT * FROM merged;\nExtras: Creating a Flask app that renders static HTML files\nVisualising diabetes and obesity trends per statefor 2012 and 2014\nIn the third Jupyter notebook, the merged dataframe was further cleaned to replace \'None\' with NaN and to convert numerical values from string to float.\n# Convert None values to NAN\nmerged.fillna(value = pd.np.nan, inplace = True)\n\nmerged[""Adult_Diabetics_Percent""] = merged[""Adult_Diabetics_Percent""].astype(float)\nThe dataframe was then split into two based on the year:\nmerged_2012 = merged[merged[""Year""] == 2012]\nmerged_2014 = merged[merged[""Year""] == 2014]\nTo create a bar chart for diabetes for 2012, the following code was used:\nx_pos = np.arange(len(merged_2012[""US_State""]))\ndiabetics_2012 = list(merged_2012[""Adult_Diabetics_Percent""])\n\nplt.figure(figsize = (16,8))\nplt.bar(x_pos, diabetics_2012)\nplt.xticks(x_pos, merged_2012[""US_State""], rotation = 90, fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel(""U.S. State or Territory"", fontsize = 16)\nplt.ylabel(""Prevalence of Adult Diabetics (%)"", fontsize = 16)\nplt.tight_layout()\nThis code was used to pattern other code to generate data for diabetes in 2014, and obesity for 2012 and for 2014.\nTo create plots that compared data between years per disease, merged was spliced to create new dataframe based on diseases:\nmerged_diabetics = merged[[""Year"", ""US_State"", ""Adult_Diabetics_Percent""]]\nmerged_obesity = merged[[""Year"", ""US_State"", ""Obese_Children_Percent""]]\nTo create a grouped bar chart, the dataframes had to be pivoted such that the datapoints were placed into two columns based on the year.\nmerged_diabetics = merged_diabetics.pivot(index = ""US_State"", columns = ""Year"")\nmerged_obesity = merged_obesity.pivot(index = ""US_State"", columns = ""Year"")\nThe grouped bar plot for diabetes prevalence, comparing 2012 and 2014, was generated with the following script:\nax = merged_diabetics.plot(kind = ""bar"", figsize = (16,8))\nax.set_xlabel(""U.S. State or Territory"", fontsize = 16)\nax.set_ylabel(""Prevalence of Adult Diabetes (%)"", fontsize = 16)\nax.legend([""2012"",""2014""], fontsize = 12)\nplt.tight_layout()\nA similar bar plot for obesity prevalence was also generated, adopting the code above.\nAll plots were saved into the Images folder. For example:\nplt.savefig(""Images/diabetics_2012_2014.png"")\nFlask app development\nThe diabetes_app.py needed PyMySQL to connect to the diabetes_db database and several Flask features:\nfrom flask import Flask, request, render_template, jsonify\nimport pymysql\nfrom config import password\nThe connection to the database was created.\ndb = pymysql.connect(""localhost"", ""root"", f""{password}"", ""diabetes_db"")\nSeveral static html pages were rendered by some of the routes. For example:\n@app.route(\'/\')\ndef intro():\n    return render_template(""index.html"")\nThese static pages have been pre-loaded with the plots saved in the Images folder. One html page, however, contains the data extracted from the connected database:\n@app.route(\'/data\')\ndef index():\n    cursor = db.cursor()\n    sql = ""SELECT * FROM merged""\n    cursor.execute(sql)\n    columns = [col[0] for col in cursor.description] # gets the column headers in the merged table\n    results = [dict(zip(columns, row)) for row in cursor.fetchall()] # output is a list of dictionaries\n    return render_template(""data.html"", results = results)\nUsing cursor.fetchall() would lead to a list of tuples containing values.\n#Output example (tuple) in HTML\n(2012, ""Alabama"", ""12.2"", 15.6)\nTo be able to render the data onto a HTML table, the output needed to be a list of dictionaries. Hence, the column names were extracted from the \'merged\' table as well (the first element in a list outputted by cursor.description). For each row (effectively, each tuple in the list), the column names and the rows were zipped and converted to a dictionary.\n# Output example (dictionary) in HTML\n{""Year"": 2012, ""US_State"": ""Alabama"", ""Adult_Diabetics_Percent"": ""12.2"", ""Obese_Children_Percent"": 15.6}\nThe dictionary was rendered onto the table in data.html.\n...\n<table>\n    ...\n    <!-- Loop through rows in results -->\n    <!-- Each row contains year, state, diabetics, obese values -->\n    {% for row in results %}\n    <tr>\n        <td>{{ row.Year }}</td>\n        <td>{{ row.US_State }}</td>\n        <td>{{ row.Adult_Diabetics_Percent }}</td>\n        <td>{{ row.Obese_Children_Percent }}</td>\n    </tr>\n    {% endfor %}\n    ...\n</table>    \n...\n']",https://github.com/rochiecuevas,"['R', 'Updated Apr 11, 2016', 'CSS', 'Updated Feb 14, 2015', 'Java', 'Updated Sep 28, 2015', 'Ruby', 'Updated Oct 1, 2013', 'CSS', 'Updated Sep 19, 2014', 'CSS', 'BSD-3-Clause license', 'Updated Sep 29, 2014', 'R', 'Updated Sep 14, 2012', 'Updated Dec 18, 2018', 'Jupyter Notebook', 'Updated Dec 7, 2018', 'R', 'Updated Feb 3, 2018']"
Jodhpur,1,0,0,2,['Diabetes-prediction\n'],https://github.com/pankaj-iitj,"['Updated Apr 4, 2019', 'Updated Nov 24, 2019', 'JavaScript', 'Updated Jan 30, 2020', 'Updated Feb 21, 2020', 'Jupyter Notebook', 'Updated Nov 1, 2019', 'Jupyter Notebook', 'Updated May 30, 2020', 'Python', 'Updated Mar 22, 2020', 'Updated Apr 20, 2020', 'Python', 'Updated Apr 22, 2020', 'Jupyter Notebook', 'Updated Jul 18, 2020']"
United Kingdom,32,36,10,207,['Machine Learning Algorithms for Diabetes Prediction\n'],https://github.com/kulasedat,"['Updated Jul 29, 2020', 'Jupyter Notebook', 'Updated May 22, 2020', 'Jupyter Notebook', 'Updated Aug 13, 2020', 'HTML', 'Updated Oct 24, 2020', 'Python', 'Updated Oct 24, 2020', '4', 'JavaScript', 'Updated Jul 16, 2020', '2', 'Java', 'Updated Mar 30, 2016', '2', 'Jupyter Notebook', 'Updated Jun 21, 2020', '2', 'Jupyter Notebook', 'Updated Oct 27, 2020', '2', 'MATLAB', 'Updated Jul 15, 2016']"
Spain,1,1,1,1,"['diabetes\nApp de ayuda en tratamiento de Diabetes Mellitus tipo I, dosificación de insulina y predicción de hipoglucemias.\nEl trabajo se va a realizar sobre las siguientes fases:\n1.- creación en java del sistema de dosificación de insulina.\nActualmente resuelto y probado con Junit para todas las situaciones posibles.\n2.- app de android, para gestionar el histórico de glucosas e insulina.\nFinalizada.\n3.- machine learning para predecir y evitar hipoglucemias.\nFinalizado.\n']",https://github.com/efervescencia,"['2', 'Jupyter Notebook', 'Updated Jun 25, 2020', 'MIT license', 'Updated May 11, 2015', 'JavaScript', 'Updated Apr 22, 2013', 'Updated Nov 12, 2016', 'Jupyter Notebook', 'Updated Dec 9, 2017', 'R', 'Updated Jan 18, 2018', 'Updated Oct 15, 2017', 'Python', 'Updated Mar 31, 2018', 'Java', 'Apache-2.0 license', 'Updated Jan 30, 2019', 'Updated Jun 15, 2018']"
Fran Sancisco,55,4,30,12,"['In 2010 I raised $3500 for the Juvenile Diabetes Research Foundation (my sister is sufferer). This is the website I used to help raise funds, see it here: ride.jimwhimpey.com/.\n']",https://github.com/jimwhimpey,"['Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019', '2', 'Jupyter Notebook', 'Updated Jun 25, 2020', '2', 'JavaScript', 'Updated Feb 27, 2012', '2', 'Python', 'Apache-2.0 license', 'Updated May 3, 2020']"
"Pune,INDIA",5,2,6,800,"['\n\n\n\nMedium Blog:\n \nDiabetes_prediction\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features like Glucose level, Insulin, Age, BMI. We will use the Pima Indians dataset from the UCI Machine learning repository.\nquick demo\n\nwe can predict diabetes from two ways.\n\n\nUser will fill the data after that prediction will be displayed over UI.\n\n\nUser can upload csv file with required features and then get downloadable predicted csv  file.\nBelow is screenshot for sample csv, while bulk prediction same features column sequence needs to be maintained in uploading file.\n\n\n\nDescription of variables in the dataset:\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness:Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)²)\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutcome: Class variable (0 or 1)\nDiabetes-Prediction directory tree\n├─ app.py\n├─ demo.gif\n├─ downloads\n│  └─ prediction.csv\n├─ LICENSE\n├─ models\n│  ├─ model.py\n│  ├─ my_model.pkl\n│  ├─ predict.py\n│  └─ transformer.pkl\n├─ procfile\n├─ README.md\n├─ requirements.txt\n├─ src\n│  └─ diabetes.csv\n├─ static\n│  └─ css\n│     ├─ grid.css\n│     ├─ images\n│     │  └─ dia.jpeg\n│     └─ style.css\n├─ templates\n│  └─ index.html\n└─ uploads\n   └─ test.csv\n\n\napp.py : Front and back end portion of the web application\ndownloads : conatains predcited csv file(based on uploaded file)\nmodels  : contains model for prediction\nrequirements.txt : required library\nsrc  : conatins raw data file\nstatic : contains static file (css, img) for UI\ntemplates : contains templates for UI\nuploads : uploded csv file will store  here  after that it will used for prediction(added test file for sample)\nInstallation\n\n\nClone this repository and unzip it.\n\n\ncreate new env with python 3 and activate it .\n\n\nInstall the required packages using pip install -r requirements.txt\n\n\nExecute the command: python app.py\n\n\nOpen http://127.0.0.1:5000/ in your browser.\n\n\nTechnologies Used\n\n\nLicense\n\n']",https://github.com/Uttam580,"['Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015', '2', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Feb 10, 2020', '2', 'CSS', 'MIT license', 'Updated Jul 30, 2020', '2', 'Updated Mar 13, 2016']"
Nigeria,9,8,30,1497,['diabetesML\n'],https://github.com/teezzan,"['6', 'Python', 'Updated Jun 17, 2020', 'C#', 'Updated May 23, 2015', 'JavaScript', 'MIT license', 'Updated Apr 27, 2015', '1', 'PHP', 'Updated May 7, 2014', 'Python', 'Updated Jul 19, 2017', 'Jupyter Notebook', 'Updated Jan 26, 2018', 'Python', 'Updated Apr 10, 2017', '1', 'Java', 'Updated Apr 7, 2017', 'Python', 'Updated Oct 29, 2018', 'Updated Aug 3, 2018']"
"Sydney, Australia",1,2,7,0,"['Diabetes classifier\nA set of diabetes classifiers written for an AI assignment\nThe data\nThe dataset for this assignment is the Pima Indian Diabetes dataset. It contains 768 instances described by 8 numeric attributes. There are two classes\xa0 ‐\xa0 yes and no. Each entry in the dataset corresponds to a patient’s record; the attributes are personal characteristics and test measurements; the class shows if the person shows signs of diabetes or not. The patients are from Pima Indian heritage, hence the name of the dataset.\nThe classifiers and tools\nNaïve Bayes, Decision Tree and 10‐fold stratified cross‐validation were implemented\n']",https://github.com/Technoash,"['Jupyter Notebook', 'Updated May 6, 2020', 'Jupyter Notebook', 'Updated Sep 14, 2020', 'Python', 'Updated Nov 25, 2020', 'HTML', 'Updated Feb 29, 2016', 'Java', 'Updated Jun 17, 2016', 'Java', 'Updated Aug 5, 2017', 'Java', 'Updated May 19, 2017', '1', 'Jupyter Notebook', 'Updated Apr 25, 2017', 'Python', 'Updated Jul 27, 2018', 'R', 'Updated Jul 24, 2018']"
between Brittany and South Korea,99,39,418,217,"[""      \nDjango Diabetes\nDjango Diabetes is a personal Glucose Manager\nIt allows you to follow your daily health\nImprovements\nAs I'm not suffering from diabetes, I am very open to suggestions for improvement of this project that I designed for a friend. For example with the type of examinations, etc... Currently I maintain the project by evolving versions of python and django.\nRequirements:\n\nPython 3.6\nDjango 2\narrow 0.12.x\n\nInstallation:\nto get the project, from your virtualenv, do :\ngit clone https://github.com/push-things/dj-diabetes.git\n\nto add the needed modules , do :\npip install -r requirements.txt\n\ncreate a new user who will be the admin :\npython manage.py createsuperuser\n\nand at least :\npython manage.py makemigrations dj_diabetes\npython manage.py migrate dj_diabetes\npython manage.py loaddata dj_diabetes_preferences.json\npython manage.py createsuperuser\n\nto startup the database and load the data\n\n""]",https://github.com/foxmask,"['47', 'Python', 'Updated Jul 16, 2018', '330', 'Java', 'GPL-3.0 license', 'Updated Aug 20, 2018', '89', 'C#', 'Updated Oct 7, 2019', '191', 'Jupyter Notebook', 'Updated Mar 22, 2018', '26', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Jul 12, 2019', '135', 'Python', 'Updated Oct 4, 2020', '201', 'Makefile', 'MIT license', 'Updated Nov 15, 2020', '65', 'HTML', 'Updated Oct 20, 2020', '18', 'Python', 'Updated Jan 30, 2018', '80', 'Python', 'BSD-3-Clause license', 'Updated Feb 5, 2019']"
"Chennai,Tamil Nadu,India",31,29,23,23,"[""Prediction of diabetes - Type 2 (Mellitus)\nHosted Link : Click here\nThis is a machine learning project based on the prediction of type 2 diabetes, with a given data. It uses logistic regression to classify the diabetic outcomes of each person's record.The diabetes is growing threat nowadays, one of the reasons being that there is no perfect cure for it. There are actually two types of diabetes, namely\n\nType 1\nType 2\n\nThe type 2 diabetes is commonly called diabetes mellitus. It can be defined as a chronic condition that affects the way the body processes blood sugar (glucose). We consider the mellitus here. After several researches we found that, some parameters are directly responsible for the mellitus to occur. By using the data of the people with diabetes and without diabetes, a dataset has been build.\nWe use that dataset to classify the people who are in the risk of getting diabetes.\nDirectory structure\nCode\nThis directory contains the source code files.\n\nPrediction.rmd : Source code,R Markdown file\n\nData\n\nDiabetes.csv : The dataset\n\nResults\nThis directory has the codes and the outputs, presented in a neat format.\n\nPrediction.html : Presents the project as html file, with wonderful designs (Download is recommended)\nPrediction.pdf : Presents the project as simple document.\n\nTable of contents\nThe topics are elaborated in the markdown/results\n\nIntroduction\nLoading the required libraries\nData Loading\nCorrelations\nVisualizations\nPreparing the data\nLogistic Regression\nPrediction\nROC Curve\nComparison\nConclusion\n\n""]",https://github.com/SridharCR,"['21', 'Jupyter Notebook', 'Updated Oct 27, 2018', '94', 'Objective-C', 'Updated Jul 29, 2015', '71', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 5, 2020', '33', 'Python', 'Updated Oct 23, 2015', '265', 'ActionScript', 'GPL-3.0 license', 'Updated Nov 25, 2020', '13', 'Jupyter Notebook', 'Updated Nov 27, 2019', '7', 'Jupyter Notebook', 'Updated May 22, 2018', '14', 'JavaScript', 'Updated Oct 10, 2015', '6', 'HTML', 'Updated Aug 9, 2015', '12', 'R', 'Updated Jan 7, 2019']"
"Washington, DC",564,10,29,546,"['Diabetes data use case\nContents\n\nMotivation\nUsage\n\nDocker Install\nManual Install\n\n\n\nMotivation\nInterpretability: The missing link between machine learning, healthcare, and the FDA?\nRecent advances enable practitioners to break open machine learning’s “black box”.\nAugust 20, 2018\nAndrew Langsner, Co-founder / Managing Partner, Sphaeric.ai\nPatrick Hall, Senior Director of Product, H2O.ai\nFrom machine learning algorithms guiding analytical tests in drug manufacture, to predictive models recommending courses of treatment, to sophisticated software that can read images better than doctors, machine learning has promised a new world of healthcare where algorithms can assist, or even outperform, professionals in consistency and accuracy, saving money and avoiding potentially life-threatening mistakes. But what if your doctor told you that you were sick but could not tell you why? Imagine a hospital that hospitalized and discharged patients but was unable to provide specific justification for these decisions. For decades, this was a roadblock for the adoption of machine learning algorithms in healthcare: they could make data-driven decisions that helped practitioners, payers, and patients, but they couldn’t tell users why those decisions were made.\nToday, recent advances in machine learning research and implementation may have cracked open the black box of algorithmic decision making. A flurry of research into interpretation, or “the ability to explain or to present in understandable terms to a human,” has resulted in a growing body of credible literature and tools for accurate models with interpretable inner-workings, accountability and fairness of algorithmic decision-making, and post-hoc explanation of complex model predictions,. Can this research really be applied to healthcare, and if so, where would it be most immediately impactful? Three suggestions and an example use case are put forward below.\nThree Hurdles to Black Box Algorithms\nFDA and drug development\nThe FDA has notoriously stringent requirements for the approval of new drugs. This could pose a challenge to drug companies experimenting with machine learning to enforce quality control and even to analyze test results to better detect the presence and proper concentrations of drug compounds. The FDA requires full transparency and replicability for all analytical tests involved in the manufacture of new drugs. In the past this has involved providing lists of formulas and methods for analyzing test results (e.g. chromatography tests). But questions remain about how the FDA would treat a new drug application (NDA) that relied on a complex black box machine learning model to maintain quality in the manufacturing process. Interpretable machine learning techniques could help address some of these questions.\nMedical devices\nThis year, for the first time the FDA approved an artificial intelligence device. This marks a major milestone for medical devices using proprietary black box algorithms that can diagnose diseases from images. The device was approved through the FDA’s De Novo premarket review pathway which provides a review process for novel devices that represent a low to moderate risk. The low to moderate risk classification is key to a successful De Novo review. But the FDA has yet to approve a device determined to have a high potential risk to patient outcomes. For example, a diagnostic algorithm where a false positive could lead to an invasive and risky procedure. Extra controls would likely be needed on such an algorithm and with the latest model interpretability techniques, it may be possible to have those additional checks.\nAnother possibility for bringing machine learning into medical devices came about in late 2016 when congress passed the 21st Century Cures Act. The act excludes what is commonly referred to as clinical decision support (CDS) software from FDA purview under certain conditions; namely, that the healthcare provider using the software can independently review the basis for the software’s recommendation. In December 2017 the FDA published guidance stating that “the sources supporting the recommendation or underlying the rationale for the recommendation should be identified and easily accessible to the intended user, understandable by the intended user (e.g., data points whose meaning is well understood by the intended user) …”  Traditional machine learning software would not meet this criterion due to the black box nature of most machine learning models. However, with recent advances in interpretability, it is possible to display explanations for every decision made by a machine learning model, potentially enabling a user to verify the soundness of the rationale behind the automated recommendation.\nRisk based guidance\nMuch attention has been given to hospital readmissions since passage of the Affordable Care Act and the beginning of the Hospital Readmissions Reduction Program. Predictive models developed with machine learning have shown to be successful at predicting avoidable hospital readmissions and some health systems have already adopted machine learning based models successfully. At the same time, interest into the use of machine learning to develop automated fraud and waste detection on incoming medical claims has been growing amongst government entities and private insurance companies. Now it should be possible for these models to explain their decisions to practitioners, payers, and patients, allowing users to investigate the actual reasons behind automated medical decision making and determine if an individual decision was reasonable or could be improved.\nToward the Application of Interpretable Machine Learning in Healthcare\nSince more deliberations about the ethical, medical, and economic implications of interpretable machine learning in healthcare are certainly necessary, an example risk based guidance use case has been provided for the sake of furthering such discussions. The example use case should be similar to the methods that organizations are already using for predicting 30-day readmissions, but instead of using an older linear modeling approach, the example uses a nonlinear, “white box” machine learning approach to achieve about a 1% increase in readmission prediction accuracy. Explanatory techniques are then used to describe both the internal mechanisms of the model and every prediction the model makes.\nIt is left to practitioners and domain experts to determine whether the example techniques truly surpass more established methods by any number of criteria, e.g. ability to handle heterogeneous data, accuracy, or interpretability. The only explicit argument made here is: when people\'s lives are being affected by mathematical models, it does seem prudent to investigate and evaluate potentially impactful new modeling and analysis techniques.\nThe open source and freely available example use case is available here:\nhttps://github.com/jphall663/diabetes_use_case/blob/master/Binary-Classification-Readmit.ipynb\nThe authors look forward to continuing this discussion online and at the upcoming Xavier Healthcare AI summit.\nUsage\nThe files in this repository are meant to provide a reproducible example for interpretable machine learning techniques applied to a basic health care use case. The Jupyter notebook herein will be presented at the Xavier AI in Healthcare conference.\nThe training data for this use case is available here. The data set contains demographic and medical information about many patients. It is used to create a white-box classifier for predicting who will be readmitted to a hospital within 30 days of discharge. This notebook attempts to showcase the use of a complex, but transparent, nonlinear classifier as an alternative to more traditional linear model approaches.\nTypically it requires many different methods to properly interpret a nonlinear classifier. Several different types of interpretation and explanation methods are used here including:\n\nGlobal and local Shapley variable importance\nPartial dependence\nIndividual conditional expectation (ICE)\nSurrogate decision trees\n\nDockerfile instructions:\nA Dockerfile is provided to build a docker container with all necessary packages and dependencies. This is the easiest way to use the example notebook if you are on Mac OS X, *nix, or Windows 10. To do so:\n\nInstall and start docker.\n\nThe from a terminal run:\n\n\nCreate a directory for the Dockerfile.\n$ mkdir anaconda_py36_h2o_xgboost_graphviz_shap\n\n\nFetch the Dockerfile.\n$ curl https://raw.githubusercontent.com/jphall663/diabetes_use_case/master/anaconda_py36_h2o_xgboost_graphviz_shap/Dockerfile > anaconda_py36_h2o_xgboost_graphviz_shap/Dockerfile\n\n\nBuild a docker image from the Dockefile.\n$ docker build --no-cache anaconda_py36_h2o_xgboost_graphviz_shap\n\n\nDisplay docker image IDs. You are probably interested in the most recently created image. You will need it for the command directly below. \n$ docker images\n\n\nStart the docker image and the Jupyter notebook server.\n$ docker run -i -t -p 8888:8888 <image_id> /bin/bash -c ""/opt/conda/bin/conda install jupyter -y --quiet && /opt/conda/bin/jupyter notebook --notebook-dir=/diabetes_use_case --ip=\'*\' --port=8888 --no-browser""\n\n\n(If you need root priviledges to run docker, try this command:sudo docker run -i -t -p 8888:8888 <image_id> /bin/bash -c ""/opt/conda/bin/conda install jupyter -y --quiet && /opt/conda/bin/jupyter notebook --notebook-dir=/diabetes_use_case --ip=\'*\' --port=8888 --no-browser --allow-root""\n\nThen navigate to port 8888 on your machine, probably http://localhost:8888/.\n\nManual Installation\nFor users with older Windows machines or others who can\'t/don\'t use docker, the notebook dependencies can be installed manually:\n\nAnaconda Python 5.1.0 from the Anaconda archives.\nJava.\nThe latest stable h2o Python package.\nGit.\nXGBoost with Python bindings.\nGraphViz.\nInstall the shap Python package.\n\nAnaconda Python, Java, Git, and GraphViz must be added to your system path.\nFrom a terminal:\n\n\nClone the repository with examples.\n$ git clone https://github.com/jphall663/diabetes_use_case.git\n\n\n$ cd diabetes_use_case\n\n\nStart the Jupyter notebook server.\n$ jupyter notebook\n\n\nNavigate to the port Jupyter directs you to on your machine, probably http://localhost:8888/.\n\n\n']",https://github.com/jphall663,"['73', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Python', 'Updated Mar 30, 2019', '14', 'Jupyter Notebook', 'MIT license', 'Updated Apr 22, 2019', '19', 'Python', 'Updated Apr 30, 2018', '19', 'Jupyter Notebook', 'Updated Jan 30, 2018', '9', 'Jupyter Notebook', 'GPL-3.0 license', 'Updated Oct 12, 2017', 'Jupyter Notebook', 'Updated Apr 29, 2018', '15', 'Jupyter Notebook', 'Updated Sep 20, 2019', '56', 'Python', 'MIT license', 'Updated Dec 3, 2013', '19', 'Jupyter Notebook', 'Updated Nov 12, 2020']"
"Boston, MA",40,19,100,327,"['dm2nsc\nData conversion tool for uploading Diabetes-M log data to Nightscout.\nInstall python3 requirements with pip install -r requirements.txt, update and rename secret.py-example to secret.py, and run getdata.py (potentially as a cronjob).\n']",https://github.com/jwoglom,"['12', 'Kotlin', 'Updated Nov 2, 2020', '53', 'Python', 'MIT license', 'Updated May 28, 2020', '18', 'Jupyter Notebook', 'MIT license', 'Updated Sep 27, 2019', '46', 'Objective-C', 'GPL-3.0 license', 'Updated Aug 20, 2018', '6', 'Jupyter Notebook', 'Updated Sep 4, 2018', '92', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 18, 2020', '13', 'HTML', 'Updated Oct 7, 2020', '8', 'Ruby', 'Updated Jul 21, 2014', '95', 'C#', 'Updated May 29, 2020', '4', 'Python', 'Updated May 9, 2020']"
"New Delhi, India",98,248,126,212,"['ML-MT-WebApp\n\n This is one of major project of my undergraduate degree program.\nHere, I have developed a disease predicting web app which using the concept of machine learning makes predictions about various diseases like Malaria, Pneumonia, Diabetes etc.\n\n Down below are the names of the various model files used:\n\nCancer model = model\nDiabetes model = model1\nHeart model = model2\nLiver model = model4\nKidney model = model3\nMalaria model = model111.h5\nPneumonia model = my_model.h5\n\n\n Kernals used for training deep learning model \n\nKernal for Malaria model :https://www.kaggle.com/shobhit18th/malaria-cell\nKernal for Pneumonia model :https://www.kaggle.com/shobhit18th/keras-nn-x-ray-predict-pneumonia-86-54\n\n\n Details of various datasets used for model development : \n\nCancer : cancer.csv [In the repository]\nDiabetes : diabetes.csv [In the repository]\nHeart : heart.csv [In the repository]\nLiver : https://www.kaggle.com/uciml/indian-liver-patient-records \nKidney : https://www.kaggle.com/mansoordaku/ckdisease \nMalaria :  https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria \nPneumonia:  https://www.kaggle.com/paultimothymooney/chest-xray-pneumonia \n\n\n Tools used for project development: \n\nPython ( 3.7 version)\nFlask\nOpenCV\nPandas\nNumpy\nHTML\nCSS\n\n\n For using the project clone the repository and type the following commands in the termial: \n\n $ set FLASK_APP= app.py\n $ flask run\n\n\n The whole project is deployed on Heroku Cloud.\n  Here is the link where you can access the project live : https://myml-mtapp.herokuapp.com/ \n Thank you!\n']",https://github.com/shobhitsrivastava-ds,"['6', 'Python', 'Updated Feb 25, 2018', '4', 'JavaScript', 'Updated Oct 20, 2020', '6', 'Jupyter Notebook', 'Updated Apr 22, 2019', '18', 'Kotlin', 'GPL-3.0 license', 'Updated Sep 27, 2020', '13', 'Jupyter Notebook', 'Updated Jul 7, 2019', '37', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '6', 'Jupyter Notebook', 'Updated Sep 27, 2016', '6', 'Vue', 'MIT license', 'Updated Oct 3, 2020', '3', 'Jupyter Notebook', 'MIT license', 'Updated Nov 5, 2019', '28', 'HTML', 'MIT license', 'Updated Nov 13, 2020']"
Nigeria,3,6,8,0,['diatension\nAn awareness focused website on Diabetes & Hypertension\n'],https://github.com/kayAbdulrazaq,"['4', 'JavaScript', 'Updated Nov 28, 2017', '7', 'MATLAB', 'Updated Nov 21, 2019', '68', 'Objective-C', 'Updated Feb 21, 2015', '53', 'Java', 'GPL-3.0 license', 'Updated Nov 26, 2020', '4', 'Jupyter Notebook', 'Updated Sep 12, 2019', '3', 'Jupyter Notebook', 'Updated Nov 28, 2016', '9', 'JavaScript', 'BSD-2-Clause license', 'Updated Nov 9, 2020', '10', 'Kotlin', 'Updated Oct 22, 2019', '5', 'C++', 'Updated Jul 24, 2017', '2', 'HTML', 'Updated Mar 28, 2018']"
Jamshedpur,5,17,48,0,['ML_from_Scratch\nDiabetes Mellitus Prediction using Machine Learning\n'],https://github.com/AntimKhel,"['7', 'TSQL', 'Updated Jan 18, 2020', '4', 'Ruby', 'Updated Mar 6, 2015', 'R', 'Updated Dec 12, 2018', '2', 'Python', 'BSD-2-Clause license', 'Updated Dec 29, 2015', '3', 'Python', 'Updated Apr 16, 2017', '6', 'Python', 'Updated Jul 13, 2018', '2', 'JavaScript', 'GPL-3.0 license', 'Updated Oct 12, 2018', '2', 'R', 'Updated Nov 9, 2016', '2', 'Java', 'Updated Nov 17, 2012', '1', 'Jupyter Notebook', 'MIT license', 'Updated Oct 31, 2018']"
"San Jose, CA",6,0,19,6,"['Diabetes-Prediction\nData mining project to detect if a person is diabetic using logistic regression in R\nDataset Description\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nNumber of Instances: 768\nNumber of Attributes: 8 plus class\nAttributes\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nClass Distribution: (class value 1 is interpreted as ""tested positive for\ndiabetes"")\n\n\n\nClass Value\nNumber of instances\n\n\n\n\n0\n500\n\n\n1\n268\n\n\n\n']",https://github.com/jerisalan,"['2', 'Jupyter Notebook', 'Updated Mar 2, 2020', '3', 'Jupyter Notebook', 'Updated Aug 7, 2020', '5', 'Crystal', 'MIT license', 'Updated May 20, 2018', '10', 'Updated Jan 28, 2020', '7', 'Java', 'MIT license', 'Updated Sep 21, 2020', '1', 'Ruby', 'MIT license', 'Updated Jun 27, 2017', '5', 'JavaScript', 'Updated Aug 13, 2019', '3', 'Java', 'Updated Dec 1, 2019', 'Updated Dec 8, 2017', 'R', 'MIT license', 'Updated Sep 15, 2017']"
"Kolkata, West Bengal, India",14,2,2,188,"[""Genre\nTo predict if the person is suffering from diabetes or not on the basis of information entered.\nMovie Genre Prediction:\nTable of Content\n\nDemo\nOverview\nInstallation\nDeployment on Heroku\n\nDemo\nlink\n\nOverview\nThis is a Web app which will predict diabetes.\nInstallation\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nDeployment on Heroku\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nTechnologies Used\n\n  \n""]",https://github.com/ANJALIAGARWAL-IT,"['R', 'MIT license', 'Updated Sep 15, 2017', '12', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Apr 20, 2020', '2', 'Python', 'Updated Feb 19, 2019', '3', 'Jupyter Notebook', 'Updated Aug 5, 2018', '1', 'Jupyter Notebook', 'Updated May 13, 2020', '2', 'Updated Sep 18, 2018', '6', 'HTML', 'Updated Jun 6, 2020', '3', 'Python', 'Updated Jun 20, 2017', '4', 'Python', 'MIT license', 'Updated Aug 5, 2019', '4', 'Jupyter Notebook', 'Updated Jul 22, 2020']"
"Irvine, CA",9,18,36,19,"['Diabetes Monitoring & Assist\nA project in the Winter 2019 offering of CS 125 (Next Generation Search Systems) at the University of California, Irvine\nAbout the Project\nOur group has developed a mobile application that will help diabetic individuals keep track of the their food intake and exercise. The application’s goal is to be able to suggest healthy recipes and workout schedules for the individual based on research specifically done for diabetics. We have chosen to tackle this problem because diabetes is a huge problem in the United States and a worldwide epidemic. Statistics has shown that 1 in 11 adults have diabetes; that accounts to over 415 million people. We hope that with our application can help improve the lives of people living with this condition.\nTeam Member\n\nAndre Ace Aquiler\nJason Padilla\nKunal Kathuria\nWyte Krongapiradee\n\nAttributions\n\nEstimated Calorie Needs Table from Health.gov\nNutritional Goals Table from Health.gov\nGlyphs from Icons8\nFood Search and Nutrition APIs powered by Nutritionix\nTutorials on raywenderlich.com\n\n']",https://github.com/wytesk133,"['Python', 'GPL-3.0 license', 'Updated Dec 15, 2017', '4', 'MATLAB', 'MIT license', 'Updated Jun 27, 2020', '5', 'Python', 'Updated Nov 4, 2015', '1', 'Java', 'Updated Feb 29, 2016', '2', 'Python', 'Updated Sep 4, 2018', 'Jupyter Notebook', 'Updated Feb 12, 2019', 'Python', 'Updated Feb 8, 2020', '1', 'Jupyter Notebook', 'Updated Nov 25, 2020', '1', 'Jupyter Notebook', 'Updated Oct 8, 2017', 'Swift', 'Updated Mar 22, 2019']"
"Oulu, Finland. ",3,0,0,52,"['This android application is a wellbeing fitness application developed for people who are diabetic. This application allow user to view statistics on his activities  to track the physical activities. We tried to cover social spectrum by adding friends feature such as, if a user is going for exercise or any other activities he can invite his friends. The app is developed with basic features and it needs future work.\n\nDashboard\n\n']",https://github.com/MuradAhmad,"['4', 'HTML', 'Updated Oct 9, 2016', '4', 'JavaScript', 'MIT license', 'Updated Dec 14, 2018', '2', 'JavaScript', 'Apache-2.0 license', 'Updated Jul 23, 2017', '10', 'Swift', 'Updated Nov 26, 2020', '3', 'JavaScript', 'Updated Jul 10, 2019', '6', 'Python', 'Updated Jun 13, 2018', '6', 'Python', 'Updated Aug 16, 2020', '8', 'Python', 'Updated Feb 10, 2019', '8', 'Updated Feb 5, 2013', '3', 'Java', 'Updated Sep 11, 2019']"
"Mumbai, India",4,0,8,131,"['Diabetes Prediction\nThis is a project that aims to build a smart, versatile app that can predict the probbability of diabetes in a person using basic information.\nThis Machine Learning Project involves mainly 8 steps:\n\nDeciding the title\nCollection of Data\nData Cleaning\nExploratory Data Analysis\nDesigning the models\nHyperparameter tuning\nDeploying the model\nBuilding a front-end application, open for the users.\n\n']",https://github.com/kxerxess,"['3', 'Python', 'Updated Jan 14, 2018', '7', 'Python', 'Updated Aug 2, 2020', '1', 'Python', 'Updated Dec 2, 2014', 'C#', 'GPL-3.0 license', 'Updated Jun 7, 2017', 'JavaScript', 'Updated Oct 30, 2020', '5', 'Jupyter Notebook', 'Updated Jun 27, 2019', '5', 'Python', 'Updated May 23, 2017', 'CSS', 'Updated Aug 14, 2020', 'Jupyter Notebook', 'Updated Jun 27, 2019', '1', 'Jupyter Notebook', 'Updated Oct 7, 2020']"
Mumbai,4,5,2,47,"['Pima-Indian-Diabetes-Prediction\nPima Indian Diabetes Prediction\nThe dataset consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.The main objective is to build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\nSource : https://www.kaggle.com/uciml/pima-indians-diabetes-database\n']",https://github.com/VishalMalpure,"['Jupyter Notebook', 'Updated Feb 5, 2018', '1', 'Updated Aug 11, 2020', '6', 'Python', 'MIT license', 'Updated Aug 11, 2018', 'Jupyter Notebook', 'Updated Sep 15, 2019', 'Jupyter Notebook', 'Updated Nov 16, 2016', '2', 'Python', 'Updated Jun 11, 2018', '3', 'Jupyter Notebook', 'Updated Jul 24, 2018', '2', 'MIT license', 'Updated Nov 25, 2018', '2', 'R', 'Updated May 3, 2019', '3', 'Jupyter Notebook', 'Updated Oct 4, 2019']"
USA,3,0,0,25,['Nutrition-Expert-System-Gestational-Diabetes\n'],https://github.com/sharminpathan,"['3', 'Jupyter Notebook', 'Updated May 20, 2020', '2', 'CSS', 'Updated Jun 1, 2020', '2', 'Jupyter Notebook', 'Updated Feb 26, 2020', '2', 'JavaScript', 'Updated Jun 23, 2020', '1', 'Jupyter Notebook', 'Updated Aug 23, 2019', '5', 'TypeScript', 'Updated Feb 12, 2018', '1', 'Java', 'Updated Aug 20, 2018', 'Jupyter Notebook', 'Updated Oct 21, 2018', '2', 'Jupyter Notebook', 'Updated Jun 7, 2019', '1', 'Prolog', 'MIT license', 'Updated May 7, 2017']"
The Netherlands,3,0,0,7,"['\nWelcome to Rails¶ ↑\nRails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.\nThis pattern splits the view (also called the presentation) into “dumb” templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the “smart” domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.\nIn Rails, the model is handled by what\'s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in files/vendor/rails/activerecord/README.html.\nThe controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in files/vendor/rails/actionpack/README.html.\nGetting Started¶ ↑\n\nAt the command prompt, create a new Rails application:\n<tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)\n\nChange directory to myapp and start the web server:\n<tt>cd myapp; rails server</tt> (run with --help for options)\n\nGo to localhost:3000/ and you\'ll see:\n""Welcome aboard: You\'re riding Ruby on Rails!""\n\n\nFollow the guidelines to start developing your application. You can find\n\nthe following resources handy:\n\nThe Getting Started Guide: guides.rubyonrails.org/getting_started.html\n\nRuby on Rails Tutorial Book: www.railstutorial.org/\n\nDebugging Rails¶ ↑\nSometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.\nFirst area to check is the application log files. Have “tail -f” commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.\nYou can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:\nclass WeblogController < ActionController::Base\n  def destroy\n    @weblog = Weblog.find(params[:id])\n    @weblog.destroy\n    logger.info(""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!"")\n  end\nend\n\nThe result will be a message in your log file along the lines of:\nMon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!\nMore information on how to use the logger is at www.ruby-doc.org/core/\nAlso, Ruby documentation can be found at www.ruby-lang.org/. There are several books available online as well:\n\nProgramming Ruby: www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)\n\nLearn to Program: pine.fm/LearnToProgram/ (a beginners guide)\n\nThese two books will bring you up to speed on the Ruby language and also on programming in general.\nDebugger¶ ↑\nDebugger support is available through the debugger command when you start your Mongrel or WEBrick server with –debugger. This means that you can break out of execution at any point in the code, investigate and change the model, and then, resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use sudo gem install ruby-debug. Example:\nclass WeblogController < ActionController::Base\n  def index\n    @posts = Post.all\n    debugger\n  end\nend\n\nSo the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:\n>> @posts.inspect\n=> ""[#<Post:0x14a6be8\n        @attributes={""title""=>nil, ""body""=>nil, ""id""=>""1""}>,\n     #<Post:0x14a6620\n        @attributes={""title""=>""Rails"", ""body""=>""Only ten.."", ""id""=>""2""}>]""\n>> @posts.first.title = ""hello from a debugger""\n=> ""hello from a debugger""\n…and even better, you can examine how your runtime objects actually work:\n>> f = @posts.first\n=> #<Post:0x13630c4 @attributes={""title""=>nil, ""body""=>nil, ""id""=>""1""}>\n>> f.\nDisplay all 152 possibilities? (y or n)\nFinally, when you\'re ready to resume execution, you can enter “cont”.\nConsole¶ ↑\nThe console is a Ruby shell, which allows you to interact with your application\'s domain model. Here you\'ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment.\nTo start the console, run rails console from the application directory.\nOptions:\n\nPassing the -s, --sandbox argument will rollback any modifications made to the database.\n\nPassing an environment name as an argument will load the corresponding environment. Example: rails console production.\n\nTo reload your controllers and models after launching the console run reload!\nMore information about irb can be found at: http://www.rubycentral.org/pickaxe/irb.html\ndbconsole¶ ↑\nYou can go to the command line of your database directly through rails dbconsole. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like rails dbconsole production. Currently works for MySQL, PostgreSQL and SQLite 3.\nDescription of Contents¶ ↑\nThe default directory structure of a generated Ruby on Rails application:\n|-- app\n|   |-- assets\n|       |-- images\n|       |-- javascripts\n|       `-- stylesheets\n|   |-- controllers\n|   |-- helpers\n|   |-- mailers\n|   |-- models\n|   `-- views\n|       `-- layouts\n|-- config\n|   |-- environments\n|   |-- initializers\n|   `-- locales\n|-- db\n|-- doc\n|-- lib\n|   `-- tasks\n|-- log\n|-- public\n|-- script\n|-- test\n|   |-- fixtures\n|   |-- functional\n|   |-- integration\n|   |-- performance\n|   `-- unit\n|-- tmp\n|   |-- cache\n|   |-- pids\n|   |-- sessions\n|   `-- sockets\n`-- vendor\n    |-- assets\n        `-- stylesheets\n    `-- plugins\napp\nHolds all the code that\'s specific to this particular application.\napp/assets\nContains subdirectories for images, stylesheets, and JavaScript files.\napp/controllers\nHolds controllers that should be named like weblogs_controller.rb for\nautomated URL mapping. All controllers should descend from\nApplicationController which itself descends from ActionController::Base.\napp/models\nHolds models that should be named like post.rb. Models descend from\nActiveRecord::Base by default.\napp/views\nHolds the template files for the view that should be named like\nweblogs/index.html.erb for the WeblogsController#index action. All views use\neRuby syntax by default.\napp/views/layouts\nHolds the template files for layouts to be used with views. This models the\ncommon header/footer method of wrapping views. In your views, define a layout\nusing the <tt>layout :default</tt> and create a file named default.html.erb.\nInside default.html.erb, call <% yield %> to render the view using this\nlayout.\napp/helpers\nHolds view helpers that should be named like weblogs_helper.rb. These are\ngenerated for you automatically when using generators for controllers.\nHelpers can be used to wrap functionality for your views into methods.\nconfig\nConfiguration files for the Rails environment, the routing map, the database,\nand other dependencies.\ndb\nContains the database schema in schema.rb. db/migrate contains all the\nsequence of Migrations for your schema.\ndoc\nThis directory is where your application documentation will be stored when\ngenerated using <tt>rake doc:app</tt>\nlib\nApplication specific libraries. Basically, any kind of custom code that\ndoesn\'t belong under controllers, models, or helpers. This directory is in\nthe load path.\npublic\nThe directory available for the web server. Also contains the dispatchers and the\ndefault HTML files. This should be set as the DOCUMENT_ROOT of your web\nserver.\nscript\nHelper scripts for automation and generation.\ntest\nUnit and functional tests along with fixtures. When using the rails generate\ncommand, template test files will be generated for you and placed in this\ndirectory.\nvendor\nExternal libraries that the application depends on. Also includes the plugins\nsubdirectory. If the app has frozen rails, those gems also go here, under\nvendor/rails/. This directory is in the load path.\n']",https://github.com/HaKr,"['1', 'Python', 'Updated Nov 30, 2015', '1', 'JavaScript', 'BSD-2-Clause license', 'Updated Sep 22, 2017', 'R', 'Updated May 2, 2018', '3', 'JavaScript', 'MIT license', 'Updated Mar 14, 2020', '3', 'Jupyter Notebook', 'Updated Mar 25, 2019', '3', 'JavaScript', 'Updated Jun 25, 2019', '2', 'HTML', 'MIT license', 'Updated Jul 6, 2019', '3', 'Jupyter Notebook', 'Updated Sep 28, 2020', '3', 'Python', 'Updated Sep 10, 2012', '2', 'JavaScript', 'Updated Oct 22, 2012']"
"Helsinki, Finland.",1,9,3,2,['Diabetes prediction application using Python\n \nThis application is made using sklearn Machine Learning libraries and pyqt5 for its graphical UI.\nSupport Vector Machine classifies input data with 80% accuracy. PIMA Indians diabetes dataset from the UCI archive is used to train the model.\n\nHow to start\nFirstly install all dependencies via the following commands.\npip3 install -r requirements.txt\nNow train the application in machine as\npython3 diabetes.py\nFinally run the application:\npython3 gui.py\nNow insert all the requires details to see the result.\nBuilt With\n\nPython 3.7.\nPyQt5 - for the GUI.\n\nAuthor\n\nMd Shariful Alam - Shariful\n\nAcknowledgments\n*UCI archive - for providing the datasets.\n'],https://github.com/Shourov1,"['Java', 'GPL-3.0 license', 'Updated Dec 15, 2018', '3', 'JavaScript', 'Updated Jul 19, 2020', '2', 'Java', 'Updated Mar 13, 2015', '4', 'JavaScript', 'Updated Dec 11, 2014', '4', 'Jupyter Notebook', 'Updated Sep 23, 2020', '4', 'Python', 'Updated Dec 20, 2018', '10', 'Java', 'MIT license', 'Updated Feb 23, 2020', '2', 'JavaScript', 'Updated Apr 5, 2016', '3', 'C#', 'Apache-2.0 license', 'Updated Oct 8, 2018', '2', 'Python', 'MIT license', 'Updated Jun 29, 2019']"
bangalore,1,9,3,1,['diabetes\n'],https://github.com/vikassrm,"['Updated Sep 17, 2020', 'R', 'Updated Oct 22, 2020', 'R', 'Updated Nov 14, 2020', 'Updated Nov 20, 2020', 'HTML', 'Updated Nov 19, 2015', 'JavaScript', 'Updated May 31, 2016', 'Java', 'Updated Apr 2, 2016', 'JavaScript', 'Updated Aug 15, 2016', 'R', 'Updated Jun 12, 2018', 'Jupyter Notebook', 'Updated Aug 20, 2018']"
"kathmandu,Nepal",0,1,0,3,['Diabetes-prediction\nDiabetes prediction from pima indian diabetes database\n'],https://github.com/Basantakatuwal,"['Updated May 20, 2020', 'Python', 'Updated Aug 9, 2020', 'Python', 'Updated Aug 19, 2020', 'Updated Aug 18, 2020', 'Updated Aug 1, 2020', 'Updated Sep 17, 2020', 'R', 'Updated Nov 14, 2020', 'R', 'Updated Oct 22, 2020', 'Updated Nov 20, 2020', 'Jupyter Notebook', 'Updated Jan 28, 2020']"
"Seattle, WA",96,7,73,211,"['Example MLflow Diabetes project\nMLflow model using ElasticNet (sklearn) and Plots Lasso vs. ElasticNet Descent Paths\nUsage:\n# Via Python\npython train_diabetes.py {alpha} {l1_ratio}\n\n# Execute a MLproject published on GitHub  (ensure you have installed conda)\nmlflow run https://github.com/dennyglee/mlflow-diabetes-example.git -P alpha=0.02 -P l1_ratio=0.05\n\n# Remote execution on Databricks \nmlflow run -m databricks --cluster-spec cluster.json <uri>\n\nUsage Notes:\n\nRemote Execution on Databricks\n\nRefer to Databricks Jobs New Cluster on how to configure cluster.json.\nCurrently this feature requires a new cluster creation\n\n\n\nAttributions:\n\nThis project uses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet\nThe predicted ""progression"" column is a quantitative measure of disease progression one year after baseline\nThis proeject combines the above with the Lasso Descent Path Plot\nOriginal author: Alexandre Gramfort alexandre.gramfort@inria.fr; License: BSD 3 clause\n\n']",https://github.com/dennyglee,"['Python', 'MIT license', 'Updated Apr 17, 2020', 'R', 'Updated May 14, 2020', 'Updated Oct 10, 2020', 'HTML', 'Updated Oct 20, 2020', 'HTML', 'Updated Oct 29, 2020', '2', 'Swift', 'Updated Mar 31, 2016', '2', 'Python', 'Updated Jun 26, 2019', '2', 'Jupyter Notebook', 'Updated Jun 25, 2020', '2', 'JavaScript', 'Updated Feb 27, 2012', '2', 'Python', 'Apache-2.0 license', 'Updated May 3, 2020']"
"Razole ,East Godavari, Andhra Pradesh",96,7,73,301,"[""Diabetes\nImplementation : Our implementation is mainly divided into five steps:\n\nExploring the Data:\nExploring the Data using jupyter notebook and verify we need to data preprocessing or not.For this dataset there is no need to data preprocessing. Before split into train and test data check outcome balanced or in balance.whether it is in balanced then we used f1_score.\nSplit into train and test:\nIn this we will use train_test_split which is available in `sklearn.model selection'. Where we will be dividing the data into train 80% and test splits of 20%.\nBenchmark model vs other models:\nWe can choose our benchmark model as LogisticRegression. Because it is simple and easy to implement.We will apply a series of classification algorithms like Logistic\nRegression, Decision Trees, Random forests etc.The next step is to find and compare f1_scores of all the models\nagainst the benchmark model.\nApply Grid Search Optimization:\nSince we can observe that the model with f1_score is Random Forests with an f1_score of 97.65%.We can select Random forest for further optimizing it by applying the\nsame algorithm on a different set of parameters to find the one with the best f1_score.\nDisplay results\nHere we will apply many supervised learning algorithms and decide which algorithm is best suited for our dataset. We can apply the grid search on some chosen algorithms to decide the best parameters among many.Finding gridsearchcv optimal f1_score changing parameters to get best optimal f1_score.gridsearchcv (parameters like n_estimator,max_depth..etc)\nto get best f1_score for this best classification model using gridsearchcv. I faced some more extra time taken to find best f1_score to change parameters to this diabetes machine learning project.\n\n\nExternal Libraries used:\n\n\nSciKit Learn\n2.Numpy\n3.Matplotlib\n4.Pandas\n\n\nData:\n1.Diabetes Dataset available from Kaggle here https://www.kaggle.com/johndasilva/diabetes\n2.Also included in directory of repository in original form\n\n""]",https://github.com/tejaanuchuri,"['Updated Nov 13, 2019', 'C#', 'Updated Oct 21, 2017', '1', 'Java', 'Updated May 7, 2020', 'Updated Jun 14, 2020', 'Updated Jul 8, 2020', 'Python', 'Updated Jul 11, 2020', 'Jupyter Notebook', 'Updated May 19, 2020', 'Jupyter Notebook', 'MIT license', 'Updated Jun 3, 2020', 'HTML', 'Updated Jun 12, 2020', 'HTML', 'Updated Jul 9, 2020']"
Uppsala,75,13,125,248,"[""open-source-diabetes\nAn experiment in making my diabetes open source.\nThis repo acts as the first step in making my diabetes open source. It's very early in it's tracks, and the project scope is still being decided in issue #2.\nBackground\nI'm a developer, designer and tinkerer. In my first year of high school I designed a concept for a blood glucose meter that measured your BG contionusley, a couple of years later (unrelated to my concept) that concept existed (it's called CGM, Contionous Glucose Monitoring). After using a CGM I starting playing with the concept of an open platform where this data could be collected, visualized and made available to researchers/diabetics/doctors etc. Before developing the software I did some research and found the Tidepool project, which is the exact same thing (but further developed) that i envisioned. Hurray!\nThis repo acts as a playground for how to make my personal diabetes data more valuable, by open sourcing it and making it available for visualization/analysis.\nCurrent equipment\n\n✓ FreeStyle Libre blood glucose sensor\n✓ Medtronic Minimed, Paradigm 754 Insulin pump\nMicrosoft Band 2 for general telemtry (See issue #3)\n\nOther projects for reference\n\nhttps://github.com/bewest/insulaudit\nThe Tidepool Project\nFjord Fido Concept\n\n\n""]",https://github.com/abergs,"['Updated Sep 26, 2020', 'MATLAB', 'MIT license', 'Updated Jul 19, 2020', 'Python', 'Updated Aug 31, 2020', 'Jupyter Notebook', 'Updated Oct 21, 2020', 'Jupyter Notebook', 'Updated Oct 19, 2020', 'Updated Oct 15, 2020', '2', 'C#', 'Updated Nov 30, 2015', '2', 'Jupyter Notebook', 'Apache-2.0 license', 'Updated Feb 10, 2020', '2', 'CSS', 'MIT license', 'Updated Jul 30, 2020', '2', 'Updated Mar 13, 2016']"
"London, UK",1,6,5,157,['Diabetes\n'],https://github.com/ArmanHussainDS,"['Jupyter Notebook', 'Apache-2.0 license', 'Updated May 15, 2020', 'Jupyter Notebook', 'Updated Jul 8, 2020', 'Python', 'GPL-3.0 license', 'Updated Jul 14, 2020', 'Python', 'Updated Jul 21, 2020', '1', 'Jupyter Notebook', 'Updated Jul 7, 2020', '1', 'Java', 'Updated Dec 11, 2019', 'Updated Apr 9, 2020', 'Updated Mar 26, 2020', 'Python', 'MIT license', 'Updated Apr 19, 2020', 'Jupyter Notebook', 'Updated Aug 12, 2020']"
"Edison, New Jersey",4,5,0,178,"[""DiabetesDetection\nThis is an application used to detect whether a user has diabetes given certain parameters and locate the nearest doctor.\nFeatures\n\nPredicts Whether User May Have Diabetes: Uses a custom machine learning model which has been trained by using over 10000 data points of users with diabetes and their pre-exisitng conditions. This machine learning model has been trained to an accuracy of 99.6% on microsoft azure's machine learning service.\nRecomends Nearest Docter: Using Google Maps API and Better Doctors API, this application recommends the highest rated doctors within the span of 20 miles of your current locaitonl\n\nTech Stack\n\nApp Development: Xamerin C#\nLocation and Maps: Google Maps API\nDiabetic Detection ML model: Azure Machine Learning Service\n\n""]",https://github.com/jeevanantham2002,"['Python', 'Updated Aug 13, 2019', 'Kotlin', 'Updated Jan 9, 2020', 'Jupyter Notebook', 'Updated Nov 26, 2019', 'Jupyter Notebook', 'Updated Aug 29, 2017', 'R', 'Updated Apr 24, 2020', 'HTML', 'Updated Sep 27, 2020', 'Jupyter Notebook', 'Updated Sep 15, 2020', 'Jupyter Notebook', 'Updated Oct 2, 2020', 'R', 'Updated Jul 31, 2020', 'C#', 'Updated Aug 29, 2020']"
