"{'location': 'Barkhamsted, CT', 'stats_list': [['466', '          followers'], ['6', '          following'], ['131']], 'contributions': '32 contributions\n        in the last year', 'description': ['diabetesNeuralNetwork\nA neural network using Keras that classifies risk for diabetes based on health data.\n'], 'url_profile': 'https://github.com/jg-fisher'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\n\n\n\nGlucosio has moved to Gitlab! Visit our project repos on Gitlab\nGlucosio for Android\nGlucosio for Android, a user centered free and open source app for Diabetes management and research for Android.\n\nhttps://glucosio.org\nBuild Instructions\n\n\nClone the project from GitHub:\ngit clone https://github.com/Glucosio/android.git\n\nor download the .zip here.\n\n\nImport the project in Android Studio: File > New > Import Project.\nAlternatively, from the Welcome screen, select Import project.\n\n\nRead more about contributing to Glucosio here.\nDownload\n\n\n\n\nJoin Beta Testing\nJoin our Community on Google+, then click here.\nTest Drive Glucosio Daily\nhttp://daily.glucosio.org\n'], 'url_profile': 'https://github.com/Glucosio'}","{'location': 'Stoke on Trent. UK', 'stats_list': [['699', '          followers'], ['0', '          following'], ['19']], 'contributions': '73 contributions\n        in the last year', 'description': ['Blueberry\nWelcome to the new open-source £100,000 diabetes project.\nIn this I aim to create the entire applications and system for a new diabetes app that helps diabetics manage and have more fun managing their condition.\n'], 'url_profile': 'https://github.com/angelsix'}","{'location': 'NONE', 'stats_list': [['675', '          followers'], ['11', '          following'], ['60']], 'contributions': '17 contributions\n        in the last year', 'description': [""Readme.md\n天池精准医疗大赛-糖尿病遗传风险预测\nTop12 思路 由于初赛和复赛题目相差太大，谨在此给出复赛的一点思路权当抛砖引玉\n特征工程\n新特征构造\n1.构造加减乘除四则运算特征，做特征间的交互(考虑可解释的 基因拮抗、基因协同)\n2.构造特征本身的乘方，幂方，开方等数值特征\n3.利用多项式特征包来构造特征(线上表现不行)\n缺失值的处理\n1.观察数据分布，对于缺失数据在非长尾的特征，均值填充/中值填充\n2.把缺失值的特征当Label，考虑Label Propagation传播算法，半监督填充Label\n3.不用GBDT等模型填充的原因是对于缺失值较多的(40%-75%)，无法保证数据的分布一致\n4.将缺失值数量超过75%的进行删除\n模型的选择\n其实可以很轻松的发现这题数据量小，利用堆叠复杂的模型可能导致过拟合，故我们采用的是贪心法选择最优特征，基本框架为\nif Choose_Best_Feature(now_feature)<the_last_best:\n    now_feature.pop()\nelse:\n \xa0  print('Now CV:',cv_mean)\n\n在Choose_Best_Feature模块中，是每次加入一个新特征计算的整体CV的值，不断更新最优值，显然，其一，这种选择方法是具有一定的盲目性的，贪心法陷入的是局部最优解，可能该组特征向量只是近似最优解，故可以考虑引入模拟退火机制，Random一个数满足某个条件则改变最优值；其二，如果数据量大，特征多，在时间效率上是无法承受的，故笔者提出了一种小技巧仅供参考，小技巧有两个方向\ndef get_pic(model,feature_name):\n    ans = DF()\n    ans['name'] = feature_name\n    ans['score'] = model.feature_importances_\n    print(ans[ans['score']>0].shape)\n    return ans.sort_values(by=['score'],ascending=False).reset_index(drop=True)\n    \nnums = 45\nfeature_name1 = train_data[feature_name].columns\nget_ans_face = list(set(get_pic(lgb_model,feature_name1).head(nums)['name'])|set(get_pic(xgb_model,feature_name1).head(nums)['name'])|set(get_pic(gbc_model,feature_name1).head(nums)['name']))\n# get_ans_face = list(set(get_pic(lgb_model,feature_name1).head(nums)['name'])&set(get_pic(xgb_model,feature_name1).head(nums)['name'])&set(get_pic(gbc_model,feature_name1).head(nums)['name']))\n# 先训练好三个模型 第一种方法是将三个模型的Feature_importances的Top K选择出来后，将这些特征取并集；而第二种方法则是取交集\n\n在经验上 第一种方法所需要设置的nums较小，而第二种方法所需要设置的nums较大，籍此选出较强的特征后进入前文所述的贪心选择法中，即选择出较优的特征向量组，而在Choose_Best_Feature中，笔者使用的是Xgboost,Lightgbm,GBDT三种模型的CV值的平均值量度加入New_Feature对模型的影响，如此可以保证线上与线下的同增同减\ndef get_model(nums,cv_fold):\n    feature_name1 = train_data[feature_name].columns\n    get_ans_face = list(set(get_pic(gbc_model,feature_name1).head(nums)['name'])&set(get_pic(xgb_model,feature_name1).head(nums)['name'])&set(get_pic(lgb_model,feature_name1).head(nums)['name']))\n    print('New Feature: ',len(get_ans_face))\n    new_lgb_model = lgb.LGBMClassifier(objective='binary',n_estimators=300,max_depth=3,min_child_samples=6,learning_rate=0.102,random_state=1)\n    cv_model = cv(new_lgb_model, train_data[get_ans_face], train_label,  cv=cv_fold, scoring='f1')\n    new_lgb_model.fit(train_data[get_ans_face], train_label)\n    m1 = cv_model.mean()\n\n    new_xgb_model1 = xgb.XGBClassifier(objective='binary:logistic',n_estimators=300,max_depth=4,learning_rate=0.101,random_state=1)\n    cv_model = cv(new_xgb_model1, train_data[get_ans_face].values, train_label,  cv=cv_fold, scoring='f1')\n    new_xgb_model1.fit(train_data[get_ans_face].values, train_label)\n    m2 = cv_model.mean()\n\n    new_gbc_model = GBC(n_estimators=310,subsample=1,min_samples_split=2,max_depth=3,learning_rate=0.1900,min_weight_fraction_leaf=0.1)\n    kkk = train_data[get_ans_face].fillna(7)\n    cv_model = cv(new_gbc_model, kkk[get_ans_face], train_label,  cv=cv_fold, scoring='f1')\n    new_gbc_model.fit(kkk.fillna(7),train_label)\n\n    m3 = cv_model.mean()\n    print((m1+m2+m3)/3)\n    pro1 = new_lgb_model.predict_proba(test_data[get_ans_face])\n    pro2 = new_xgb_model1.predict_proba(test_data[get_ans_face].values)\n    pro3 = new_gbc_model.predict_proba(test_data[get_ans_face].fillna(7).values)\n    ans = (pro1+pro2+pro3)/3\n    return ans\n\n在最后的结果提交环节中，也有一个可以参考的小技巧，将选择出来的特征向量组放入三个树模型中可以得到Ans1,Ans2,Ans3,也可以得到概率P1,P2,P3,那么将Ans1、2、3做结果的投票融合得到Ans4，将P1/P2/P3做概率融合得到Ans5,再利用线下表现较好的线性模型利用特征向量组产生Ans6,把Ans4,Ans5,Ans6再进行结果投票即可得到Ans7,Ans7的效果经过笔者的实践证明还不错\n\n如果您觉得笔者的骚操作是可以借鉴的，那么请给个可爱的Star吧！\n""], 'url_profile': 'https://github.com/luoda888'}","{'location': 'Bangalore', 'stats_list': [['6.2k', '          followers'], ['0', '          following'], ['2']], 'contributions': '411 contributions\n        in the last year', 'description': ['Diabetes-Prediction\n'], 'url_profile': 'https://github.com/krishnaik06'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\n\n\n\n\n\nGlucometer Utilities\nThis repository includes a command line utility to interact with a number of\nblood sugar meters (glucometer) models from various manufacturers.\nWhile support varies by device, the actions that may be available are as\nfollows:\n\ninfo shows the model, serial number, date and time, and configured glucose\nunit of the device.\ndump export the recorded blood sugar or β-ketone readings from the device\nin comma-separated values format.\ndatetime reads or updates the date and time of the device clock.\nzero deletes all the recorded readings (only implemented for few devices).\n\nExample Usage\nMost of the drivers require optional dependencies, and those are listed in the\ntable below. If you do not want to install the dependencies manually, you should\nbe able to set this up using virtualenv and pip:\n$ python3 -m venv $(pwd)/glucometerutils-venv\n$ . glucometerutils-venv/bin/activate\n(glucometerutils-venv) $ DRIVER=myglucometer-driver  # see table below\n(glucometerutils-venv) $ pip install ""git+https://github.com/glucometers-tech/glucometerutils.git#egg=glucometerutils[${DRIVER}]""\n(glucometerutils-venv) $ glucometer --driver ${DRIVER} help\nSupported devices\nPlease see the following table for the driver for each device that is known and\nsupported.\n\n\n\nManufacturer\nModel Name\nDriver\nDependencies\n\n\n\n\nLifeScan\nOneTouch Ultra 2\notultra2\npyserial\n\n\nLifeScan\nOneTouch Ultra Easy\notultraeasy\nconstruct pyserial\n\n\nLifeScan\nOneTouch Ultra Mini\notultraeasy\nconstruct pyserial\n\n\nLifeScan\nOneTouch Verio IQ\notverioiq\nconstruct pyserial\n\n\nLifeScan\nOneTouch Verio (USB)\notverio2015\nconstruct python-scsi\n\n\nLifeScan\nOneTouch Select Plus\notverio2015\nconstruct python-scsi\n\n\nLifeScan\nOneTouch Select Plus Flex¹\notverio2015\nconstruct python-scsi\n\n\nAbbott\nFreeStyle InsuLinx†\nfsinsulinx\nfreestyle-hid hidapi‡\n\n\nAbbott\nFreeStyle Libre\nfslibre\nfreestyle-hid hidapi‡\n\n\nAbbott\nFreeStyle Optium\nfsoptium\npyserial\n\n\nAbbott\nFreeStyle Precision Neo\nfsprecisionneo\nfreestyle-hid hidapi‡\n\n\nAbbott\nFreeStyle Optium Neo\nfsprecisionneo\nfreestyle-hid hidapi‡\n\n\nAbbott\nFreeStyle Optium Neo H\nfsprecisionneo\nfreestyle-hid hidapi‡\n\n\nRoche\nAccu-Chek Mobile\naccuchek_reports\n\n\n\nSD Biosensor\nSD CodeFree\nsdcodefree\nconstruct pyserial\n\n\nTaiDoc\nTD-4277\ntd4277\nconstruct pyserial² hidapi\n\n\nGlucoRx\nNexus\ntd4277\nconstruct pyserial² hidapi\n\n\nMenarini\nGlucoMen Nexus\ntd4277\nconstruct pyserial² hidapi\n\n\nAktivmed\nGlucoCheck XL\ntd4277\nconstruct pyserial² hidapi\n\n\nAscensia\nContourUSB\ncontourusb\nconstruct hidapi‡\n\n\n\n† Untested.\n‡ Optional dependency on Linux; required on other operating systems.\n¹ USB only, bluetooth not supported.\n² Requires a version of pyserial supporting CP2110 bridges. Supported starting\nfrom version 3.5.\nTo identify the supported features for each of the driver, query the help\naction:\nglucometer.py --driver fslibre help\n\nIf you have knowledge of a protocol of a glucometer you would have supported,\nplease provide a reference, possibly by writing a specification and contribute\nit to https://protocols.glucometers.tech/ .\nDump format\nThe dump action by default will output CSV-compatible format, with the\nfollowing fields:\n\ndate and time;\nmeter reading value;\nbefore/after meal information, if known;\ncomment provided with the reading, if any.\n\nMeal and comment information is provided by the meters supporting the\ninformation. In the future, meal information could be guessed based on the time\nof the reading.\nThe unit format used by the dump by default matches what the meter reports as\nits display unit, which might differ from the one used by the meter for internal\nrepresentation and wire protocol. You can override the display unit with\n--unit.\nDevelopment\nThe tool is being written keeping in mind that different glucometers,\neven if they are all from the same manufacturer, will use different\nprotocols.\nIf you want to contribute code, please note that the target language\nis Python 3.7, and that the style to follow is for the most part PEP8\ncompatible.\nTo set up your development environment follow these guidelines:\n$ git clone https://github.com/glucometers-tech/glucometerutils.git\n$ cd glucometerutils\n$ python3 -m venv --python=python3.7\n$ . venv/bin/activate\n$ pip install -e .[dev]\n$ # If you want to work on a specific driver specify this after dev e.g.\n$ # pip install -e .[dev,myglucometer-driver] # see table above\n$ pre-commit install\nLicense\nCopyright © 2013-2020 The glucometerutils Authors\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n""Software""), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'], 'url_profile': 'https://github.com/glucometers-tech'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Introduction\nWelcome to the openaps documentation!\nThis documentation supports implementing a self driven, Do It Yourself (DIY) artificial pancreas, based on the OpenAPS Reference Design. By proceeding to use these tools or any openaps repositories, you agree to abide by the copyright agreement and release any contributors from any liability. You assume full responsibility for all actions and outcomes related to use of these tools or ideas. Please read the copyright agreement before proceeding.\n\nThe easiest option for reading the documentation is by using this version. (You may want to bookmark this link.)\n\n\nA Note on DIY and the Open Part of OpenAPS\nThis is a set of development tools to support a self driven DIY implementation of an open source artificial pancreas, OpenAPS. Any individual choosing to use these tools is solely responsible for testing, verifying, and implementing each of these tools independently or together as a system.\nThe DIY part of OpenAPS is important. A growth and learning mindset is required to work with the ""building blocks"" that will help develop your OpenAPS system. This is not a set and forget system; an OpenAPS system requires persistent attention. Users must do blood glucose tests frequently and watch continuous glucose monitors vigilantly, in order to ensure each piece of the system is monitoring, predicting, and controlling blood glucose safely, given user defined constraints. The performance and quality of your OpenAPS system relies solely on you.\nThis community of contributors believes in paying it forward, and individuals who are implementing these tools are asked to contribute by asking questions, helping improve this documentation, and contributing in other ways.\n\nBuilding an OpenAPS\nThis documentation is organized into a series of phases that progressively build upon the openaps development tools towards a working OpenAPS system.\n\n\nGet the equipment you need; record baseline data, configure your hardware, install software, and become familiar with the openaps environment.\n\n\nPrepare Nightscout or other visualization tools that are key for monitoring a closed loop; get familiar with OpenAPS decision-making.\n\n\nUse the script to enable wifi on your rig and build a basic loop.\n\n\nCustomize & iterate your loop with advanced features\n\n\n\nYou may be looking for:\n\n\nLive help with your implementation (Hint: Check out this Gitter channel)\n\n\nOpenAPS Reference Design\n\n\n'], 'url_profile': 'https://github.com/openaps'}","{'location': 'Mumbai', 'stats_list': [['313', '          followers'], ['6', '          following'], ['12']], 'contributions': '375 contributions\n        in the last year', 'description': [""Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://predicting-diabetes.herokuapp.com/\n• If you are searching for Code, Algorithms used and Accuracy of the model.. you won't find it here. Click the link mentioned below for the same:\nLink: https://github.com/anujvyas/Machine-Learning-Projects/tree/master/Diabetes%20Prediction\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n----- Important Note -----\n• If you encounter this webapp as shown in the picture given below, it is occuring just because free dynos for this particular month provided by Heroku have been completely used. You can access the webpage on 1st of the next month.\n• Sorry for the inconvenience.\n\n""], 'url_profile': 'https://github.com/anujvyas'}","{'location': 'NONE', 'stats_list': [['9', '          followers'], ['10', '          following'], ['412']], 'contributions': '1 contribution\n        in the last year', 'description': ['先运行change.py增加特征维度，再运行baseline.py\n其中d_train_20180102.csv 有5642行\nd_train_20180102_add.csv 有6642行，加了A榜的1000行\n如果要看A榜的线上成绩，则把baseline.py里边的train test 和ol改一下路径即可\n'], 'url_profile': 'https://github.com/xingyuezhiji'}","{'location': 'between Brittany and South Korea', 'stats_list': [['98', '          followers'], ['39', '          following'], ['418']], 'contributions': '217 contributions\n        in the last year', 'description': [""      \nDjango Diabetes\nDjango Diabetes is a personal Glucose Manager\nIt allows you to follow your daily health\nImprovements\nAs I'm not suffering from diabetes, I am very open to suggestions for improvement of this project that I designed for a friend. For example with the type of examinations, etc... Currently I maintain the project by evolving versions of python and django.\nRequirements:\n\nPython 3.6\nDjango 2\narrow 0.12.x\n\nInstallation:\nto get the project, from your virtualenv, do :\ngit clone https://github.com/push-things/dj-diabetes.git\n\nto add the needed modules , do :\npip install -r requirements.txt\n\ncreate a new user who will be the admin :\npython manage.py createsuperuser\n\nand at least :\npython manage.py makemigrations dj_diabetes\npython manage.py migrate dj_diabetes\npython manage.py loaddata dj_diabetes_preferences.json\npython manage.py createsuperuser\n\nto startup the database and load the data\n\n""], 'url_profile': 'https://github.com/foxmask'}"
"{'location': 'Mountain View, CA', 'stats_list': [['37', '          followers'], ['0', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['This repo contains the Jupyter Notebook for predicting hospital readmission for patients with diabetes using the dataset from UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008).\nThe methodology behind this notebook is explained in my Medium Blog post: https://towardsdatascience.com/predicting-hospital-readmission-for-patients-with-diabetes-using-scikit-learn-a2e359b15f0\nThis project was created based on the conda environment.yml file provided in the repo.\n'], 'url_profile': 'https://github.com/andrewwlong'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['GlucoSuccess\nGlucoSuccess is a unique iPhone application that utilizes ResearchKit and HealthKit to get a more accurate understanding of how various things affect the progression and management of type 2 diabetes. The app presents a variety of surveys and tasks to track health behaviors such as physical activity, diet and medications.\nMassachusetts General Hospital’s goals in this study are to understand how health behaviors influence blood glucose in real life, with a resolution greater than ever before. At the same time, the app provides personalized insights into how one’s daily diet and physical activity relate to their blood glucose values.\nBuilding the App\n###Requirements\n\nXcode 6.3\niOS 8.3 SDK\n\n###Getting the source\nFirst, check out the source, including all the dependencies:\ngit clone --recurse-submodules https://github.com/ResearchKit/GlucoSuccess.git\n\n###Building it\nOpen the project, Diabetes.xcodeproj, and build and run.\nOther components\nThe shipping app also uses OpenSSL to add extra data protection, which\nhas not been included in the published version of the AppCore\nproject. See the AppCore repository for more details.\nData upload to Bridge has been disabled, the logos of the institutions have been removed, and the consent material has been marked as an example.\nLicense\nThe source in the GlucoSuccess repository is made available under the\nfollowing license unless another license is explicitly identified:\nCopyright (c) 2015, Massachusetts General Hospital. All rights reserved. \n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder(s) nor the names of any contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission. No license is granted to the trademarks of\nthe copyright holders even if such marks are included in this software.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n'], 'url_profile': 'https://github.com/ResearchKit'}","{'location': 'NONE', 'stats_list': [['20', '          followers'], ['8', '          following'], ['18']], 'contributions': '1,175 contributions\n        in the last year', 'description': [""\n\n\n\n\n\n\n\nGlance \nGlance is an application for use with Fitbit devices to view your blood glucose levels along with a variety of other health stats on the watch face. You can see your stats at a glance!\nClick here to learn how to set up Glance!\n\nDonation\nI developed Glance to help people with diabetes! 50% of all donations will go to the Faustman lab. The remaining 50% will be dedicated to future research and development of Glance.\n\nFeatures\n\nCurrent BG\nInsulin on Board (IOB)\nCarbs on Board (COB)\nTrend direction\nDelta\nTime since last pull\nGraph of BG's over time\nError reporting\nTemperature\nStep count\nHeart rate\nTime\nDate\nBattery levels\nVibration Alerts\nChanging background color\n\nUser Agreement\nGlance must not be used to make medical decisions, by using glance you agree to the user agreement.\n""], 'url_profile': 'https://github.com/Rytiggy'}","{'location': 'San Francisco', 'stats_list': [['244', '          followers'], ['63', '          following'], ['646']], 'contributions': '91 contributions\n        in the last year', 'description': [""decoding-dexcom\nhacking diabetes: give me my data\nSetup\nThere are some scripts in the\ndexcom_reader directory.\nThey depend on https://github.com/compbrain/dexcom_reader.\nTo use these scripts:\n$ git clone https://github.com/bewest/decoding-dexcom.git\n$ cd decoding-dexcom/dexcom_reader\n$ git clone https://github.com/compbrain/dexcom_reader.git\n\nthen to test that everything worked, try\n$ python dxcom-scan\nhelping\nSend me your packet captures!\nfork this repo\nThen\n$ git clone git@github.com/<yourname>/decoding-dexcom.git\n$ cd decoding-dexcom\n$ git checkout -b <yourname>\n$ mkdir <yourname>\n$ cp ~/path/to/captures ./<yourname>\n$ git add -v\n$ git commit -am '<yourname> adding captures for @bewest et al.'\n$ git push -u origin <yourname>\nThen you can send me an email or a pull request.\n""], 'url_profile': 'https://github.com/bewest'}","{'location': 'NONE', 'stats_list': [['260', '          followers'], ['0', '          following'], ['3']], 'contributions': '0 contributions\n        in the last year', 'description': [""More info @ https://spike-app.com\nFacebook support group @ https://www.facebook.com/groups/spikeapp/\nGitter Channel @ https://gitter.im/SpikeiOS/Lobby\nBetter readme soon!\nNote for iOS Developers:\nYou'll notice that while the Today Widgets and Apple Watch app have Xcode projects and can be compiled using Xcode, the main Spike App project UI is missing, and the Spike project and storyboard are just empty place holders.\nWhile the iOS specific code is available and open source, building your own version of the Spike App with Xcode from this repository is not possible, for the following reasons:\n\n\nSpike is based on iOSxDripReader, which was written for the Adobe Air runtime and is compiled with the commercial product FlashBuilder Premium.\n\n\nThe Spike App's theme and graphics were donated to the Spike project by a french designer and are not open source (you would need to supply your own)\n\n\nAdditionaly, there are many commerical AIR Native Extensions to support iOS functionality from AIR which include:\n\nBluetooth LE\nCalendar\nCloudStorage\nFirebase\nNetwork Info\nNotifications\nPush Notifications\nScanner\nOpen source\n3DTouchiOS by Adobe\n\n\n\n""], 'url_profile': 'https://github.com/SpikeApp'}","{'location': 'Singapore', 'stats_list': [['207', '          followers'], ['253', '          following'], ['22']], 'contributions': '670 contributions\n        in the last year', 'description': ['Build a machine learning classifier model\nThe Pima Indians of Arizona have the highest reported prevalence of diabetes of any population in the world. A small study has been conducted to analyse their medical records to assess if it is possible to predict the onset of diabetes based on diagnostic measures.\nDataset is downloaded from Kaggle.\xa0\nThe objective of this article is to build a predictive machine learning model to predict based on diagnostic measurements whether a patient has diabetes. This is a binary (2-class) classification problem. There are 768 observations with 8 medical predictor variables (input) and 1 target variable (output 0 for ""no"" or 1 for ""yes"").\nRead more\nhttps://towardsdatascience.com/building-a-machine-learning-classifier-model-for-diabetes-4fca624daed0\nConnect with me\nhttps://www.linkedin.com/in/jnyh/\n'], 'url_profile': 'https://github.com/JNYH'}","{'location': 'North America', 'stats_list': [['2', '          followers'], ['0', '          following'], ['1']], 'contributions': '47 contributions\n        in the last year', 'description': ['diabetes\nAnalysing Pima Indians Diabetes dataset with Weka and Python\nReproducing/Expanding in Weka\nAbstract\nReproducing case study of Shvartser [1] posted at Dr. Brownlee\'s comprehensive ML learning website [2].\n\nReproducing the study and explicitly stating the filters used\nExpanding on the case study by:\n\nbalancing classes by over and under sampling minority and majority classes, respectively\nannotating predictions with probabilities\nexercising control over probability threshold to reduce false negatives at the cost of false positives\n\n\n\nReproducing\nIn part 1 of the case study, The case study claims that ""Larger values of plas combined with larger values for age, pedi, mass, insu, skin, pres, and preg tends to show greater likelihood of testing positive for diabetes.""\nI don\'t see much likelihood from the scatter plot. Both positive and negative data points for the said attributes overlap for the most part.\nThe datasets are reproduced with the following filters:\n\ndiabetes.arff: original unchanged dataset.\ndiscretize.arff: supervised.attribute.Discretize\nmissing.arff: It is ambiguous which filter was applied to generate this dataset in the case study, so I skip this file. Instead, I provide further treament in (5) and (6).\nnormalized.arff: unsupervised.attribute.Normalize on all attributes. Not applied on the class, which is nominal anyways.\nremove_missing.arff: Fellow user (credits due) at The UCI ML repository [3,4] observes there are zeros in places where they are biologically impossible, such as the blood pressure. They are likely missing values. I further checked the remaining attributes. Except pregnancy, they either cannot be zero (e.g. mass) or don\'t have zero (e.g. pedigree). In the former case, I assume zero indicates missing values, and use Dr. Brownlee\'s post [1] to remove the missing values. This reduces the number of instances from 768 to 392. Needless to say, this purges dataset by half.\nreplaced_missing.arff: Following on comment on (5), I again use Brownlee\'s post [5] to replace the missing values with the mean of the attribute value.\nsquare.arff: \nstandardized.arff: unsupervised.attribute.Standardize\n\nWith these datasets, I have been able to reproduce the Weka Experiment in part 2. I added one more algorithm for establishing a baseline namely, ZeroR. The numbers are highly similar as reported by Shvartser [5]. We have considered both linear, e.g. Logistic Regression (LR), and non-linear, e.g. Random Forest (RF), classifiers. We also see that their evaluation metrics are not statistically different. In such a case, linear model is preferable and I use LR for further analysis.\nExpansion\nNow, the case study rightly notices that there is class imbalance: 65% -ve, and 35% +ve. In part 2, I am unsure if the class was balanced in cross validation. In the interest of reproducing the study, I do not balance the classes for the above datasets, namely (1-8). As you may know, class imbalance leads to a majority classifier, and we see this artifact when ZeroR gives us about 65% accuracy. To balance the classes, I generate two additional datasets:\n\noversampling.arff: increases the number of minority class (+ve) instances by a specified percentage. I specify the default of 100%, and that increases the number of +ve instances to be at par with the majority class (-ve) instances. I applied the SMOTE and Randomize filters in that order. The total instance count becomes 1,036. This mildly contaminates the pure data samples with synthethic ones. See Shams youtube for step-by-step method for applying SMOTE and Randomize filters [7].\nundersampling.arff: I use SpreadsubSample and Randomize filters in that order to reduce the number of majority class instances to be at par with minority class instances, namely 268. The total number of instances are now 536. Again, see Shams second video [8] for step-by-step procedure. This method removes valuable instances of the majority class.\n\nIntuitively, acquiring additional instances is likely to be more effective than undersampling the majority class or just oversampling the minority class.\nThe accuracy or percent_correct in the Weka Experiment are stated below:\nDataset        \t\t    ZeroR |   LR \ndiabetes.arff       \t65.11 |   77.10 v\noversampling.arff   \t51.74 |   75.51 v\nundersampling.arff  \t49.62 |   73.73 v\n\nwhere v represents the statistical difference.\nNote, the accuracy of ZeroR dropped to about 50% as anticipated. The accuracy of LR is still close to our previous best. Determining statistical significance of accuracies for LR across the datasets is still outstanding.\nNext, the Area under ROC in the Weka Experiment are stated below:\nDataset        \t\t   ZeroR |   LR \ndiabetes.arff       \t0.50 |   0.83 v\noversampling.arff   \t0.50 |   0.84 v\nundersampling.arff  \t0.50 |   0.82 v\n\nFinally, the F-Measures in the Weka Experiment are stated below:\nDataset        \t\t   ZeroR |   LR \ndiabetes.arff       \t0.79 |   0.83 v\noversampling.arff       0.00^|   0.75 v\nundersampling.arff  \t0.50 |   0.74 v\n\n^Note, F-Measure of ZeroR for oversampling is 0.00. This seems incorrect, and is different (0.446) to the same metric, algorithm and dataset in Weka Explorer.\nControlling the number of false negatives\nIt might be nice to see the associated probabilities with a prediction. Incidentally, LR provides associated probability out-of-the-box. The following direction will allow you to store the predictions in csv.\nWeka Explorer -> Classify -> More options -> Output predictions Choose -> CSV file\nI build LR model with ""Use training set"" and store the predictions in the pred.csv file. A sample:\ninst#,actual,predicted,error,neg_prob,pos_prob\n1,1:tested_negative,1:tested_negative,,*0.744,0.256\n2,1:tested_negative,1:tested_negative,,*0.577,0.423\n3,1:tested_negative,1:tested_negative,,*0.829,0.171\n4,1:tested_negative,1:tested_negative,,*0.994,0.006\n5,1:tested_negative,2:tested_positive,+,0.424,*0.576\n\nthe * sign indicates the probability of the predicted class.\nthe + sign indicate an incorrect prediction.\nWhichever class has the highest probability i.e. greater than 0.5 is the predicted class. The confusion matrix for building LR across the whole dataset:\n=== Confusion Matrix ===\n   a   b   <-- classified as\n 446  54 |   a = tested_negative\n 111 157 |   b = tested_positive\n\nThe false positives (54 above) cause unnecessary worry, and typically follows another test to confirm the result. The false negatives (111 above) are really bad. In this case, LR is predicting that a subject does NOT have a disease where they may have actually got one. Naturally, a physician might want to reduce the number of false negatives at the cost of increasing false positives. I could not adjust the probability threshold from 0.5 to an another value in Weka.\nI did a work around by building on pred.csv file. At the bottom of diabetes_proc tab in the diabetes.xlsx file, positive probability and trigger are drawn. The positive probability has been sorted and hence the ascending curve is seen. As the probability crosses 0.5+delta, the trigger happens and the prediction is a positive test.\nI invite you to change the value of delta to see the effects on the chart and the confusion matrix. The value of false negatives reduces from 112 to 84 when the delta value is reduced from zero to -0.10. As a side effect, false positives also increase from 69 to 94 with this delta change.\nOutstanding\n\nSo far, we have prepared and identified which datasets and algorithms seem most suitable. An actual model to generate predictions is pending. I see that as a simple exercise, and is documented in the lesson 14 of the 14-day mini course on Weka [10].\nDetermining statistical significance of accuracies for LR across the datasets is still outstanding.\n\nReproducing/Expanding in Python\nAfter reproducing and expanding the case study in Weka, I decided to reproduce them in Python. Reasons:\n\nI have developed understanding of the problem\nWeka case will serve as a baseline for comparison\nI want to get an idea on the amount of effort and flexibility both platforms provide on the same problem\n\nFor the warm up, I worked through Dr. Brownlee\'s ""Your First Machine Learning Project in Python Step-By-Step"" [11]. I wrote up the code with headings to allow the follower of the output to see what is going on.\nIn addition to my expanded Weka case study, the Python part expands the case study further by:\n\nadditional algorithms for spot checking\nbalancing class labels using LR parameter\ngrid search on the hyperparameters\nsearching for the cross over point between sensitivity and specificity\nplotting roc curve\nsensitivity and specificity cross over\n(not too exciting) saving and loading the model from disk\n\nReproducing & Expansion\nSimilar to Python Step-By-Step [11], I summarize and visualize the datasets, generating plots where possible. I\nIn contrast to creating different files for each datasets, I store the datasets in memory. I rescale the data, both normalization and standardization as suggested in the post [12]. I observe that that the mean and standard deviation are very close to zero and one, respectively, but not exactly. I posted this as a question on the blog [12], and assume that these close-enough values are acceptable in the community and move forward.\nI feed the dataset to the algorithms. For each dataset, a comparison plot is generated, where each algorithm performance is drawn using a box plot.\nWhile not too worried about the average accuracy value being different, I notice the Weka and Python are report differences in the statistical significance for the same algorithms. This merits further investigation.\nNonetheless, the algorithms have similar performance. One exception is SVM, which has consistently lower accuracy. The algorithms are instantiated with their default parameters, arguably sufficient for the first run. The algorithms contain both linear (LR and LDA) and nonlinear (KNN, CART, NB etc.) algorithms. In all the cases, I see that LR performs well with high accuracy either LR has the highest accuracy or statistically insignificant to others having higher accuracy. One exception is where RF provides statistically significant better accuracy compared to LR. One possible way forward is to fine tune RF to see if we can further improve the accuracy. This is left as future work.\nGrid Search\nI take LR to the next rounds. Next step is to fine tune LR. I perform a grid search [13] for LR over C and penalty parameters. LogisticRegression implementation in scikit takes a class_weight parameter, which when set to \'balanced\' automatically adjust weights inversely proportional to class frequencies in the input data. I prefer this over oversampling minority class with SMOTE, as that contaminates the samples mildly. I use test_size = 0.33 for splitting train/test sets for grid search.\nBefore the actual grid search, I get a baseline accuracy of LR with default parameters and the train/test datasets, namely about 0.76. To my surprise, optimal C and penalty_model parameters from grid search also give us about the same accuracy i.e. 0.76. It turns out the optimal and default C value is the same i.e. 1. However, there is a difference in the penalty model i.e. default is l2 and the optimal is l1. The different penalty model apparently had no effect on the accuracy.\nNext I did a quick store and load of the model, and confirm the accuracy score remains the same.\nWith the loaded model, I generate the evaluation metrics on the test set (X_test):\n\naccuracy_score (about 0.76)^1\nconfusion_matrix (\'tn, fp, fn, tp:\', 121, 41, 21, 71 )\nsensitivity or true positive rate (tpr) (about 0.63)\nspecificity or ture negative rate (tnr) (about 0.75)\nclassification report\nroc area under the curve (auc) (about 0.84)\n\nControlling number of false negatives -- The sensitivity and specificity trade off\nRecall, we want to exercise control over false negatives by adjusting the value of delta i.e. as the positive probability crosses 0.5+delta, the trigger happens and the prediction is a positive test. In general, sensitivity and specificity trade off against each other. Recall, we saw an example in the diabetes.xlsx when we changed the value of delta. The original paper [14] that provides the dataset shows that sensitivity and specificity cross over when their values are about 0.76^1. This may be considered a good balance between tpr and tnr. The default value of zero delta provide us with tpr and tnr of 0.63 and 0.75, respectively. I determine the value of delta where sensitivity and specificity cross by looping through a set of delta values and generating respective tpr and tnr values. Note, I am superimposing the delta value on the underlying LR model and probabilities, and then generating predictions and other metrics on the superimposed perspective. The underlying LR model remains unchanged. I looked into pushing the delta value into the underlying but decided against it due to the reasoning by lejlot at stackoverflow [15].\nI draw a plot show the changing values of sensitivity and specificity with each delta value. From the plot, it can be seen that sensitivity and specificity cross when delta is about 0.026. The rate value of sensitivity and specificity is about 0.76. We have reproduced the result of the paper by LR. In the shell output, we can also see that false negative (fn) increase when the value of delta increases.\n\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', -0.02, 0.7717391304347826, 0.7407407407407407)\n(\'confusion_matrix: tn, fp, fn, tp:\', 120, 42, 21, 71)\n...\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', 0.06, 0.7391304347826086, 0.7654320987654321)\n(\'confusion_matrix: tn, fp, fn, tp:\', 124, 38, 24, 68)\n...\n(\'deltaX,sensitivity_tpr,specificity_tnr:\', 0.12, 0.717391304347826, 0.7777777777777778)\n(\'confusion_matrix: tn, fp, fn, tp:\', 126, 36, 26, 66)\n\nLet delta = -0.10\nThe evaluation metrics on the test set (X_test):\n\naccuracy_score (about 0.74)\nconfusion_matrix (\'tn, fp, fn, tp:\', 111, 51, 16, 76) <= reduced from 21 when delta=0\nsensitivity or true positive rate (tpr) (about 0.83) <= increased\nspecificity or ture negative rate (tnr) (about 0.67) <= decreased\nclassification report\n\nFinally, we can also plot the probability values for sorted positive tests and their respective triggers, and visualize them graphically.\nFuture work\n\nInvestigate why Weka and Python report differences in the statistical significance with their default parameters.\nExplore if fine tuning RF further improve the accuracy of predictions\n\nReproducing in Jupyter and Databrick notebooks\nAfter reproducing and expanding the case study in Python, I first reproduced it in Jupyter notebook (diabetes.ipynb). The motivation is to get hands-on with Jupyter notebook. In hindsight, it might be natural to explore and develop a data science case study with the notebook first and then transform it into a script. This is because the notebook allows more interactive to and fro modications and micro executions.\nOnce the Jupyter notebook is complete, I move on to Databricks platform [16]. Databricks aims to help users with cloud-based big data processing using Spark. Also, It has a notebook similar in principle to Jupyter. The community edition offers a single node cluster and associated workspace to create and execute multiple notebooks. The cluster springs to life within minutes, and I use Databricks Runtime Version 4.1(includes Apache Spark 2.3.0, Scala 2.11). I see the Databricks notebook over spark cluster as a jumping board to perform data science at scale. So, I transform diabetes.py into a Databricks notebook [17]. Naturally, I need to upload the data (diabetes.data) to the cluster. It turns out to be mostly a copy paste job except with the following (annoying) differences:\n\nWith present version of sklearn (0.18.1) in Databricks cluster, the latest version of SMOTE package does not work. I installed an older compatible version.\nThe plot.show() needs to be followed by display() for the plot to appear.\n\nAfter you sign up to Databrciks (say community edition) and setup a cluster, you may import my notebook with a click of a button [17]. Isn\'t that nice? :-) The only caveat is notebook available for 6 motnhs after publishing. So, I also export it as diabetes_databricks.ipynb so that it remains eternal. It is possible to load Jupyter notebook in Databricks [18], though I haven\'t tried myself. I need to see how can I use pyspark and scala/spark, perhaps in a different sitting.\nConclusions\nPersonally, I feel drawing a visual grid of too many attributes is overwhelming, especially for scatter plot between attributes. I found a correlation matrix much more helpful in quantifying relationships. In this tutorial, we didn\'t address any outliers or performed any feature engineering. One reason that jumps out is that it is highly curated dataset.\nMy thoughts are Weka Explorer and Experimenter are excellent tools to get quick and dirty analysis with algorithms and datasets without writing code. For run time changes and further fine tuning, coding seems necessary.\nReferences\n \n[1] https://machinelearningmastery.com/case-study-predicting-the-onset-of-diabetes-within-five-years-part-1-of-3/\n[2] https://machinelearningmastery.com/start-here/\n[3] https://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\n[4] Lichman, M. (2013). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n[5] https://machinelearningmastery.com/how-to-handle-missing-values-in-machine-learning-data-with-weka/\n[6] https://machinelearningmastery.leadpages.co/leadbox/144d0b573f72a2%3A164f8be4f346dc/5675267779461120/\n[7] https://www.youtube.com/watch?v=w14ha2Fmg6U&t=242s\n[8] https://www.youtube.com/watch?v=ocOlm73HeNs\n[9] https://social.msdn.microsoft.com/Forums/azure/en-US/71d0efe7-4de0-4434-a4a6-5c27af876c1b/smote-consequences-a-question-and-an-alternative?forum=MachineLearning\n[10] https://machinelearningmastery.com/applied-machine-learning-weka-mini-course/\n[11] https://machinelearningmastery.com/machine-learning-in-python-step-by-step/\n[12] https://machinelearningmastery.com/rescaling-data-for-machine-learning-in-python-with-scikit-learn/#comment-425333\n[13] https://machinelearningmastery.com/how-to-tune-algorithm-parameters-with-scikit-learn/\n[14] https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/pdf/procascamc00018-0276.pdf\n[15] https://stackoverflow.com/questions/19984957/scikit-predict-default-threshold\n[16] https://databricks.com/try-databricks\n[17] https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/6710283852221561/2246037980686797/3061735664085706/latest.html\n[18] https://vincentlauzon.com/2018/02/27/import-notebooks-in-databricks/\n\n'], 'url_profile': 'https://github.com/dr-riz'}","{'location': 'San Francisco', 'stats_list': [['244', '          followers'], ['63', '          following'], ['646']], 'contributions': '91 contributions\n        in the last year', 'description': [""# set ft=rst :\n-- restructuredtext --\n\nHacking diabetes\n\nFidelity of Care\nCirca 2011\nDespite many novel applications of technology to the\nmedical field, therapies for chronic disease lacks enough\ntransparency and credibility to humanely empower users to\nmanage therapy.\n\nDiabetes Data Bus\nThere's a rising notion of a diabetes data bus.  A system\nwhich integrates data collected from a variety of systems,\nand communicates that data to authorized users.  In\naddition, this infrastructure would support agents from an\nexpert systems presenting analyses and simulations of\nexpected results.\nDiabetics own multiple mobile computers that record\nbiometric data on a regular basis.  This typically\nincludes a menagerie of glucometers, of which I own at\nleast 5, 2 of which are in active rotation at any given\ntime.  I also use an insulin pump, like many diabetics,\nand it keeps logs of insulin given, as well as performs\nopaque simulations on expected results.  In addition,\nthere are ancillary devices that measure interstitial\nglucose levels on a real-time basis, as well as\npedometers, sleep monitors, and the list goes on ad\nnauseum.\nWith so many sources of data critical to managing medical\ntherapy, it is impossible to predict the new sources of\ndata that will arise.  It's also impossible to replace all\nthe existing devices with new devices that are designed to\ncooperate with one another.  However, all existing devices\nhave a serial port with which an authorized agent can\ncommunicate with the device in order to audit therapeutic\ndetails.  Therefore, it's much easier to adapt existing\ndevices into a common framework that knows how to present\ndata to expert systems, knows how to store data over time,\nand knows how to keep the user connected to that data in\nways that allow better decision making.\nDespite all the data currently logged by devices, how much\nof it is leveraged to drive ongoing decisions?  The\nproprietary software offered by medical industry offers\nsnapshots of interesting data from the past, and then asks\nthe user to manually fill in any missing data.  Each\nmanufacturer offers a perspective that their software\nknows everything about managing diabetes, and in so doing\nfails to offer a holistic perspective on therapy.\nInstead, a data bus accepts input from a variety of\nsources, aggregates it with other available sources, and\nmakes it available to the user at any time and any place.\nThe user can choose which applications can subscribe to\ndata, as well as re-route and transform data into those\napplications.  Indivo already provides the container for\naggregating a user's data with customizable schema types.\nCube offers a great presentation engine for arbitrary\ndata.  When the two are tweaked to manage the data from\ndiabetic therapy, we have a diabetic data bus.\n\n\nlog - December's sugars and pump histories as of\n2011 ??\n\n\n\n\nset\n""], 'url_profile': 'https://github.com/bewest'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Itelina'}","{'location': 'Chennai,Tamil Nadu,India', 'stats_list': [['31', '          followers'], ['29', '          following'], ['23']], 'contributions': '23 contributions\n        in the last year', 'description': [""Prediction of diabetes - Type 2 (Mellitus)\nHosted Link : Click here\nThis is a machine learning project based on the prediction of type 2 diabetes, with a given data. It uses logistic regression to classify the diabetic outcomes of each person's record.The diabetes is growing threat nowadays, one of the reasons being that there is no perfect cure for it. There are actually two types of diabetes, namely\n\nType 1\nType 2\n\nThe type 2 diabetes is commonly called diabetes mellitus. It can be defined as a chronic condition that affects the way the body processes blood sugar (glucose). We consider the mellitus here. After several researches we found that, some parameters are directly responsible for the mellitus to occur. By using the data of the people with diabetes and without diabetes, a dataset has been build.\nWe use that dataset to classify the people who are in the risk of getting diabetes.\nDirectory structure\nCode\nThis directory contains the source code files.\n\nPrediction.rmd : Source code,R Markdown file\n\nData\n\nDiabetes.csv : The dataset\n\nResults\nThis directory has the codes and the outputs, presented in a neat format.\n\nPrediction.html : Presents the project as html file, with wonderful designs (Download is recommended)\nPrediction.pdf : Presents the project as simple document.\n\nTable of contents\nThe topics are elaborated in the markdown/results\n\nIntroduction\nLoading the required libraries\nData Loading\nCorrelations\nVisualizations\nPreparing the data\nLogistic Regression\nPrediction\nROC Curve\nComparison\nConclusion\n\n""], 'url_profile': 'https://github.com/SridharCR'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Tidepool Uploader\n\n\nThis is an Electron App that acts as an uploader client for Tidepool. It is intended to allow you to plug diabetes devices into your computer\'s USB port, read the data stored on them, and upload a standardized version of the data to the Tidepool cloud.\nThis README is focused on just the details of getting the uploader running locally. For more detailed information aimed at those working on the development of the uploader, please see the developer guide.\nTable of contents\n\nSet Up\nConfig\nTests\nLinting & Code Style\nDocs\nPublishing\n\n\nHow to set it up\n\nClone this repository.\nMake sure you have node v12.x installed. If you are managing node installations with nvm, which we highly recommend, you can just do nvm use when navigating to this repository to switch to the correct version of node. (In this repository, the correct version of node will always be the version of node packaged by the version of Electron that we are using and specified in the .nvmrc file.)\nRun npm install or, preferably, yarn\nSet the config for the environment you want to target (see Config below)\nRun the following command:\n\n$ npm run dev\nor\n$ yarn dev\n(This will bundle the application with webpack and watch for changes. When it stops printing output you can continue to the next step.)\nNB: React components and CSS will hot load after changes (this can be confirmed by watching the JavaScript console), but changes to device drivers and other code outside of the React components will not - use \'Reload\' to reload after such changes. If the compilation/hot reload of a component fails for any reason (e.g. from a syntax error) you may need to reinitialize the hot loader by reloading the application.\nDocker for Linux\nIf you are running Linux you probably need to be using an Ubuntu distribution or derivative. To get around this for other distrubutions you can try to build a local docker image which is based on Ubuntu 18.04 and use the yarn/npm commands interactively.\nNOTE: You need to add udev rules to your host for uploads to actually work. You can find the udev rules here. The file should be placed in /etc/udev/rules.d/ and the host should be rebooted.\n\n\nBuild the image\ndocker-compose build\n\n\nRun it\ndocker-compose up -d\n\n\nWork with it interactively.\nEven if you kill the Tidepool Uploader GUI the container will continue to run. You can work with the yarn commands like you would locally by using docker exec.\nExamples\nInteractively select the yarn target: docker exec -it uploader bash -c ""yarn run""\nRebuild: docker exec -it uploader bash -c ""yarn build""\nStart the Dev GUI: docker exec -it uploader bash -c ""yarn dev""\n\n\nConfig\nConfiguration values (for example the URL of the Tidepool Platform) are set via environment variables. If you need to add a config value, modify the .config.js file. If you need to read a config value inside the app, use var config = require(\'./lib/config\'). To set config values (do this before building the app), you can use Shell scripts that export environment variables (see config/local.sh for an example that exports the appropriate variables when running the whole Tidepool platform locally using runservers), for example:\n$ source config/local.sh\n$ yarn start\nDebug Mode(s)\nFor ease of development we have several debug features that developers can turn on and off at will (and to suit various development use cases, such as working on a new device driver versus working on the app\'s UI). Each of these debug features is set with an environment variable, but rather than being loaded through .config.js (as we do for production configuration variables, see above), we load these through the webpack DefinePlugin (see Pete Hunt\'s webpack-howto for an example, although note Hunt uses the term \'feature flag\').\nDEBUG_ERROR\nThe environment variable DEBUG_ERROR (boolean) controls whether or not errors sourced in device drivers are caught and an error message displayed in the UI (the production setting) or whether they are thrown in the console (much more useful for local development because then the file name and line number of the error are easily accessible, along with a stack trace). DEBUG_ERROR mode is turned on by default in config/device-debug.sh.\nThis can also be toggled internally in the running Electron app via a right-click context menu available on the login screen, much like the menu for switching environments.\nLocal Development w/o Debug Mode(s)\nAll debug options are turned off by default in config/local.sh.\nTests\nTo run the tests in this repository as they are run on CircleCI and Appveyor use:\n$ yarn test\nor\n$ yarn test\nLinting & Code Style\nWe use ESLint to lint our JavaScript code. We try to use the same linting options across all our client apps, but there are a few exceptions in this application, noted with comments in the .eslintrc configuration file.\nTo run the linter (which also runs on CircleCI and Appveyor with every push, along with npm test), use:\n$ npm run lint\n\nAside from the (fairly minimal) JavaScript code style options we enforce through the linter, we ask that internal developers and external contributors try to match the style of the code in each module being modified. New modules should look to similar modules for style guidance. In React component code, use existing ES6/ES2015 components (not legacy ES5 components) as the style model for new components.\nNB: Please keep ES5 and ES6/ES2015 code distinct. Do NOT use ES6/ES2105 features in ES5 modules (most easily recognizable by the use of require rather than import).\nDocs\nDocs reside in several places in this repository, such as docs/ and lib/drivers/docs. They are built as a static site with GitBook and served at developer.tidepool.org via GitHub Pages.\nSee this guidance on our use of GitBook at Tidepool.\nPublishing\nThis section is Tidepool-specific. Release management and application updates are handled via the Github provider in the electron-builder project. The recommended workflow for a new production release is as follows:\n\nWhen you\'re working on what might become a new release, increment the version number in package.json and app/package.json and commit/push (on the branch)\nThe CI server(s) will create a draft release in Github with the title of the version from the package.json file and will automatically attach the distribution artifacts to that draft (drafts are not publicly visible)\nWhen your pull request is approved and merged to master, go to the draft release and type in the version for the tag name, ensure that you\'re targeting the master branch, fill out the release notes and publish the release. This will create the tag for you.\n\nFor a non-production release (alpha, dev, etc.)\n\nIncrement the version number in package.json and app/package.json and ensure that you have included the channel information after the version patch number (i.e. v0.304.0-alpha or v0.304.0-beta.2). The hyphen separated version semantic is important.\nThe CI server(s) will create a draft release in Github with the title of the version from the package.json file and will automatically attach the distribution artifacts to that draft (drafts are not publicly visible)\nWhen you want to publish your non-production release, go to your draft and type in the version for the tag name, ensure that you\'re targeting the branch that you\'re currently releasing from, mark the release as a pre-release, fill out the release notes and publish the release. This will create the tag for you on the branch that you want.\n\nThe Uploader has a self-update mechanism that will look at the latest release and compare versions, downloading and prompting the user to update if a newer version is available. For production releases, only official releases will be considered. For non-production releases (-alpha, -beta.2, etc.) releases marked as pre-release will also be checked, matching against the string portion of the post-hyphen version segment. For more detail about this behavior see the electron-builder docs concerning auto-update options\nCI server environment variables\nWe use the following environment variables on the CI servers:\n\n\n\nVariable\nCI Server\nUse\n\n\n\n\nAPPLEID\nCircleCI\nNotarization\n\n\nAPPLEIDPASS\nCircleCI\nNotarization\n\n\nAWS_ACCESS_KEY_ID\nBoth\nS3 builds and AV e-mails\n\n\nAWS_SECRET_ACESS_KEY\nBoth\nS3 builds and AV e-mails\n\n\nCSC_FOR_PULL_REQUEST\nBoth\ntrue, code signing for PR\n\n\nCSC_KEY_PASSWORD\nBoth\nCertificate password\n\n\nCSC_LINK\nBoth\nCode signing certificate\n\n\nDEBUG\nCircleCI\nSet to electron-builder\n\n\nGH_TOKEN\nBoth\nFor GitHub builds\n\n\nPUBLISH_FOR_PULL_REQUEST\nBoth\ntrue, build artefact for PR\n\n\nROLLBAR_POST_TOKEN\nBoth\nRollbar logging\n\n\nFTP_AV_PASSWORD_TIDEPOOL\nAppveyor\nAV submission\n\n\n\nEditor Configuration\nAtom\napm install editorconfig es6-javascript javascript-snippets linter linter-eslint language-babel autocomplete-modules file-icons\nSublime\n\nEditorconfig Integration\nLinting\nESLint Integration\nSyntax Highlighting\nAutocompletion\nNode Snippets\nES6 Snippets\n\nOthers\n\nEditorconfig\nESLint\nBabel Syntax Plugin\n\nDevTools\nToggle Chrome DevTools\n\nOS X: Cmd Alt I or F12\nLinux: Ctrl Shift I or F12\nWindows: Ctrl Shift I or F12\n\nSee electron-debug for more information.\nDevTools extension\nThis project includes the following DevTools extensions:\n\nDevtron - Install via electron-debug.\nReact Developer Tools - Install via electron-devtools-installer.\nRedux DevTools - Install via electron-devtools-installer.\n\nYou can find the tabs on Chrome DevTools.\nIf you want to update extensions version, please set UPGRADE_EXTENSIONS env, just run:\n$ UPGRADE_EXTENSIONS=1 npm run dev\n\n# For Windows\n$ set UPGRADE_EXTENSIONS=1 && npm run dev\nCSS Modules\nAll .module.less files will be use css-modules.\nPackaging\nTo package apps for the local platform:\n$ npm run package\n$ yarn package\nTo package apps with options:\n$ npm run package -- --[option]\nTo package the app on your local machine, you need to set the ROLLBAR_POST_TOKEN environment variable to send telemetry data to Rollbar. You can get one for free from https://rollbar.com\nmacOS: To notarize the app so that it will run on macOS Mojave, you need to set the environment variables APPLEID and APPLEIDPASS. Note that you need to set an app-specific password in https://appleid.apple.com for this to work.\nFurther commands\nTo run the application without packaging run\n$ npm run build\n$ npm start\nTo run End-to-End Test\n$ npm run build\n$ npm run test-e2e\nOptions\nSee electron-builder CLI Usage\nModule Structure\nThis project uses a two package.json structure.\n\nIf the module is native to a platform or otherwise should be included with the published package (i.e. bcrypt, openbci), it should be listed under dependencies in ./app/package.json.\nIf a module is imported by another module, include it in dependencies in ./package.json.   See this ESLint rule.\nOtherwise, modules used for building, testing and debugging should be included in devDependencies in ./package.json.\n\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'Athens', 'stats_list': [['3', '          followers'], ['2', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes Prediction\nUsing various machine learning algorithms to get the best prediction accuracy if possible for the Pima Indians dataset.\nThe best result was found with GradientBoosting with an accuracy of 83%.\nInstall\n\xa0\xa0\xa0 Python version used in this project: 3.6.6\n\xa0\xa0\xa0 Libraries used:\n\n\nPandas 0.23.4\nNumpy 1.15.3\nMatplotlib 2.2.2\nScikit-learn 0.20.0\nScipy 1.1.0\n\n\nHow to Run\nTo run this project you will need some software, like Anaconda.\nFrom Anaconda just set as working directory the folder of the project, open the .py file you want from Models folder and run this file or press F5.\n'], 'url_profile': 'https://github.com/OperatingFuture'}","{'location': 'Dhaka, Bangladesh', 'stats_list': [['14', '          followers'], ['43', '          following'], ['28']], 'contributions': '32 contributions\n        in the last year', 'description': ['\nPrima Indian DataSets Diabetes prediction\n🔗 Research paper link: https://dl.acm.org/citation.cfm?id=3297737#\nDescription about dataset\nThe Prima Indian Diabetes Dataset has been used in this study, provided by the UCI Machine Learning Repository. The dataset has been originally collected from the National Institute of Diabetes and Digestive and Kidney Diseases. The dataset consists of some medical distinct variables, such as pregnancy record, BMI, insulin level, age, glucose concentration, diastolic blood pressure, triceps skin fold thickness, diabetes pedigree function etc.  This dataset has 768 patient’s data where all the patients are female and at least 21 years old.  The number of true cases are 268 (34.90%) and the number of false cases are 500 (65.10%), respectively, in the dataset.\nI used six classification techniques, artificial neural network (ANN), Support Vector Machine (SVM), Decision tree (DT), random forest (RF), Logistics Regression (LR) and Naïve Bayes (NB).\n'], 'url_profile': 'https://github.com/razuswe'}","{'location': 'NONE', 'stats_list': [['9', '          followers'], ['10', '          following'], ['412']], 'contributions': '1 contribution\n        in the last year', 'description': ['python version: python3.5\nneeded package:numpy,pandas 0.20.3,sklearn0.0,xgboost 0.7,lightgbm 2.0.12, mlxtend 0.10.0\nneeded data:f_answer_a_20180306.csv, f_test_a_20180204.csv, f_test_b_20180305.csv, f_train_20180204.csv\n'], 'url_profile': 'https://github.com/xingyuezhiji'}","{'location': 'Shanghai', 'stats_list': [['26', '          followers'], ['37', '          following'], ['87']], 'contributions': '90 contributions\n        in the last year', 'description': ['天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测 第一赛季\n这次大赛第一赛季的主题，是通过对病人的临床数据和体检指标来预测其血糖值。\n大赛提供的训练数据包含病人的性别、体检日期以及血常规、肾功能检查等指标，\n每个指标分别作为一个字段储存在数据表中。最后一列为我们要预测的血糖值。\n该repo记录了参加本次大赛的各种数据探索、特征工程、特征选择、交叉验证模型以及\n线上提交模型。虽然，最后的结果并不尽人意，\n但是从doufu大佬和wufei大佬那里学到了很多。\nbasic_analysis & offline\n这个文件夹下，包含了最开始的数据探索和线下的交叉验证模型。\n通过数据探索，了解了数据的大体分布情况。\n线下模型从一开始的按性别划分，分别进行训练预测，演变成直接把性别作为特征\n全量训练预测。期间，doufu大佬开源的基于交叉验证的LightGBM融合模型给了我很大的启发。\n相信排行榜中，有不少参赛队是在那份开源代码的基础上修改来的。\n而那份代码确实“四两拨千斤”，仅仅用原始特征就取得了较好的结果。\n后来，看到wufei大佬的融合方案，借鉴了其nn模型，并利用其nn模型最后隐层的26个Batch-Normalized的输出\n作为特征输入到LightGBM进行测试，线下也得到了提高。同时，也与nn模型的结果进行了融合。\nonline\n包含了线上提交所使用的各种模型。最后，提交所使用的模型为lgb_nn_ensembing.py，\n融合了nn模型与LightGBM，同时将nn模型的隐层输出作为特征加入到LightGBM中。\nutil\n包含了特征工程、评价函数、模型参数。\n缺失数据采用随机森林填充，特征间的相关性，比各特征与血糖值之间高多了。\n'], 'url_profile': 'https://github.com/zixuanweeei'}","{'location': 'New York', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '3 contributions\n        in the last year', 'description': ['PIMA Diabetes Prediction\nUsing Pima Indians diabetes data set to predict whether a patient has diabetes or not based upon patient’s lab test result variables like Glucose, Blood Pressure, etc. using CART decision tree algorithm and K-Nearest Model achieving 76% accuracy.\nPython-Scikit Learn, SciPy, Pandas, MatPlotLib.\nProblem Statement: Diabetes is one of the deadliest diseases in the world. It is not only a disease but also creator of different kinds of diseases like heart attack, blindness etc. The normal identifying process is that patients need to visit a diagnostic center, consult their doctor, and sit tight for a day or more to get their reports.\nSo, the objective of this project is to identify whether the patient has diabetes or not based on diagnostic measurements.\nDataset Used: The dataset used has been obtained from UCI Machine Learning Repository having 769 records of Female Patients exclusively.\nDataset Link: https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nFrom the domain knowledge, I have analyzed and found out the ranges of values and its effects on diabetes for each continuous variable in the dataset. Based upon these ranges we will categorize the continuous variables for implementing the decision tree in the next step. Also, we can utilize these ranges to come up with appropriate null value replacement for each independent variable.\nThere are 8 independent variables:\n\nPregnancies: No. of times pregnant\nGlucose: Plasma Glucose Concentration a 2 hour in an oral glucose tolerance test (mg/dl)\nA 2-hour value between 140 and 200 mg/dL (7.8 and 11.1 mmol/L) is called impaired glucose tolerance. This is called ""pre-     diabetes."" It means you are at increased risk of developing diabetes over time. A glucose level of 200 mg/dL (11.1 mmol/L)     or higher is used to diagnose diabetes.\nBlood Pressure: Diastolic Blood Pressure(mmHg):\nIf Diastolic B.P > 90 means High B.P (High Probability of Diabetes)\nDiastolic B.P < 60 means low B.P (Less Probability of Diabetes)\nSkin Thickness: Triceps Skin Fold Thickness (mm) –\nA value used to estimate body fat. Normal Triceps SkinFold Thickness in women is 23mm. Higher thickness leads to obesity and    chances of diabetes increases.\nInsulin: 2-Hour Serum Insulin (mu U/ml)\nNormal Insulin Level 16-166 mIU/L\nValues above this range can be alarming.\nBMI: Body Mass Index (weight in kg/ height in m2)\nBody Mass Index of 18.5 to 25 is within the normal range\nBMI between 25 and 30 then it falls within the overweight range. A BMI of 30 or over falls within the obese range.\nDiabetes Pedigree Function: It provides information about diabetes history in relatives and genetic relationship of those relatives with patients. Higher Pedigree Function means patient is more likely to have diabetes.\nAge (years)\nOutcome: Class Variable (0 or 1) where ‘0’ denotes patient is not having diabetes and ‘1’ denotes patient having diabetes\nThe dependent variable is whether the patient is having diabetes or not.\n\nData Cleaning will take place as data has got lot of missing values. Handling missing values can be done either by replacing null values with mode or mean or replacing the null value with a random variable.\nAlgorithms Used: As we have to classify the data into patients having diabetes or not, the best method which can be used is Classification and Regression Tree Algorithm(CART), because in this, the dataset is divided into training and testing data. Further we can easily classify and predict the outcome using nodes and internodes.\nSoftware Package Used: Python-Scikit Learn, Numpy, Scipy, Matplotlib\nAdvantage of this project: The rules derived will be helpful for doctors to identify patients suffering from diabetes. Further predicting the disease early leads to treating the patient before it becomes critical.\n'], 'url_profile': 'https://github.com/niharikagulati'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['\n\n\nPredicting Diabetes With Machine Learning\n\nReady to get started with Machine Learning? This project uses Linear Regression to predict if a patient might suffer from Diabetes. Interesting, right? The dataset contains 10 physiological variables for 442 patients.\nReady to make some predictions?\n\n\n\n\nHow to setup your Azure Notebooks\nBefore starting with this project, make sure you have followed\nthis tutorial\nabout how to setup your Jupyter Notebook environment.\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/usman-noor'}","{'location': 'Kolkata, West Bengal, India', 'stats_list': [['9', '          followers'], ['14', '          following'], ['10']], 'contributions': '12 contributions\n        in the last year', 'description': ['Diabetes predictions application in Python\nThis application is made using sklearn machine learning libraries and pyqt5 for its graphical user interface.\nSupport Vector Machine classifies input data with a 80% accuracy. We have choosen the PIMA indians diabetes dataset from UCI archive.\n\nUSAGE\nFirstly install all dependencies via the following command.\npip3 install -r requirements.txt\nNow train the application in you pc as\npython3 diabetes.py\nFinally run the application :\npython3 gui.py\nNow insert all the requires details.\n'], 'url_profile': 'https://github.com/pritesh-ranjan'}","{'location': 'San Francisco', 'stats_list': [['244', '          followers'], ['63', '          following'], ['646']], 'contributions': '91 contributions\n        in the last year', 'description': ['insulaudit\nHomepage: https://github.com/bewest/insulaudit\nThis python package provides a toolkit for dealing with data used and\ncreated by a ""modern,"" circa 2010, insulin therapy regimen.\nWe provide a command line text based tool, and a python\nlibrary to audit therapeutic data from a variety of\nmedical devices widely used.\nTarget Devices\n\n\nMedtronic Minimed Paradigm Series insulin pumps\nusing the usbstick\n\nobserved working with a 522\n\n\n\nLifescan Glucose Meters:\n\nOnetouch series\nMini/Profile\n\n\n\nDexcom, Onetouch Ping, Bayer, omnipod.  In no particular order.\n\n\nBayer, coming soon: thanks to iko, https://bitbucket.org/iko/glucodump/src/e37ea2a38776/glucodump/usbcomm.py\n\n\nUsage\n  insulaudit [opts] [command]\n  insulaudit <device> [opts] [command]\n  insulaudit [device] [command] [opts]\n\n  insulaudit --help\n  insulaudit clmm scan\n\n\nLifescan\nNothing special, my system registers a serial device right\naway.\nMinimed\nIn linux, you need to poke the usbserial module with some\nparameters to make it work.  This only needs to be done\nonce::\nsudo modprobe usbserial vendor=0x0a21 product=0x8001\n# or\nsudo ./reset.sh\n# which runs ./remove.sh and ./insert.sh, the latter\n# of which does the modprobe for you.\n\nI\'ve observed runs working up to 5 times in a row, at\nwhich point I needed to reset the usbstick by removing it\nand re-inserting into the PC.\nOn mac, I can\'t recall if this is necessary.  We just need\na generic usb-serial adapter.  I haven\'t tried it, but I\nsuspect COM1 will likely work on M$, although\nauto-scanning will not detect it.  If your mac inserts the\ndevice somewhere under /dev/usb.serial* we will likely\nscan it.\nIn dmesg, you should see a message like this when you\ninser the usb stick::\n[201197.513266] usb 2-1: new full speed USB device using uhci_hcd and address 3\n[201197.919110] usb 2-1: configuration #1 chosen from 1 choice\n[201205.729621] usbcore: registered new interface driver usbserial\n[201205.730808] USB Serial support registered for generic\n[201205.731143] usbcore: registered new interface driver usbserial_generic\n[201205.731145] usbserial: USB Serial Driver core\n[201205.806220] USB Serial support registered for pl2303\n[201205.806248] pl2303 2-1:1.0: pl2303 converter detected\n[201208.305166] usb 2-1: pl2303 converter now attached to ttyUSB0\n[201208.305187] usbcore: registered new interface driver pl2303\n[201208.305189] pl2303: Prolific PL2303 USB to serial adaptor driver\nbewest@mimsy:~/Documents/bb/diabetes/src/mock$ \n\nInstalling insulaudit\nThere is no official release of insulaudit, only some pieces of code\ntowards establishing a tool.  Pull requests welcome.\n:::\n# Download the source\n# https://github.com/bewest/insulaudit\n# or fork it on github\ngit clone http://github.com/bewest/insulaudit.git\n# install insulaudit in your python runtime so you can\n# hack on it from here\npython setup.py develop\n\nStatus quo\nAs Thucydides said\n\nRight, as the world goes, is only in question between\nequals in power, while the strong do what they can and\nthe weak suffer what they must.\n\ndecoding-carelink\nMedtronic is partially decoded.  We will be adding support to\ninsulaudit when things are better/tested and cleaned up.  Have a\nMedtronic pump?  Help us analyze the data, and visualizations are that\nmuch closer.  At this point, we just need people to help line up\nrecords with the CSV output, and confirm accuracy or highlight\nproblems.\ndecoding-omnipod\nNeed captures/traces.\ndecoding-dexcom\nNeed captures/traces.\ndecoding-onetouchping\nNeed captures/traces.\nHow to run (outdated)\nThe commands using PYTHONPATH assume you are in the root\ndirectory of the repo.\nThe commands using insulaudit assume you have installed\ninsulaudit on your system (including the develop version).\nUses flaky port scanning feature to test if we are able to\ntalk to a pump.  Exchange a few bytes, nothing more::\n# fails\nPYTHONPATH=src/ python -m insulaudit.main -v clmm   hello\ninsulaudit -v clmm hello\n\nSpecifying a port seems to work.  If it doesn\'t, retry a\nfew times. ::\n# using the subcommand stuff:::\nPYTHONPATH=src/ python -m insulaudit.main -v clmm --port /dev/ttyUSB0  hello\ninsulaudit -v clmm --port /dev/ttyUSB0 hello\n\n# run the protocol exercise directly\nPYTHONPATH=src/ python src/insulaudit/devices/clmm/proto.py /dev/ttyUSB0\npython -m insulaudit.devices.clmm.proto.py /dev/ttyUSB0\n\n# read-pump-model.log - protocol exercise to read pump\nmodel number.  Log of it running successfully 5 times\nbefore it starts failing.  stderr and timestamps were\nnot capture. :-(\n\nTODO\nNow that the basic framework is taking shape, the protocol\nsupport needs to be stabilized and the framework needs to\ncontinue to gel a bit.\n\n\nconvert hello to some kind of scan\n\n\nintroduce new device flows\n\n\nintroduce device profiles/console flows\n\n\nrecord logs\n\n\nreview logs\n\n\naudit logs\n\nmerge logs\nsearch\nreformat\n\n\n\n##cli tool insulaudit\n\n\ninit - set up a config, from default\n\n\ncheckPort/scan - scan for a port/device\n\n\ndevice\n\nprofile\nlog\n\n\n\n::\nLicense\nAuthor\nBen West bewest+insulaudit@gmail.com\nThis experimental software is provided under the MIT license_, so you can do with it whatever you wish except\nhold me responsible if it does something you don\'t like.\n.. _MIT license: http://www.opensource.org/licenses/mit-license.php\nBlather\nhttp://www.diabetesmine.com/2013/01/the-ethical-imperative-of-diabetes-interoperability.html\nInteroperability is my middle name.  Just give us the raw data, and\nwe\'ll make it interoperable.\nFidelity of Care\nPatients need open access to all the elements of\ntechnology involved in therapy in order to ensure safety.\nOne of many concrete examples involves generating safe\ninsulin doses.  The vendor hard coded the active lifetime\nof insulin into all models earlier than the 515 series.\nThis guarantees that patients receive the wrong amount of\ninsulin.  The only feasible way of getting safer doses of\ninsulin is to buy a pump in the 515 series or newer.\nUsers who do choose to buy a new pump can customize this\nvariable but the variable remains static and mostly\nincorrectly calibrated until it\'s manually changed again.\nIn reality, your sensitivity to insulin varies, and the\namount of insulin one should receive also varies\ndramatically throughout the day depending on what life\nthrows your way.\nHowever, the pump has an administrative protocol that\nallows software to automatically audit logs, reconfigure\nsettings, create and administer dosing schedules.  If\nusers had access to this protocol we could use it to work\naround bugs like incorrect insulin calibrations in order\nto tune our doses.  We can also use the protocol to audit\nthe logs, allowing us to independently verify that pump\ntherapy is safe.\nThere are many other examples where having direct access\nto all the technology involved in therapy provides an\nepistemic certainty integral to basic science.  As\npatients and users of medical technology, we want to\nbelieve that it is safe.  The only way to do this is to\nempirically study all the relevant details of vendor\ntechnology with our peers and to study it for bugs and\nsafety.  In the process of doing this we discovered that\nthe same commands used to audit the native therapeutic\nlogs can also be used to reconfigure the device, and\nadminister insulin in ways that can work around bugs that\nare currently ensuring unsafe dosing for pump users.\nThe manufacturer is content to give me inaccurate dosings,\nbut refuses to share information about the protocol needed\nto quickly, safely and independently manage my therapy.\nAs patients we need access to all the technology in our\ntherapy so that we can have epistemic certainty that it is\nsafe.\nWe set out to use the protocol in order to audit logs more\neffectively and found out it\'s possible to generate safer\ndoses and work around bugs in vendors\' therapeutic\nsoftware.  The protocol is actively kept from our use, but\nwe need it in order to secure safe therapy.  Without\nhaving investigated the technology involved in our\ntherapy, we cannot believe it is safe, and we would not\nhave learned about it\'s true capabilities.\nThought exercises\nIf a doctor approached you with a syringe, said you needed\nsome of it but wasn\'t personally sure a.) how much was in\nthe syringe, that b.) the syringe sometimes injects the\nwrong amount, and c.) what contents of the syringe might\ndue to the way the syringe performs, but that someone told\nhim this would probably be ""ok"" would you allow yourself\nto be injected?  What if the consequences for refusing the\nsyringe was death?  What if the reason for the uncertainty\nwas because someone had wiped off most of the calibration\nmarkings before giving it to the doctor to fill?  What if\nthe person who had wiped off the markings was the same\nperson insisting it was safe and selling you the syringes,\nand no one else makes syringes?\nFor the argument ""Most users won\'t need access to\ntechnology to get what they need.""  This isn\'t an argument\nfor preventing patients from accessing critical parts of their\nown therapy.  This is like arguing no one would need to do\nanything more than borrow a book from a library shortly\nafter the printing press because the population was\nunlettered and homes lacked bookshelves to house the\nbooks.\nBlather\n""Blah blah blah.""\nDiabetes therapy is wasteful, unscientific, and dangerous.\nDespite a variety of companies offering software to manage\nthe condition, very little data is used to drive real time\ndecision making during the course of therapy.  Many users\ntake error prone and time consuming handwritten\ntranscriptions of their devices, because the software\nprovided is incapable of communicating or managing\ntherapeutic details in any useful way.  Some users\nactually take pictures, and upload those pictures to\nwebsites, finding that the easiest way to share critical\ntherapy data.\nDespite all the hard work diabetics undertake in efforts\naudit and control ongoing therapy, most use a variety of\nmobile devices that automatically log many details.\nIn 2011, we have a nascent highly connected world where\nrelationships construct a social graphs traversable on\nthe web with enough security to trust these relationships\nfor authentication.  Despite all the technical\nadvancement in our world, the medical community asks\ndiabetic patients to live inhumane lives maintaining open\nwounds while blaming them for lack of control and failing\nto explain cause and effect.\nInsulin is a powerful drug best administered by a\npancreas.  When we use a syringe to inject a large dose\nall at once, it is no surprise to see dangerous\nconsequences.  However, instead of developing ever\nincreasingly accurate predictions, the use of software in\nmanaging diabetes mostly involves entering and massaging\nlots of data.  As a result, many diabetics suffer\nneedlessly, blamed for the effect ""their condition"" has on\nthem due to their poor control, even though the\nconsequences are likely aggravated or caused by the very\ntherapy they are trying to participate in.  This is poor\nfidelity of care.\nThe best example for this is the NPR obituary for a\nbaseball hall of famer who died of diabetic complications.\nWhile he was praised for his adherence to his regimen, he\nwas also praised his tenacity on the field, despite the\nterrible shakes attributed to ""his condition.""  However,\nthey failed to mentioned that the shakes he suffered were\ndue to the therapy for his condition; the only way a type\n1 diabetic suffers shakes like that is when too much\ninsulin has been delivered, an all too familiar mishap.\nPoor fidelity of care is not knowing what to expect,\ndespite adhering to a therapy.\nBy applying the fundamentals of the scientific method to\ntherapy, and to the application of technology to therapy,\nwe get a unique perspective on what the technology should\ndo, and the role people have in therapy.\nThe only data we should be entering are corrections on what we\npredict will happen.  This is  be one of the ideal\napplications of technology to therapy through a lense I\ncall high ""fidelity of care."" Together, we adjust our\nexpectations to match what is possible so that over time\nthe observations of therapy exactly match the expectations\nwe recorded as predictions earlier.\nAs we integrate calendar data and predictions along side\npast observations, we get a better understanding of causes\nand effects in the outcomes of our own therapy while\ngaining tools to communicate these understandings with our\ntherapeutic team, composed of any individual we choose.\nThe therapeutic team may well be mostly composed of\nmembers outside the medical community, because social\nsupport is often important in maintaining habits and\nlifestyle.\nThis meta observation of the delta between hypothesis and\nempirical data is a principle component of the scientific\nmethod, but entirely absent from therapeutic software,\nleading to a dearth in fidelity of care.  My hope is that\ninsulaudit can help to increase the fidelity of care.  The\nscientific method involves recording high fidelity\nobservations, making predictions based on that data,\nperforming an experiment, and then analyzing the\ndifferences between the observations and the expectations.\nTherapy should not be any different.  However, until we\ncan get transparent access to audit the raw data produced\nby our therapy, we cannot get an accurate perspective of\nour own health.\nTherefore, the first fundamental principle of high\nfidelity care is open access to all the intimate details\nof therapeutic care in as close to the native format as\npossible.  It includes access to the protocols\ntransporting the data, so that novel applications can\naugment therapeutic fidelity in ways unforeseen by the\noriginal makers, for the benefit of the patient, and their\ncaregivers.\nThe second is peer review.  A caregiver may be a friend,\nor even a good samaritan in a time of need, who needs\ninstructions on what to do next.  A caregiver may be a\nresearcher who needs access to data for simulations.  It\nincludes access to the firmware, because it is outrageous\nthat the software that governs lives has not gone through\nopen source review for bugs and safety.\nWith these in place, safe and effective from insulaudit,\nSMART, DUBS, GCCS, and many other collaborators can help\ninfuse therapeutic practice with high fidelity care.\nThe needs of the patient in the practice of high fidelity\ncare are not unique to diabetics.  We believe all patients\nwill benefit from the application of these principles\nthroughout their care.\n~ insulaudit collaborators\n'], 'url_profile': 'https://github.com/bewest'}","{'location': 'Washington, DC', 'stats_list': [['564', '          followers'], ['10', '          following'], ['29']], 'contributions': '545 contributions\n        in the last year', 'description': ['Diabetes data use case\nContents\n\nMotivation\nUsage\n\nDocker Install\nManual Install\n\n\n\nMotivation\nInterpretability: The missing link between machine learning, healthcare, and the FDA?\nRecent advances enable practitioners to break open machine learning’s “black box”.\nAugust 20, 2018\nAndrew Langsner, Co-founder / Managing Partner, Sphaeric.ai\nPatrick Hall, Senior Director of Product, H2O.ai\nFrom machine learning algorithms guiding analytical tests in drug manufacture, to predictive models recommending courses of treatment, to sophisticated software that can read images better than doctors, machine learning has promised a new world of healthcare where algorithms can assist, or even outperform, professionals in consistency and accuracy, saving money and avoiding potentially life-threatening mistakes. But what if your doctor told you that you were sick but could not tell you why? Imagine a hospital that hospitalized and discharged patients but was unable to provide specific justification for these decisions. For decades, this was a roadblock for the adoption of machine learning algorithms in healthcare: they could make data-driven decisions that helped practitioners, payers, and patients, but they couldn’t tell users why those decisions were made.\nToday, recent advances in machine learning research and implementation may have cracked open the black box of algorithmic decision making. A flurry of research into interpretation, or “the ability to explain or to present in understandable terms to a human,” has resulted in a growing body of credible literature and tools for accurate models with interpretable inner-workings, accountability and fairness of algorithmic decision-making, and post-hoc explanation of complex model predictions,. Can this research really be applied to healthcare, and if so, where would it be most immediately impactful? Three suggestions and an example use case are put forward below.\nThree Hurdles to Black Box Algorithms\nFDA and drug development\nThe FDA has notoriously stringent requirements for the approval of new drugs. This could pose a challenge to drug companies experimenting with machine learning to enforce quality control and even to analyze test results to better detect the presence and proper concentrations of drug compounds. The FDA requires full transparency and replicability for all analytical tests involved in the manufacture of new drugs. In the past this has involved providing lists of formulas and methods for analyzing test results (e.g. chromatography tests). But questions remain about how the FDA would treat a new drug application (NDA) that relied on a complex black box machine learning model to maintain quality in the manufacturing process. Interpretable machine learning techniques could help address some of these questions.\nMedical devices\nThis year, for the first time the FDA approved an artificial intelligence device. This marks a major milestone for medical devices using proprietary black box algorithms that can diagnose diseases from images. The device was approved through the FDA’s De Novo premarket review pathway which provides a review process for novel devices that represent a low to moderate risk. The low to moderate risk classification is key to a successful De Novo review. But the FDA has yet to approve a device determined to have a high potential risk to patient outcomes. For example, a diagnostic algorithm where a false positive could lead to an invasive and risky procedure. Extra controls would likely be needed on such an algorithm and with the latest model interpretability techniques, it may be possible to have those additional checks.\nAnother possibility for bringing machine learning into medical devices came about in late 2016 when congress passed the 21st Century Cures Act. The act excludes what is commonly referred to as clinical decision support (CDS) software from FDA purview under certain conditions; namely, that the healthcare provider using the software can independently review the basis for the software’s recommendation. In December 2017 the FDA published guidance stating that “the sources supporting the recommendation or underlying the rationale for the recommendation should be identified and easily accessible to the intended user, understandable by the intended user (e.g., data points whose meaning is well understood by the intended user) …”  Traditional machine learning software would not meet this criterion due to the black box nature of most machine learning models. However, with recent advances in interpretability, it is possible to display explanations for every decision made by a machine learning model, potentially enabling a user to verify the soundness of the rationale behind the automated recommendation.\nRisk based guidance\nMuch attention has been given to hospital readmissions since passage of the Affordable Care Act and the beginning of the Hospital Readmissions Reduction Program. Predictive models developed with machine learning have shown to be successful at predicting avoidable hospital readmissions and some health systems have already adopted machine learning based models successfully. At the same time, interest into the use of machine learning to develop automated fraud and waste detection on incoming medical claims has been growing amongst government entities and private insurance companies. Now it should be possible for these models to explain their decisions to practitioners, payers, and patients, allowing users to investigate the actual reasons behind automated medical decision making and determine if an individual decision was reasonable or could be improved.\nToward the Application of Interpretable Machine Learning in Healthcare\nSince more deliberations about the ethical, medical, and economic implications of interpretable machine learning in healthcare are certainly necessary, an example risk based guidance use case has been provided for the sake of furthering such discussions. The example use case should be similar to the methods that organizations are already using for predicting 30-day readmissions, but instead of using an older linear modeling approach, the example uses a nonlinear, “white box” machine learning approach to achieve about a 1% increase in readmission prediction accuracy. Explanatory techniques are then used to describe both the internal mechanisms of the model and every prediction the model makes.\nIt is left to practitioners and domain experts to determine whether the example techniques truly surpass more established methods by any number of criteria, e.g. ability to handle heterogeneous data, accuracy, or interpretability. The only explicit argument made here is: when people\'s lives are being affected by mathematical models, it does seem prudent to investigate and evaluate potentially impactful new modeling and analysis techniques.\nThe open source and freely available example use case is available here:\nhttps://github.com/jphall663/diabetes_use_case/blob/master/Binary-Classification-Readmit.ipynb\nThe authors look forward to continuing this discussion online and at the upcoming Xavier Healthcare AI summit.\nUsage\nThe files in this repository are meant to provide a reproducible example for interpretable machine learning techniques applied to a basic health care use case. The Jupyter notebook herein will be presented at the Xavier AI in Healthcare conference.\nThe training data for this use case is available here. The data set contains demographic and medical information about many patients. It is used to create a white-box classifier for predicting who will be readmitted to a hospital within 30 days of discharge. This notebook attempts to showcase the use of a complex, but transparent, nonlinear classifier as an alternative to more traditional linear model approaches.\nTypically it requires many different methods to properly interpret a nonlinear classifier. Several different types of interpretation and explanation methods are used here including:\n\nGlobal and local Shapley variable importance\nPartial dependence\nIndividual conditional expectation (ICE)\nSurrogate decision trees\n\nDockerfile instructions:\nA Dockerfile is provided to build a docker container with all necessary packages and dependencies. This is the easiest way to use the example notebook if you are on Mac OS X, *nix, or Windows 10. To do so:\n\nInstall and start docker.\n\nThe from a terminal run:\n\n\nCreate a directory for the Dockerfile.\n$ mkdir anaconda_py36_h2o_xgboost_graphviz_shap\n\n\nFetch the Dockerfile.\n$ curl https://raw.githubusercontent.com/jphall663/diabetes_use_case/master/anaconda_py36_h2o_xgboost_graphviz_shap/Dockerfile > anaconda_py36_h2o_xgboost_graphviz_shap/Dockerfile\n\n\nBuild a docker image from the Dockefile.\n$ docker build --no-cache anaconda_py36_h2o_xgboost_graphviz_shap\n\n\nDisplay docker image IDs. You are probably interested in the most recently created image. You will need it for the command directly below. \n$ docker images\n\n\nStart the docker image and the Jupyter notebook server.\n$ docker run -i -t -p 8888:8888 <image_id> /bin/bash -c ""/opt/conda/bin/conda install jupyter -y --quiet && /opt/conda/bin/jupyter notebook --notebook-dir=/diabetes_use_case --ip=\'*\' --port=8888 --no-browser""\n\n\n(If you need root priviledges to run docker, try this command:sudo docker run -i -t -p 8888:8888 <image_id> /bin/bash -c ""/opt/conda/bin/conda install jupyter -y --quiet && /opt/conda/bin/jupyter notebook --notebook-dir=/diabetes_use_case --ip=\'*\' --port=8888 --no-browser --allow-root""\n\nThen navigate to port 8888 on your machine, probably http://localhost:8888/.\n\nManual Installation\nFor users with older Windows machines or others who can\'t/don\'t use docker, the notebook dependencies can be installed manually:\n\nAnaconda Python 5.1.0 from the Anaconda archives.\nJava.\nThe latest stable h2o Python package.\nGit.\nXGBoost with Python bindings.\nGraphViz.\nInstall the shap Python package.\n\nAnaconda Python, Java, Git, and GraphViz must be added to your system path.\nFrom a terminal:\n\n\nClone the repository with examples.\n$ git clone https://github.com/jphall663/diabetes_use_case.git\n\n\n$ cd diabetes_use_case\n\n\nStart the Jupyter notebook server.\n$ jupyter notebook\n\n\nNavigate to the port Jupyter directs you to on your machine, probably http://localhost:8888/.\n\n\n'], 'url_profile': 'https://github.com/jphall663'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""Diabot\nA diabetes bot for Discord\nAdding Diabot to your server\nUse this invite link\nAdministration documentation\nSee documentation for admin commands here.\nSponsors\nDiabot is a public Discord bot. This means that anyone can invite the bot to their server.\nHosting a public bot isn't free. Diabot requires a machine to run on, and a database. Both of these things cost money.\nWhile there is a budget to ensure Diabot can continue running without any financial support from others, we do appreciate contributions.\nFinancial contributions are used to pay for hosting costs, and (when the budget allows this) run a separate test version of Diabot so we can better test it.\nWhen money is left over after all hosting fees are paid, this money will be saved for when contributions can't fully support the project.\nIf you wish to help pay for diabot hosting and development, you can sponsor cascer1 on github.\nAny support received will be used to pay for the hosting and improvement of Diabot. This is not a for-profit project.\nRunning Diabot\nDevelopment for Diabot is aimed at a Java 11 environment. Diabot may not function correctly when using other version of java.\nIf you have Gradle installed, you can run the following two commands to quickly start Diabot:\ngradle stage\njava -jar build/libs/diabot.jar\n\nFor detailed instructions, see Running Diabot\nContributing\nThank you for your interest in contributing to the development of Diabot.\nWe use GitHub issues to keep track of bugs and feature requests. Before opening a new issue, please check whether that issue has already been reported.\nPull Requests are welcome. When you submit a pull request, please make sure that you have tested your changes to ensure nothing is broken.\nOn top of that, please describe your changes in the pull request. When your pull request is related to an issue, please mention this in the description.\nThe description doesn't have to be anything fancy, so long as it helps the maintainers understand what the changes do.\nIf you have found a security issue, please report them immediately. See SECURITY.md for more information\n""], 'url_profile': 'https://github.com/reddit-diabetes'}","{'location': 'Boston', 'stats_list': [['17', '          followers'], ['0', '          following'], ['6']], 'contributions': '30 contributions\n        in the last year', 'description': ['simglucose\n\n\n\nA Type-1 Diabetes simulator implemented in Python for Reinforcement Learning purpose\nThis simulator is a python implementation of the FDA-approved UVa/Padova Simulator (2008 version) for research purpose only. The simulator includes 30 virtual patients, 10 adolescents, 10 adults, 10 children.\nHOW TO CITE: Jinyu Xie. Simglucose v0.2.1 (2018) [Online]. Avaible: https://github.com/jxx123/simglucose. Accessed on: Month-Date-Year.\n\nNote: simglucose only supports python3.\n\n\n\n\nAnimation\nCVGA Plot\nBG Trace Plot\nRisk Index Stats\n\n\n\n\n\n\n\n\n\n\n\nMain Features\n\nSimulation enviroment follows OpenAI gym and rllab APIs. It returns observation, reward, done, info at each step, which means the simulator is ""reinforcement-learning-ready"".\nSupports customized reward function. The reward function is a function of blood glucose measurements in the last hour. By default, the reward at each step is risk[t-1] - risk[t]. risk[t] is the risk index at time t defined in this paper.\nSupports parallel computing. The simulator simulates mutliple patients parallelly using pathos multiprocessing package (you are free to turn parallel off by setting parallel=False).\nThe simulator provides a random scenario generator (from simglucose.simulation.scenario_gen import RandomScenario) and a customized scenario generator (from simglucose.simulation.scenario import CustomScenario). Commandline user-interface will guide you through the scenario settings.\nThe simulator provides the most basic basal-bolus controller for now. It provides very simple syntax to implement your own controller, like Model Predictive Control, PID control, reinforcement learning control, etc.\nYou can specify random seed in case you want to repeat your experiments.\nThe simulator will generate several plots for performance analysis after simulation. The plots include blood glucose trace plot, Control Variability Grid Analysis (CVGA) plot, statistics plot of blood glucose in different zones, risk indices statistics plot.\nNOTE: animate and parallel cannot be set to True at the same time in macOS. Most backends of matplotlib in macOS is not thread-safe. Windows has not been tested. Let me know the results if anybody has tested it out.\n\nInstallation\nIt is highly recommended to use pip to install simglucose, follow this link to install pip.\nAuto installation:\npip install simglucose\nManual installation:\ngit clone https://github.com/jxx123/simglucose.git\ncd simglucose\nIf you have pip installed, then\npip install -e .\nIf you do not have pip, then\npython setup.py install\nIf rllab (optional) is installed, the package will utilize some functionalities in rllab.\nNote: there might be some minor differences between auto install version and manual install version. Use git clone and manual installation to get the latest version.\nQuick Start\nUse simglucose as a simulator and test controllers\nRun the simulator user interface\nfrom simglucose.simulation.user_interface import simulate\nsimulate()\nYou are free to implement your own controller, and test it in the simulator. For example,\nfrom simglucose.simulation.user_interface import simulate\nfrom simglucose.controller.base import Controller, Action\n\n\nclass MyController(Controller):\n    def __init__(self, init_state):\n        self.init_state = init_state\n        self.state = init_state\n\n    def policy(self, observation, reward, done, **info):\n        \'\'\'\n        Every controller must have this implementation!\n        ----\n        Inputs:\n        observation - a namedtuple defined in simglucose.simulation.env. For\n                      now, it only has one entry: blood glucose level measured\n                      by CGM sensor.\n        reward      - current reward returned by environment\n        done        - True, game over. False, game continues\n        info        - additional information as key word arguments,\n                      simglucose.simulation.env.T1DSimEnv returns patient_name\n                      and sample_time\n        ----\n        Output:\n        action - a namedtuple defined at the beginning of this file. The\n                 controller action contains two entries: basal, bolus\n        \'\'\'\n        self.state = observation\n        action = Action(basal=0, bolus=0)\n        return action\n\n    def reset(self):\n        \'\'\'\n        Reset the controller state to inital state, must be implemented\n        \'\'\'\n        self.state = self.init_state\n\n\nctrller = MyController(0)\nsimulate(controller=ctrller)\nThese two examples can also be found in examples\\ folder.\nIn fact, you can specify a lot more simulation parameters through simulation:\nsimulate(sim_time=my_sim_time,\n         scenario=my_scenario,\n         controller=my_controller,\n         start_time=my_start_time,\n         save_path=my_save_path,\n         animate=False,\n         parallel=True)\nOpenAI Gym usage\n\nUsing default reward\n\nimport gym\n\n# Register gym environment. By specifying kwargs,\n# you are able to choose which patient to simulate.\n# patient_name must be \'adolescent#001\' to \'adolescent#010\',\n# or \'adult#001\' to \'adult#010\', or \'child#001\' to \'child#010\'\nfrom gym.envs.registration import register\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\'}\n)\n\nenv = gym.make(\'simglucose-adolescent2-v0\')\n\nobservation = env.reset()\nfor t in range(100):\n    env.render(mode=\'human\')\n    print(observation)\n    # Action in the gym environment is a scalar\n    # representing the basal insulin, which differs from\n    # the regular controller action outside the gym\n    # environment (a tuple (basal, bolus)).\n    # In the perfect situation, the agent should be able\n    # to control the glucose only through basal instead\n    # of asking patient to take bolus\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    if done:\n        print(""Episode finished after {} timesteps"".format(t + 1))\n        break\n\nCustomized reward function\n\nimport gym\nfrom gym.envs.registration import register\n\n\ndef custom_reward(BG_last_hour):\n    if BG_last_hour[-1] > 180:\n        return -1\n    elif BG_last_hour[-1] < 70:\n        return -2\n    else:\n        return 1\n\n\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\',\n            \'reward_fun\': custom_reward}\n)\n\nenv = gym.make(\'simglucose-adolescent2-v0\')\n\nreward = 1\ndone = False\n\nobservation = env.reset()\nfor t in range(200):\n    env.render(mode=\'human\')\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    print(observation)\n    print(""Reward = {}"".format(reward))\n    if done:\n        print(""Episode finished after {} timesteps"".format(t + 1))\n        break\nrllab usage\nfrom rllab.algos.ddpg import DDPG\nfrom rllab.envs.normalized_env import normalize\nfrom rllab.exploration_strategies.ou_strategy import OUStrategy\nfrom rllab.policies.deterministic_mlp_policy import DeterministicMLPPolicy\nfrom rllab.q_functions.continuous_mlp_q_function import ContinuousMLPQFunction\nfrom rllab.envs.gym_env import GymEnv\nfrom gym.envs.registration import register\n\nregister(\n    id=\'simglucose-adolescent2-v0\',\n    entry_point=\'simglucose.envs:T1DSimEnv\',\n    kwargs={\'patient_name\': \'adolescent#002\'}\n)\n\nenv = GymEnv(\'simglucose-adolescent2-v0\')\nenv = normalize(env)\n\npolicy = DeterministicMLPPolicy(\n    env_spec=env.spec,\n    # The neural network policy should have two hidden layers, each with 32 hidden units.\n    hidden_sizes=(32, 32)\n)\n\nes = OUStrategy(env_spec=env.spec)\n\nqf = ContinuousMLPQFunction(env_spec=env.spec)\n\nalgo = DDPG(\n    env=env,\n    policy=policy,\n    es=es,\n    qf=qf,\n    batch_size=32,\n    max_path_length=100,\n    epoch_length=1000,\n    min_pool_size=10000,\n    n_epochs=1000,\n    discount=0.99,\n    scale_reward=0.01,\n    qf_learning_rate=1e-3,\n    policy_learning_rate=1e-4\n)\nalgo.train()\nAdvanced Usage\nYou can create the simulation objects, and run batch simulation. For example,\nfrom simglucose.simulation.env import T1DSimEnv\nfrom simglucose.controller.basal_bolus_ctrller import BBController\nfrom simglucose.sensor.cgm import CGMSensor\nfrom simglucose.actuator.pump import InsulinPump\nfrom simglucose.patient.t1dpatient import T1DPatient\nfrom simglucose.simulation.scenario_gen import RandomScenario\nfrom simglucose.simulation.scenario import CustomScenario\nfrom simglucose.simulation.sim_engine import SimObj, sim, batch_sim\nfrom datetime import timedelta\nfrom datetime import datetime\n\n# specify start_time as the beginning of today\nnow = datetime.now()\nstart_time = datetime.combine(now.date(), datetime.min.time())\n\n# --------- Create Random Scenario --------------\n# Specify results saving path\npath = \'./results\'\n\n# Create a simulation environment\npatient = T1DPatient.withName(\'adolescent#001\')\nsensor = CGMSensor.withName(\'Dexcom\', seed=1)\npump = InsulinPump.withName(\'Insulet\')\nscenario = RandomScenario(start_time=start_time, seed=1)\nenv = T1DSimEnv(patient, sensor, pump, scenario)\n\n# Create a controller\ncontroller = BBController()\n\n# Put them together to create a simulation object\ns1 = SimObj(env, controller, timedelta(days=1), animate=False, path=path)\nresults1 = sim(s1)\nprint(results1)\n\n# --------- Create Custom Scenario --------------\n# Create a simulation environment\npatient = T1DPatient.withName(\'adolescent#001\')\nsensor = CGMSensor.withName(\'Dexcom\', seed=1)\npump = InsulinPump.withName(\'Insulet\')\n# custom scenario is a list of tuples (time, meal_size)\nscen = [(7, 45), (12, 70), (16, 15), (18, 80), (23, 10)]\nscenario = CustomScenario(start_time=start_time, scenario=scen)\nenv = T1DSimEnv(patient, sensor, pump, scenario)\n\n# Create a controller\ncontroller = BBController()\n\n# Put them together to create a simulation object\ns2 = SimObj(env, controller, timedelta(days=1), animate=False, path=path)\nresults2 = sim(s2)\nprint(results2)\n\n\n# --------- batch simulation --------------\n# Re-initialize simulation objects\ns1.reset()\ns2.reset()\n\n# create a list of SimObj, and call batch_sim\ns = [s1, s2]\nresults = batch_sim(s, parallel=True)\nprint(results)\nRun analysis offline (example/offline_analysis.py):\nfrom simglucose.analysis.report import report\nimport pandas as pd\nfrom pathlib import Path\n\n\n# get the path to the example folder\nexmaple_pth = Path(__file__).parent\n\n# find all csv with pattern *#*.csv, e.g. adolescent#001.csv\nresult_filenames = list(exmaple_pth.glob(\n    \'results/2017-12-31_17-46-32/*#*.csv\'))\npatient_names = [f.stem for f in result_filenames]\ndf = pd.concat(\n        [pd.read_csv(str(f), index_col=0) for f in result_filenames],\n        keys=patient_names)\nreport(df)\nRelease Notes\n5/27/2020\n\nAdd PIDController at simglucose/controller/pid_ctrller. There is an example at examples/run_pid_controller.py showing how to use it.\n\n9/10/2018\n\nController policy method gets access to all the current patient state through info[\'patient_state\'].\n\n2/26/2018\n\nSupport customized reward function.\n\n1/10/2018\n\nAdded workaround to select patient when make gym environment: register gym environment by passing kwargs of patient_name.\n\n1/7/2018\n\nAdded OpenAI gym support, use gym.make(\'simglucose-v0\') to make the enviroment.\nNoticed issue: the patient name selection is not available in gym.make for now. The patient name has to be hard-coded in the constructor of simglucose.envs.T1DSimEnv.\n\nReporting issues\nShoot me any bugs, enhancements or even discussion by creating issues.\nHow to contribute\nThe following instruction is originally from the contribution instructions of sklearn.\nThe preferred workflow for contributing to simglucose is to fork the\nmain repository on\nGitHub, clone, and develop on a branch. Steps:\n\n\nFork the project repository\nby clicking on the \'Fork\' button near the top right of the page. This creates\na copy of the code under your GitHub user account. For more details on\nhow to fork a repository see this guide.\n\n\nClone your fork of the simglucose repo from your GitHub account to your local disk:\n$ git clone git@github.com:YourLogin/simglucose.git\n$ cd simglucose\n\n\nCreate a feature branch to hold your development changes:\n$ git checkout -b my-feature\nAlways use a feature branch. It\'s good practice to never work on the master branch!\n\n\nDevelop the feature on your feature branch. Add changed files using git add and then git commit files:\n$ git add modified_files\n$ git commit\nto record your changes in Git, then push the changes to your GitHub account with:\n$ git push -u origin my-feature\n\n\nFollow these instructions\nto create a pull request from your fork. This will send an email to the committers.\n\n\n(If any of the above seems like magic to you, please look up the\nGit documentation on the web, or ask a friend or another contributor for help.)\n'], 'url_profile': 'https://github.com/jxx123'}","{'location': 'Hyderabad, India', 'stats_list': [['14', '          followers'], ['25', '          following'], ['23']], 'contributions': '78 contributions\n        in the last year', 'description': ['Pima Indians Diabetes Dataset Classification\nAbstract\nThe diabetes dataset is a binary classification problem where it needs to be analysed whether a patient is suffering from the disease or not on the basis of many available features in the dataset. Different methods and procedures of cleaning the data, feature extraction, feature engineering and algorithms to predict the onset of diabetes are used based for diagnostic measure on Pima Indians Diabetes Dataset.\nKeywords\nmachine learning; Pima Indians Diabetes dataset; binary classification; features; feature extraction; feature engineering; support vector machine; MLP; neural netwroks; Decision tree; Linear regression heat map; pairplot; violin plot; feature importance.\nDatabase - Pima Indians Diabetes Dataset\nPima Indian Diabetes dataset has 9 attributes in total. All the person in records are females and the number of pregnancies they have had has been recorded as the first attribute of the dataset. Second is the value of Plasma glucose concentration a 2 hours in an oral glucose tolerance test and then is the Diastolic blood pressure (mm Hg), fourth in line is the Triceps skin fold thickness (mm), then is the 2-Hour serum insulin (mu U/ml), sixth is Body mass index (weight in kg/ (height in m) ^2) and then seventh is the Diabetes pedigree function and the second last value is the that of the Age (years). The ninth column is that of the Class variable (0 or 1), 0 for no diabetes and 1 for the presence. To start with we first take a description of the dataset. We infer not much from this except the facts like we have a data datset of 768 lines and the maximum values of the Age and Pregnancies. Nothing more is of much use for the prediction. We also calculated the number of datsets that were positive to the test of diabetes and those who were negetive and the value came out to be 268 and 500 respectively. We decided to take the mean value of BMI and found that the average value of a person suffering from the disease has mean BMI value as 35.14 which means that they are not healthy and obese. It is also interesting to note that the mean BMI value for the people who are not suffering from the disease is 30 which is the threshold value of people becoming obese. The mean value of the second parameter Glucose (Plasma glucose concentration) was done we found that those who suffered from the disease had mean value as 141.25 which indicates pre-diabetic state of hyperglycaemia that is associated with insulin resistance and increased risk of cardiovascular pathology.\nMethodology\nA. A decision tree is a decision support tool that uses a tree-like graph or model of decisions and their possible consequences, including chance event outcomes, resource costs, and utility. It is one way to display an algorithm that only contains conditional control statements. Decision trees are commonly used in operations research, specifically in decision analysis, to help identify a strategy most likely to reach a goal, but are also a popular tool in machine learning.\nDecision tree algorithm follows:\n• The attribute/feature best for set is taken as root\n• Distribute the set into different sets having same attribute values for particular value.\n• Repeat the above steps till we get to the leaf nodes of the tree where no further division can take place.\nB. In statistics, linear regression is a linear approach for modelling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X. The case of one explanatory variable is called simple linear regression. For more than one explanatory variable, the process is called multiple linear regression. (This term is distinct from multivariate linear regression, where multiple correlated dependent variables are predicted, rather than a single scalar variable.)\nC. A multilayer perceptron (MLP) is a class of feedforward artificial neural network. An MLP consists of at least three layers of nodes. Except for the input nodes, each node is a neuron that uses a nonlinear activation function. MLP utilizes a supervised learning technique called backpropagation for training. Its multiple layers and non-linear activation distinguish MLP from a linear perceptron. It can distinguish data that is not linearly separable.\nD. In machine learning, support vector machines (SVMs, also support vector networks) are supervised learning models with associated learning algorithms that analyse data used for classification and regression analysis. Given a set of training examples, each marked as belonging to one or the other of two categories, an SVM training algorithm builds a model that assigns new examples to one category or the other, making it a non-probabilistic binary linear classifier (although methods such as Platt scaling exist to use SVM in a probabilistic classification setting). An SVM model is a representation of the examples as points in space, mapped so that the examples of the separate categories are divided by a clear gap that is as wide as possible. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\nConclusion\nWe applied many algorithms and did a lot of feature manipulation and extraction. We got the best accuracy of 80.5% using SVM. A lot of information about the dataset was also extracted without using complex algorithms. We were also able to perform a lot of exploratory data analysis and came to many conclusions. Random Forest and Ensemble Learning can probably find a better result. Our result was also very close to the best result found and this shows that at the right parameters SVM can be a good and practical choice to classify a medical data.\n'], 'url_profile': 'https://github.com/KriAga'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""\nGlucosio has moved to Gitlab! Visit our project repos on Gitlab\nGlucosio for iOS\nGlucosio for iOS, a user centered free and open source app for Diabetes management and research for iOS.  Version 1.0.2 is the first version to include (limited) Nightscout integration.\nGlucosio for iOS is dual licensed under both the Mozilla Public License Version 2 as well as the GNU General Public License Version 3.\nAttributions\nThis project uses Cocoapods:\n\npod 'Realm', '~> 3.1'\npod 'Charts', '3.0.5'\npod 'AFNetworking', '~> 3.0'\npod 'SVProgressHUD'\npod 'SSZipArchive', '~> 2.1'\npod 'CHCSVParser', '~> 2.1'\npod 'XLForm', '~> 4.0'\n\nThis project uses sound files for alarms:\nDownloaded on February 17th, 2018\nS: 06304 message ding 1.wav by Robinhood76 -- https://freesound.org/s/334914/ -- License: Attribution Noncommercial\nS: ding.wav by Corsica_S -- https://freesound.org/s/91926/ -- License: Attribution\n""], 'url_profile': 'https://github.com/Glucosio'}","{'location': 'Ghana', 'stats_list': [['12', '          followers'], ['14', '          following'], ['56']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes prediction with K-NEAREST NEIGHBOR ALGORITHM\nUsing KNN Algorithm to predict if a person will have diabetes or not\nVisualizing data before processing\n\n\nF1_SCORE\n0.6956521739130436\nAccuracy_SCORE\n0.8181818181818182\n'], 'url_profile': 'https://github.com/boosuro'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Blip\n\nBlip is a web app for type 1 diabetes (T1D) built on top of the Tidepool platform. It allows patients and their ""care team"" (family, doctors) to visualize their diabetes device data (from insulin pumps, BGMs, and/or CGMs) and message each other.\nThis README is focused on just the details of getting blip running locally. For more detailed information aimed at those working on the development of blip, please see the developer guide.\n\nTable of contents\n\nBefore you start\nInstall\nRunning locally\n\n""Verifying"" the e-mail of a new account locally\nCreating a special account to bypass e-mail verification\n\n\nRunning against dev\nConfig\nDebugging\nRunning the tests\nBuild and deployment\nUsing Storybook\n\n\nBefore you start\nIf this is the first time you\'re looking at Tidepool locally start with the tidepool-org/development repository to setup before continuing here.\nInstall\nRequirements:\n\nNode.js version 6.x\nnpm version 4.x or higher\n\nClone this repo from GitHub, then install the dependencies:\nAfter cloning this repository to your local machine, first make sure that you have node 6.x and npm 4.x installed. If you have a different major version of node installed, consider using nvm to manage and switch between multiple node (& npm) installations. If you have npm 3.x installed (as it is by default with node 6.x), then you can update to the latest npm 4.x with npm install -g npm@4.\nIt\'s not an absolute requirement, but it is preferable to have Yarn installed, as it provides dependency management features above and beyond what npm provides. Just follow Yarn\'s installation instructions (hint: for Mac users with Homebrew installed, it\'s just brew install yarn).\nOnce your environment is setup with node 6.x and npm 4.x install the dependencies with Yarn:\n$ yarn install\nOr with npm if you\'re choosing not to use Yarn:\n$ npm install\nRunning locally\nIf you\'re running the entire Tidepool platform locally with docker as per tidepool-org/development, you can start blip using your local platform with:\n$ docker-compose up -d\nIf you\'re running the entire Tidepool platform locally without docker, you can start blip using your local platform with:\n$ source config/local.sh\n$ npm start\nOpen your web browser and navigate to http://localhost:3000/.\n(See also: recipe for running blip locally with hot module replacement.)\nThe npm start command runs the Webpack dev server which includes hot module reloading (HMR) capabilities. Essentially changes within React components should be updated ""hot"" in your browser without a page refresh. Sometimes this doesn\'t work, but in such cases the dev console will include a message from the Webpack dev server indicating that you need to do a full refresh to see your changes.\nRedux dev tools\nBlip includes several Redux developer tools: the original time-travel dev tools UI, a console action logger, and a mutation tracker for catching mutations to the state tree (which should be immutable). The last of these in particular is a performance killer (though none of them could even be said to have a negligible effect on performance). By default when running for local development with npm start (which means NODE_ENV is development), the DEV_TOOLS flag will be true, and all of these dev tools will be active. Because they affect performance profoundly, this may not always be desirable. To turn off the dev tools in development, kill the Webpack dev server (i.e, the npm start process), run export DEV_TOOLS=false, then start up blip again with npm start.\nNB: Due to differences in the development versus production builds of React itself (most notably PropTypes validation), performance of the app whenever NODE_ENV is development will never be as good as it is in the production build under a NODE_ENV of production. If you\'re concerned about the performance of a particular feature, the only way to test with good fidelity is with the production build, which you can do locally according to these instructions below.\nGetting past e-mail verification for a user created locally\nWhen running locally with runservers or with the docker-based setup, no e-mail will be sent to a sign-up e-mail address, and so a workaround is needed to get past the e-mail verification step for a newly created local account being used for development. What you need to do is construct the login URL that is provided in a link in the verification e-mail manually by finding the correct key for the e-mail confirmation.\nIf you\'re developing locally, you can find the key by looking in the local server.log (located at the root level of where you\'ve cloned all the Tidepool repositories).\nIf you\'re developing with the docker setup, you can find the key in the logs of the hydrophone container. It will look something like\n2018/06/07 16:17:17 Sending email confirmation to foo@bar.com with key aSuzGcwq4kPRyb6pwQnTcSKVTt_V6CtL\n\nKitematic is an easy-to-use tool for inspecting the logs of your docker containers. You can find the link to it\'s installer in Docker\'s menu.\nYou can also find the key in your Mongo database. The steps for the latter are:\n\nstart a Mongo shell in a fresh Terminal window with mongo\nswitch to the confirm database with use confirm\nfind the pending account with db.confirmations.find({status: \'pending\'});\ncopy the _id from the pending confirmation record with an email matching the account you\'ve just created\n\nAfter you\'ve found the key, you can provide it as a signupKey parameter in the login URL: http://localhost:3000/login?signupKey=<key>\nCreating a user without e-mail verification\nWhen running locally, there is also workaround so you don\'t have to verify the e-mail address of a new user: if you create a new user and add the localhost secret +skip to the e-mail address - e.g. me+skip@something.org - this will then allow you to login straightaway, skipping the e-mail verification step.\nNB: The UI is not guaranteed to display correctly for +skip-created users on all pages, and so 💣 THIS WORKFLOW IS NOT CURRENTLY RECOMMENDED 💣. For now, you must create a normal account (without +skip) if you want to work on the sign-up flow, although we have plans to fix the way the +skip workaround operates on the platform to address this.\nRunning against dev\nBy default—that is, if you don\'t source a different configuration, such as the local.sh configuration for local development with runservers referenced above—if you simply run npm start in this repository after installing the dependencies, blip will start up running against Tidepool\'s ""dev"" server environment.\nConfig\nConfiguration values are set with environment variables (see config/local.sh).\nYou can set environment variables manually using export VAR=value, or use a bash script. For example:\n$ source config/local.sh\nAsk the project owners to provide you with config scripts for different environments, or you can create one of your own if you have a custom environment. It is recommended to put all config scripts in the config/ directory, where they will be ignored by Git.\nDebugging\nThe app uses the bows library to log debugging messages to the browser\'s console. It is disabled by default (which makes it production-friendly). To see the messages type localStorage.debug = true in the browser console and refresh the page. Create a logger for a particular app module by giving it a name, such as:\napp.foo = {\n  log: bows(\'Foo\'),\n  bar: function() {\n    this.log(\'Walked into a bar\');\n  }\n};\nRunning the tests\nWe use Mocha with Chai for our test framework inside Karma as our test runner, as well as Sinon.JS and Sinon-Chai for spies and stubs. Our tests currently run on PhantomJS, a headless WebKit browser, or Chrome (locally only).\nTo run the unit tests, use:\n$ npm test\nTo run the unit tests in Chrome, use:\n$ npm run browser-tests\nTo run the unit tests in watch mode, use:\n$ npm run test-watch\nBuild and deployment\nThe app is built as a static site in the dist/ directory.\nWe use Shio to deploy, so we separate the build in two.\nShio\'s build.sh script will take care of building the app itself with:\n$ npm run build-app\nShio\'s start.sh script then builds the config from environment variables as a separate file with:\n$ source config/env.sh\n$ npm run build-config\nAfter that, the app is ready to be served using the static web server included in this repo:\n$ npm run server\nTesting the production build locally\nYou can also build everything at once locally to test the production build by simply running:\n$ source config/local.sh\n$ npm run build\n$ npm run server\nStorybook\nTo run storybook, use:\n$ yarn storybook\nStylelint\nTo run stylelint\n$ npm run lint:css\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['2', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes Prediction Portal\nDiabetes Prediction is my weekend practice project. In this I used KNN Neighbors Classifier to trained model that is used to predict the positive or negative result. Given set of inputs are BMI(Body Mass Index),BP(Blood Pressure),Glucose Level,Insulin Level based on this features it predict whether you have diabetes or not.\nThe model is already trained using 768 different types of data.\nRequirements\npycharm,\npython 2.7,\nsklearn,\nnumpy,\nflask,\njson,\nJust only Run app.py and open http://127.0.0.1:5000 in your web browser\nScreenShots of Diabetes Prediction Portal\n\nPrediction\n\n'], 'url_profile': 'https://github.com/zikry009'}","{'location': 'Switzerland', 'stats_list': [['37', '          followers'], ['6', '          following'], ['1']], 'contributions': '153 contributions\n        in the last year', 'description': [""OmniCore\nOmniCore is a platform for controlling and automating drug delivery using the Omnipod system.\nUpdate 03.01.2020:\nDear podders\nMissed the deadline due some undiscovered issues in the very last minute (Murphy's law) - that sparked a need for a thorough review and in some cases re-write. Since the next release is targeting stability and I am very picky about it, it took several sleepless nights to dissect everything apart to look for potential problems of similar nature.\nNow the issues are fixed and consciousness cleared, I can finally write this update. It still requires some time to fit back all the screws, which isn't a lot of work but I can start earliest mid next week (around the 8th).\nMy apologies to everyone expecting the release sooner and many thanks to those who have donated to make life bearable. (it absolutely does)\nUpdate 29.12.2019:\nBeta v1.0 is scheduled for release in 2019 - so happy new year!\nI'm overwhelmed with all kinds of work for the moment, so expect documentation and more information to appear in due time following the release. In the meantime, check out the updated roadmap:\nhttps://github.com/winemug/OmniCore/wiki/Roadmap\nAll thanks to\nJoe for his original work on the Omnipod,\nEddie for the thousand pods and thousand words,\nJeremy for his work on AndroidAPS customizations,\nDan, [Tim], Jeff, Jordan, Theo, [Jacob], Rene, [Miguel], [Maite], [Yann], [Rick], [Edward], [Mark], [Mike] for donating their precious time and resources,\nAdrian for all the insight\nJetbrains for being awesome (seriously, check out Rider)\nand Insulet for being a bro so far.\nDownloads\nAlpha builds are located in Microsoft AppCenter: https://install.appcenter.ms/users/winemug/apps/omnicore/distribution_groups/alpha%20testing\nBeta and other releases will be available in GitHub\nAndroidAPS for OmniCore: https://github.com/winemug/AndroidAPS/releases\nSupport\nFacebook page for announcements and feedback: https://www.facebook.com/OmniCorePdm/ (new)\nSupport group on facebook: https://www.facebook.com/groups/2141146659318874/ (managed by community members)\nJoin the live discussion on slack: invite link\nContributions\nIf you have the means to do so, please consider donating money, resources or time for the project, all of which I am currently struggling to afford.\nDirect donations:\nPayPal:  https://paypal.me/winemug/ \nSponsorship:\nGitHub: https://github.com/winemug/\nIf you can:\n\ndonate hardware such as Pods (expired or not, especially Omnipod Dash), used phones (Android or iOS), radio equipment and electronic tools\ndonate cloud resources\nwrite code on .NET/Xamarin, Tizen, Android, iOS or develop a back-end\nmake things look better and more usable\nmake text read in other languages \n\nthen please send an e-mail to my e-mail address below.\nContact\nbarisk@gmail.com\nOmniCore is the follow-up project to OmniPy\nRamblings and otherwise: https://balya.net/\n""], 'url_profile': 'https://github.com/winemug'}","{'location': 'San Francisco', 'stats_list': [['21', '          followers'], ['12', '          following'], ['151']], 'contributions': '20 contributions\n        in the last year', 'description': ['http://diabetesvis.herokuapp.com/\n'], 'url_profile': 'https://github.com/benrudolph'}","{'location': 'Boston, MA', 'stats_list': [['40', '          followers'], ['19', '          following'], ['99']], 'contributions': '327 contributions\n        in the last year', 'description': ['dm2nsc\nData conversion tool for uploading Diabetes-M log data to Nightscout.\nInstall python3 requirements with pip install -r requirements.txt, update and rename secret.py-example to secret.py, and run getdata.py (potentially as a cronjob).\n'], 'url_profile': 'https://github.com/jwoglom'}"
"{'location': 'BeiJing', 'stats_list': [['2', '          followers'], ['2', '          following'], ['17']], 'contributions': '23 contributions\n        in the last year', 'description': ['MedicalTreat_Diabetes\n天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测\n止步初赛：215/2522\n'], 'url_profile': 'https://github.com/LCJHust'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Jellyfish\n\nJellyfish are known for their user friendliness and uploads, sometimes.\nInstall\nClone this repo then install dependencies:\n$ npm install\nQuick start\nStart the development server with:\n$ npm start\nJSHint\nLint the files in this repo according to the local .jshintrc with:\n$ npm run jshint\nOr have the linter watch your files as you work with:\n$ npm run jshint-watch\nBuilding the client\nThe client app is built as a static site in the dist/ directory.\n$ SERVE_STATIC=dist npm start\nYou can also build everything at once locally by simply running:\n$ npm run build\n$ SERVE_STATIC=dist npm start\nNOTE: shelljs used in the build scripts is known to sometimes cause an infinite loop using the synchronous version of exec. If a build script seems to take too long or hang, please kill the process and try again.\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'India', 'stats_list': [['9', '          followers'], ['0', '          following'], ['18']], 'contributions': '27 contributions\n        in the last year', 'description': ['Diabetes Prediction Using Machine Learning\nObjective\nTechniques Used\n\nData Cleaning\nData Visualization\nMachine Learning Modeling\n\nAlgortihms Used\n\nLogistic Regression\nSupport Vector Machine\nKNN\nRandom Forest Classifier\nNaivye Bayes\nGradient Boosting\n\nModel Evaluation Methods Used\n\nAccuracy Score\nROC AUC Curve\nCross Validation\nConfusion Matrix\n\nGuide Lines\nPackages and Tools Required:\nPandas \nMatplotlib\nSeaborn\nScikit Learn\nJupyter Notebook\n\nPackage Installation\npip install numpy\npip install pandas\npip install seaborn\npip install scikit-learn\npip install matplotlib\n\nJupyter Notebook Installation Guide  https://jupyter.org/install\n'], 'url_profile': 'https://github.com/MrKhan0747'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['1', '          following'], ['1']], 'contributions': '270 contributions\n        in the last year', 'description': [""\n\n\n\n\n\n\n\n\n\n\n\nDiab is a smart opensource application that helps you managing your diabetes by\nkeeping track of your glucose values and insulin injections.\n\n\nUsing the data registered inside the app it's possible to generate a\ncustomized plugin that once applied to the app will provide smart insights\nfor insulin dosages based on real-time context.\nIt's also possible to integrate the app with other fitness services to share\nthe data.\nFeatures\n\nSave records of glucose and insulin dosages\nInsulin suggestions plugin\nExport records as Excel file\nReminder for checking again in case of hypoglycemia\n[optional] Google Fit integration\n\nFor upcoming features, see the bug tracker.\nOpen source\nLicense\nReleased under the GNU GPLv3.\nWorking with the repository\nClone the repository with git\ngit clone https://github.com/bvlj/diab\nSetup the work environment\n\nInstall git pre-push hooks (all the tests must pass before pushing to master)\nInstall ktlint (enforces code style guidelines)\nPrevent git from tracking changes to your trained plugin models\n\n./_scripts/setup.sh\nCompile\nThe builds can be compiled using gradle.\nThe following build variants are available:\n\noss\ngoogleFit\n\noss builds\nBuilds the app without any fitness services integration.\nThe output is composed of 100% open source code.\n./gradlew assembleOssRelease\ngoogleFit builds\nBuilds the app with (optional) Google Fit integration.\nThe output includes proprietary libraries from Google used for Fit.\n./gradlew assembleGoogleFitRelease\nInsulin suggestions plugin\n\n⚠️ This feature could be dangerous, use with extreme caution. ⚠️\nDO NOT blindly rely on it as while it's efficient enough for\nproviding hints, it's NOT supposed to replace medical advices\nor suggestions from more-experienced humans.\nThe developer and contributors disclaim any responsibility over any\nform of injury derived from (mis)usage of this feature.\n\nThe insulin suggestion plugin allows the app to provide smart insulin\ndosage hints.\nThe plugin is created by using a machine-learning model created with data from\nthe app which is tested against a wide set of possible scenarios.\nGiven the strictly sensitive and personal nature of dealt with data, no plugin\nis bundled with the app, nor made available for download.\nBuild your own suggestion plugin\nTo create your customized insulin suggestions plugins using ml, see the\nreadme found in the ml module.\nIt's also possible to build a plugin manually, but no documentation is available for the time being.\n""], 'url_profile': 'https://github.com/bvlj'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['15']], 'contributions': '6 contributions\n        in the last year', 'description': ['天池大赛-人工智能辅助糖尿病预测复赛42名\n赛题描述\n心血管病、糖尿病等慢性疾病，每年导致的死亡人数占总死亡人数的80%，每年用于慢病医疗费用占中国公共医疗卫生支出的比例超过13%。作为一种常见慢性疾病，糖尿病目前无法根治，但却能通过科学有效的干预、预防和治疗，来降低发病率和提高患者的生活质量。阿里云联合青梧桐健康科技有限公司主办天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测，希望用人工智能的方法处理、分析、解读和应用糖尿病相关大数据，让参赛选手设计高精度，高效，且解释性强的算法来挑战糖尿病精准预测这一科学难题，为学术界和精准医疗提供有力的技术支撑，帮助我们攻克糖尿病。\n比赛地址\n数据地址 \n运行环境\n\npython 3.5.2\nnumpy\npandas\nxgboost\nlightgbm\nsklearn\n\n文件说明\n\npre_test.ipynb 初赛code\nfinal_test.ipynb 复赛code\nelse.py 比赛期间尝试的其他方法\nfinal.csv 提交结果\n\n分析思路\n\n\n初赛时，预测血糖浓度，MSE为评判标准，drop大量缺失特征，对连续特征进行简单分箱降噪处理，对缺失值采用尝试采用-999，中位数，众数填充，最终基于本地CV对连续变量采用中位数填充，分类变量采用众数填充。基于可视化观察到一个血糖异常高的值，drop之后，线上提升较大。未进行样本平衡处理时，线上成绩一直在200开外，后想到分类方法，选取血糖浓度10为阈值，将血糖值降序排列后，取前1000个样本和后1000个样本进行训练预测测试集血糖分类，然后分别选用初始训练集血糖浓度高的前500个数据预测分类高的样本，后2000样本预测分类低的样本，线上效果显著，顺利进入复赛。\n\n\n复赛，预测病人是否患有糖尿病，采用分类模型，f1_score为评分标准，基于原始数据背景，做了许多关于肾脏，心血管，酶细胞，血压的组合特征，尝试多项式组合特征，过拟合十分严重，弃用，尝试auto-sklearn方法，过拟合严重，弃用，最终采用相关系数和随机森林法选取100维特征，通过模型融合得到最终结果。\n\n\n比赛感悟 \n\n过拟合是不可避免的，因此每次换数据之后，排行榜都是大变，有时候可以适当简化特征，简化模型，效果或许会出其不意\n\n其他说明 \n\ncode为三人共同修改，因此我这边版本可能会与最终提交版本有些许差别，但基本思想一定不变\n\n'], 'url_profile': 'https://github.com/whatduck'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['tideline\n\n\nThis repository is a self-contained module library for Tidepool\'s timeline-style diabetes data visualization(s).\nThis module is currently under construction; check back often for updates!\nMore information is also available in the wiki.\nDependencies and Installation\nFront-end dependencies\n\nCrossfilter\nD3.js\nDuration.js\nLo-Dash\nMoment\nBows\n\nFonts: Tideline should be used with the Open Sans font.\nDevelopment-only dependencies: See the package.json.\nInstall for use in your own web application using:\n$ npm install --save tideline\nUsage\nYou can use the library directly with Webpack:\nvar tideline = require(\'tideline\');\n\n// load styles\nrequire(\'tideline/css/tideline.less\');\nFor information on building charts using tideline components, see Using Tideline.\nDevelopment\nTo run the tests you will need to have a couple of tools installed. Everything you need can be installed via npm:\n$ npm install\nTesting\nTo run the tests in Chrome using Mocha and the [testem](https://github.com/airportyh/testem \'Test\'em\') test runner:\n$ npm test\nTo run the unit tests in watch, use:\n$ npm run test-watch\nLint\nRun JSHint with:\n$ npm run lint\nYou can also watch files for changes and re-run automatically by starting:\n$ npm run lint-watch\nCode Philosophy and Organization\nTideline is designed to be highly modular and framework-independent. It is currently being used in conjunction with React in Tidepool\'s first application blip.\nThe main functionality tideline provides is modules for building out various visualizations of multi-typed data sets aligned on various timescales. At present, there is a module (oneday.js) for creating a horizontal scrolling timeline that shows twenty-four hours of data at a time, a module (twoweek.js) for creating a vertical scrolling timeline that shows two weeks of data at a time, and a module (settings.js) for creating an HTML table view of insulin pump settings.\nJargon: The horizontal sections comprising sub-units of visualization plotted against the same x-axis are referred to in this repository as pools.\nPhilosophy\nAlmost all of the main tideline components (found in js/) hew to at least some (but rarely all) of the suggestions in Mike Bostock\'s Towards Reusable Charts. The data-type specific plotting functions (found in js/plot/) hew most closely to the suggested pattern, while the higher-level components (i.e., oneday.js, twoweek.js, settings.js) do not, as their tasks are not quite the same.\nThe plotting functions in js/plot/ critically depend on D3\'s enter and exit selections. If you need it, this tutorial by Mike Bostock includes a good introduction to these.\nWhile tideline is quite specific to diabetes at the moment, it is designed to be as flexible and modular as possible. We plan to integrate data types not specific to diabetes (e.g., activity tracker data, calendar events, etc.), and it should be possible to create a visualization of any multi-typed dataset using a combination of the higher-level components and additional plotting modules. We welcome any and all contributions of new plotting modules, as well as contributions to the core library modules.\nSVG Philosophy\nTideline uses D3.js to create an SVG data visualization. SVG is an extremely powerful graphics format, and there are often many, many ways to accomplish the same visualization task. For the purposes of the code in this repository, two related points of philosophy should be noted upfront:\n\nTideline loves SVG group <g> elements. Loves.\nRelatedly, Tideline likes to use the transform attribute (usually just with a translate(x,y) definition) for positioning.\n\nCode Conventions\nTideline makes every attempt to adhere to standard coding conventions. In development, we use the same .jshintrc file as tideline\'s parent application blip.\nThe only coding conventions unique to tideline are conventions of HTML and CSS ID and class names. All of the SVG elements comprising tideline use camelCase for IDs, with different parts of the ID separated by an underscore _. Class names, in contrast, are all lowercase, prefixed with d3 and employ hyphen - as a separator. These conventions help tideline developers to keep IDs and classes distinct.\nRepository Organization\n\ncss/ contains the Less files that compile to tideline\'s CSS. tideline.less provides the styles and depends on tideline-colors.less for color variables. This makes it possible to customize tideline\'s color scheme by defining a different tideline-colors.less file.\ndev/ contains a few tools that are (occasionally) useful for development.\n\ndemodata/ contains a Python script for generating fake data for testing tideline during development. For usage information, run python demo_data.py --help.\ntemplates/ contains two module templates: plottemplate.js for a plot module and datautil.js for a data utility analogous to those found in js/data/.\ntestpage/ is a miniature JavaScript library for generating test data used in the tideline visualization integration tests. In contrast to the demo data generator, the test page data is extremely regular, with no randomization.\n\n\nimg/ contains the images used to plot certain types of data (i.e., notes).\njs/ contains the tideline library. At the top level, oneday.js, twoweek.js, settings.js, and pool.js are the main components. tidelinedata.js defines the data object that the other core components expect to be passed. index.js exports the entire library, which can be used for creating a standalone tideline bundle with browserify.\n\ndata/ contains a set of mini-modules for munging and calculating statistics around various types of diabetes data.\n\nutil/ contains some common utilities that are used mainly in the data/ modules, but datetime.js, format.js (for formatting the output of numerical calculations - that is, rounding and displaying numbers to the proper number of significant digits), and tidelinecrossfilter.js, which wraps the most common uses of Crossfilter in tideline, are also used outside of data/.\n\n\nplot/ contains mini-modules for plotting various types of data, mostly diabetes-specific. These mini-modules are called by pool.js when rendering data. Most of the data types are self-explanatory (at least to those who have some knowledge of type 1 diabetes), but \'cbg\' and \'smbg\' may require explanation. \'cbg\' stands for Continuous Blood Glucose and refers to the readings generated by a Dexcom or Medtronic continuous glucose sensor. \'smbg\' stands for Self-Monitored Blood Glucose and refers to the readings generated by a traditional home fingerstick blood glucose meter.\n\nstats/ contains a special mini-module for creating a ""stats widget"" that updates on the fly as the user navigates along the tideline. This is essentially a special type of pool that is hierarchical itself, containing component ""puddles,"" where the relationship between puddle.js and stats.js is roughly equivalent to the relationship between pool.js and the one-week.js and twoweek.js main components.\nutil/ contains a couple of small utility modules:\n\nwithin annotations/, annotation.js and annotationdefinitions.js generate data annotations.\nwithin axes/, dailyx.js is a custom axis generator for the x-axis of the tideline one-day view; more custom axis generators will be added here in the future.\nwithin tooltips/, shapes.js encodes the shapes for tideline\'s custom tooltips and tooltip.js provides methods for adding a tooltip on hover over a plotted datapoint.\nbgboundary.js provides a utility for determining the class (very-low, low, target, high, very-high) of a blood glucose value given the user\'s (or the default) target range.\ncommonbolus.js provides a utility for getting information about boluses, whether these are bolus events are embedded inside wizard events.\ndrawbolus.js provides plotting functions for boluses, whether these are bolus events are embedded inside wizard events.\nfill.js generates the background fill for each data pool.\nlegend.js defines legend generators for all the pools that require a legend.\nscales.js generates D3 scales for various diabetes data types. The functions in this utility module are at the moment specific to the plotting functions in plot/, not generally useful.\nshapeutil.js provides methods for manipulating SVG shapes in various ways; it is required by modules in annotations/ and tooltips/.\n\n\n\n\nvalidation contains all the code necessary to perform client-side data validation, including schemas for all datatypes currently rendered by tideline, a small module validate.js providing validation functions, and our custom schema construction and validation tools in validator/.\n\n\nplugins/ contains modules that do not properly belong in tideline\'s core functionality. These fall into two categories: application-specific modules and data(-specific) preprocessing modules.\n\nblip/ contains \'factories\' for generating tideline data visualizations in Tidepool\'s first application blip. See this repository\'s wiki for information on writing tideline chart factories.\n\n\ntest/ contains the tideline test suite. See Test for instructions on running the test suite.\nweb/ contains the GitHub Pages branch for this repository, which sometimes hosts a gallery for proposed additions or enhancements to the tideline example being developed in example/. If you would like to add something to this gallery, feel free to submit your modifications to the files in example/ (and elsewhere in tideline, if relevant) and open a pull request against master (although this is not where your changes will be merged). Please comment in the pull request that your changes are intended as an addition to the gallery. If you are also proposing changes to the tideline library (i.e., outside of example/), a separate pull request containing those changes alone is appreciated.\n\nUsing Tideline\nThe Core\nCommon Assumptions\njs/tidelinedata.js/ makes certain assumptions about the data that is passed to it. These assumptions are verified at runtime via the schema and validation code found in js/validation/. The most important of the requirements are the following:\n\nThe data are valid JSON - specifically, an array of objects.\nEach object has a key normalTime which is an ISO 8601 representation of the date and time at which the datapoint occurred, formatted as UTC time.\nThe data are sorted by normalTime, in ascending order.\n\nBoth one-day and two-week charts also expect a Node.js EventEmitter passed as an argument.\nSVG Structure\nAs noted above, tideline loves SVG group <g> elements. The basic structure of the one-day tideline chart is as follows:\n|--<svg id=\'tidelineSVGOneDayContainer\'>\n| |-<g id=\'tidelineMain\'>\n| | |-<g id=\'tidelineXAxis\'>\n| | |-<g id=\'tidelinePools\'>\n| | | |-<g id=\'pool[Datatype]\'>\n| | | | |-<g id=\'pool[Datatype]_fill\'>\n| | | | |-<g id=\'pool[Datatype]_[datatype]\'>\n| | |-<g id=\'tidelineLabels\'>\n| | | |-<text id=\'pool_pool[Datatype]_label\'>\n| | | |-<g id=\'pool_pool[Datatype]_legend_[datatype]\'>\n| | |-<g id=\'tidelineYAxes\'>\n| | |-<g id=\'tidelineScrollNav\'>\n| | |-<g id=\'tidelineAnnotations\'>\n| | |-<g id=\'tidelineTooltips\'>\nAnd the two-week chart differs only minimally:\n|--<svg id=\'tidelineSVGTwoWeekContainer\'>\n| |-<g id=\'tidelineMain\'>\n| | |-<g id=\'tidelinePools\'>\n| | | |-<g id=\'daysGroup\'>\n| | | | |-<g id=\'poolBG_[date]\'>\n| | | | | |-<g id=\'poolBG_[date]_fill\'>\n| | | | | |-<g id=\'poolBG_[date]_smbg\'>\n| | | |-<g id=\'poolStats\'>\n| | | | |-<g id=\'poolStats_stats\'>\n| | |-<g id=\'tidelineXAxisGroup\'>\n| | |-<g id=\'tidelineYAxisGroup\'>\n| | |-<g id=\'tidelineScrollNav\'>\n| | |-<g id=\'tidelineWeeklyLabels\'>\n| | |-<g id=\'tidelineTooltips\'>\n| | |-<g id=\'tidelineAnnotations\'>\nBecause SVG has no concept of a z-index, elements are layered according to the order in which they appear in the SVG XML. One of the reasons tideline makes such liberal use of group elements is to control the layering through the order of the group elements. Thus, the ordering of the groups in the two outlines above is often significant.\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'NONE', 'stats_list': [['28', '          followers'], ['9', '          following'], ['272']], 'contributions': '0 contributions\n        in the last year', 'description': ['An Ensemble Model for Predicting the Onset of Diabetes using NHANES Data\nBy John Semerdjian & Spencer Frank\nCode\nOur models are contained in the NHANES.ipynb notebook. In order to run the notebook, create a virtual environment and install the required modules.\n# create a virtual environment, ""nhanes""\n$ mkvirtualenv --python=/usr/local/bin/python3 nhanes\n$ workon nhanes\n\n# install required modules\n$ pip install -r requirements.txt\n\n# download/merge data\n$ python ./bootstrap.py\n\n# start ipython notebook\n$ ipython notebook\nVideo & Report\nYou can find our report here.\nAbstract\nPrediction of disease onset from patient survey and lifestyle data is quickly becoming an important tool for diagnosing a disease before it progresses. In this study data from the National Health and Nutrition Examination Survey (NHANES) questionnaire is used to predict the onset of diabetes. An ensemble model using the output of several classification algorithms was developed to predict the onset on diabetes based on 16 features. The ensemble model had an AUC of 0.834 indicating high performance.\nFeatures and Descriptions\n\nALQ120Q: How often drink alcohol over past 12 mos\nBMXBMI: Body Mass Index (kg/m**2)\nBMXHT: Standing Height (cm)\nBMXLEG: Upper Leg Length (cm)\nBMXWAIST: Waist Circumference (cm)\nBMXWT: Weight (kg)\nBPQ020: Ever told you had high blood pressure\nDMDEDUC2: Education Level - Adults 20+\nINDHHINC: Annual Household Income\nLBXTC: Total cholesterol (mg/dL)\nMCQ250A: Blood relatives have diabetes\nPAQ180: Avg level of physical activity each day\nRIAGENDR: Gender\nRIDAGEYR: Age at Screening Adjudicated - Recode\nRIDRETH1: Race/Ethnicity - Recode\nSMD030: Age started smoking cigarets regularly\n\nAdditional Variables\n\nVariable search\nDemographic data - variable list\nDietary - variable list\nExamination - variable list\nLaboratory - variable list\nQuestionnaire - variable list\n\n'], 'url_profile': 'https://github.com/semerj'}","{'location': 'New Delhi, India', 'stats_list': [['98', '          followers'], ['248', '          following'], ['126']], 'contributions': '212 contributions\n        in the last year', 'description': ['ML-MT-WebApp\n\n This is one of major project of my undergraduate degree program.\nHere, I have developed a disease predicting web app which using the concept of machine learning makes predictions about various diseases like Malaria, Pneumonia, Diabetes etc.\n\n Down below are the names of the various model files used:\n\nCancer model = model\nDiabetes model = model1\nHeart model = model2\nLiver model = model4\nKidney model = model3\nMalaria model = model111.h5\nPneumonia model = my_model.h5\n\n\n Kernals used for training deep learning model \n\nKernal for Malaria model :https://www.kaggle.com/shobhit18th/malaria-cell\nKernal for Pneumonia model :https://www.kaggle.com/shobhit18th/keras-nn-x-ray-predict-pneumonia-86-54\n\n\n Details of various datasets used for model development : \n\nCancer : cancer.csv [In the repository]\nDiabetes : diabetes.csv [In the repository]\nHeart : heart.csv [In the repository]\nLiver : https://www.kaggle.com/uciml/indian-liver-patient-records \nKidney : https://www.kaggle.com/mansoordaku/ckdisease \nMalaria :  https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria \nPneumonia:  https://www.kaggle.com/paultimothymooney/chest-xray-pneumonia \n\n\n Tools used for project development: \n\nPython ( 3.7 version)\nFlask\nOpenCV\nPandas\nNumpy\nHTML\nCSS\n\n\n For using the project clone the repository and type the following commands in the termial: \n\n $ set FLASK_APP= app.py\n $ flask run\n\n\n The whole project is deployed on Heroku Cloud.\n  Here is the link where you can access the project live : https://myml-mtapp.herokuapp.com/ \n Thank you!\n'], 'url_profile': 'https://github.com/shobhitsrivastava-ds'}","{'location': 'Pune, India', 'stats_list': [['4', '          followers'], ['24', '          following'], ['58']], 'contributions': '95 contributions\n        in the last year', 'description': ['Diabetes Predictor\n\nPredict Diabetes using Machine Learning.\n\nIn this project, our objective is to predict whether the patient has diabetes or not based on various features like Glucose level, Insulin, Age, BMI. We will perform all the steps from Data gathering to Model deployment. During Model evaluation, we compare various machine learning algorithms on the basis of accuracy_score metric and find the best one. Then we create a web app using Flask which is a python micro framework.\n\nRead more about it in my Blogpost.\n\nScreenshot\n\nInstallation\n\n\nClone this repository and unzip it.\n\n\nAfter downloading, cd into the flask directory.\n\n\nBegin a new virtual environment with Python 3 and activate it.\n\n\nInstall the required packages using\npip install -r requirements.txt\n\n\nExecute the command:\npython app.py\n\n\nOpen http://127.0.0.1:5000/ in your browser.\n\n\n'], 'url_profile': 'https://github.com/Aditya-Mankar'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/smart-on-fhir'}"
"{'location': 'Saint Louis, MO', 'stats_list': [['40', '          followers'], ['54', '          following'], ['60']], 'contributions': '132 contributions\n        in the last year', 'description': ['Diabetes Food Database\nFood information for people with diabetes. Visit the website at\nhttps://dfdb.netlify.com/ and search for a food item.\nContributing\nThe infrastructure for this app is there, but the database itself is extremely lacking. Pull\nrequests are welcome! Please look at modifying src/database.json.\nWhen adding a new food, please include the following properties:\n\nname - The name of the food. Will be used for searching. Must be unique, singular (smoothie\ninstead smoothies) and all lowercase (carrot instead of Carrot).\ndisplayName - A prettier name of the food. If the name is sugar, the displayName might be\nSugar (with capitalization).\nalternateNames - An array of names people might also use when searching for this food. Should\nalso be singular and all lowercase.\nlevel - A number from 1 to 5.\n\n1 = Avoid - Diabetic people should stay away from this food.\n2 = Caution - This food can be eaten in moderation or under certain conditions.\n3 = Okay - Neutral. No significant positive or negative health effects.\n4 = Good - Food that is good for a diabetic person to eat.\n5 = Great - Foods at this level are among the healthiest options.\n\n\nexplanation - A reason why this food is or is not healthy.\nsuggestions - Actions to take regarding this food. Alternatives to this food if it is\nunhealthy.\ningredients - An array of items that make up this food. Items in this array must match the\nname of another food in the database.\n\nRunning the application locally for development\nClone the repository and install dependencies\n> git clone https://github.com/travishorn/diabetes-food-database.git\n> cd diabetes-food-database\n> npm install\n\nStart the backend lambda service and serve the client\n> npm run start:lambda\n> npm run start:vue\n\nThe user interface will be available at http://localhost:8080/\nBuilt with\n\nAxios - Querying the database from the client\nFuse - Fuzzy text search\nIcons8 - Icon/favico\nNetlify - Hosting the client and the database API\nPluralize - Helping normalize search queries\nVue - User interface\nwebpack-auto-inject-version - Place version at bottom of client\n\nLicense\nMIT License\nCopyright (c) 2018 Travis Horn\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'], 'url_profile': 'https://github.com/travishorn'}","{'location': 'San Luis Potosi, Mexico', 'stats_list': [['10', '          followers'], ['0', '          following'], ['15']], 'contributions': '45 contributions\n        in the last year', 'description': ['raman-diabetes\nThe dataset of our work where the application of portable Raman spectroscopy coupled with several supervised machine-learning techniques, is used to discern between diabetic patients (DM2) and healthy controls (Ctrl), with a high degree of accuracy.\nDownload dataset from: https://www.kaggle.com/codina/raman-spectroscopy-of-diabetes\nThis script pre-processes the spectra to reproduce Fig. 1 of our paper:\nGuevara, E., Torres-Galván, J. C., Ramírez-Elías, M. G., Luevano-Contreras, C., & González, F. J. (2018). Use of Raman spectroscopy to screen diabetes mellitus with machine learning tools. Biomedical Optics Express, 9(10), 4998–5010. https://doi.org/10.1364/BOE.9.004998\n\nCopyright (C) 2018 Edgar Guevara, PhD\nCONACYT-Universidad Autónoma de San Luis Potosí\nCoordinación para la Innovación y Aplicación de la Ciencia y la Tecnología\n\n\n'], 'url_profile': 'https://github.com/guevaracodina'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetik\nAn open-source effort to improve diabetes management on the iPhone.\nHow you can contribute\n\nDevelopment. Diabetik is an on-going effort to improve diabetes management on the iPhone. We welcome support and pull requests! If you\'re looking for something to help with, take a look at our todo list. If you see something that\'s unassigned and think you can help, feel free to dive right in!\nTranslations. We\'re always looking for translators to help localise the application. If you\'d like to get involved in our collaborative effort please visit our CrowdIn project page.\nSupport. Join our community and help users with any issues they may encounter.\n\nGetting started\nThe production Xcode project has been provided as-is with the following exceptions:\n\nDiabetik makes use of Shinobi Charts, a proprietary charting framework that cannot legally be redistributed. As such, developers wishing to compile the Diabetik source code will need to download a trial version of the framework.\nCertain private credentials have been stripped from the public codebase to ensure they remain secure. Placeholder credentials can be found in the UACredentials-Example.h header file. Rename it UACredentials.h before compiling the project.\n\nLegal stuff\nThe Diabetik source code is provided under version 2.0 of the Apache License. While we have included various multimedia assets it is important to note that these require express written consent if they are to be included as part of any derivative work.\nCopyright (c) 2013-2014 Nial Giacomelli\n\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'], 'url_profile': 'https://github.com/diabetik'}","{'location': 'Türkheim, Germany', 'stats_list': [['16', '          followers'], ['5', '          following'], ['17']], 'contributions': '785 contributions\n        in the last year', 'description': [""Diaguard\n \n\n\nDiaguard is an Android app for people with diabetes mellitus.\nIt replaces the handwritten diary and helps the user to quickly and easily record, evaluate and export his blood sugar and other important data as PDF or CSV. Thanks to the clearly arranged interface, the user always has an overview of his diabetes. The app also provides information on several thousand foods including carbohydrates and other nutrients.\n\nQuickly and easily track your blood glucose, insulin, carbohydrates, HbA1c, activity, weight, pulse, blood pressure and oxygen saturation\nCustomizable units\nVisualize your blood glucose level in a graph\nDetailed logs of your data\nSettings for basal rate, correction factor and meal-bolus-factor\nFood database with thousands of entries\nPDF and CSV export\nBackup\nReminder\nEstimated HbA1c\nStatistics\nDark Mode\nLocalized in English, German, French, Spanish and Italian\n\n      \nDistribution\n\nAbout\nHistory\nDevelopment of Diaguard started in October 2013. It was as one of several small projects of one developer who was trying to gain traction on the Android platform. This project soon evolved into a vision named Diaguard which saw its initial release in July 2014. Since then it has received many updates, much appreciated feedback from its users and a little bit of marketing with the help of direct contact and mouth to mouth propaganda. But at the end of the day every line of code has been provided by one sole developer in his spare-time. This should change in April 2020 when the decision was made to go open source.\nGoals\nDiaguard should help diabetics with monitoring their diabetes. It should be able to replace the handwritten diary completely and to supplement tasks like basal rate tests or carb counting. It should help diabetologists with monitoring their patients regularly and when preparing a health insurance application.\nDiaguard's users should always be and feel in full control. All user-generated data must stay on the same device until the user explicitely decides to transfer something to another device, e.g. during an export or backup. Nothing is shared with remote services and network is only used to read data from a food database.User data must not be lost. Therefor database migrations enable user data to be carried from version 1.0 to any existing and upcoming release.\nDiaguard should be accessible to most people. Therefor its design is heavily influenced by the Material Design Guidelines and tested with accessibility tools like TalkBack and Accessibility Scanner.\nDiaguard should only be used under the supervision of a diabetologist.\nDiaguard should not be used by minors without the supervision of a parent or legal guardian.\nDiaguard is not a medical app and serves no therapeutical purpose.\nBusiness model\nThere is none.\nDiaguard exists for three reasons: for learning, for fun and for saying thank you. This app kickstarted the career of a professional software developer by leading through the whole software lifecycle: creating a concept, building software from scratch, publishing it to the masses and maintaining a legacy project with additions sprinkled here and there. Additionally it was and is pure fun to enhance this app and to see feedback from a helpful and thankful community. Last but not least Diaguard is a way of giving something back.\nFor these reasons, Diaguard has been, is and will always be free of cost.\nIf you want to buy me a beer or support me in general, please use the donate button and be aware of my thanks.\n\n\n\nDevelopment\nLanguages\nEnglish is used as general language for naming things. Everything except the localization should be written in English.\nJava is used as programming language. Currently there are no plans to migrate to Kotlin to prevent a multi-language project. A possible approach could be splitting up the monolith into multiple modules which unleashes the potential to switch language while staying consistent within a module.\nSQLite is used as query language for the database. Object-relational mapping takes then place via ORMLite.\nXML is used as markup language for user interfaces. These views are then bound to Java via Butter Knife.\nLocalization\nLocalization takes place locally and affects following components:\n\nUser interfaces: localized via Android resources (one strings.xml per language)\nCommon food: localized via custom file import (one food_common.csv for all languages)\nDefault tags: localized via custom file import (one tags.csv for all languages)\n\nCurrently the localization process requires certain programming skills. This should and could be improved by using an external service in order to support localizations by non-developers.\nArchitecture\nThere are two architectural design patterns that are being used for Diaguard: Model-View-Controller and Domain-driven design.\nModel-View-Controller (MVC) was a widely spread design pattern in the early days of Android development until Google presented its Architecture Components in 2017 and Model-View-ViewModel (MVVM) took over. A gradual transition to MVVM is planned due to its advantages over MVC, e.g. regarding encapsulation and testability.\nDomain-driven design improves the structure by grouping files in features. Every feature describes one aspect of the project and should be self-contained to improve focus during development. The only exception to this rule is the shared package which contains everything that is used in multiple features (e.g. database- or networking logic).\nTesting\nTesting takes place via JUnit, Espresso and Robolectric. Tests are few in number and far from perfect, since most of Diaguard has been developed in the early of days of one developer. However the decision to go open source came with a code of conduct, and instrumentation testing major features was the first step in a right direction. The goal now is to unit- and instrumentation test every new and edited feature in order to increase the quality with every commit.\nThird-party licenses\nThis software uses following technologies with great appreciation:\n\nAboutLibraries\nAndroidX\nApache Commons Text\nApp Privacy Policy Generator\nBetterPickers\nButter Knife\nEventBus\nFloatingActionButton\nGson\nJoda-Time\njoda-time-android\nJUnit\nMaterial Components for Android\nMPAndroidChart\nOpencsv\nOpen Food Facts\nORMLite\nORMLite Android\nParallax Everywhere\nPDFjet\nPicasso\nRetrofit\nRobolectric\nSchweizer Nährwertdatenbank\n\nThese dependencies are bundled with Diaguard but under the terms of their respective license.\nLegal\nThe manufacturer of this software assumes no responsibility for the topicality, correctness, completeness or quality of the information provided. Liability claims against the manufacturer, which relate to material or immaterial nature, caused by the use or non-use of the software are excluded.\nRedistribution\nAdditionally to the permissions, conditions and limitations of the GPLv3, the permission for redistribution must be manually requested in advance. This ensures that neither the original software or any fork will be affected negatively by terms and conditions like the Google Play Developer Distribution Agreement. If you plan to redistribute this software, please contact the maintainer at diaguard.de@gmail.com.\nLicense\nCopyright (C) 2013-2020 Philipp Fahlteich\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n""], 'url_profile': 'https://github.com/Faltenreich'}","{'location': 'Paderborn, Germany', 'stats_list': [['28', '          followers'], ['46', '          following'], ['99']], 'contributions': '45 contributions\n        in the last year', 'description': ['Pima-Indians-Diabetes-kaggle\nThis repo contains the solution of the [Pima Indians Diabetes Database] (https://www.kaggle.com/uciml/pima-indians-diabetes-database) given on kaggle.\n'], 'url_profile': 'https://github.com/rrichajalota'}","{'location': 'NONE', 'stats_list': [['18', '          followers'], ['13', '          following'], ['19']], 'contributions': '26 contributions\n        in the last year', 'description': ['Diabetes-PracticeFusion\nPredicting diabetic patients using EHR provide by Practice Fusion & Kaggle\nIn this project, I used data provided by Kaggle and Practice Fusion. Multiple sets of patients information, transcripts, diagnosis, medications and patients allergies were provided in a kaggle competition that was closed in 2012. I should note that this is my first data science project in healthcare using EHR.\nObjective: Build a model to predict positive diabetes\nProcedure\n1. Data cleaning\nThe cleaning of data consisted in:\na. Text mining medication names\nThere is a combination of medications that can weaken a patient and sometimes triggering symptoms of diabetes mellitus. In this notebook, I am going to text mine medication names provided in Practice Fusion datasets with the goal to find components of medications that are linked to risk of diabetes type 2. Results from this notebook will be used to build the predictive model (continue reading ...)\nb. Cleaning transcripts and diagnosis\n\nvalidating data types\nimputing missing values\ndropping outliers\n(continue reading ...)\n\n2. EDA, Model building and validation\nThe process consists in:\n\nLoading cleaned data and building one large dataset. containing all information\nCarrying an exploratory data analysis. I will generate visualization that make it easy to see correlations between independent and dependent variables. In this section, statistical tests will also be used to validate separability of the dependent variable among different groups of the independent variables\nBuilding a predictive model. Three different Gradient Boost ML algorithms will be tuned and to optimize the best parameters for final predictions\nValidating the models\n\n(continue reading ...)\n3. Summary and recommendations\nThree models were built by tuning the Gradient Boost ML algorithm using clean data from patients information, transcripts, diagnosis and medications and they were independently cross-validated. AUC of these models were 0.707 (using numerical variables), 0.680 (using categorical variables) and 0.736 (using text-mined variables). For improvement, a mixture model was then built as a linear combination of the three models. The weight were optimized through a modifies Gradient Descent Algorithm its AUC turned to be 0.852.\n'], 'url_profile': 'https://github.com/kthouz'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\n@tidepool/viz\nTidepool data visualization for diabetes device data.\nThis README is focused on just the nuts & bolts of getting the code in this repository ready to develop locally in blip or with React Storybook. For more detailed information about the code in this repository, please see the developer guide.\nTable of contents\n\nGetting started\nDevelopment\n\nRunning locally with blip\nRunning locally in React Storybook\nRunning the tests\nRunning the linter\n\n\nProduction\n\nPublishing examples\nPublishing to npm\n\n\n\n\nGetting started\nAfter cloning this repository to your local machine, first make sure that you have at least node 6.x and npm 4.x installed. If you have a different major version of node installed, consider using nvm to manage and switch between multiple node (& npm) installations. If you have npm 3.x installed (as it is by default with node 6.x), then you can update to the latest npm 4.x with npm install -g npm@4.\nIt\'s not an absolute requirement, but it is preferable to have Yarn installed, as it provides dependency management features above and beyond what npm provides. Just follow Yarn\'s installation instructions (hint: for Mac users with Homebrew installed, it\'s just brew install yarn).\nOnce your environment is setup with node 6.x and npm 3.x install the dependencies with Yarn:\n$ yarn install\nOr with npm if you\'re choosing not to use Yarn:\n$ npm install\nDevelopment\nRunning locally with blip\nTo work on code in this repository within blip, first do the following from your local blip repository (assuming blip/ and viz/ are sister directories):\n$ npm link ../viz/\nIn this repository, start the build in watch mode:\n$ npm start\nFinally, back in your local blip repository, follow the instructions for starting blip locally.\nRunning locally in React Storybook\nIf you\'re working at the component or view level outside of blip, you can work on component and view rendering code with React Storybook.\nIf you\'re working on the diabetes data model rendering components, run:\n$ npm run typestories\nIf you\'re working on any other components or views, run:\n$ npm run stories\nFor more about the use of React Storybook in this repo, see use of React Storybook.\nRunning the tests\nTo run the unit tests in PhantomJS (as they run on Travis CI):\n$ npm test\nTo have the tests run continuously with source and test code changes rebundled as you work:\n$ npm run test-watch\nTo run the unit tests in your local Chrome browser (recommended for Tidepool developers before merging or publishing a release):\n$ npm run browser-tests\nRunning the linter\nTo run the code linter from the command line:\n$ npm run lint\nGenerally speaking, Tidepool developers configure linting to run continuously in their text editor of choice, and we recommend this approach for development. You can easily find instructions online for running ESLint continuously in all of the popular text editors—SublimeText, Atom, Visual Studio Code, etc.\nProduction\nPublishing examples to GitHub Pages with React Storybook\nSee the publishing section of the docs on docs.\nBuilding and publishing to npm\nWhen a new feature(s) is/are complete (i.e., branch is synchronized with master, reviewed with a sign-off from another developer), it\'s time to publish the package to npm! Since this is one of our most recently created repositories, any member of the ""developers"" team in the @tidepool npm organization will be able to publish the package using his or her npm login. Steps to publishing are as follows:\n\ncreate a tag on the approved pull request using the mversion tool with the -m option to auto-commit the version bump and tag (e.g., $ mversion patch -m for a patch version bump)\npush the new commit and tag to the GitHub remote with $ git push origin <branch-name> and $ git push origin --tags\ncheck that the tag build has passed on TravisCI\n$ npm whoami to check if you are logged in as yourself; if you are, skip to 7.\nif you are logged in as tidepool-robot, log out with $ npm logout\nthen log in as yourself with $ npm login\npublish the new version with $ npm publish; before the actual publish happens, the yarn install, linter, tests, and packaging webpack build will run since we have set those up through the prepare and prepublishOnly npm hooks in the package.json\nmerge the approved pull request to master\nremember to bump the version appropriately in the package.json for the app (e.g., blip) requiring @tidepool/viz as a dependency!\n\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['15', '          following'], ['10']], 'contributions': '32 contributions\n        in the last year', 'description': ['DiabeTracker (Work in Progress)\nDiabeTracker is an android app created for people with diabetics to facilitate in management of diabetes and ensure a healthy balanced life.\nFeatures\n\nLogging of carbs intake, blood glucose level and medication / insulin\nData analytics and visual reporting\nEasy information sharing with consultant / doctor\nSmart calculator to measure insulin dose or carbs intake when target glucose level is not achieved\n\nPreview\n  \nArchitecture\nThe app uses Clean Architecture based on MVVM and Repository patterns. It follows architecture principles recommended by Google in their Guide to app architecture.\n\nBuilt With\n\nKotlin - Android Development\nAndroid Architecture Components - Room, LiveData, Lifecycles, ViewModel and Navigation\nRxJava, RxAndroid - Reactive Extensions\nDagger - Dependency Injection\nMaterial Design - App Design, Theming and Styling\nThreeTenAbp - Date Time Utils\nClean Architecture - App Architecture\nRamotion Fluid Slider, ShapeOfView, PageIndicatorView - Custom UI Components\nMpAndroidChart - Graphs and Charts\nEspresso - UI Testing\nMockito, JUnit - Unit Testing\n\nGetting Started\nThe app is written entirely in Kotlin and uses the Gradle build system.\nTo build the app, use the gradlew build command or use ""Import Project"" in Android Studio. A canary or stable version >= 3.4 of Android Studio is required and may be downloaded here.\nLicense\nCopyright 2019 Arslan Shoukat\n\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n'], 'url_profile': 'https://github.com/arslanshoukat'}","{'location': 'Bangalore', 'stats_list': [['27', '          followers'], ['11', '          following'], ['25']], 'contributions': '33 contributions\n        in the last year', 'description': ['Diabetes-Detection\nThis is my diabetes detection C++ project/program which uses file handling as well. The program tells wheather the person has diabetes or not after testing most of the things.\nThe program can:\n1.Fix Appointment\n2.Can Proceed With Testings\n3.Will-generate Pre-report\n4.Will-generate Final-Report\n5.Has a paitent login\n6.Generate tips\n7.Admin Login\n8.Query-Reply sending application\n9.Allow you to buy Medicine\n10.Medicine Bill\n11.Many More things are there\nThere are many bugs also in some places so help me out in figuring them:)\n'], 'url_profile': 'https://github.com/Amit3200'}","{'location': 'Nigeria', 'stats_list': [['3', '          followers'], ['6', '          following'], ['8']], 'contributions': '0 contributions\n        in the last year', 'description': ['diatension\nAn awareness focused website on Diabetes & Hypertension\n'], 'url_profile': 'https://github.com/kayAbdulrazaq'}"
"{'location': 'San Francisco', 'stats_list': [['244', '          followers'], ['63', '          following'], ['646']], 'contributions': '91 contributions\n        in the last year', 'description': [""decoding-omnipod\nhacking diabetes: give me my data\nhelping\nSend me your packet captures!\nfork this repo\n\nsign up for a free github account, they support sign in with google, and it's a great service\nthen press the fork button\n\nThen\n$ git clone git@github.com/<yourname>/decoding-omnipod.git\n$ cd decoding-omnipod\n$ git checkout -b <yourname>\n$ mkdir <yourname>\n$ cp ~/path/to/captures ./<yourname>\n$ git add -v\n$ git commit -am '<yourname> adding captures for @bewest et al.'\n$ git push -u origin <yourname>\nThen you can send me an email or a pull request.\n""], 'url_profile': 'https://github.com/bewest'}","{'location': 'NONE', 'stats_list': [['13', '          followers'], ['8', '          following'], ['9']], 'contributions': '44 contributions\n        in the last year', 'description': ['Citation\n\nArticle: https://link.springer.com/article/10.1007%2Fs41666-019-00059-y\n\nPlease cite this work if you find this repository useful for your research:\nMartinsson, J., Schliep, A., Eliasson, B. et al. J Healthc Inform Res (2019). https://doi.org/10.1007/s41666-019-00059-y\n\nPrerequisites\nThe code is designed to be run on the OhioT1DM Dataset. So to use it the xml_path in e.g. the example experiment YAML configuration need to point to the path on disk where the XML data files are. E.g., change ""/home/ubuntu/ohio_data/OhioT1DM-training/"" to point to Ohiot1DM-training folder containing the XML files for the ohio dataset.\nIt would of cource be possible to write a new dataset module which loads the data into the required format and train the models on other data as well.\nInstallation\n$> chmod +x setup.sh\n$> ./setup.sh\n\nRunning an experiment\nNote that this is designed to run on the Ohio Diabetes dataset. You need to\nexplicitly state the absolute file path to the XML file of the patient you want\nto train the model for in the experiment configuration file (YAML file).\nExcept for that, everything should run out of the box.\n$> chmod +x run.py\n$> ./run.py --file experiments/example.yaml -m train\n\nAll results are collected and stored in the \'artifacts\' directory. To visualize the training session you can run\n$> tensorboard --logdir artifacts/<artifacts-path>\n\nand fire up tensorboard.\nReproduce final results\n$> sh run_final_experiments.sh\n$> sh evaluate_final_experiments.sh\n$> python create_table.py\n\nReproduce plots\n# Run the hyperparameter search\n$> python run.py --file=experiments/all_nb_lstm_state_nb_past_steps_search.yaml -m train\n# Evaluate the trained models\n$> python run.py --file=experiments/all_nb_lstm_state_nb_past_steps_search.yaml -m ealuate\n# Hyperparam search plots\n$> python plot_parameter_search.py artifacts/all_nb_lstm_states_nb_past_steps/\n\nThe plots will be in the working directory.\n# Surveillance error grid plots and prediction plots\n$> sh run_final_plots.sh\n\nThe plots will be in the artifacts folders.\nVersions\nTo reproduce the results in Automatic blood glucose prediction with confidence\nusing recurrent neural networks revert to commit: a5f0ebcf45f87b63d118dcad5e96eb505bb4269a and follow the README.\n'], 'url_profile': 'https://github.com/johnmartinsson'}","{'location': 'Austin, TX', 'stats_list': [['18', '          followers'], ['1', '          following'], ['18']], 'contributions': '0 contributions\n        in the last year', 'description': ['YADLA\nYADLA exists right now as two parts.  The first is an Android app to view Nightscout data on an Android phone.  AGP and daily views are available.\nThere is also an uploader to insert Dexcom G4 (G5 not yet supported) and Tandem t:slim (and probably other Tandem pump) data into a Nightscout instance.\nTo use, download the release alrightypump-commandline.tar.gz or alrightypump-commandline.zip archive and run alrighty-pump-commandline/bin/alrightypump-commandline.{sh, bat} http://secret-password@nightscout.example.com:port/\n'], 'url_profile': 'https://github.com/mgranberry'}","{'location': 'San Francisco Bay Area', 'stats_list': [['3', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\nThis is a brief analysis of the AIM94 diabetes dataset.  My objective in analyzing this dataset is to see if I can fit a simple linear model that will look for secular (consistently increasing or decreasing) trendds in the time series data.  A secular trend in the wrong direction would indicate that the patient needs attention.\nThe dataset analyzed here was collected for the 1994 AI in Medicine Symposium and is hosted at the UCI Irvine Machine Learning Repository.  The dataset contains blood glucose and other measurements for 70 patients with Insulin Dependent Diabetes Mellitus (IDDM).  The following excerpt explains the data codes in this set:\n""Diabetes patient records were obtained from two sources:  an automatic electronic recording device and paper records.  The automatic device had an internal clock to timestamp events, whereas the paper records only provided ""logical time"" slots (breakfast, lunch, dinner, bedtime).  For paper records, fixed times were assigned to breakfast (08:00), lunch (12:00), dinner (18:00), and bedtime (22:00).  Thus paper records have fictitious uniform recording times whereas electronic records have more realistic time stamps.\nDiabetes files consist of four fields per record.  Each field is separated by a tab and each record is separated by a newline.\nFile Names and format:\n(1) Date in MM-DD-YYYY format\n(2) Time in XX:YY format\n(3) Code\n(4) Value""\nSo what we are dealing with here is time series data with somewhat fictitious uniform time stamps for part of the data set.\nThe following excerpt is from the domain description provided for the symposium:\n""Patients with IDDM are insulin deficient. This can either be due to a) low or absent production of insulin by the beta islet cells of the pancreas subsequent to an auto-immune attack or b) insulin-resistance, typically associated with older age and obesity, which leads to a relative insulin-deficiency even though the insulin levels might be normal.\nRegardless of cause, the lack of adequate insulin effect has multiple metabolic effects. However, once a patient is diagnosed and is receiving regularly scheduled exogenous (externally administered) insulin, the principal metabolic effect of concern is the potential for hyperglycemia (high blood glucose). Chronic hyperglycemia over a period of several years puts a patient at risk for several kinds of micro and macrovascular problems (e.g. retinopathy). Consequently, the goal of therapy for IDDM is to bring the average blood glucose as close to the normal range as possible. As explained below, current therapy makes this goal a very challenging (and often frustrating) one for\nmost patients. One important consideration is that due to the inevitable variation of blood glucose (BG) around the mean, a lower mean will result in a higher frequency of unpleasant and sometimes dangerous low BG levels.""\nTo summarize in layman\'s terms, both high and low blood glucose levels are very unhealthy for the diabetes patient.\n'], 'url_profile': 'https://github.com/jonneff'}","{'location': 'Mountain View, CA', 'stats_list': [['37', '          followers'], ['0', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['This repo contains the Jupyter Notebook for predicting hospital readmission for patients with diabetes using deep learning. For simplicity we will use the train,validation,test splits from a prior project (https://github.com/andrewwlong/diabetes_readmission).\nThis uses the dataset from UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008).\nThe methodology behind this notebook is explained in my Medium Blog post:\nGetting Started with conda environment\nconda env create -f environment.yml\nconda activate diabetes_deep \npython -m ipykernel install --user --name diabetes_deep\n'], 'url_profile': 'https://github.com/andrewwlong'}","{'location': 'India', 'stats_list': [['7', '          followers'], ['10', '          following'], ['39']], 'contributions': '457 contributions\n        in the last year', 'description': ['Diabetis-Detection\nMachine Learning Practice - Diabetes Detection using Python Jupyter Notebook, PIMA Diabetes data etc\n'], 'url_profile': 'https://github.com/AvinashKrSharma'}","{'location': 'Dublin, Ireland', 'stats_list': [['4', '          followers'], ['4', '          following'], ['4']], 'contributions': '1 contribution\n        in the last year', 'description': ['Abbot FreeStyle Libre flash glucose meter Parser/Viewer\nObjective\nCreate a library to read and manage TSV files created by the FreeStyle libre app to better understand and visualize the report data\nHow to install\nnpm install\nHow to use the Viewer (user)\nMount a local web-server (for example using node\'s http-server) and browse to the index.html (for example http://127.0.0.1:8080/index.html) to open the main view that lets you import a tsv file generated from the Abbott FreeStyle Libre app (or use the test.tsv example file) and visualize the data in the HighChart chart.\nHow to use the FreeStyleLibreLib (developer)\nvar reader = new FileReader();\nreader.readAsText(file);\nreader.onload = function() {\n    var report = FreeStyleLibreLib.parseReport(reader.result);\n}\nTSV File Format (Tab separated values, like a CSV but with tabs)\nThis is the format of the exported file generated by the Abbot FreeStyle Libre app when running the File->Export Data menu option with the meter connected.\n\nLine 1:\n\nPatient name\n\nthis non-standard tsv line, break standard parsers\n(Is this line optional?)\n\n\n\n\nLine 2:\n\nHeaders\n\nID\nTime (Is YYYY/MM/DD HH:mm the only possible date format?)\nRecord Type\n\n0: Historic Glucose\n1: Scan Glucose\n2: ?\n3: ?\n4: Insulin (Need to read if Rapid-Acting Insulin (units) or Long-Acting Insulin (units) has data to know witch is witch, probably appies to the ""non numeric"" ones too, but is not tested)\n5: Food\n6: Date change (Not implemented)\nIs there anything beyond type 6?\n\n\nHistoric Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nScan Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nNon-numeric Rapid-Acting Insulin\nRapid-Acting Insulin (units)\nNon-numeric Food\nCarbohydrates (grams)\nNon-numeric Long-Acting Insulin\nLong-Acting Insulin (units)\nNotes\nStrip Glucose (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nKetone (mmol/L)\n\nDoes the column name change if the meter units are not mmol/L?\n\n\nMeal Insulin (units)\nCorrection Insulin (units)\n\nIt seems that this is not used for insulin units\n\n\nUser Change Insulin (units)\n\nIt seems that this is not used for insulin units\n\n\nPrevious Time\n\nFor Record type 6\n\n\nUpdated Time\n\nFor Record type 6\n\n\nAre these all the possible columns?\nCan the columns have another name if the meter or app is set up in other language?\n\n\n\n\nLines > 2\n\nData\n\n\n\nHow it looks\n\n'], 'url_profile': 'https://github.com/nahog'}","{'location': 'San Francisco', 'stats_list': [['244', '          followers'], ['63', '          following'], ['646']], 'contributions': '91 contributions\n        in the last year', 'description': ['Bayer Contour, Contour NextLink\nBoth are USB devices, and require a usb library to access.\nBayer Contour\nlsusb\nBus 002 Device 008: ID 1a79:6002 Bayer Health Care LLC\n\n\nImplemented by\nglucodump.\nIncludes a block storage device.\nAdvertises as an HID device.\nsyslog\nJun  1 11:35:58 paragon kernel: [31023.517052] usb 2-2.2: USB disconnect, device number 6\nJun  1 11:36:53 paragon kernel: [31078.713849] usb 2-2.2: new full-speed USB device number 7 using uhci_hcd\nJun  1 11:36:54 paragon mtp-probe: checking bus 2, device 7: ""/sys/devices/pci0000:00/0000:00:11.0/0000:02:00.0/usb2/2-2/2-2.2""\nJun  1 11:36:54 paragon kernel: [31078.946724] generic-usb 0003:1A79:6002.000E: hiddev0,hidraw2: USB HID v10.10 Device [Bayer HealthCare LLC Contour USB] on usb-0000:02:00.0-2.2/input0\nJun  1 11:36:54 paragon mtp-probe: bus: 2, device: 7 was not an MTP device\n\nusb-devices\nT:  Bus=02 Lev=02 Prnt=03 Port=01 Cnt=02 Dev#=  7 Spd=12  MxCh= 0\nD:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1\nP:  Vendor=1a79 ProdID=6002 Rev=01.00\nS:  Manufacturer=Bayer HealthCare LLC\nS:  Product=Contour USB\nS:  SerialNumber=0000000002902076\nC:  #Ifs= 2 Cfg#= 1 Atr=80 MxPwr=500mA\nI:  If#= 0 Alt= 0 #EPs= 2 Cls=03(HID  ) Sub=00 Prot=02 Driver=usbhid\nI:  If#= 1 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=usb-storage\n\n\nSee [ubuntu_sys_bus_usb.markdown] and [pci_tree.markdown].\n$ find /dev/hid*\n/dev/hidraw0\n/dev/hidraw1\nbewest@paragon:~/src/decoding-bayer$ \n\nNextLink\nDifferent device, no block storage\nSOCAT\nWhat\'s the easiest way to provide socat with an interface to read/write data\nfrom configured USB endpoint?\nHow to configure endpoint in python, connect it to one of:\n\nunix domain socket\ntcp port\nserial device/pty/tty\nloopback example\n\nI had thinking to re-use the\nmail.sh,\nand\nftp.sh examples\n\nhttp://www.tldp.org/LDP/abs/html/ioredirintro.html\nhttp://stackoverflow.com/questions/11030766/one-virtual-serial-port-with-socat\nhttp://stackoverflow.com/questions/2174071/how-to-use-dev-ptmx-for-create-a-virtual-serial-port\nhttp://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES\n\nThe reason I\'d like to do all this is to connect the usb device to a\nserver implementation like this:\n\nhttps://github.com/bewest/insulaudit-ssh-tools\n\nkernel\n\nhttp://www.linux-usb.org/USB-guide/x75.html\nhttp://code.activestate.com/recipes/576834-interrogating-linux-devusbhiddev0-in-python/\nhttps://www.kernel.org/pub/linux//kernel/people/marcelo/linux-2.4/Documentation/usb/hiddev.txt\nhttp://www.linux-usb.org/USB-guide/x194.html\nhttp://www.linux-usb.org/USB-guide/x173.html\nhttp://www.linuxjournal.com/article/6573?page=0,1 - example usbserial device driver\nhttps://www.kernel.org/doc/Documentation/usb/proc_usb_info.txt\nhttps://www.kernel.org/pub/linux//kernel/people/marcelo/linux-2.4/Documentation/usb/hiddev.txt\nhttp://www.linux-usb.org/gadget/usb.c\nhttp://www.linux-usb.org/gadget/\nhttp://www.linux-usb.org/usb.devices.txt\nhttp://www.linuxjournal.com/article/6434?page=0,1 - usb serial drivers explained\n\nBecause the Bayer advertises itself as an HID type, linux fails to hook it up\nto usbserial for the generic serial adapter?\nA simple kernel driver could fix this?\n1359\n'], 'url_profile': 'https://github.com/bewest'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Neural_network_for_pima_dibeties\nDetecting diabetes using Neural Networks and\xa0keras for tutorial click here.\n'], 'url_profile': 'https://github.com/khotveer'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['diabetes\nThis repository contains the code developed during the ""Diabetes"" project.  Purpose of this project is: (i) to help people with diabetes have a better life quality, (ii) to help physicians that work with people that have diabetes specialize on the needs of their patients, and (iii) to help people with metabolic syndrome get a better lifestyle, acquire knowledge about food and exercise in order to help them to avoid becoming diabetics.\nUsers readme\nIn [users readme] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/READMEusers.pdf) you may see the readme file that is intended for the users (a small manual of our application).\nDevelopers readme\nIn [developers readme] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/READMEprogrammers.pdf) you may see the readme file that is intended for the developers (this part is referring to the database and nutrition table parts, that are not thoroughly described in the wiki pages of the project, where the technical documentation lays).\nFor more technical information about this project visit Wiki pages.\nAbout\nThis project was developed by: Petros Manousis (pmanousis@gmail.com), Thanos Pappas (thanospappas0@gmail.com), Mikela Kakarantza (mikela.kakarantza@gmail.com), and Giorgos Zachos (gzzachos@gmail.com).\nSpecial thanks to: Dr. Vasileios Tsimichodimos for his help and advice.\nDeliverables\nThe links that follow have the source code of the files that implement the deliverable parts.\n\n[Deliverable 1] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/src/com/example/diabetes/MainActivity.java)\n[Deliverable 2] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/src/com/example/diabetes/Nutrition.java)\n[Deliverable 3] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/src/com/example/diabetes/WorkoutActivity.java)\n[Greek translation] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/res/values-el/strings.xml)\n[English translation] (https://github.com/ellak-monades-aristeias/diabetes/blob/master/res/values/strings.xml)\n\n'], 'url_profile': 'https://github.com/ellak-monades-aristeias'}"
"{'location': 'Hangzhou, China', 'stats_list': [['9', '          followers'], ['13', '          following'], ['62']], 'contributions': '0 contributions\n        in the last year', 'description': ['Background\nIt was reported that in 2011 more than 3.3 million patients were readmitted in the US within 30 days of being discharged, and they were associated with about $41 billion in hospital costs. The need for readmission indicates that inadequate care was provided to the patient at the time of first admission. The readmission rate has become an important metric measuring the overall quality of a hospital.\nDiabetes is the 7th leading cause of death and affects about 23.6 million people in the US. 1.4 million Americans are diagnosed with diabetes every year. Hospital readmission being a major concern in diabetes care, over 250 million dollars was spent on treatment of readmitted diabetic patients in 2011. Early identification of patients facing a high risk of readmission can enable healthcare providers to conduct additional investigations and possibly prevent future readmissions.\nIn this project, I build a machine learning classifier model to predict diabetes patients with high risk of readmission. Note that higher sensitivity (recall) is more desirable for hospitals because it is more crucial to correctly identify ""high risk"" patients who are likely to be readmitted than identifying ""low risk"" patients.\nPlease open the Jupyter Notebook file to see the details.\nDataset Description\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes 50 features representing 101766 diabetes patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria:\n\nIt is an inpatient encounter (a hospital admission).\nIt is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\nThe length of stay was at least 1 day and at most 14 days.\nLaboratory tests were performed during the encounter.\nMedications were administered during the encounter.\n\nThe data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\nSource: UCI Machine Learning Repository, https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\n'], 'url_profile': 'https://github.com/swengzju'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""\nAMPATH POC\nAMPATH POC is a point of care system used by AMPATH clinics. It provides real-time access to electronic medical records allowing patient records to be accessible during patient-clinician interactions. It also offers clinical decision support via automated reminders, lab integrations, clinic dashboards as well as data analytics and reporting.\nAMPATH POC works in conjunction with AMPATH ETL and AMRS (AMPATH Medical Records System), a web-based open-source medical records system. It is being used against OpenMRS v2.1.2 in production but it should be compatible with older versions of OpenMRS.\nSetting up a Dev Environment\nPrerequisites\nSystem Requirements\nRecommended setup:\n\nInstall chrome.\nInstall and setup git on your local machine.\nInstall npm and nodeJS.\nInstall visual studio code.\n\nSetup\nAfter you've made sure to have the correct things setup, you should be able to run a few commands to get set up:\ngit clone https://github.com/AMPATH/ng2-amrs.git\ncd ng2-amrs\nnpm install\n\nRunning the app\nTo get the app up and running locally, run:\nnpm start\n\nFire up your chrome and go to https://localhost:3000. You should see a login screen with the AMPATH logo.\nRunning tests\nnpm test\n\nThis command will build the app and launch the Karma test runner. Karma should spin up several chrome browser instances (equal to the number of cores on your machine) and run the test specs in parallel the specs across them.\nCommunication and management\nThere are a few tools that we use extensively that all AMPATH developers should have set up:\n\nJIRA for tracking bugs and project management.\nSlack for project-specific group chats.\nAMRS is AMPATH's medical records system. You'll need an AMRS account for use with a lot of AMPATH's internal tools, including AMPATH POC.\n\nAccess to these platforms is managed by the AMPATH IT team.\n""], 'url_profile': 'https://github.com/AMPATH'}","{'location': 'Toronto, Canada', 'stats_list': [['79', '          followers'], ['9', '          following'], ['17']], 'contributions': '731 contributions\n        in the last year', 'description': [""Building a Binary Classification ML Model to Predict Hospital Readmission in Patients with Diabetes\nThis is an introductory workshop to data science using Python. We'll be\nbuilding a binary classification model to predict hospital readmission\nin patients with diabetes. A large focus will be on data pre-processing,\nwhich is a key part of the machine learning pipeline.\nKey topics include:\n\nExploratory data analysis\nData cleaning\nFeature selection\nSupervised learning\nBinary classification\nHyperparameter tuning\n\nWe'll be using these packages to do our analysis:\n\npandas\nnumpy\nmatplotlib\nseaborn\nscikit-learn\n\nOur dataset\nis from the UCI Machine Learning Repository which includes patient and hospital outcome\ndata from 130 U.S. hospitals collected from 1999 to 2008.\nWorkshop slides are hosted here.\nGetting Started\nThere are two options for setting up your environment:\n\nOn your local machine\nOn the cloud using Google Colab\n\nIf you're relatively new to Python and programming, we highly recommend starting with the cloud option which doesn't require any setup. The only requirement is a Gmail account.\nIf you decide to run the tutorial on your local machine, make sure that your environment is running on Python 3.6+ and has Jupyter notebook installed. You will need to install several pacakges which can be found in requirements.txt.\npip install -r requirements.txt\n\nThe detailed walkthrough can be found here. You can follow along with the fill-in-the-blank version here.\n""], 'url_profile': 'https://github.com/topspinj'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Hubot Diabetes\nA diabetes script package for Hubot\n\nInstallation\nRun npm install --save hubot-diabetes\nAdd hubot-diabetes to your external-scripts.json:\n[""hubot-diabetes""]\nSample Interaction\n<awaxa> 90\n<diabot> 90 mg/dL is 5 mmol/L\n<awaxa> 5.0\n<diabot> 5.0 mmol/L is 90 mg/dL\n<awaxa> i was _90_ this morning\n<diabot> 90 mg/dL is 5 mmol/L\n<awaxa> i was _5.0_ this morning\n<diabot> 5.0 mmol/L is 90 mg/dL\n<awaxa> diabot: estimate a1c from average 90\n<diabot> an average of 90 mg/dL or 5.0 mmol/L is about 4.8% (DCCT) or 29 mmol/mol (IFCC)\n<awaxa> diabot: estimate a1c from average 5.0\n<diabot> an average of 90 mg/dL or 5.0 mmol/L is about 4.8% (DCCT) or 29 mmol/mol (IFCC)\n<awaxa> diabot: estimate average from a1c 4.8\n<diabot> an A1C of 4.8% (DCCT) or 29 mmol/mol (IFCC) is about 91 mg/dL or 5.1 mmol/L\n<awaxa> diabot: estimate average from a1c 29\n<diabot> an A1C of 4.8% (DCCT) or 29 mmol/mol (IFCC) is about 91 mg/dL or 5.1 mmol/L\n\n\nSources\n\nTwelveBaud/diabot-plugins\nADA average glucose estimation\nWikipedia: Glycated hemoglobin\n\nMany thanks to JJ Asghar for all his help and advice!\n'], 'url_profile': 'https://github.com/hubot-scripts'}","{'location': 'Zhejiang,China', 'stats_list': [['45', '          followers'], ['56', '          following'], ['224']], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zhangtianle'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['__Important note to portal developers and sysops __\n__ The code requires the incorporation of a private configuration file, as described below in the section titled ""Configuration"".  The code\nmay compile correctly without private configuration files, but it will not run in any of the following configurations:\n\ndebug mode for development\ntest mode, for running unit, integration, or functional tests\ngenerating a war file for the purposes of deployment\nrunning that war file on your target server\nMore information is provided down below (see the ""configuration"" section in this README file)__\n\nDiabetes portal\nThe diabetes portal is written in Grails. The following description should give you all the information you need to download, compile, and run a local version of the portal.\nTable of Contents:\n\nEnvironment Set up your environment for running a Grails based project\n Get the code Download the code from GitHub\n TestingRun some pre-packaged tests to make sure your environment  is in good shape\nRun the portalStart up the diabetes portal and run it locally\n\nEnvironment\nThe following steps should give you a working development environment:\nInstall Java\n\nGoogling “download Java jdk” should take you where you need to go. The same command brought me to this \nURL\nfrom which I successfully downloaded Java.\n\n\nNote that you will need the whole Java development toolkit (JDK), not simply the Java runtime environment (JRE).\nAs far as versions, I have successfully compiled this program both under Java 6 and Java 7 (I haven\'t yet tried Java 8).\n\n\nOnce you’ve downloaded Java you should run the installer.  Make sure that one way or another you end up with an environmental variable named “JAVA_HOME” which points\nat the base directory of your JDK.\nI usually perform this assignment inside my .bash_profile with a few lines that look like this:  \n\nJAVA_HOME=/cygdrive/c/java7\nPATH=$JAVA_HOME/bin:$PATH\nexport JAVA_HOME\n\nOther approaches to defining an environmental variable are fine too.  Simply make sure that if you type:\n\necho $JAVA_HOME\n\nthat you see the directory you expect to see.    The critical test of your success  in this step, however, is  typing\n\njava -version\n\nwhich should report  the version of your Java runtime environment.\n\nInstall GVM\n\nThere’s a tool called GVM that can do most of the rest of the installation work for you.  You can find that tool at the following URL http://gvmtool.net/.\nYou start by installing GVM, which has only two dependencies, namely ‘curl’ and ‘unzip’.  These are essential-- if you don\'t have them installed then you cannot\nproceed with GVM.  To be sure you can certainly install grails without GVM if you like.  Check the instructions here.\n\nProvided that you want to proceed with GVM, use the following command line evocation:\n\n curl -s get.gvmtool.net | bash\n\n   Once this line runs successfully the rest of the install becomes pretty easy.\n\nInstall Grails\n\nwith GVM in place installing grails should consist of exactly one line:\n\ngvm install grails 2.4.3\n\n\nOnce this command completes successfully you should be able to run the following command from the command line (Note the extra - that the analogous Java command does not require):\n\ngrails –-version\n\n\nand you should see a response that indicates that grails is working and running  the version number you requested\n\n\nA quick note for Mac users: homebrew also provides an easy approach to perform the Grails installation.  And while we\'re on the topic\ninstalling Grails by hand is also quite easy.  You download the package and set a GRAILS_HOME environmental variable and you\'re all set.\n\nInstall Groovy\n\nNot strictly necessary (since grails comes  with its own version of groovy built-in) but you may as well having come this far\n\ngvm install groovy\n\n\nIf your Groovy installation  completed successfully then the following command will tell you that Groovy is running\n\ngroovy --version\n\n\nTo be clear, you can run grails without  installing Groovy explicitly.  If you do install Groovy explicitly, however, then you can begin writing programs\nin straight up Groovy as well, which has its own attractions.\nGroovy is a really fun language with lots of possibilities. Check out the documentation  here\n\nGet the code\n\nNow it’s time to pull down the code from the repository. Provided that you have already installed a git client this can be accomplished with one line\n\ngit clone git@github.com:broadinstitute/dig-diabetes-portal.git\n\n\nGit will create a new directory called dig-diabetes-portal.  Change your current working directory and then you will be ready to start building the system.\n\n\nWhile your cloning repos note that both  Groovy and Grails have their own repo, and that you can download the source code for either or both languages.  Each\nof these repos is instructive and worth going through, especially if you get stuck somewhere along the way.  For the record, note that Groovy is\nwritten mostly in Java (though there is currently a project underway to  rewrite Groovy in Groovy).  Grails, by comparison, is written\nmostly in Groovy.\n\nTesting\n\nA good place to start might be with running the tests. You can run the unit tests with the following command: \ngrails test-app unit:\n\nYou can run integration tests with this command:\ngrails test-app integration:\n\nSkipping the \'unit\' or \'integration\' specification will cause the entire test suite to run. Conversely adding a class name\nto the end of one of the earlier commands  will allow you to run  only a single test.\nRun the portal\n\nOnce you have demonstrated that you can run both tests to completion you can be reasonably confident that your environment is in good \nshape and that you are ready to run the portal. The command looks like this: \ngrails run-app\n\nthis command should be all you need to start a running application from the command line.  If you\'d like to do some development, however,\nyou will probably want to import the project into an IDE.  I like IntelliJ, though there is also\nan active community of Grails developers\nwho use eclipse.   If you would like to prepare your project  for an IDE then there is a grails command for that.  To open\nup the project in IntelliJ, for example, the command is:  \ngrails integrate-with --intellij\n\nwhich will generate an ""*.ipr"" file along with everything else you need to open the fully functional project under  IntelliJ\n\nIf you want to now deploy a  the portal you would need to use grails to create a WAR file that you could\nthen the handoff to a suitable servlet container  such as Apache or Tomcat.  The grails command necessary to create a war file by hand is:\ngrails war\nIn order to increase consistency a bash script exists to build war files.  This script is named \'gpw\', and it passes\na few parameters in as the war is created making the resulting executable easier to track.  To run this script\nenter the following command from a bash-aware command prompt:\n./gpw nameForThisVersion\nNote that this script performs a \'git rev-parse HEAD\' in order to determine your current git repo version, so your\ncommand line interface needs to recognize \'git\'.\nConfiguration\nWhile the diabetes portal is open source at its core, there are a few keys ( mostly relevant to authentication and\nservices we pay for) which need to remain secret. As well, you may choose to override some of the default values\nutilized by the portal during compilation. In both cases you\'ll need to utilize a private configuration file\nthat is stored somewhere on a local disk. The portal is looking for such a private configuration file. To determine\nthe directory that should hold your private config, try running the above \'gpw\' command and watch the resulting\nconsole output to find a line that look something like this:\n>>>>>>>>>>>Note to developers: config files may be placed in the directory  = /Users/ben/.grails/dig-diabetes-portal\nThis line will tell you where on disk to store your private configuration file. In that directory you may then\ncreate a file  named \'dig-diabetes-portal-commons-config.groovy\'.  This file will now be read in by grails\nduring the compilation phase, and any values listed in this file will override those listed in the portals\ndefault configuration file (named Config.groovy).  Any values not explicitly overridden will retain their default values.\nYou will know that you have created a personal configuration file in the right place and with the right name if you see   lines similar to the following when you compile the portal using gpw.\n\\*\\* !! config override is in effect !! \\*\\*\n\\!\\!\\!\\!\\! file:/Users/ben/.grails/dig-diabetes-portal/dig-diabetes-portal-commons-config.groovy !! **\nNote that a personal configuration file will (very) soon become mandatory, and that this file will need to contain\nat a minimum the following line:\noauth.providers.google.api.secret = \'xxxxxxx\'\nwhere xxxxxxx represents our Google OAuth secret key.  For developers working on the diabetes portal in\nthe Medical Population Genomics department at the Broad Institute then please see me (ba) for our current key.\nOtherwise set up your own authorization secret key with Google and replace xxxxxxx with your number.\nSpecial note: if you don\'t create the above configuration file, or else if you put it in the wrong place then\ntwo things will happen:  first, during compilation the Grails code will give you a polite, comprehensible message\nindicating that you did not supply a configuration file. That message will Show up on your console, and should\nlook something like this:\n\\*\\* No config override  in effect \\*\\*\nas well, Grails will error out without running, and will provide a long and barely comprehensible error message\nthat starts out looking like this:\nError |\nFatal error running tests: Error creating bean with name \'grails.plugin.databasemigration.DbdocController\': \nInitialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: \nError creating bean with name \'instanceControllerTagLibraryApi\': \nInjection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: \npublic void org.codehaus.groovy.grails.plugins.web.api.ControllerTagLibraryApi.setTagLibraryLookup(org.codehaus.groovy.grails.web.pages.TagLibraryLookup); \nnested exception is org.springframework.beans.factory.BeanCreationException: \nError creating bean with name \'gspTagLibraryLookup\': \nInvocation of init method failed; \nnested exception is org.springframework.beans.factory.BeanCreationException: \nError creating bean with name \'grails.plugin.springsecurity.oauth.SpringSecurityOAuthTagLib\': \nInitialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: \nError creating bean with name \'oauthService\': \nInvocation of init method failed; nested exception is java.lang.IllegalStateException: \nMissing oauth secret or key (or both!) in configuration for google. (Use --stacktrace to see the full trace)\n.Tests FAILED \n|\nSo if you see the above message, look to see if you have a configuration file, if it is in the right place, and if\nit contains the right values.\nDevelopment tools:\nCode coverage\n```bash\n grails test-app -coverage\n```\nand see ./target/test-reports/cobertura\nAutomated code Checker\n```bash\n grails codenarc\n```\nand find your summary report in ./target/CodeNarcReport.html\nCI system and version promotion\nWe have a process to move from code push to production deploy. It looks like this:\n\n 1)every time a developer pushes code:\n1.1) the CI system pulls the latest code from Git on the master branch\n1.2) the system runs all the unit and integration tests. IF they pass then\n1.3) CI deploys, and gives that version a CI Git tag. Then…\n2) every morning at 2 AM\n2.1) the tag describing last successfully deployed CI version is pulled from Git\n2.2) the system runs all the unit and integration tests. IF they pass then\n2.3) DEV deploys, and gives that version a DEV Git tag.\n2.4) developers(and potentially testers) look at the deployed DEV system, and decide whether they like it. If they do then eventually…\n3) a developer goes to the Jenkins project named \'MANUAL-deployedToQA\'\n3.1) the developer goes in with the name of a DEV tag in hand. The developer chooses that tag from the drop-down list, then presses the \'Build\' button\n3.2) the system runs all the unit and integration tests. IF they pass then\n3.3) the system BRANCHES the code, and deploys that branch to QA\n3.4) developers look at the system themselves, but also request the attention of testers/internal-users to see if this system is acceptable. If it is then...\n4) a developer goes to the Jenkins project named \'MANUAL-deployedToProd\' (hopefully during nonpeak hours)\n4.1) the developer goes in with the name of a QA branch in hand. The developer chooses that branch name from the drop-down list, then presses the \'Build\' button\n4.2) the system runs all the unit and integration tests. IF they pass then\n4.3) the system BRANCHES the code again, and deploys that branch to PROD\n5) and, as necessary...\n5.1) someone finds a critical bug that can\'t wait for the next iteration.  A developer checks out the branch currently running on prod and fixes the problem.\n5.2) the developer checks in the fix.  Since it isn\'t on the master branch it doesn\'t enter the CI system, so test carefully!\n5.3) tag your version by hand.\n5.4) Then follow steps (4) above to deploy the revised code\n5.5) Don\'t forget to merge your version back into the master branch before the next iteration begins!\n\ndone. Code has been deployed to PROD.\nNote: This entire process should be completed once per iteration (or more, if any problems are discovered after the deployment). This deployment should happen at least a\ncouple of days before the user group, so that the group can help take a look at the newly minted production code.\nInstall Jenkins Server\neg\nmake install JENKINS_HOME=/humgen/diabetes/portal/dig-jenkins/test_server/home/\ncreates log in $JENKINS_HOME/Jenkins_${JENKINS_PORT}.log\n'], 'url_profile': 'https://github.com/broadinstitute'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['18']], 'contributions': '2 contributions\n        in the last year', 'description': ['糖尿病知识图谱数据\n一、数据来源\n该数据来源于天池竞赛平台，链接地址：https://tianchi.aliyun.com/dataset/dataDetail?spm=5176.12281978.0.0.7592412fAyjFC6&dataId=22288\n要获取原始数据请到天池平台下载。\n实体类型有：\n\n疾病相关：\n\n\n疾病名称 (Disease)，如I型糖尿病。\n病因(Reason)，疾病的成因、危险因素及机制。比如“糖尿病是由于胰岛素抵抗导致”，胰岛素抵抗是属于病因。\n临床表现 (Symptom)，包括症状、体征，病人直接表现出来的和需要医生进行查体得出来的判断。如""头晕"" ""便血"" 等。\n检查方法(Test)，包括实验室检查方法，影像学检查方法，辅助试验，对于疾病有诊断及鉴别意义的项目等，如甘油三酯。\n检查指标值(Test_Value)，指标的具体数值，阴性阳性，有无，增减，高低等，如”>11.3 mmol/L”。\n\n\n治疗相关：\n\n\n药品名称(Drug)，包括常规用药及化疗用药，比如胰岛素。\n用药频率(Frequency)，包括用药的频率和症状的频率，比如一天两次。\n用药剂量（Amount），比如500mg/d。\n用药方法（Method）：比如早晚，餐前餐后，口服，静脉注射，吸入等。\n非药治疗(Treatment)，在医院环境下进行的非药物性治疗，包括放疗，中医治疗方法等，比如推拿、按摩、针灸、理疗，不包括饮食、运动、营养等。\n手术（Operation），包括手术名称，如代谢手术等。\n不良反应（SideEff），用药后的不良反应。\n\n\n常规实体：\n\n\n部位（Anatomy），包括解剖部位和生物组织，比如人体各个部位和器官，胰岛细胞。\n程度（level），包括病情严重程度，治疗后缓解程度等。\n持续时间(Duration)，包括症状持续时间，用药持续时间，如“头晕一周”的“一周”。\n\n关系类型\n实体关系类别名称\n\n检查方法 -> 疾病（Test_Disease）\n临床表现 -> 疾病（Symptom_Disease）\n非药治疗 -> 疾病（Treatment_Disease）\n药品名称 -> 疾病（Drug_Disease）\n部位 -> 疾病（Anatomy_Disease）\n用药频率 -> 药品名称（Frequency_Drug）\n持续时间 -> 药品名称（Duration_Drug）\n用药剂量 -> 药品名称（Amount_Drug）\n用药方法 -> 药品名称（Method_Drug）\n不良反应 -> 药品名称（SideEff-Drug）\n\n二、数据规模\n数据经过处理后有15778个实体，40060个关系\n三、数据集说明\n\n在diabets_kg_data文件夹下面有两个文件夹，分别是cate_ent(实体文件夹)，cate_rel（关系文件夹），文件都是CSV类型\n实体文件夹下面的15个文件，分别对应每种实体类型，每个文件有三列ent_id,ent_name,category，分别是实体ID,实体名称，实体类别\n关系文件夹下面有10个文件，分别对应每种关系类型，每个文件有三列from,to,rel，分别是头节点实体，尾节点实体和实体关系类型\n\n'], 'url_profile': 'https://github.com/luluforever'}","{'location': 'Stanford, CA', 'stats_list': [['11', '          followers'], ['1', '          following'], ['17']], 'contributions': '37 contributions\n        in the last year', 'description': ['Diabetes Classification with Scikit-Learn\n\nThis is an example of a Datmo model which uses a dataset of patient attributes and predicts the likelihood of a patient having diabetes\nYou can take a look at the Dataset details here\nCheck out the Snapshots tab above for information on snapshots that were taken with various parameters. Search and filter them to find the best ones.\nClone this model on your local machine with the Datmo CLI\n$ datmo clone shabazp/diabetes-classification\n\nFirst you can check out all of the snapshots that have already been created by the user. This is equivalent to checking out the snapshots tab on Datmo except without the search and filter capabilities available on the GUI.\n$ datmo snapshot ls \n\nOnce you have viewed all of the existing snapshots, you can start by running an experiment by simply running the code below which runs the fraud detection training code.\n$ datmo task run ""python regression.py""\n\nCreate your first snapshot, by running the following command\n$ datmo snapshot create -m ""my first snapshot""\n\nFor reference, here are few more quick details about what you can find in the repository.\nDockerfile: this is meant to keep track of your environment. For example, this Dockerfile ensures that our environment has all of the requirements needed to run our model. You can manage, edit, and create new enviroments with the datmo env command. Each session you create with datmo will have a default environment associated with it.\n\nThe commands and quick reference above is by no means meant to be comprehensive. Please refer to the CLI documentation for more details on the various Datmo commands to use and file structures present in Datmo.\nHappy Building :)\n'], 'url_profile': 'https://github.com/shabazpatel'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['4']], 'contributions': '70 contributions\n        in the last year', 'description': ['GlucoseTray\nTray Icon for displaying current BG information in taskbar.\nFeatured at: https://www.deebee.it/?p=18480&lang=en\nUpdate the config file with your Dexcom credentials and run the application.  Ensure you go into your taskbar icon settings and ensure it\'s set to always display the GlucoseTray app.\nAlways verify the time of the last reading by hovering over the tray icon or clicking it.  Should it crash, the icon may stay in the taskbar but stop updating.\nAlways check with your DexCom reader before making any treatment decisions.\nStep-by-step Instructions: \nOpen appsettings.json in your text editor and set your desired values there.  Most important settings are to configure if you are using Nightscout or Dexcom as data source and to enter your site url (NightScout) or credentials (Dexcom).\nHighBg displays yellow. \nDangerousHighBg displays red. \nLowBg displays yellow. \nDangerousLowBg displays red. \nCriticalLowBg displays as ""DAN"" for DANGER. \nNormal blood glucose displays as white. \nOut-of-date readings are shown with a strikethrough effect. \nFeatures: \n-Color coded glucose numbers set to your ranges. \n-See latest glucose reading in taskbar.  Also get time of reading and trend on hover or double-click. \n-Context Menu option to open up your Nightscout url in browser. \n-Option to start application on system startup. \n\nIf missing configuration file, get a new copy at https://github.com/Delubear/GlucoseTray\n'], 'url_profile': 'https://github.com/Delubear'}","{'location': 'NONE', 'stats_list': [['11', '          followers'], ['1', '          following'], ['0']], 'contributions': '6 contributions\n        in the last year', 'description': ['fundus-diabetes-detection\nKaggle Diabetic Retinopathy Detection\nData Preprocessing\nThe image size was resized to 256x256 and 512x512.\nFor very deep models like the recent Deep Residual Network by MSRA (http://arxiv.org/abs/1512.03385), 256x256 images were used due to GPU memory constraints. For other models, 512x512 images were used.\nOversampling\nThe data labels are highly unbalanced. For a more stable training, oversampling was done to balance the class labels (approximately uniform distribution). Oversampling should be stopped in the later part of the training to avoid overfitting the ""rare"" classes.\nTrain/Validation Split\n90%/10% stratified random split using sklearn package.\nMulti-Threaded Data Loading and Realtime Data Augmentation (Multiprocessing)\nImage batch is prefetched into a queue before being loaded onto GPU.\nWhile being prefetched, data is normalized and randomly augmented (rotate, flip, scale, shear) toavoid overfitting. In test time, the images are only rotated randomly.\nPairwise Merging of Features\nThere are two images per patient (left eye / right eye). To take this fact into account, the dense representations of the two eyes after the convolutional layers are concatenated before the last two fully-connected layers.\nIdeas Tried\n\nDropout\nAll Convolutional Network (http://arxiv.org/abs/1412.6806)\nMultitask Learning (Optimizing for both classification and regression task)\nDeep Residual Network (http://arxiv.org/abs/1512.03385)\nMaxout Network (http://arxiv.org/abs/1302.4389)\nBatch Normalization (http://arxiv.org/abs/1502.03167)\nLeaky ReLU (http://arxiv.org/abs/1505.00853)\n\n'], 'url_profile': 'https://github.com/Seth-Park'}"
"{'location': 'São Paulo, SP Brasil', 'stats_list': [['518', '          followers'], ['92', '          following'], ['36']], 'contributions': '30 contributions\n        in the last year', 'description': ['Diabetes Mais Doce\nAplicativo para ajudar pessoas diabéticas a buscar quantidade de carboidratos de alimentos, salvar refeições e glicemias diárias, gerar tabelas com esses resultados para médicos, entre outras coisas. A ideia é facilitar o dia a dia de uma pessoa diabética :)\n'], 'url_profile': 'https://github.com/FernandaBernardo'}","{'location': 'San Francisco, CA', 'stats_list': [['6', '          followers'], ['4', '          following'], ['7']], 'contributions': '0 contributions\n        in the last year', 'description': [""README\nDISCLAIMER: The Glucosy site is intended to provide general information only - it is not to be relied upon for medical advice. The content of the site is not intended to be a substitute for professional medical advice, diagnosis or treatment. Do not disregard your doctor's instructions, or delay in seeking medical attention because of any information provided by Glucosy.\nOverview\nThe Glucosy app was built to assist those those diagnosed with Type 1 Diabetes, manage their blood sugar levels more effectively.\nGems, Libraries and Add-ons\n\nForecastIO (weather API)\nHeroku scheduler (background task scheduling)\nMandrill (automatic emailing)\nNutritionix (nutrition information API)\nGeocoder (API)\nDropzone (upload files via drag 'n' drop in browser)\nChartjs (charts)\nCarrierwave (file upload)\nBootstrap (design and styling)\njQuery (library)\nHandlebars (library)\nUnderscore (library)\n\nDatabase\nActiveRecord and Postgres are used to manage the database. If you would like to setup your own instance of the site, use 'rake' to create and migrate the database.\nPrimary Functionality\nUsers have the ability to upload data from their digital blood sugar monitor, and review this data in chart format.\nThe site also provides information on the carbohydrate content for more than 300,000 food items. A calculator also produces an estimate of the amount of insulin required to offset the carbohydrates in a meal, based on the user's input of foods that comprise the meal.\nRegistered users are sent daily weather updates via email, with details on any significant temperature changes that are forecast over the coming week. The location for the forecast will be the location from where the user last logged into the site.\nBugs\nCurrently, we are unaware of any bugs in the code. If you happen to stumble across a bug or fault, please contact us via github.\nThanks and Acknowledgements\nAs always, the team would like to thank Joel and Jack for the blood, sweat and tears they gave during project week. You guys were instrumental in helping us achieve our goal and making the site a success. Special mention to James Gregory of ThoughtWorks, who so generously provided his extremely valuable time, thoughts and guidance throughout the project. Naturally, huge thanks and applause must go to Bishin, Sox, Tom and Xander, who sacrificed sleep and put their lives on hold for a week to make that the project was delivered on time. Good work team!!\n""], 'url_profile': 'https://github.com/xandero'}","{'location': 'Planet Earth', 'stats_list': [['4', '          followers'], ['0', '          following'], ['0']], 'contributions': '36 contributions\n        in the last year', 'description': ['\n\n\ntitle\nauthor\ndate\noutput\n\n\n\n\nType-2 Diabetes Treatment Pathways\nRohit Vashisht\n3/23/2017\nhtml_document\n\n\n\nLearning Effective Clinical Treatment Pathways for Type-2 Diabetes from Observational Data.\nObjective:\nTreatment guidelines for the management of type-2 diabetes mellitus (T2DM) are controversial because existing evidence from randomized clinical trials do not address many important clinical questions. An earlier investigation led by Observational Health Data Science (OHDSI) group reveled heterogeneity in the practice of both first and second line treatment choices in T2D with respect to established clinical guidelines. The choice of an optimal second-line drug among available options (Sulfonylureas, DPP4-Inhibitors, Thiazolidinediones) remains ambiguous. In this study, we seek to compare Sulfonylurea, DPP4-Inhibitors, and Thiazolidinediones when prescribed after Metformin for outcomes related to reduction in HbA1c < 7%, events related to Myocardial Infarction, Kidney and Eye related disorders within OHDSI network.\nRationale:\nType-2 diabetes (T2DM) affects an estimated 29.1 million people in the United States. Its global prevalence is projected to reach 440 million adults by the end of 2030. Current treatment guidelines, which are derived from a few randomized controlled trials, recommend the use of metformin as first-line monotherapy. However, when metformin exhibits adverse effects or fails to control diabetes, the second line therapy must be chosen, and there is little consensus on how to choose a second line therapy; with the American Diabetes Association recommending sulfonylureas, meglitinide, pioglitazone or dipeptidyl peptidase 4 inhibitor (DPP4) as second-line agent, and the American Association of Clinical Endocrinologists recommending alpha-glucose inhibitors, DPP4 inhibitors and GLP-1 agonist. Given the availability of myriad treatment options for second-line therapy, the problem of selecting an optimal second-line agent requires urgent attention.\nProject Lead(s):\nRohit Vashisht, Ken Jung, Alejandro Schuler, Juan Banda, James Weaver, Martijin Schuemie, Patrick Ryan and Nigam Shah\nCoordinating Institution(s):\nStanford University\nStudy Protocol\nA detailed study protocol is provided in this repository with file name T2D_Study_Protocol.docx\nR-Package\nThis is an R package that can be used to execute T2D study. An in-depth discussion on the study design can be found at (link to protocol). Very briefly, the R-Package enables one to decipher effective treatment pathways of T2D in terms of controlling a) HbA1c b) less adverse events in terms of Myocardial Infraction c) less adverse events in terms of Kidney related disorders and d) less adverse events related to Eyes disorder. A step-by-step guide to execute this study is provided below:\nStep-1\nThe package can be installed as follows:\nlibrary(""devtools"")\ninstall_github(""rohit43/DiabetesTxPath"")\nStep-2\nMake sure you have installed all the latest versions of the following packages. The study might throw an error in case old packages are loaded.\nLoad the required libraries as follows:\nlibrary(""OhdsiRTools"")\nlibrary(""OhdsiSharing"")\nlibrary(""SqlRender"")\nlibrary(""DatabaseConnector"")\nlibrary(""FeatureExtraction"")\nlibrary(""CohortMethod"")\nlibrary(""EmpiricalCalibration"")\nlibrary(""DiabetesTxPath"")\nStep-3\nSetup your JBC driver environment and connection details as follows:\njdbcDrivers <- new.env()\nconnectionDetails <- createConnectionDetails(dbms = ""yourDatabase"", \n                                             server = ""yourServer"",\n                                             user = ""yourUserName"", \n                                             password = ""yourPassword"",\n                                             port = ""yourPort"")\nStep-4\nProvide database schema name and other details as follows.\ncdmDatabaseSchema <- ""nameOfYourCdmSchema""\nresultsDatabaseSchema <- ""nameOfResultsSchema""\ntargetDatabaseSchema <- ""nameOfResultsSchema""\n#----**********------\n#Make sure to add / at the end of results_path in case you don\'t have that otherwise no folder \n#will be created and the study might crash.\nresults_path <- ""path to results folder"" #where you want the results to be saved.\n#For example results_path <- ""/Users/rvashisht/Desktop/StudyResults/"" will save the\n#study results in StudyResults folder in Desktop.\n#----*********-------\ncdmVersion <- ""5"" #do not change this. Please note, this study can only be executed on CDMV5 \nmaxCores <- 40 #change this depending on your compute power.\nStep-5\nThe complete study can be executed with a single function as shown below. Please note, this function will run the study for all the 4 different outcomes a)HbA1c b)Myocardial Infraction c)Kidney Disease and d)Eyes related disorders considered in this analysis.The script to run the complete study is below:\nrunCompleteStudy(connectionDetails = connectionDetails,\n                 cdmDatabaseSchema = cdmDatabaseSchema,\n                 resultsDatabaseSchema = resultsDatabaseSchema,\n                 cdmVersion = cdmVersion,\n                 results_path = results_path,\n                 maxCores = maxCores)\nImportant\nThe runCompleteStudy function will create a folder deleteMeBeforeSharing.\nPlease do not share this folder. Make sure to delete this folder from your\nresults folder before sharing rest of the results.\nPackage the results as follows:\npackageResults(connectionDetails = connectionDetails, \n               cdmDatabaseSchema = cdmDatabaseSchema, \n               workFolder = results_path, \n               dbName = cdmDatabaseSchema)\nTime of execution can vary from few hours to day or two, depending on the size of the dataset you have.\n'], 'url_profile': 'https://github.com/rohit43'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['#Tidepool Dfaker\n\nDfaker is a command line tool that generates fake diabetes data. It is designed to fit Tidepool\'s data model description, creating data for any desired numbers of days. For a reference to the data model and the format specifications, click here. Running dfaker will generate a JSON-formatted file. An example data file, ran with the default settings can be found here. For further reference about dfaker, read the developer documantation here.\n#Set Up\nDfaker runs with python3. In addition, using the Anaconda scientific Python distribution is recommended as the easiest way of getting all project dependencies.\nThe anaconda installation for python3 can be found here.\nAlternatively, installing the following packages will work as well:\n\npytz\nnumpy\nstatsmodels\nnose\npandas\npatsy\npython-dateutil\nscipy\nsix\n\n#Credits\nThe implementation for the blood glucose model equation was based on a mathematics paper on blood glucose levels.\nCitation:\nEstela, Carlos (2011) ""Blood Glucose Levels,"" Undergraduate Journal of Mathematical Modeling: One + Two: Vol. 3: Iss. 2, Article 12.\nDOI: http://dx.doi.org/10.5038/2326-3652.3.2.12\nAvailable at: http://scholarcommons.usf.edu/ujmm/vol3/iss2/12\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'NONE', 'stats_list': [['109', '          followers'], ['0', '          following'], ['10']], 'contributions': '22 contributions\n        in the last year', 'description': ['The code6.py uses PCA with categorizing some features and uses Support Vertor Machine to get accuracy of 78.35%\nYou can run the code here https://www.kaggle.com/zubairahmed/d/uciml/pima-indians-diabetes-database/78-35-with-pca-and-svm\nThe code5.py uses PCA with categorizing some features and uses LogisticRegression to get accuracy of 77.92%\nThe code.py gives highest accuracy as given below using XGBoost\nThe updated code uses Xgboost to get highest accuracy of 79.63%\nAccuracy: 79.63%\nThresh=0.339, n=1, Accuracy: 75.93%\nThresh=0.193, n=2, Accuracy: 74.07%\nThresh=0.184, n=3, Accuracy: 74.07%\nThresh=0.157, n=4, Accuracy: 75.93%\nThresh=0.128, n=5, Accuracy: 74.07%\n\nThis code uses feature selection and then uses all classifiers to get highest accuracy using LR as below\nLogisticRegression-76.11%\nLDA-75.74%\nGaussianNB-74.81%\nQDA-74.07%\nRandomForestClassifier-72.78%\nAdaBoostClassifier-72.41%\nGradientBoostingClassifier-72.41%\nKNeighborsClassifier-70.00%\nDecisionTreeClassifier-63.70%\nSVC-62.04%\n\n\n\nKaggle Profile https://www.kaggle.com/zubairahmed\n'], 'url_profile': 'https://github.com/zubairahmed-ai'}","{'location': 'Changchun, Jilin', 'stats_list': [['8', '          followers'], ['30', '          following'], ['112']], 'contributions': '1 contribution\n        in the last year', 'description': ['TianChi Diabetes Game\n大赛网址：https://tianchi.aliyun.com/competition/introduction.htm?spm=5176.11165320.5678.1.5bed6d79KvOsxW&raceId=231638\nIntroduction\n天池精准医疗大赛，其分为三个阶段初赛、复赛和决赛。初赛的题目是针对2型糖尿病的回归问题，根据受检者的体检数据和临床信息对血糖值进行预测。复赛的题目是针对妊娠糖尿病的二分类问题，通过体检信息和基因信息预测出是否患有妊娠糖尿病。决赛是在现场进行答辩。\n本人是积极向上团队中的队员，积极向上团队再精准医疗大赛中取得了初赛top-11和复赛top-6的成绩。当前代码仓库仅仅包含了本人参赛中的思路和代码，当公布初赛结果时，我发现初赛预测结果比我们提交的效果更好，后来也没有仔细分析，仅仅把当时的代码稍微整理一下。团队复赛最终提交版的天池社区技术圈：https://tianchi.aliyun.com/forum/new_articleDetail.html?spm=5176.8366600.0.0.36a8311fxpFaJX&raceId=231638&postsId=4714。\nPath\nTianChi-Diabetes\n|\n|-- preliminary：初赛代码\n|\n|-- repecharge：复赛代码\nPreliminary\n\n预处理：矩阵补全技术SoftImpute填充缺失值、标准化、归一化\n模型：lightgbm\n调参：grid search\n关键：样本中存在两类数据（正常血糖值、高血糖值），通过分类方法找到高血糖值得样本，对其进行整体预测值提高，达到精准得效果。\n运行方式\n\n数据预处理：preprocesskma.py\n模型预测：kma.py\n\n\n\nRepecharge\n\n预处理：SNP基因位点信息与其余信息进行分别填充，SNP填0，其余信息通过SoftImpute填充。\n模型：lightgbm\n调参：grid search\n关键：模型融合,多次填充取均值。\n运行方式（程序运行较慢）\n\npreprocess3.py\nlgb.py\n\n\n\nprerequisites\n\nnumpy\npandas\nscikit-learn\nlightgbm\nfancyimpute\n\n'], 'url_profile': 'https://github.com/hekind'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""dPanc\nSelf Health Management dApp for Diabetes\nOverview\nWe wanted to tackle the initial challenge of being able to put medical data on the blockchain, and specifically data regarding type one diabetes. We are looking to give the average diabetic tools to better manage their health using a decentralized platform that stood objectively for their health, rather than the interests of the healthcare industry.\nThe existing medical prescription leaves a lot to be desired. Endocrinologists simply give their diabetic patients a linear equation that was interpolated from the patient’s recent medical data. But this linear equation ignores the fact that modern humans live very dynamic lives, and thus many diabetics self-prescribe their own tools and methods for dealing with the non-linear nature of the human experience.\nWe can bring engineers, diabetics, and health experts together to create an open sourced and decentralized diabetes management system. Through the analysis of medical data stored on an immutable ledger, we can provide the data to build these tools and iterate on them. We are confident that we can create dynamic models that can easily outperform the existing linear prescription, thus giving diabetics around the world more control over their health.\nWe would also like to explore an abstraction of this idea. The notion of individual people voluntarily providing their own data in order to help create a decentralized solution to a major world problem.\nPhilosophy\nWe believe that the burden of type one diabetes can be significantly reduced if patients were given the appropriate tools to manage their health. But the tools being prescribed by doctors are inadequate, and the centralization of these tools make changes slow and ineffective. If individual patients shared their medical data to support the creation of these decentralized tools, we can bring the ability to enact change to the people whom it will affect the most.\nWeb Application\n\n\nFull statistics in a dashboard on time weighted glucose averages\nThe dashboard also includes max velocity of the user's blood glucose, user's Hemoglobin A1c, and other statistics around the user's blood glucose values\nManage gas fees and any transaction with full MetaMask and uPort integration to allow the user to create an entry of data, retrieve analysis around their data, and eventually earn tokens for their data!)\nResearch pages to comparison metrics to benchmark your averages as well as description regarding what what the purpose of our work is as well as what the methodology is behind each of our analysis pieces.\nUpload page which consists of a form which has integrated with MetaMask initiating our smart contract to put the user's data onto the blockchain\n\nBackend Services & Processes\n\nParsing the CSV file containing the blood glucose values\nUtilizing OrbitDB to create a db for each entry of data\nWe are able to generate an entry and retrieve that entry which is on the blockchain\n\nContracts\n\nUtilized Solidity and Truffle to develop the smart contract where the user is uploading data to the blockchain\nRopsten Test Network is the test network where the smart contract is being substantiated\n\nFeatures\n\nMetaMask and uPort integration for registering users\nCalculate metrics and statistics for blood glucose levels:\n\nmin, max, and avg\nvelocity\n\n\nAnomaly detection through highlighting target ranges\n\nTech Stack\n\nNode.js & Express.js backend server\nReact.js frontend\nOrbitDB (IPFS) for data storage\nSolidity & Truffle for contract development and deployment\n\nData Flow\n\nNext Steps\nAs this was only a hackathon, there are still many improvements that can be made to dPanc (decentralized Pancreas)\nHere is a list of major improvements that we wish we had time to implement:\n\nBetter UI/UX design (we focused on building functionality as opposed to designing UI/UX)\nTokenization of dPanc and generating reward structure for users\nIncorporating advanced calculations around blood glucose and Hemoglobin A1c\nStrategizing our future of dPanc as an application programming interface.\n\nWhat We Learned\nAs this was our second project that incorporated blockchain, specifically Ethereum, as well as our first time utilizing OrbitDB, and we wanted to share the major accomplishments and learnings from this hackathon:\n\nHow the Ethereum network works when utilizing an IPFS database\nAcquiring data from a blood glucose monitor is easier than expected\nHemoglobin A1c is not an easily attainable metric for diabetics\n\nLocal Development\n\nnvm use\nyarn\nyarn start:dev\n\nYou'll need to make sure you have nvm installed and the proper version of node (9.X)\nInstalling nvm and the required version of node\n\nnpm install -g nvm\nnvm install 9\n\nContracts\n\ncd contracts && yarn\nyarn test:contracts\n\n""], 'url_profile': 'https://github.com/Blockternship'}","{'location': 'Toronto, canada', 'stats_list': [['96', '          followers'], ['0', '          following'], ['0']], 'contributions': '20 contributions\n        in the last year', 'description': ['Exploratory-Data-Analysis-and-Prediction-on-Diabetes-Dataset-using-R\nThis project first conducts Exploratory Data Analysis (EDA) and data visualization on the  diabetes dataset and then predict the disbetes using machine learning.\nDataset\nDiabetes data can be downloaded from\nhttp://biostat.mc.vanderbilt.edu/wiki/Main/DataSets?CGISESSID=10713f6d891653ddcbb7ddbdd9cffb79\nExploratory Data Analysis (EDA)\n\nDescriptive statistics\n\nattribute type, class distribution, mean, stadard deviation, median, quartile, Skewness, correlation\n\nData visualization\n\nHistogram plot\nDensity plot\nBox and Whisker plot\nBar plot\nMissing data map\nPair-wise correlation plot\nPrediction on Diabetes\nWe compare the performance for the following classifiers:\n\n\nLogistic Regression\n\n\nSupport Vector Machine (SVM)\n\n\nrandom Forest\n\n\n'], 'url_profile': 'https://github.com/Yifeng-He'}","{'location': 'Utrecht, NL', 'stats_list': [['22', '          followers'], ['8', '          following'], ['106']], 'contributions': '1,666 contributions\n        in the last year', 'description': ['Diabetes-App\nDiabetes android application for the diabetes app challenge UK\n'], 'url_profile': 'https://github.com/philleonard'}","{'location': 'Jamshedpur', 'stats_list': [['5', '          followers'], ['17', '          following'], ['48']], 'contributions': '0 contributions\n        in the last year', 'description': ['ML_from_Scratch\nDiabetes Mellitus Prediction using Machine Learning\n'], 'url_profile': 'https://github.com/AntimKhel'}"
"{'location': 'Russia, Armenia', 'stats_list': [['215', '          followers'], ['6', '          following'], ['52']], 'contributions': '662 contributions\n        in the last year', 'description': [""DEPRECATED!\nTHIS PROJECT IS CLOSED, PLEASE SEE A NEW VERSION OF CALCULATOR.\n\xa0\xa0\xa0\xa0\nBread Unit\nWhat is it?\nThis is a bread unit calculator for diabetics. My son has type 1 diabetes (T1D), so I created this small service for our family as well as for other people who live with this condition.\n1 bread unit (BU) corresponds to a quantity of food that contains 10-12 grams of digestible carbohydrates. Calculator converts quantity of particular food from grams to BU and vice versa. You can choose food from the list or just specify carbohydrate value (carb per 100g of food).\nAlso you can add few products and specify quantity for each of them (i.e. describe your dinner). In this case calculator will get you a total number of BU, it's useful for insulin therapy.\nIf you have any questions, critique or suggestions for this project - please email me.\nPlease note that I'm not endocrinologist and this service cannot be treated as an official medical nutrition guide for diabetics.\nCommon Food\nCalculator works with a common list of food obtained from the food/common/*.csv files. Carbohydrate values are taken from the public medical resources and from products' labels.\nReal-Life Haskell\nSecond purpose of this project is a practical programming learning. I use the Haskell programming language, all modules and configuration files contain a lot of comments to help students understand this small, but real-life Haskell web project. I suppose that you already familiar with Haskell (e.g. you have read LYAH book or my book). But don't be afraid!: this project is designed for novices, so basic knowledge of the Haskell and web development is quite enough.\nYou'll learn such things as:\n\nstructure of the Haskell project and work with Stack,\nCLI arguments parsing with optparse-simple,\nwork with CSV with Cassava,\ntype-level web API with Servant,\nfront-end generation with Blaze and Clay.\ndocumentation with Haddock,\nbash-scripting with shell-conduit,\nbehavior-driven development (BDD) with Hspec,\nCI and CD with CircleCI,\nautomated code review with Code Climate,\nand much more.\n\nPlease feel free to open an issue if you found a bug or want to improve this project.\nProject structure\nConfiguration\n\npackage.yaml - main configuration file. I use alternative configuration for Haskell projects, please see hpack.\nstack.yaml - configuration file for Stack.\ncircle.yml - configuration file for CircleCI service.\n.codeclimate.yml - configuration file for Code Climate service.\n\nSource code overview\n\n\nsrc/app/ - source code for a program.\n\nCLI.hs - work with app's command line arguments.\nMain.hs - app's main-function is defined here.\n\n\n\nsrc/lib/ - source code for a library using by a program.\n\nBreadU.hs - exposed module of the library.\n\nBreadU/API.hs - web API, defines endpoints.\nBreadU/Handlers.hs - handlers for endpoints.\nBreadU/Server.hs - server that combines API with handlers.\nBreadU/Types.hs - common types.\nBreadU/Pages/ - modules for generate pages, in wide sence of word (HTML-markup, CSS, JS and DOM-parts).\nBreadU/Tools/ - tools for parsing food, validating user's food data, calculating and suggestions.\n\n\n\n\n\nsrc/update - source code for a program to update 'breadu-exe' server on production.\n\n\ntest/ - source code for test suite.\n\n\nSetup.hs - autogenerated module, you haven't touch it.\n\n\nBuild artifacts\n\n.stack-work/ - build artifacts: packages, autogenerated modules, executable file, Haddock-documentation, etc.\n\nMisc\n\nstatic/ - static web files (actually just images).\nfood/common/ - .csv-files with common food (default sets of food every user will see), localized versions.\n\nLocal build\nYou can build service locally. Assumed that you already have Haskell Stack. Do:\n$ git clone git@github.com:denisshevchenko/breadu.info.git\n$ cd breadu.info\n$ stack setup\n$ stack build\n\nAfter that run it:\n$ stack exec -- breadu-exe -p 3000\n\nThen go to localhost:3000.\nThat's it. To see short help info do:\n$ stack exec -- breadu-exe --help\n\n""], 'url_profile': 'https://github.com/denisshevchenko'}","{'location': 'Boston', 'stats_list': [['84', '          followers'], ['15', '          following'], ['49']], 'contributions': '268 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nPredicting Diabetes among PIMA population\nOverview:\nDiabetes mellitus, commonly referred to as diabetes, affects over 29 million people in the United States. Diabetes arises due to improper production and/or functioning of the hormone insulin, resulting in impaired metabolism of carbohydrates leading to a high level of glucose in the blood. Molecular mechanism of diabetes and its adverse impact on the body is well documented with animations in the following video.\nPima Indians living in Arizona have the highest rate of obesity and diabetes ever recorded. Thus, I will be using data collected from Pima Indians to predict diabetes with machine learning.\nDiabetes and its adverse impact on body:\n\n'], 'url_profile': 'https://github.com/SayantanMitra87'}","{'location': 'Hamburg/ Germany ', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '13 contributions\n        in the last year', 'description': [""HealthCare-App\nThis Application Helps the patients who suffer from diabetes to maintain there sugar level. Support from version 4 to till dated. Please fork and work, don't push anything here.\nAndroid Application - Diabetes Patients\nBuilding it\nbuild.gradle\nNote:\n\nTarget SDK 27\nWill no longer support Android Studio <3.0.\n\n""], 'url_profile': 'https://github.com/viswesvar'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '1 contribution\n        in the last year', 'description': [""HEI-MED, What is this?\nThe Hamilton Eye Institute Macular Edema Dataset (HEI-MED) (formerly DMED) is a collection of 169 fundus images to train and test image processing algorithms for the detection of exudates and diabetic macular edema. The images have been collected as part of a telemedicine network for the diagnosis of diabetic retinopathy developed by the Hamilton Eye Institute, the Image Science and Machine Vision Group at ORNL with the collaboration of the Université de Bourgogne. The dataset collection and cleaning was completed in 2010.\nDataset description\nThe dataset is composed of 169 Jpeg images compressed at highest quality We have made sure that all the images had enough quality, no patient is duplicated, a reasonable mixture of ethnicities and disease stratification is represented.\nThe table on the right shows the distributions of various characteristics of these images. Each image of the dataset was manually segmented by Dr. Edward Chaum (an expert ophthalmologist). He identified all the exudation areas and other bright lesions such as cotton wool spots, drusens or clearly visible fluid occurring on the fundus. There was no distinction between hard and soft exudates because this differentiation is prone to errors and without a clear clinical advantage for the diagnosis.\nIn addition to the images and the ground truth, we provide other anonymous clinical metadata about the patients, the optic nerve manually identified location, the machine segmented vasculature (employing the method of Zana and Klein), the ELVD quality metric and a Matlab class to seamlessly access all the data and metadata without having to deal with the internal format of the files. The ELVD quality metric is an algorithm to numerically quantify the quality of a fundus image. More information are available link.\nAn object oriented Matlab class to access HEI-MED is provided. The following methods are available:\n    display() Display all the images in the dataset.\n    displayImg(imgID) Display the image indicated by imgID.\n    getEthnicity(imgID): string Return the the ethnicity of the patient.\n    getGT(imgID): [gtImg, gtInfo] Get the manually segmented lesions.\n    getImg(imgID): img Get image with the given imgID.\n    getMetaAttr(imgID, attrStr): string Get a meta attribute given the imgID and the attribute name (attrStr).\n    getMetaFileLoc(imgID): [locStr, isAvailable] Get the location of the file containing the meta attributes.\n    getName(imgID): [nameStr, extStr] Get the location of the image file.\n    getNumOfImgs(): num Get the number of images in the dataset.\n    getONloc(imgID): [onRow, onCol] Get the hand identified location of the optic nerve.\n    getQuality(imgID): num Get the ELVD quality (0-1) of the image.\n    getVesselSeg(imgID,newSize): img Get the machine segmented lesion segmentation.\n    hasNoBrightLes(imgID): bool Check if the image contains bright lesion.\n    hasNoDarkLes(imgID): bool Check if the image contains dark lesion.\n    hasNoExudates(imgID): bool Check if the image contains exudate.\n    isHealthy(imgID): bool Check if the image does not contain any exudate or microaneurysm.\n    resetBoundaries() Reset the dataset's subset selected.\n    setBoundaries(startIdx, endIdx) Select a subset in the dataset.\n    showLesions(imgID) Display the image indicated by imgID with the lesions.\n\nUsage Example\n% Add directory contatinig the dataset managing class\naddpath('misc');\n\n% The location of the dataset\nDMEDloc = 'location/of/dataset';\n\n% load the dataset\ndata = Dmed( DMEDloc );\n\n% Show the results of the exudate detection algorithm\nfor i=1:data.getNumOfImgs()\n    rgbImg = data.getImg(i); % get original image\n    [onY, onX] = data.getONloc(i); % get optic nerve location\n    imgProb = exDetect( rgbImg, 1, onY, onX ); % segment exudates\nend\n\n% display results\nfigure(1);\nimagesc(rgbImg);\nfigure(2);\nimagesc(imgProb);\n\n% block execution up until an image is closed\nuiwait;\nend\nConditions of use\nThe HEI-MED can be used exclusevely for non-commercial research purposes. Any type of publications created with this dataset need to reference the following paper: Giancardo, L.; Meriaudeau, F.; Karnowski, T. P.; Li, Y.; Garg, S.; Tobin, Jr, K. W.; Chaum, E. (2012), 'Exudate-based diabetic macular edema detection in fundus images using publicly available datasets.', Medical Image Analysis 16(1), 216--226.\nContacts\nWe would like to know what you think about the dataset. So please, send an e-mail with comments, complaints or suggestions to luca DOT giancardo AT tmc DOT uth DOT edu\n""], 'url_profile': 'https://github.com/lgiancaUTH'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['0']], 'contributions': '887 contributions\n        in the last year', 'description': ['Diabetes Detection (diabetes_detection)\nApp that shows probability of a person having diabetes based on different parameters like Weakness,Age,Gender,Irritation,etc\n\n\n\n\n\n\n\nStart Using\nWebsite\nDownload for Android\nInstall the dependencies\nnpm install\nStart the app in development mode (hot-code reloading, error reporting, etc.)\nquasar dev\nLint the files\nnpm run lint\nBuild the app for production\nquasar build\nCustomize the configuration\nSee Configuring quasar.conf.js.\n'], 'url_profile': 'https://github.com/Bhavartha'}","{'location': 'Portland, Oregon', 'stats_list': [['18', '          followers'], ['26', '          following'], ['93']], 'contributions': '191 contributions\n        in the last year', 'description': ['Glukit\nRequirements:\n\nInstall Google App Engine GO SDK:\nhttps://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go\nRead the Getting Started case in case of need:\nhttps://developers.google.com/appengine/docs/go/gettingstarted/devenvironment\nGet ruby (only for SCSS support), compass, bower and claymate (for gumby and front-end)\nsafekeeper for generating source with client ids/secrets: go get github.com/alexandre-normand/safekeeper\nGo in ./view and run claymate install.\nSetup environment variables with the following and run go generate github.com/alexandre-normand/glukit/app/secrets:\n\n```\nLOCAL_CLIENT_ID=""google-client-id-for-localhost""\nLOCAL_CLIENT_SECRET=""google-client-secret-for-localhost""\nPROD_CLIENT_ID=""""\nPROD_CLIENT_SECRET=""""\nTEST_STRIPE_KEY=""stripe-test-key""\nTEST_STRIPE_PUBLISHABLE_KEY=""stripe-test-publishable-key""\nPROD_STRIPE_KEY=""""\nPROD_STRIPE_PUBLISHABLE_KEY=""""\n```\n\n\nSetup client ids and secrets using the datastore administration UI (as an osin.client entity):\n\n* Generate a client secret using something like `openssl rand -base64 24`\n* Generate a client id using something like `echo ""`openssl rand -hex 14`.mygluk.it""`\n* Note the `RedirectUri` expected by the authenticating application (i.e. `x-glukloader://oauth/callback`)\n* Create a new `osin.client` entity using those values. The `key.identifier` should match the generated client id.\n\nMisc\nTo make SCSS changes, use compass build or compass watch.\nRunning it:\nFrom , execute goapp serve and hit http://localhost:8080.\nDeploy:\ngcloud app deploy\n'], 'url_profile': 'https://github.com/alexandre-normand'}","{'location': 'beijing', 'stats_list': [['4', '          followers'], ['31', '          following'], ['26']], 'contributions': '6 contributions\n        in the last year', 'description': ['<<<<<<< HEAD\n#diabetes_manage_app\ndiabetes_manage_app\n糖尿病管理系统安卓app\n\n\n\n\n\n\n\nc2b60bbedb1b4c258c2d71cd42b71fa7b5b152c0\n\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/ZhouBey'}","{'location': 'Nottingham, United Kingdom', 'stats_list': [['33', '          followers'], ['26', '          following'], ['9']], 'contributions': '457 contributions\n        in the last year', 'description': ['Pima-Indians-Diabetes-DataSet-UCI\nThe test problem we will use in this repository is the Pima Indians Diabetes problem taken from Machine Learning Repository UCI:\nhttps://archive.ics.uci.edu/ml/datasets/pima+indians+diabetes\nThis problem is comprised of 768 observations of medical details for Pima indians patents. The records describe instantaneous measurements taken from the patient such as their age, the number of times pregnant and blood workup. All patients are women aged 21 or older. All attributes are numeric, and their units vary from attribute to attribute.\nEach record has a class value that indicates whether the patient suffered an onset of diabetes within 5 years of when the measurements were taken (1) or not (0).\nThis is a standard dataset that has been studied a lot in machine learning literature. A good prediction accuracy is 70%-76%.\nIn this repository, we study this dataset by using K nearest neighbour classification method\n'], 'url_profile': 'https://github.com/LamaHamadeh'}","{'location': 'New York', 'stats_list': [['254', '          followers'], ['5', '          following'], ['29']], 'contributions': '269 contributions\n        in the last year', 'description': ['Machine-Learning-Predict-Whether-Patient-Suffer-from-diabetes\nMachine Learning Predict Whether Patient Suffer from diabetes\n'], 'url_profile': 'https://github.com/soumilshah1995'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['2017 ADA Standards of Medical Care in Diabetes\nWellcentive search criteria for the 2017 American Diabetes Association Standards of Medical Care in Diabetes.\nSpreadsheet to help manage recommendations:\nhttps://goo.gl/oUHMXC\n""index"" folder\nContains listing of links to recommendations and table items from the 2017 American Diabetes Association Standards of Medical Care in Diabetes in tabular format. Also includes list of recommendations in order of priority in tabular format.\n""recommendations"" folder\nContains comprehensive listing of raw recommendations from the 2017 American Diabetes Association Standards of Medical Care in Diabetes. Recommendations SHALL be named in accordance with this format: ""recXXX"", where XXX are three integers between 0-9.\n""tables"" folder\nContains comprehensive listing of raw table elements from the 2017 American Diabetes Association Standards of Medical Care in Diabetes. Tables SHALL be named in accordance with this format: ""tabXX"", where XX are two integers between 0-9.\n""modules"" folder\nContains comprehensive listing of raw modularized search criteria for Wellcentive. Names for all modularized search criteria SHALL NOT include spaces or punctuation besides ""-"" and ""_"".\n'], 'url_profile': 'https://github.com/codergvbvil'}"
"{'location': 'Chile', 'stats_list': [['19', '          followers'], ['4', '          following'], ['38']], 'contributions': '18 contributions\n        in the last year', 'description': ['Diabetes-mellitus-prediction-in-Pima-Indians\nThis repository was created to show the workshop for ""Switch Fb developer circle"", which is going to take place on 05-08-2017.\nTítle: ""Proceso CRISP-DM aplicado a la predicción de la diabetes mellitus con datasets públicos""\nThe content of the workshop is divided into two stages:\nTheoretical\n1.-The CRISP-DM and BAB process.\n2.-Scrum Agile and how to mix it with Data Science from my experience\n2.-Explanation of the problem to solve, structure and problems that we face in the dataset.\nHands on\n1.-Understanding and characterization of the data.\n2.-EDA for the Data Understanding\n3.-Data preparation\n4.-Application of logistic,GridSearch algortihm and Random Forest models\n5.-Performance analysis\n6.-Conclusions\nIn the future: TBD according to the feedback of the first audience in the Dev Circle Ago/2017 in SCL-CL\nthe force be with you\n'], 'url_profile': 'https://github.com/iair'}","{'location': 'Russia, Saint Petersburg', 'stats_list': [['2', '          followers'], ['5', '          following'], ['12']], 'contributions': '822 contributions\n        in the last year', 'description': ['Diacomp\nDiabetes Diary & Analytical System\n\n\nFeatures:\n\nTracking patient data (BS measurements, meal, insulin dosage etc.)\nMaking sophisticated adaptive math model\nInsulin dosage calculating\nShared extendable food/dish databases\nVisual analyzing\n\nPlatforms:\n\nAndroid\nWeb (Java)\nWindows (Delphi)\n\nLinks:\n\nOfficial site\nGoogle Play\n\n'], 'url_profile': 'https://github.com/bosik'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['GlucoSym\nGlucoSym is an open-source simulator aimed to help in the testing and development of insulin delivery automation systems.\nThe simulator is based on the following equations:\n\nIt allows a developer to:\n\nCompare multiple algorithms on a same patient.\nTest on a patient with parameter variation during the day.\nTest against a population of patients\n\nWe hope GlucoSym will help develop faster, safer & more accessible software for the #wearenotwaiting community.\nRemember GlucoSym is a work-in-progress!\nSetting-up\nYou will need nodejs installed. If you haven\'t already done that head on over to the nodejs website and install for your system.\nOnce installed, clone the repository on your computer:\n$ git clone https://github.com/perceptus/glucosym.git\n\nThen, to install required dependencies run:\n$ npm install\n\nStarting GlucoSym\nGlucoSym runs as a server on your computer so you can interact with it on your browser and have your own algorithm post data to it to get blood glucose values from the simulated patient back.\nTo start the server, open a terminal window and run:\n$ npm start\n\nIf everything is installed correctly, you should see the following on the terminal:\n> www@0.0.0 start /path_to/glucosym\n> node ./bin/www\n\nNow open your browser and navigate to http://localhost:3000 you should see GlucoSym UI:\n\nWhen starting GlucoSym, by default ""Patient A"" is selected and its parameters are loaded. You can go through each parameter and modify it as needed before starting the simulation. If during the simulation, you change any of the parameters, the simulation will reset and you will loose all simulation history.\nOnce you change parameters, you are now ready to test!\nSetting up your algorithm and posting to GlucoSym\nWe recommend you to treat GlucoSym as your blood glucose source on your algorithm. Right now, you probably get a blood glucose from a CGM or Nightscout. You will have to create a way to post data to this server in order to get a blood glucose value back.\nTo start getting blood glucose values, you will have to post to GlucoSym /dose endpoint:\nvar url = \'http://localhost:3000/dose\';\nvar request = require(""sync-request"");\npostdata = { ""dose"": 0.0, ""dt"": 5, ""index"": 0, ""time"": 1080, ""events"": {""bolus"": [{""amt"": 0.0, ""start"": 60}], ""basal"": [{""amt"": 1.3, ""start"": 0, ""length"": 600}], ""carb"": [{""amt"": 0.0, ""start"": 600, ""length"": 90}]} };\nrequest(\'POST\', url, {json: postdata});\n\nvar response = JSON.parse(res3.getBody());\nconsole.log(response.bg);\n\nHere is a simple explanation of each of the post parameters:\n\ndose: Insulin dose in Units given during the time-step. In the case of a basal adjustment you will need to calculate how much insulin will be given in the time-step defined by dt ( ie how many inulin units will be given in 5 minutes by the set basal profile or temp basal? )\ndt: Change in time each step in minutes\nindex: Current index from the start of the simulation, starting at 0\ntime: Total simulation run-time in minutes\nevents: You can set events so the simulator will consider them during the run. We recommend to send them on-the-go as your algo will probably be generating these on the run, specifically with the carb part of the events. If you decide to add carbs on-the-go, set the start time at 0 for the new carb being sent so 0 is the time at which the carb was sent to the simulator.\n\nFinishing the simulation\nAs you start posting to the server, blood glucoses will be returned according to insulin and carb events being sent. Once you have finished running your simulation, you need to do a final post so the simulator can know the run has ended and it can graph the data that was being stored for the run.\nvar url = \'http://localhost:3000/\';\nvar request = require(""sync-request"");\npostdata = { ""correction"": [1,2,3,4,5,6,7,8,9,10], ""iob"": [1,2,3,4,5,6,7,8,9,10] };\nrequest(\'POST\', url, {json: postdata});\n\nvar response = JSON.parse(res3.getBody());\nconsole.log(response);\n\nIn this case, you can send the simulator whatever you want it to graph along its own default values. Just as ""correction"" and ""iob"" was added to the post, you can add any array of data in the same format.\nOnce the post is finished, you can go to the browser and the data will be graphed.\nMAKE SURE YOU HAVE AN ACTIVE INTERNET CONNECTION TO DISPLAY GRAPHS! ( See Issue #3 )\nAlgorithm samples\nWe have included a copule of simple, not cleaned up code samples of algorithms that have been tested with the simulator. They are all located on the /closed_loop_algorithm_samples folder on the repository.\nTo run the samples, first start the GlucoSym server and then:\n$ cd closed_loop_algorithm_samples\n$ node algo_pid_.js\n\nYou should start seeing all of the post events on the terminal window where the server is running:\n\nEach script has a fixed run-time and it will post at the end so the data gets graphed on the simulator.\nWhen the simulation finishes, go to your browser widow where the sim is loaded and scroll to the bottom to see the results:\n\nPLEASE READ!\nGlucoSym was developed to be used as a tool to validate our work and help us advance faster into better insulin delivery automation solutions.\nPlease refrain from using GlucoSym results to evidence ""good"" vs ""bad"" work from other people in the community!\n\tThe MIT License (MIT)\n\n\tCopyright (c) 2017 Perceptus.org\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the ""Software""), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n'], 'url_profile': 'https://github.com/Perceptus'}","{'location': 'Islamabad, Pakistan', 'stats_list': [['4', '          followers'], ['1', '          following'], ['4']], 'contributions': '520 contributions\n        in the last year', 'description': ['Feature Extraction of Diabetic Retinopathy Using Fundus Images\nDiabetic Retinopathy is a very common eye disease in people having diabetes. This disease can lead to blindness if not taken care of in early stages. This project is a part of the whole process of identifying Diabetic Retinopathy in its early stages. In this project, we will extract basic features which can help us in identifying Diabetic Retinopathy in its early stages. There are many clinical features of Diabetic Retinopathy but in this project, we focused on retinal blood vessels and exudates.\nPrerequisites\n\n\nPython 2.7\n\n\nPython Editor (any of your choice)\n\n\nDataset\nKaggle provides a very hefty and diverse dataset that contains round about 30,000 images. You can download it from here.\nProject Structure\n\n\nBlood Vessels.py: Contains code for blood vessels extraction from fundus images\n\n\nExudates.py: Contains code for Exudates extraction from Fundus images\n\n\nMainWindow.py: Main GUI component\n\n\nWindowFrame.py: GUI container for child controls\n\n\nAuthor\nAbdul Rasheed\n'], 'url_profile': 'https://github.com/ebdulrasheed'}","{'location': 'NONE', 'stats_list': [['9', '          followers'], ['9', '          following'], ['79']], 'contributions': '2 contributions\n        in the last year', 'description': ['Machine Learning project\nA try to improve the ML model of Kevin Markham (DataSchool Teacher & Founder)\n\nDataset : Pima Indian Diabetes Study\nDataset info : https://goo.gl/p8ocBn\n\nTools :\n\nPython 3.5.1 | Anaconda 2.4.1\nJupyter Notebook 4.0.6\nSciKitLearn 0.17\nPandas 0.17.1\nMatplotlib 1.5.0\nNumpy 1.10.4\n\nThe model try to predict the risk of diabetes for an out of sample patient \nnote: Result = 85.3% on ROC/AUC evaluation score // Null Accuracy = 67.7%\n'], 'url_profile': 'https://github.com/nebiljabari'}","{'location': 'Trichy,India ', 'stats_list': [['15', '          followers'], ['16', '          following'], ['7']], 'contributions': '458 contributions\n        in the last year', 'description': ['End-to-End Diabetes Prediction Application using Machine Learning (MINI Project)\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features suach as\n\nPregnancies\nInsulin Level\nAge\nBMI.\nThe data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not."".\nThis is also sort of fun to work on a project like this which could be beneficial for the society.\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project . If you are looking for all the following points in this repo then i have not covered all in this repo. I\'m working on blog about this mini project and I\'ll update the link of blog about all the points in details later . (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displayed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nBug / Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\nExecute the command: python app.py\n\nTeam\n\n\n\n\n\n\n\n\nDitikrushan Giri\n\n\n\nCredits\n\nTook inspiration from Krish Naik Who is a youtuber he makes contents on Data science his youtube channel link\nIcons by Icons8\n\nNote:\n\nWebapp can handle concurrency upto some extent but can be scaled.\n\n'], 'url_profile': 'https://github.com/ditikrushna'}","{'location': 'Germany', 'stats_list': [['8', '          followers'], ['6', '          following'], ['51']], 'contributions': '97 contributions\n        in the last year', 'description': ['\n\n\nOpenDiabetesVault\n'], 'url_profile': 'https://github.com/juehv'}","{'location': 'Italy', 'stats_list': [['108', '          followers'], ['8', '          following'], ['10']], 'contributions': '763 contributions\n        in the last year', 'description': [""Introduction\nThe Pima are a group of Native Americans living in Arizona. A genetic predisposition allowed this group to survive normally to a diet poor of carbohydrates for years. In the recent years, because of a sudden shift from traditional agricultural crops to processed foods, together with a decline in physical activity, made them develop the highest prevalence of type 2 diabetes and for this reason they have been subject of many studies.\nDataset\nThe dataset includes data from 768 women with 8 characteristics, in particular:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\n\nThe last column of the dataset indicates if the person is affected (1) by diabetes or not (0).\nSource\nThe original dataset is available at UCI Machine Learning Repository and can be downloaded from this address: http://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nThe problem\nThe type of dataset and problem is a classic supervised binary classification. Given a number of elements all with certain characteristics (features), we want to build a machine learning model to identify people affected by type 2 diabetes.\nTo solve the problem we will have to analyse the data, do any required transformation and normalisation, apply a machine learning algorithm, train a model, check the performance of the trained model and iterate with other algorithms until we find the most performant for our type of dataset.\nNote\nFor the presentation part I've used RISE, which is being installed by requirements.txt but it has to be configured. You can find all the instructions on the original website: https://damianavila.github.io/RISE/index.html\n""], 'url_profile': 'https://github.com/andreagrandi'}","{'location': 'Dhaka, Bangladesh', 'stats_list': [['37', '          followers'], ['0', '          following'], ['1']], 'contributions': '13 contributions\n        in the last year', 'description': ['pima-diabetes-dataset-machine-learning-approach\nDataset : Pima Indian Diabetes Study\nDataset info : https://www.kaggle.com/kumargh/pimaindiansdiabetescsv\nLanguage: Python\n\nBasic by Tamim Shahriar\nAdvanced - freeCodeCamp.org\n\nLibrary:\n\nAnaconda\nJupyter Notebook\nSciKitLearn\nPandas\nMatplotli\nNumpy\n\nAnaconda: open-source distribution of the Python.\n\nDownload.\nInstallation\n\nJupyter Notebook\n\nHow to use\n\nThe model try to predict the risk of diabetes for an out of sample patien\n'], 'url_profile': 'https://github.com/mahemon'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '9 contributions\n        in the last year', 'description': ['diabetesPredict\npython课作业，预测糖尿病的发病率。\n使用了线性回归和聚类分析。\n数据集：http://archive.ics.uci.edu/ml/datasets.html。\n具体在文档中。\n'], 'url_profile': 'https://github.com/Kenway9276'}"
"{'location': 'Charlotte, NC', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': [""Healthcare-Data-Analysis-on-PIMA-Indian-Diabetes-Database\nKnowledge Discovery in Database\n\nIn this project we focused our analysis on applying data analysis techniques, create visualizations and interpret the models using histograms, scatter plots and many other visual plots etc. to uncover the reason for high diabetic outcome among the PIMA Indian women.\nPredict whether the patient is diagnosed with diabetes based on diagnostic measurements available in the dataset.\nWe obtained this dataset from Kaggle and built some supervised explanatory models (classification tree and logistic regression) and predictive models (KNN); also tried Unsupervised techniques such as K-means Clustering and Kohonen's Self-Organizing Map (SOM).\nLanguages and tools used: R Programming, R Studio, WEKA and Tableau.\n\n""], 'url_profile': 'https://github.com/HRakesh'}","{'location': 'Bengaluru', 'stats_list': [['23', '          followers'], ['0', '          following'], ['5']], 'contributions': '399 contributions\n        in the last year', 'description': ['neural-network-sklearn\nNeural network implementation on pima indian diabetes dataset\n'], 'url_profile': 'https://github.com/bmonikraj'}","{'location': 'Sri Lanka', 'stats_list': [['17', '          followers'], ['31', '          following'], ['131']], 'contributions': '823 contributions\n        in the last year', 'description': ['Data Warehouse of Diabetic Data\nDataset URL - https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\nAttribute Info - https://www.hindawi.com/journals/bmri/2014/781670/tab1/\nDimensional Model\n\nBuild Data Warehouse\n\nStep 01 - Create Schema for Staging Area\nUse following query to create the database named \'diabetes_dwh_staging\' and tables.\n\nDatabase: diabetes_dwh_staging\nTables:\n\ndataset\nadmission_source\nadmission_type\ndischarge_disposition\n\n\n\nQuery to execute\nDROP SCHEMA IF EXISTS `diabetes_DWH_staging` ;\nCREATE SCHEMA `diabetes_DWH_staging` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;\nUSE `diabetes_DWH_staging` ;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`dataset` (\n  `encounter_id` INT NULL COMMENT \'\',\n  `patient_nbr` INT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  `weight` VARCHAR(45) NULL COMMENT \'\',\n  `admission_type_id` INT NULL COMMENT \'\',\n  `discharge_disposition_id` INT NULL COMMENT \'\',\n  `admission_source_id` INT NULL COMMENT \'\',\n  `time_in_hospital` INT NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  `medical_specialty` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedures` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medications` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `diag_1` VARCHAR(200) NULL COMMENT \'\',\n  `diag_2` VARCHAR(200) NULL COMMENT \'\',\n  `diag_3` VARCHAR(200) NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  `max_glu_serum` VARCHAR(45) NULL COMMENT \'\',\n  `A1Cresult` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `change` VARCHAR(45) NULL COMMENT \'\',\n  `diabetesMed` VARCHAR(45) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`admission_source` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`admission_type` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`discharge_disposition` (\n  `id` INT NULL COMMENT \'\',\n  `description` VARCHAR(255) NULL COMMENT \'\')\nENGINE = InnoDB;\nStep 02 - Extract (Import CSV Dataset) to Staging Area\nUse the following query to import data to \'datase\' table. Use absolute path to the \'diabetic_data.csv\' file as <dataset_directory>/diabetic_data.csv in the query.\nIn windows use \'/\' characters instead of \'\\\' as path name separator character (eg: instead of \'D:\\dwh\\diabetic_data.csv\' use \'D:/dwh/diabetic_data.csv\')\nUSE `diabetes_DWH_staging` ;\n\nLOAD DATA INFILE \'<dataset_directory>/diabetic_data.csv\'\nINTO TABLE `dataset`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nIf secure_file_priv is enabled copy \'diabetic_data.csv\' file to the directory given by following query and use that path.\nSHOW VARIABLES LIKE ""secure_file_priv"";\n\nCheck whether all 101766 recoreds are imported with executing the query below.\nSELECT COUNT(*) FROM `dataset`;\nImport IDs_mapping_admission_source.csv, IDs_mapping_admission_type.csv and IDs_mapping_discharge_disposition.csv files as the same way as below.\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_admission_source.csv\'\nINTO TABLE `admission_source`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_admission_type.csv\'\nINTO TABLE `admission_type`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\n\nLOAD DATA INFILE \'<dataset_directory>/IDs_mapping_discharge_disposition.csv\'\nINTO TABLE `discharge_disposition`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\nStep 03 - Data Cleansing\n3.1 Create a duplicate data set to make changes\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`dataset_modified` (\n  `encounter_id` INT NULL COMMENT \'\',\n  `patient_nbr` INT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  `weight` VARCHAR(45) NULL COMMENT \'\',\n  `admission_type_id` INT NULL COMMENT \'\',\n  `discharge_disposition_id` INT NULL COMMENT \'\',\n  `admission_source_id` INT NULL COMMENT \'\',\n  `time_in_hospital` INT NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  `medical_specialty` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedures` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medications` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `diag_1` VARCHAR(200) NULL COMMENT \'\',\n  `diag_2` VARCHAR(200) NULL COMMENT \'\',\n  `diag_3` VARCHAR(200) NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  `max_glu_serum` VARCHAR(45) NULL COMMENT \'\',\n  `A1Cresult` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `change` VARCHAR(45) NULL COMMENT \'\',\n  `diabetesMed` VARCHAR(45) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\')\nENGINE = InnoDB;\nINSERT INTO `diabetes_DWH_staging`.`dataset_modified`\nSELECT * FROM `diabetes_DWH_staging`.`dataset`;\nHorizontal Filtering\nSome importants attributes that should be considered are missing in the dataset. Lets discard them.\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `payer_code` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `medical_specialty` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `race` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_1` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_2` = \'?\';\n\nDELETE FROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `diag_3` = \'?\';\n\nSELECT COUNT(*) FROM `diabetes_dwh_staging`.`dataset_modified`;\nWe have 26755 data records.\nCleansing Patient Data\n\nSelect diry data wrt gender of the patient\n\nCREATE OR REPLACE VIEW `diabetes_dwh_staging`.`dirty_patient_gender` AS\nSELECT *\nFROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `patient_nbr` in (\n\tSELECT `patient_nbr`\n\tFROM `diabetes_dwh_staging`.`dataset_modified`\n\tWHERE `gender` = \'Female\'\n) AND `patient_nbr` in (\n\tSELECT `patient_nbr`\n\tFROM `diabetes_dwh_staging`.`dataset_modified`\n\tWHERE `gender` = \'Male\'\n);\n\nSELECT `encounter_id`, `patient_nbr`, `race`, `gender`\nFROM `diabetes_dwh_staging`.`dirty_patient_gender`;\nThere are 2 dirty records with 1 patient and cleaned with selecting most frequent and latest data.\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `gender` = \'Male\'\nWHERE `patient_nbr` = 109210482;\n\nSelect diry data wrt race of the patient\n\nSELECT distinct `race`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n-- 6 distinct races are found. (Caucasian, AfricanAmerican, ?, Other, Asian, Hispanic)\n\n-- Views to identify dirty data\nCREATE OR REPLACE VIEW `diabetes_dwh_staging`.`dirty_patient_race` AS\nSELECT `patient_nbr`, count(distinct `race`) as `race_count`\nFROM `diabetes_dwh_staging`.`dataset_modified`\ngroup by `patient_nbr` having `race_count` > 1;\n\nSELECT count(`patient_nbr`)\nFROM `diabetes_dwh_staging`.`dirty_patient_race`;\n\nSELECT `encounter_id`, `patient_nbr`, `race`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nWHERE `patient_nbr` in (\n\tSELECT `patient_nbr`\n    FROM `diabetes_dwh_staging`.`dirty_patient_race`\n)\nORDER BY `patient_nbr`, `encounter_id`;\nThere are 165 dirty records with 50 patients and cleaned with selecting most frequent and latest data.\n-- Set race as Caucasian\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Caucasian\'\nWHERE `patient_nbr` IN (1553220, 23724792, 38893887, 42246738, 52316388, 112367349);\n\n-- Set race as AfricanAmerican\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'AfricanAmerican\'\nWHERE `patient_nbr` IN (6919587, 10980891, 40090752, 54643194, 101753730, 107849052);\n\n-- Set race as Other\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Other\'\nWHERE `patient_nbr` IN (28532295, 30689766, 32314608, 33247647, 36967347, 37547937, 37638306, 38774187, 39160719, 42096384, 90817893, 93105117, 93662784, 94027644, 98584524, 100322946, 103228398, 103690161, 105125598, 106425234);\n\n-- Set race as Asian\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Asian\'\nWHERE `patient_nbr` IN (24332220, 31812075, 34248078, 94539465, 97024806, 103305528, 104622570, 110657970, 111534210);\n\n-- Set race as Hispanic\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `race` = \'Hispanic\'\nWHERE `patient_nbr` IN (37572957, 44744166, 45113778, 90035874, 91107549, 93809358, 94088088, 98934615, 106895331, 109448541);\nStep 04 - Transforming\n4.1 Transform primary, secondary and additional diagnosis based on ""International Statistical Classification of Diseases and Related Health Problems""\n\nVisit http://icd9.chrisendres.com/index.php?action=contents for Diseases and Injuries Tabular Index\n\nValues are stored to the file data_transforming/diseases_and_injuries_tabular_index.csv.\n\n\n\nid\ndisease\ncode_letter\ncode_from\ncode_to\n\n\n\n\n1\nINFECTIOUS AND PARASITIC DISEASES\n\n1\n139\n\n\n2\nNEOPLASMS\n\n140\n239\n\n\n3\nENDOCRINE, NUTRITIONAL AND METABOLIC DISEASES, AND IMMUNITY DISORDERS\n\n240\n279\n\n\n4\nDISEASES OF THE BLOOD AND BLOOD-FORMING ORGANS\n\n280\n289\n\n\n5\nMENTAL DISORDERS\n\n290\n319\n\n\n6\nDISEASES OF THE NERVOUS SYSTEM AND SENSE ORGANS\n\n320\n389\n\n\n7\nDISEASES OF THE CIRCULATORY SYSTEM\n\n390\n459\n\n\n8\nDISEASES OF THE RESPIRATORY SYSTEM\n\n460\n519\n\n\n9\nDISEASES OF THE DIGESTIVE SYSTEM\n\n520\n579\n\n\n10\nDISEASES OF THE GENITOURINARY SYSTEM\n\n580\n629\n\n\n11\nCOMPLICATIONS OF PREGNANCY, CHILDBIRTH, AND THE PUERPERIUM\n\n630\n679\n\n\n12\nDISEASES OF THE SKIN AND SUBCUTANEOUS TISSUE\n\n680\n709\n\n\n13\nDISEASES OF THE MUSCULOSKELETAL SYSTEM AND CONNECTIVE TISSUE\n\n710\n739\n\n\n14\nCONGENITAL ANOMALIES\n\n740\n759\n\n\n15\nCERTAIN CONDITIONS ORIGINATING IN THE PERINATAL PERIOD\n\n760\n779\n\n\n16\nSYMPTOMS, SIGNS, AND ILL-DEFINED CONDITIONS\n\n780\n799\n\n\n17\nINJURY AND POISONING\n\n800\n999\n\n\n18\nSUPPLEMENTARY CLASSIFICATION OF FACTORS INFLUENCING HEALTH STATUS AND CONTACT WITH HEALTH SERVICES\nV\n1\n89\n\n\n19\nSUPPLEMENTARY CLASSIFICATION OF EXTERNAL CAUSES OF INJURY AND POISONING\nE\n800\n999\n\n\n\nLets load this csv file into a table.\nReplace <dataset_directory> directory in the query with the absolute path of the file. Use \'/\' as path seperator.\nuse diabetes_dwh_staging;\n\nCREATE TABLE IF NOT EXISTS `diabetes_DWH_staging`.`icd9_index` (\n  `id` INT NOT NULL COMMENT \'\',\n  `disease` VARCHAR(200) NOT NULL COMMENT \'\',\n  `code_letter` VARCHAR(10) NULL COMMENT \'\',\n  `code_from` INT NOT NULL COMMENT \'\',\n  `code_to` INT NOT NULL COMMENT \'\',\n  PRIMARY KEY (`id`)  COMMENT \'\')\nENGINE = InnoDB;\n\nLOAD DATA INFILE \'<dataset_directory>/diseases_and_injuries_tabular_index.csv\'\nINTO TABLE `icd9_index`\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\'\nIGNORE 1 LINES;\nTransforming ICD9 Details\nThis query may take several time (~30 seconds) to execute.\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ICD9`;\nDELIMITER ;;\n\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ICD9`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 0;\n\n-- Transform values starts with V and E\n-- Transform ""diag_1"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_1` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_1`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_1` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_1`, 1) = \'E\';\n\n-- Transform ""diag_2"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_2` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_2`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_2` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_2`, 1) = \'E\';\n\n-- Transform ""diag_3"" values\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_3` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'V\'\n)\nWHERE LEFT(`diag_3`, 1) = \'V\';\n\nUPDATE `diabetes_dwh_staging`.`dataset_modified`\nSET `diag_3` = (\n\tSELECT `disease`\n    FROM `diabetes_dwh_staging`.`icd9_index`\n    WHERE `code_letter` = \'E\'\n)\nWHERE LEFT(`diag_3`, 1) = \'E\';\n\n\n-- Transform values with digits only\nSELECT COUNT(*) FROM `diabetes_dwh_staging`.`icd9_index`\nWHERE `code_letter` = \'\'\nINTO n;\n\nSET i = 0;\nWHILE i < n DO \n\t-- Transform ""diag_1"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `diag_1` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_1` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_1` >= (\n\t\t\tSELECT `code_from`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t) AND\n\t\t`diag_1` <= (\n\t\t\tSELECT `code_to`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t)\n\t);\n    \n\t-- Transform ""diag_2"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified` SET `diag_2` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_2` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_2` >= (\n\t\t\tSELECT `code_from`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t) AND\n\t\t`diag_2` <= (\n\t\t\tSELECT `code_to`\n            FROM `diabetes_dwh_staging`.`icd9_index`\n            LIMIT i, 1\n\t\t)\n\t);\n    \n    -- Transform ""diag_3"" values\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified` SET `diag_3` = (\n\t\tSELECT `disease`\n        FROM `diabetes_dwh_staging`.`icd9_index`\n        LIMIT i, 1\n\t)\n    WHERE `diag_3` REGEXP \'^[0-9]+\\\\.?[0-9]*$\' AND (\n\t\t`diag_3` >= (\n\t\t\tSELECT `code_from`\n\t\t\tFROM `diabetes_dwh_staging`.`icd9_index`\n\t\t\tLIMIT i, 1\n        ) AND\n\t\t`diag_3` <= (\n\t\t\tSELECT `code_to`\n\t\t\tFROM `diabetes_dwh_staging`.`icd9_index`\n\t\t\tLIMIT i, 1\n        )\n\t);\n  SET i = i + 1;\nEND WHILE;\n\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`TRANSFORM_ICD9`();\n4.2 Transform Admission Type, Discharge Disposition, Admission Source with given mapping data set.\nOne procedure will takes around 15 seconds to execute with all take around 45 seconds.\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`;\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`;\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`;\nDELIMITER ;;\n\n-- Admission Type\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`admission_type`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `admission_type` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `admission_type` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`admission_type` WHERE `id` = i\n    )\n    WHERE `admission_type_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `admission_type_id`;\nEND;;\n\n-- Admission Source\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`admission_source`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `admission_source` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `admission_source` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`admission_source` WHERE `id` = i\n    )\n    WHERE `admission_source_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `admission_source_id`;\nEND;;\n\n-- Discharge Disposition\nCREATE PROCEDURE `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`()\nBEGIN\n\nDECLARE n INT DEFAULT 0;\nDECLARE i INT DEFAULT 1;\n\nSET n = (SELECT COUNT(*) FROM `diabetes_dwh_staging`.`discharge_disposition`);\n-- Add the column\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `discharge_disposition` VARCHAR(150);\n\nWHILE i <= n DO\n\tUPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `discharge_disposition` = (\n\t\tSELECT `description` FROM `diabetes_dwh_staging`.`discharge_disposition` WHERE `id` = i\n    )\n    WHERE `discharge_disposition_id` = i;\n    SET i = i + 1;\nEND WHILE;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nDROP COLUMN `discharge_disposition_id`;\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_TYPE`();\nCALL `diabetes_dwh_staging`.`TRANSFORM_ADMISSION_SOURCE`();\nCALL `diabetes_dwh_staging`.`TRANSFORM_DISCHARGE_DISPOSITION`();\n\nStep 05 - Create Schema for Data Warehouse\nExucute following query to create database and tables for Data Warehouse as in the Dimensional Model\nDROP SCHEMA IF EXISTS `diabetes_dwh` ;\n\nCREATE SCHEMA IF NOT EXISTS `diabetes_dwh` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;\nUSE `diabetes_dwh` ;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_patient` (\n  `patient_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `patient_number` VARCHAR(45) NOT NULL COMMENT \'\',\n  `race` VARCHAR(45) NULL COMMENT \'\',\n  `gender` VARCHAR(45) NULL COMMENT \'\',\n  `age` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`patient_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_junk_admissionDetails` (\n  `admissionDetail_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `admission_type` VARCHAR(200) NULL COMMENT \'\',\n  `admission_source` VARCHAR(200) NULL COMMENT \'\',\n  `medical_speciality` VARCHAR(200) NULL COMMENT \'\',\n  PRIMARY KEY (`admissionDetail_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_discharge` (\n  `discharge_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `discharge_disposition` VARCHAR(150) NULL COMMENT \'\',\n  `readmitted` VARCHAR(45) NULL COMMENT \'\',\n  `payer_code` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`discharge_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_test_results` (\n  `test_results_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `glucose_serum_test_result` VARCHAR(45) NULL COMMENT \'\',\n  `a1c_test_results` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`test_results_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_medication` (\n  `medication_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `change_of_medication` VARCHAR(45) NULL COMMENT \'\',\n  `diabetes_medicatin` VARCHAR(45) NULL COMMENT \'\',\n  `metformin` VARCHAR(45) NULL COMMENT \'\',\n  `repaglinide` VARCHAR(45) NULL COMMENT \'\',\n  `nateglinide` VARCHAR(45) NULL COMMENT \'\',\n  `chlorpropamide` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride` VARCHAR(45) NULL COMMENT \'\',\n  `acetohexamide` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide` VARCHAR(45) NULL COMMENT \'\',\n  `tolbutamide` VARCHAR(45) NULL COMMENT \'\',\n  `pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `acarbose` VARCHAR(45) NULL COMMENT \'\',\n  `miglitol` VARCHAR(45) NULL COMMENT \'\',\n  `troglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `tolazamide` VARCHAR(45) NULL COMMENT \'\',\n  `examide` VARCHAR(45) NULL COMMENT \'\',\n  `citoglipton` VARCHAR(45) NULL COMMENT \'\',\n  `insulin` VARCHAR(45) NULL COMMENT \'\',\n  `glyburide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glipizide-metformin` VARCHAR(45) NULL COMMENT \'\',\n  `glimepiride-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-rosiglitazone` VARCHAR(45) NULL COMMENT \'\',\n  `metformin-pioglitazone` VARCHAR(45) NULL COMMENT \'\',\n  PRIMARY KEY (`medication_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`dim_junk_diagnosis` (\n  `diagnosis_sk` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `primary_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  `secondary_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  `additional_diagnosis` VARCHAR(200) NULL COMMENT \'\',\n  PRIMARY KEY (`diagnosis_sk`)  COMMENT \'\')\nENGINE = InnoDB;\n\nCREATE TABLE IF NOT EXISTS `diabetes_dwh`.`fact_admission` (\n  `encounter_id` INT NOT NULL AUTO_INCREMENT COMMENT \'\',\n  `patient_sk` INT NOT NULL COMMENT \'\',\n  `test_sk` INT NOT NULL COMMENT \'\',\n  `medication_sk` INT NOT NULL COMMENT \'\',\n  `diagnosis_sk` INT NOT NULL COMMENT \'\',\n  `date_sk` DATETIME NOT NULL COMMENT \'\',\n  `time_in_hospital` VARCHAR(45) NULL COMMENT \'\',\n  `num_lab_procedure` INT NULL COMMENT \'\',\n  `num_procedures` INT NULL COMMENT \'\',\n  `num_medication` INT NULL COMMENT \'\',\n  `number_outpatient` INT NULL COMMENT \'\',\n  `number_emergency` INT NULL COMMENT \'\',\n  `number_inpatient` INT NULL COMMENT \'\',\n  `number_diagnoses` INT NULL COMMENT \'\',\n  PRIMARY KEY (`encounter_id`)  COMMENT \'\',\n  UNIQUE INDEX `patient_sk_UNIQUE` (`patient_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `test_sk_UNIQUE` (`test_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `medication_sk_UNIQUE` (`medication_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `diagnosis_sk_UNIQUE` (`diagnosis_sk` ASC)  COMMENT \'\',\n  UNIQUE INDEX `date_sk_UNIQUE` (`date_sk` ASC)  COMMENT \'\')\nENGINE = InnoDB;\nStep 06 - Loading Data\n6.1 Loading to Patient Dimension\nThere are 19808 distict values.\nINSERT INTO `diabetes_dwh`.`dim_patient` (`patient_number`, `race`, `gender`, `age`)\nSELECT DISTINCT `patient_nbr`, `race`, `gender`, `age`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nORDER BY `patient_nbr`, `age`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_patient`;\n6.2 Loading to Test Results Dimension\nThere are 7 distict values.\nINSERT INTO `diabetes_dwh`.`dim_test_results` (`glucose_serum_test_result`, `a1c_test_results`)\nSELECT DISTINCT `max_glu_serum`, `A1Cresult`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_test_results`;\n6.3 Loading to Discharge Dimension\nThere are 339 distict values.\nINSERT INTO `diabetes_dwh`.`dim_discharge` (`discharge_disposition`, `readmitted`, `payer_code`)\nSELECT DISTINCT `discharge_disposition`, `readmitted`, `payer_code`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_discharge`;\n6.4 Loading to Medication Dimension\nThere are 633 distict values.\nINSERT INTO `diabetes_dwh`.`dim_medication` (\n\t`change_of_medication`, `diabetes_medicatin`, `metformin`, `repaglinide`,\n    `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`, `glipizide`,\n    `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`, `miglitol`,\n    `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`,\n    `glyburide-metformin`, `glipizide-metformin`, `glimepiride-pioglitazone`,\n    `metformin-rosiglitazone`, `metformin-pioglitazone`\n)\nSELECT DISTINCT `change`, `diabetesMed`, `metformin`,\n\t`repaglinide`, `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`,\n    `glipizide`, `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`,\n    `miglitol`, `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`,\n    `glyburide-metformin`, `glipizide-metformin`, `glimepiride-pioglitazone`,\n    `metformin-rosiglitazone`, `metformin-pioglitazone`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_medication`;\n6.5 Loading to Diagnosis Junk Dimension\nLets load all distinct values for the junk dimension.\nThere are 2323 distict values.\nINSERT INTO `diabetes_dwh`.`dim_junk_diagnosis` (`primary_diagnosis`, `secondary_diagnosis`, `additional_diagnosis`)\nSELECT DISTINCT `diag_1`, `diag_2`, `diag_3`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_junk_diagnosis`;\n6.6 Loading to Admission Junk Dimension\nLets load all distinct values for the junk dimension.\nThere are 391 distict values with including NULL values.\nINSERT INTO `diabetes_dwh`.`dim_junk_admissionDetails` (`admission_type`, `admission_source`, `medical_speciality`)\nSELECT DISTINCT `admission_type`, `admission_source`, `medical_specialty`\nFROM `diabetes_dwh_staging`.`dataset_modified`;\n\nSELECT COUNT(*) FROM `diabetes_dwh`.`dim_junk_admissionDetails`;\n6.7 Loading to Fact\nSELECT `stg`.`encounter_id`,\n\t`patient`.`patient_sk`, `test`.`test_results_sk`,\n    `stg`.`time_in_hospital`, `stg`.`num_lab_procedures`\nFROM `diabetes_dwh_staging`.`dataset_modified` as `stg`,\n\t`diabetes_dwh`.`dim_patient` as `patient`, \n    `diabetes_dwh`.`dim_test_results` as `test`,\n    `diabetes_dwh`.`dim_discharge` as `discharge`,\n    `diabetes_dwh`.`dim_medication` as `medication`,\n    `diabetes_dwh`.`dim_junk_diagnosis` as `diag`,\n    `diabetes_dwh`.`dim_junk_admissionDetails` as `adm_details`\nWHERE `stg`.`patient_nbr` = `patient`.`patient_number` AND `stg`.`age` = `patient`.`age`\n\tAND `test`.`glucose_serum_test_result` = `stg`.`max_glu_serum` AND `test`.`a1c_test_results` = `stg`.`A1Cresult`\n    AND `stg`.`discharge`.`discharge_disposition` = `discharge_disposition` AND `stg`.`readmitted` = `discharge`.`readmitted` AND `srg`.`payer_code` = `discharge`.`payer_code`;\nData Mining\nTransforming for Data Mining\nTransform age to an integer value. (eg transform ""[40-50)"" to 45)\nDROP PROCEDURE IF EXISTS `diabetes_dwh_staging`.`transform_for_datamining`;\nDELIMITER ;;\n\nCREATE PROCEDURE `diabetes_dwh_staging`.`transform_for_datamining`()\nBEGIN\n\nDECLARE i INT DEFAULT 0;\nDECLARE age_str VARCHAR(10);\nDECLARE age_str_int INT;\n\nALTER TABLE `diabetes_dwh_staging`.`dataset_modified`\nADD COLUMN `age_int` INT;\n\nWHILE i < 10 DO\n\tSET age_str = CONCAT(\'[\', i * 10, \'-\', (i+1) * 10, \')\');\n    SET age_str_int = i * 10 + 5;\n    \n    UPDATE `diabetes_dwh_staging`.`dataset_modified`\n    SET `age_int` = age_str_int\n    WHERE `age` = age_str;\n    \n    SET i = i+1;\nEND WHILE;\n\nEND;;\n\nDELIMITER ;\nCALL `diabetes_dwh_staging`.`transform_for_datamining`();\nExport CSV file for Data Mining\nLets export diabetes_dwh_staging.dataset_modified table to csv file. Then it can be used with weka for data mining.\nReplace <dataset_directory> directory in the query with the absolute path of the file. Use \'/\' as path seperator.\nSELECT \'race\', \'gender\', \'age\', \'admission_type\',\n\t\'discharge_disposition\', \'admission_source\', \'time_in_hospital\', \'payer_code\',\n    \'medical_specialty\', \'num_lab_procedures\', \'num_procedures\', \'num_medications\',\n    \'number_outpatient\', \'number_emergency\', \'number_inpatient\', \'diag_1\', \'diag_2\',\n    \'diag_3\', \'number_diagnoses\', \'max_glu_serum\', \'A1Cresult\', \'metformin\', \'repaglinide\',\n    \'nateglinide\', \'chlorpropamide\', \'glimepiride\', \'acetohexamide\', \'glipizide\',\n    \'glyburide\', \'tolbutamide\', \'pioglitazone\', \'rosiglitazone\', \'acarbose\', \'miglitol\',\n    \'troglitazone\', \'tolazamide\', \'examide\', \'citoglipton\', \'insulin\', \'glyburide-metformin\',\n    \'glipizide-metformin\', \'glimepiride-pioglitazone\', \'metformin-rosiglitazone\',\n    \'metformin-pioglitazone\', \'change\', \'diabetesMed\', \'readmitted\'\nUNION\nSELECT `race`, `gender`, `age_int`, `admission_type`,\n\t`discharge_disposition`, `admission_source`, `time_in_hospital`, `payer_code`,\n    `medical_specialty`, `num_lab_procedures`, `num_procedures`, `num_medications`,\n    `number_outpatient`, `number_emergency`, `number_inpatient`, `diag_1`, `diag_2`,\n    `diag_3`, `number_diagnoses`, `max_glu_serum`, `A1Cresult`, `metformin`, `repaglinide`,\n    `nateglinide`, `chlorpropamide`, `glimepiride`, `acetohexamide`, `glipizide`,\n    `glyburide`, `tolbutamide`, `pioglitazone`, `rosiglitazone`, `acarbose`, `miglitol`,\n    `troglitazone`, `tolazamide`, `examide`, `citoglipton`, `insulin`, `glyburide-metformin`,\n    `glipizide-metformin`, `glimepiride-pioglitazone`, `metformin-rosiglitazone`,\n    `metformin-pioglitazone`, `change`, `diabetesMed`, `readmitted`\nFROM `diabetes_dwh_staging`.`dataset_modified`\nINTO OUTFILE \'D:/data_set.csv\'\nFIELDS TERMINATED BY \',\' ENCLOSED BY \'""\'\nLINES TERMINATED BY \'\\r\\n\';\nNow we can import this data set to Weka.\n'], 'url_profile': 'https://github.com/renuka-fernando'}","{'location': 'New York', 'stats_list': [['29', '          followers'], ['0', '          following'], ['10']], 'contributions': '98 contributions\n        in the last year', 'description': [""Abstract\nThe project implements 4 linear models and one deep learning model using scikit-learn: Logistic Regression, Naïve Bayes, Support Vector Machine, K-Nearest Neighbours and Multi-Layer Perceptron Neural network to investigate their performance on diabetes and heart disease datasets obtained from the UCI data repository.\nMulti-Layer Perceptron Neural Network outperforms other linear models however K-Nearest Neighbours gives identical results with less computing overhead. Performance improvements could also be achieved by using complex deep learning methods.\nExperiment Results\nCleveland Heart Disease Dataset\n\n\n\nClassifier\nHyper-parameters\nAccuray (10-fold CV)\n\n\n\n\nLogistic Regression\nC = 0.13, Penalty = l1\n83.84%\n\n\nLinear SVC\nC = 18.08\n84.85%\n\n\nNaïve Bayes\n\n84.51%\n\n\nK-Nearest Neighbors\nn_neighbors=13, weights='uniform'\n85.52%\n\n\nMulti-layer perceptron\nlearning_rate_init= 0.026958815931057856, hidden_layer_sizes = (29,26,5), learning_rate = constant, activation=identity, alpha = 16.681\n86.2%\n\n\n\nPIMA Indian Diabetes\n\n\n\nClassifier\nHyper-parameters\nAccuray (10-fold CV)\n\n\n\n\nLogistic Regression\nC = 0.25999, Penalty = l2\n77.6%\n\n\nLinear SVC\nC = 36.74999\n78.77%\n\n\nNaïve Bayes\n\n75.651%\n\n\nK-Nearest Neighbors\nn_neighbors=27, weights='uniform'\n78.125%\n\n\nMulti-layer perceptron\nlearning_rate_init= 0. 0.043967984410493759, hidden_layer_sizes = (23, 44), learning_rate = constant, activation=logistic, alpha = 0.1\n79.03%\n\n\n\nDeployment\n\n\nInstall Python 3 and virtualenv\na.\tIf the deployment is being done in ubuntu, run the following commands in the terminal\nsudo apt-get install python3 python3-pip python3-tk\nsudo pip install virtualenv\nb.\tIf the deployment is being done in windows, installing python is recommended using Anaconda\n\n\nDownload the zip, or clone it using git.\ngit clone https://github.com/nikhil-pandey/fyp-ml\n\n\nCreate a virtual environment and install the dependencies.\na.  In ubuntu, create the virtual environment for python 3 and activate it; then install the dependencies in requirements.txt file using the command\npip install -r requirements.txt\nb.\tFor windows, refer to requirements-anaconda.txt file for creating virtual environment and installing dependencies.\n\n\nRun app.py.\n\n\nLive Demo\nClick Here\nRead Full Report\nClick Here\nLicense\nThis project is open-sourced under the MIT license\n""], 'url_profile': 'https://github.com/nikhil-pandey'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\nGlucosio has moved to Gitlab! Visit our project repos on Gitlab\nglucosio-api\nGlucosio\'s API for Diabetes Research\napi endpoint\nhttp://api.glucosio.org/v1/readings\nmethod\nPOST\nexample JSON array\n(Content-Type: application/json)\n{""readings"":\n  [\n   {""value"":70, ""created_at"": ""2016-01-08:07:50:10"", ""user_id"":123, ""readingtype_id"": 1},\n   {""value"":99, ""created_at"": ""2016-01-08:09:45:03"", ""user_id"":123, ""readingtype_id"": 2},\n   {""value"":90, ""created_at"": ""2016-01-08:12:05:38"", ""user_id"":123, ""readingtype_id"": 3}\n  ]\n}\n\nreading types\n\n\n\nid\nreading type\n\n\n\n\n0\nother\n\n\n1\nbefore breakfast\n\n\n2\nafter breakfast\n\n\n3\nbefore lunch\n\n\n4\nafter lunch\n\n\n5\nbefore dinner\n\n\n6\nafter dinner\n\n\n7\nnight\n\n\n\n'], 'url_profile': 'https://github.com/Glucosio'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['MCT1: Minecraft for Type 1 Diabetes\nMCT1 simulates living with Type 1 Diabetes in Minecraft, with an epic quest and magic powers.\nMCT1 is a Scriptcraft plugin using the Scriptcraft Modular Architecture.\nTo Run\nPrerequisites\n\nDocker\nNode\nMinecraft Java Edition\n\nThe Easiest Way\nThe easiest way to run this - if you just want to try it out - is to just connect to our hosted server. In your Java Minecraft client just connect to the server mc.mct1.io.\nThe Easy Way\nThe easiest way to run this locally is to use the pre-built MCT1 Server:\nnpm i -g mct1-server\nmct1-server\nThe Middle Path\nUse smac to run it:\n\nInstall smac:\n\nnpm i -g smac\n\nGit clone this repo:\n\ngit clone https://github.com/Magikcraft/mct1.git\n\nUse smac to start the server:\n\ncd mct1/dev-server && smac start\nThe Hard Way\nIf you want to dev on this plugin, then you can run from source like this:\n\nGit clone this repo:\n\ngit clone https://github.com/Magikcraft/mct1.git\n\nGit clone the MCT1 worlds:\n\ngit clone https://github.com/Magikcraft/mct1-worlds.git\n\nStart them in docker:\n\ndocker run -it -p 25565:25565 --name mct1 \\\n--mount type=bind,src=$(pwd)/mct1-worlds,dst=/server/worlds \\\n--mount source=scriptcraft-cache,target=/server/cache \\\n--mount type=bind,src=$(pwd)/mct1,dst=/server/scriptcraft-plugins/@magikcraft/mct1 \\\nmagikcraft/scriptcraft\nContributing\nSee CONTRIBUTING.md for details on development practices.\n'], 'url_profile': 'https://github.com/Magikcraft'}","{'location': 'Kolkata', 'stats_list': [['17', '          followers'], ['21', '          following'], ['17']], 'contributions': '9 contributions\n        in the last year', 'description': ['Diabetes_Prediction_Software\nThis is Diabetes Prediction Software, using Python. This is a Machine Learning model. Here, I use KNN algorithm.\nYou need to install:\n\npip install pywin32 (for windows)\npip3 install pywin32 (Linux or Mac)\nIf this is not working, then try both pip install pywin32 and pip install pypiwin32\npip install sklearn\npip install pandas\npip install matplotlib\n\nDownload this, and put into a same folder.\nOpen jupyter notebook on this folder.\nThen run the ""Diabetes_Prediction_Software.ipynb"" or diabetes prediction software.py (use any ide for .py)\nEnter values for prediction\nIf you want to watch prediction time, graphs, etc. Then run the “knn.py”\nTry this values:\n148,72,35,0,33.6,0.6277,50 for diabetes\nand try this for non diabetes\n89,66,23,94,28.1,0.167,21\n'], 'url_profile': 'https://github.com/codeingschool'}","{'location': 'Lagos', 'stats_list': [['18', '          followers'], ['21', '          following'], ['96']], 'contributions': '65 contributions\n        in the last year', 'description': ['Diabetetics Neural Net\nA javascript & MATLAB neural network written to predict the possibility of having diabetes in percentile.  The training dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nRequired tools\n\nMATLAB Neural Net Toolbox: used to train the Neural Network.\n\nCurrent Stage\n\nTrained Models\nUtilized trained data in javascript library\nSupport PHP to utilize library (enables live testing)\nInclude  procfile for deployment on Heroku. Visit Diabetics prediction heroku deployed\n\nFuture plans\n\nRetrain the network using tenserflow and LSTM for better accuracy.\n\nImprovement\nVisit Kaggle: Pima Indians Diabetics Database for better ways of training this model.\n'], 'url_profile': 'https://github.com/virgincodes'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Comprehensive Diabetes Model Schema\nThis repository is home to the JSON Schema used to validate the comprehensive\ndiabetes model. It is a collaborative effort between\nRTI International Center for Data Science\nand Squishymedia.\nThis schema is used to validate a model configuration file. It is written using the\ndraft-04 specification.\n'], 'url_profile': 'https://github.com/RTIInternational'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes:M Add-on example\nIntroduction\nThis is an example app which demonstrates how to exchange data with Diabetes:M application for Android.\nIf you need to open the Log Entry form and pass glucose value to save, you don\'t have to request for any permissions and use the API at all. You simply can pass the intent as shown below:\nIntent intent = new Intent(""com.mydiabetes.action.SAVE_LOG_ENTRY"");\nintent.putExtra(""DATETIME"", System.currentTimeMillis());\nintent.putExtra(""GLUCOSE"", 8.5f);\n//intent.putExtra(""ESTIMATED"", true);//Use ESTIMATED parameter if this glucose check must not be used for calibration\nstartActivity(intent);\nIf need to read the configuration and last glucose value and/or push some data silently, then you must use the provided API.\nHow to start\nThe easiest way is to clone this repository and use it as a seed project.\nIf you already have an existing project then you must copy the library module located at app/libs/diabetes_m_addon_api_1.0.aar to your project app/libs folder.\nTo include the api library you have to add the following lines to your app gradle file:\ndependencies {\n    compile fileTree(dir: \'libs\', include: [\'*.jar\'])\n \n    //other dependencies\n     \n    compile \'com.google.code.gson:gson:2.7\'\n    compile \'com.diabetesm.addons.api:diabetes_m_addon_api_1.0@aar\'\n}\nAdd next lines in your proguard-rules file:\n-keep class com.diabetesm.addons.api.** { *; }\n-keep class * implements com.google.gson.TypeAdapterFactory\n-keep class * implements com.google.gson.JsonSerializer\n-keep class * implements com.google.gson.JsonDeserializer\n\nCreate instance of DiabetesAppConnection and check for Diabetes:M package status:\nfinal DiabetesAppConnection diaConnection = new DiabetesAppConnection(MainActivity.this);\n \nDiabetesAppConnection.DiabetesMCheck checkStatus = diaConnection.checkDiabetesMApp();\nif (checkStatus != DiabetesAppConnection.DiabetesMCheck.OK) {\n    //update UI id Diabetes:M doesn\'t support this API or is not installed\n    mReadData.setEnabled(false);\n    mPushData.setEnabled(false);\n    String message = checkStatus == DiabetesAppConnection.DiabetesMCheck.NOT_FOUND ? \n            ""Missing Diabetes:M app!"" : \n            ""Incompatible Diabetes:M version. Must be 5.0.5 or above!"";\n    mResult.setText(message);\n    return;\n}\nThen request access from Diabetes:M app as shown below:\nDiabetesAppConnection diaConnection = new DiabetesAppConnection(this);\ndiaConnection.requestAccess(this, requestPushDataAccess, ACCESS_REQUEST_CODE);\nHandle the result in onActivityForResult:\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n \n    //Check for the access request code\n    if (requestCode==ACCESS_REQUEST_CODE) {\n        //Create instance of DiabetesAppConnection so we can check the response from Diabetes:M\n        DiabetesAppConnection diaConnection = new DiabetesAppConnection(MainActivity.this);\n        //Call onActivityResult to decode for us the access status\n        DiabetesAppConnection.AccessPermission res = diaConnection.onActivityResult(resultCode, data);\n        if (res == DiabetesAppConnection.AccessPermission.GRANTED){\n            //We must check for ""pushDataPermission"" extra so we can know if the push data permission is granted\n            boolean isPushEnabled = data.getExtras().getBoolean(""pushDataPermission"", false);\n \n            //initialize all the stuff related to Diabetes:M communication ...\n \n            mResult.setText(""Access granted! ("" + (isPushEnabled ? ""FULL ACCESS"" : ""READ ONLY"") + "")"");\n \n            mReadData.setEnabled(true);\n            mPushData.setEnabled(isPushEnabled);\n        } else if (res == DiabetesAppConnection.AccessPermission.REJECTED){\n            mResult.setText(""Access rejected!"");\n        } else {\n            mResult.setText(""Canceled!"");\n        }\n    }\n}\nRead configuration data and last glucose value\nIf you are granted access permission then the configuration data can be read with:\nfinal DiabetesAppConnection diaConnection = new DiabetesAppConnection(this);\ndiaConnection.requestSimpleData(new DiabetesAppConnection.IResultListener() {\n    @Override\n    public void onResult(Bundle resultData) {\n        if (resultData.getString(DiabetesAppConnection.RESULT_KEY, """").equals(DiabetesAppConnection.RESULT_UNAUTHORIZED)) {\n            mResult.setText(""Unauthorized"");\n            mReadData.setEnabled(false);\n            mPushData.setEnabled(false);\n            return;\n        }\n \n        final Configuration configuration = DiabetesAppConnection.getConfiguration(resultData);\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                @SuppressLint(""SimpleDateFormat"")\n                DateFormat df = new SimpleDateFormat(configuration.getDateFormat() + "" "" + configuration.getTimeFormat());\n \n                String result =\n                        ""DateFormat: ""+configuration.getDateFormat()+""\\n"" +\n                        ""TimeFormat: ""+configuration.getTimeFormat()+""\\n"" +\n                        ""Glucose Unit: ""+configuration.getGlucoseUnit()+""\\n"" +\n                        ""Calibration glucose time: ""+df.format(new Date(configuration.getCalibrationGlucoseTime()))+""\\n"" +\n                        ""Calibration glucose: ""+configuration.getCalibrationGlucose()+""\\n""\n                        ;\n                mResult.setText(result);\n            }\n        });\n    }\n});\nPush data silently\nTo push data silently you must prepare the list with log entries to save. You may save only limited data to Diabetes:M application which is:\n\nentry date/time\nglucose reading in mmol/l\nbolus insulin units\nbasal insulin units\ncarbs taken\nfat taken\nprotein taken\ncalories taken\nnote\n\nIf your LogEntry contains sensor glucose reading then use setSensor(isSensor) to specify this.\nIn the following code 2 entries are created - one normal glucose check and one sensor glucose check\nList<LogEntry> pushData = new ArrayList<>();\n \n//Prepare the first entry at current time\nCalendar cal = Calendar.getInstance();\nLogEntry entry1 = new LogEntry();\nentry1.setDateTime(cal.getTimeInMillis());\nentry1.setGlucose(5.6f);\nentry1.setNote(""API Example: Pushed normal glucose!"");\npushData.add(entry1);\n \n//Prepare the second entry at one hour ago. This entry is set as sensor entry!\ncal.add(Calendar.HOUR, -1);\nLogEntry entry2 = new LogEntry();\nentry2.setDateTime(cal.getTimeInMillis());\nentry2.setGlucose(8.9f);\nentry2.setSensor(true);\nentry2.setNote(""API Example: Pushed sensor glucose!"");\npushData.add(entry2);\nTo push this data we call pushData method from the api instance:\n//Instantiate DiabetesAppConnection and call pushData\nDiabetesAppConnection diaConnection = new DiabetesAppConnection(this);\ndiaConnection.pushData(pushData, new DiabetesAppConnection.IResultListener() {\n    @Override\n    public void onResult(Bundle bundle) {\n        //In callback check the result\n        final String result = bundle.getString(DiabetesAppConnection.RESULT_KEY, """");\n \n        if (result.equals(DiabetesAppConnection.RESULT_UNAUTHORIZED)) {\n            mResult.setText(""Unauthorized"");\n            mReadData.setEnabled(false);\n            mPushData.setEnabled(false);\n            return;\n        }\n \n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                mResult.setText(""PushData result = "" + result);\n            }\n        });\n    }\n});\n'], 'url_profile': 'https://github.com/sirmamedical'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/openmhealth'}","{'location': 'delhi india', 'stats_list': [['1', '          follower'], ['0', '          following'], ['7']], 'contributions': '4 contributions\n        in the last year', 'description': ['Personalised-Diabetes-care-Assistant\nTagline\nA smart app for persons with type II diabetes to manage their blood glucose levels by providing personalized recommendations on exercise using reinforcement learning.\nSummary Paragraph\nThe management of type II diabetes is multimodal. The interplay between diet, blood sugar-lowering medications and exercise dictate the changes in the blood glucose levels. For a given diet, a balance between adequate exercise and medications can effectively maintain blood glucose within a normal range. By using reinforcement learning, our application learns a person’s response to medications and exercise overtime.  The app helps minimize the person’s dependance on medications for maintaining optimal blood glucose levels by providing personalized recommendations on exercise type, duration and intensity.\nSolution\nWe identify persons at increased risk for type II diabetes using a standard questionnaire. From those persons at increased risk or with diabetes, additional information on their blood glucose, exercise, sleep, insulin use etc is obtained. These are evidence based factors that play a role in the changes in blood glucose levels.\nTo begin with, the user receives standard evidence based recommendations on exercise: 150 mins/week of moderate intensity exercise. As the user continues to use the application, his/her information is used to train a reinforcement learning based model to predict the best combination of insulin and exercise needed to maintain blood glucose within a normal range. By providing recommendations on exercise levels, the app aims to minimize insulin use and motivate people to use exercise more effectively in the management of their blood glucose.\nTeam Members\nDr. Rahul Gaiba \nResident Physician \nrahulgaiba@gmail.com\nSumit Rathore \nsumitrathore1313@gmail.com\nAditya Rustagi \nrustagiadi95@gmail.com\n'], 'url_profile': 'https://github.com/sumitrathore1313'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['tide-whisperer\n\nData access API for tidepool\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'La Jolla, CA', 'stats_list': [['16', '          followers'], ['2', '          following'], ['134']], 'contributions': '195 contributions\n        in the last year', 'description': ['Synopsys Project 2016-2017\nLeveraging Deep Learning to Derive De Novo Epigenetic Mechanisms from PPARGC1A to Account for Missing Heritability in Type II Diabetes Mellitus\nData / Statistical Analysis Jupyter Notebooks\nUntil Github fixes notebook renderings, please visit the following links (same as notebooks/)\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.1-mhl-data-analysis.ipynb\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.1-mhl-model-predictions.ipynb\nhttps://nbviewer.jupyter.org/github/minhoolee/Synopsys-Project-2017/blob/master/notebooks/0.2-mhl-model-predictions.ipynb\nSynopsys Competition Tri-Fold\n\nThe focus of the project was in using deep learning to predict novel epigenetic\nmechanisms like DNase I sites, histone modifications, and\ntranscription factor binding sites from raw genomic sequences. Type II\ndiabetes (T2D) is a common disease that affects millions of people each year,\nbut as of today, only around 10% of its heritability has been explained.\nResearchers speculate that this is because epigenetics is heavily involved, so\nmy project was designed to interpret millions of samples and hundreds of\nepigenetic regulators to be able understand the combinatorial effects of these\nepigenetic mechanisms.\nI conducted this independent research project for the Synopsys science fair as\na high school junior. In order to train my models, I built my own custom PC (see\nspecs here). I would like to\nthank my mentor, Renee Fallon, in providing me biology textbooks and general advice.\nCustom Built PC\n\nSteps for reproducing results\nStep 1. Get data\nDownload processed data from DeepSEA\nand move them to data/processed/\nData is processed in the following manner:\n\nData on histone modifications, DNase I hypersensitive sites, and\ntranscription factor binding sites is collected from ChIP-seq and DNase-seq\nmethods. This data entails 919 ChIP-seq and DNase-seq peaks from processed\nENCODE and Roadmap Epigenomics data releases for GRCh37. This data is\npublically available to download and has been processed by the researchers of\nthe DeepSEA framework (Zhou). The input is encoded in a 1000 x 4 binary matrix,\nwith the columns corresponding to A, T, G, and C. The rows corresponds to the\nnumber of bp (1kbp) in a single bin that will serve as the input for a single\nneuron. These 1000 bp regions are centered around 200 bp sequences that contain\nat least one transcription factor site (400 bp sequence paddings for genome\nsequence context). The data is split into test, train, and validation sets, and\nthe sets are separated based off of chromosomes in order to ensure that the\nmodel can be tested for high bias.\n\nStep 2. Create model\nCreate a method in src/models/create_models.py that constructs a Keras model\n(sequential, functional, etc.) and then returns it.\nStep 3. Train model\nRun make train MODEL_FUNC=\'<method from step 2>\' MODEL_NAME=\'<some unique identifier>\'\nStep 4. Test model and generate predictions\nRun make test MODEL_FUNC=\'<same as from step 3>\' MODEL_NAME=\'<same as from step 3>\'\nStep 5. Generating performance (ROC/PR, stdev, etc.) scores and visualizations\nSee notebooks/ and run the code after ""Execute the following"" headers. Make\nsure to run them with the Theano backend for Keras because the models were all\ntrained on Theano.\nProject Organization\n├── LICENSE\n├── Makefile                  <- Makefile with commands like `make data` or `make train`\n├── README.md                 <- The top-level README for developers using this project.\n├── data\n│\xa0\xa0 ├── external              <- Data from third party sources.\n│\xa0\xa0 ├── interim               <- Intermediate data that has been transformed.\n│\xa0\xa0 ├── processed             <- The final, canonical data sets for modeling.\n│\xa0\xa0 └── raw                   <- The original, immutable data dump.\n│\n├── docs                      <- A default Sphinx project; see sphinx-doc.org for details\n│\n├── models                    <- Trained and serialized models, model predictions, or model summaries\n│   ├── csv                   <- CSV logs of epoch and batch runs\n│   ├── json                  <- JSON representation of the models\n│   ├── predictions           <- Predictions generated the train models and their best weights\n│   ├── weights               <- Best weights for the models\n│   └── yaml                  <- YAML representation of the models\n│\n├── notebooks                 <- Jupyter notebooks. Naming convention is a number (for ordering),\n│                                the creator\'s initials, and a short `-` delimited description, e.g.\n│                                `1.0-jqp-initial-data-exploration`.\n│\n├── references                <- Data dictionaries, manuals, and all other explanatory materials.\n│\n├── reports                   <- Generated analysis as HTML, PDF, LaTeX, etc.\n│\xa0\xa0 └── figures               <- Generated graphics and figures to be used in reporting\n│\n├── requirements.txt          <- The requirements file for reproducing the analysis environment, e.g.\n│                                generated with `pip freeze > requirements.txt`\n│\n├── src                       <- Source code for use in this project.\n│\xa0\xa0 ├── __init__.py           <- Makes src a Python module\n│   │\n│\xa0\xa0 ├── data                  <- Scripts to download or generate data\n│\xa0\xa0 │\xa0\xa0 └── make_dataset.py\n│   │\n│\xa0\xa0 ├── features              <- Scripts to turn raw data into features for modeling\n│\xa0\xa0 │\xa0\xa0 └── build_features.py\n│   │\n│\xa0\xa0 ├── logging               <- Scripts to improve python logging\n│\xa0\xa0 │\xa0\xa0 └── log_utils.py\n│   │\n│\xa0\xa0 ├── models                <- Scripts to train and test models and then use trained models to make\n│   │   │                         predictions\n│\xa0\xa0 │\xa0\xa0 ├── create_models.py  <- Script to create a keras model and return it to train_model.py\n│\xa0\xa0 │\xa0\xa0 ├── predict_model.py\n│\xa0\xa0 │\xa0\xa0 ├── test_model.py\n│\xa0\xa0 │\xa0\xa0 └── train_model.py\n│\xa0\xa0 │\n│   │── unit_tests            <- Scripts to test each unit of the other scripts\n│\xa0\xa0 │\n│\xa0\xa0 └── visualization         <- Scripts to create exploratory and results oriented visualizations\n│\xa0\xa0     ├── plot_train_valid.py\n│\xa0\xa0     ├── stats.py\n│\xa0\xa0     └── visualize.py\n│\n└── tox.ini                   <- tox file with settings for running tox; see tox.testrun.org\n\n\nProject based on the cookiecutter data science project template. #cookiecutterdatascience\n'], 'url_profile': 'https://github.com/minhoolee'}","{'location': 'NONE', 'stats_list': [['8', '          followers'], ['8', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['estaina.github.io\n'], 'url_profile': 'https://github.com/estaina'}","{'location': 'Munich, Germany', 'stats_list': [['75', '          followers'], ['55', '          following'], ['100']], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes60 Dataset\nRGB-D images of 60 western dishes, home made. Data was recorded using a Microsoft Kinect V2. Feel free to read and cite our corresponding paper.\nRaw dataset\nThe raw dataset contains 60 chunks of RGBD pairs of typical german dishes. Within the current version, there are some duplicate dishes, so there may be more than 60 scenes in total.\nDownload the raw dataset from here.\nPython utilities\nUse the utilities in python/utils.py to load the data. Basically, images are dumped in plain .npz format, whereas color has 4 channels (BGRA) and depth has 1 channel. The helper function in the python package removes the alpha channel by default and performs a barrel roll such that the channel format becomes RGB. The Kinect sensor typically records depth values in millimeters so you can divide the depth values by a factor of 1000 to obtain meters.\nCite\n@InProceedings{Christ_2017_ICCV, author = {Ferdinand Christ, Patrick and Schlecht, Sebastian and Ettlinger, Florian and Grun, Felix and Heinle, Christoph and Tatavatry, Sunil and Ahmadi, Seyed-Ahmad and Diepold, Klaus and Menze, Bjoern H.}, title = {Diabetes60 - Inferring Bread Units From Food Images Using Fully Convolutional Neural Networks}, booktitle = {The IEEE International Conference on Computer Vision (ICCV)}, month = {Oct}, year = {2017} }\n'], 'url_profile': 'https://github.com/PatrickChrist'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['2']], 'contributions': '38 contributions\n        in the last year', 'description': [""Practice Fusion Diabetes Classification Challenge\nhttps://www.kaggle.com/c/pf2012-diabetes\nAuthor: Jeffrey DeVince\n\nMachine Learning approach to identifying patients diagnosed with Type 2 Diabetes\nThe Practice Fusion Diabetes Classification Challenge provided 10,000 de-identified electronic medical records\nand challenged paticipants to build a model to accurately predict the probability that a patient is diagnosed with type II diabetes.\n\nFull Paper and Presentation Slides available above\nSetup:\n\nCheckout project using Git\nDownload compData.db from https://drive.google.com/open?id=0B-TrMT6ioVZCQ2g4QVhTbU12NW8\nSave compData.db inside the project's Data folder\n\nTechnical Notes:\n\nPython 2.7\nRequires numpy and sklearn python modules. I recommend using the Anaconda python distribution which comes with these and many other useful data science packages\n\n""], 'url_profile': 'https://github.com/jdevince'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['MCT1 Server\nRun a Minecraft for Type 1 Diabetes Server on your local machine.\nPrerequisites\n\nDocker\nNode\nMinecraft Java Edition\n\nInstall\nnpm i -g mct1-server\nRun\nUse the mct1-server command to start and stop the server.\n➜ mct1-server\n\nMCT1 Server - by Magikcraft.io\nVersion 0.0.11\n\nUsage:\nmct1-server <command>\n\nAvailable commands:\nstart \t Start the MCT1 server\nstop \t Stop the MCT1 server\nstatus \t Get the status of the MCT1 server\n\nStart the server:\n\nmct1-server start\nNow you can connect your Minecraft client to localhost.\n\nStop the server:\n\nmct1-server stop\n\nGet the server status:\n\nmct1-server status\n'], 'url_profile': 'https://github.com/Magikcraft'}","{'location': 'Accra,Ghana', 'stats_list': [['83', '          followers'], ['63', '          following'], ['39']], 'contributions': '0 contributions\n        in the last year', 'description': ['It is a simple web application that allows you to know your diabetes status. You can test it from here and it is live http://diabetes.oasiswebsoft.com/\n'], 'url_profile': 'https://github.com/raindolf'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['1', '          following'], ['9']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes classification\n1. Introduction\nData exploration and machine learning classification on the Pima Indians Diabetes Data Set from UCI.\n1.1 Problem\nThe Pima indians (Akimel Oodham) of Arizona have the highest rate of diabetes of any population in the world. Hence we should be able by analysing data and using machine learning make predictive indications on how likely a person is to get diabetes.\n1.2 The data\nThe Pima Indian diabetes database, donated by Vincent Sigillito, is a collection of medical diagnostic reports. The dataset is publicly available both at UCI and Kaggle.\n1.3 File structure\n\n2. Method\nThe methodology consists roughly of two chronological steps. First the data is thoroughly explored and dimensionality reduction is applied. Secondly different models are tested, one is chosen and optimized to our problem. The work-flow of these two steps are carried out in two python-notebooks mentioned above.\n2.1 Data exploration\nInitial exploration and analysis of the dataset.\n2.1.1 Distributions and relationship\nFirst the distributions of the different attributes and their relationship to the target are inspected by the means of histograms and correlation.\n2.1.2 Splitting and standardize the data\nAt this stage we drop missing data. Before dimensionality reduction (so that no bias is introduced) the data is separated into an training set (Train.csv, 691 instances) and a test set (Test.csv, 77 instances) by a factor of 10%. The test set wont be used at any point, this set will eventually simulate new data used to evaluate the final model. Additionally the training data is then z-normalized, i.e each attribute distribution is transformed to a N(0,1) distribution. We normalize the data to reduce sensitivity to the scale of the attributes and hence eventually reduce sensitivity of potential models.\n2.1.3 Dimensionality reduction\nThe dimensionality reduction will be done by the means of two different algorithms with different approaches to the problem, one that is unsupervised and changes the attributes (attribute extraction) and one that is supervised but does not change the attributes (attribute selection).\n2.1.3.1 Principal Components Analysis\nWith respect to the explained variance we reduce the dimensionality. Unfortunately applying PCA means that we are losing the attribute interpretability, something that can be useful for a doctor. The algorithm is implemented in mypca.py.\n2.1.3.2 Backward Attribute Elimination\nBackward Attribute Elimination (BFE) is an recursive feature elimination. You start with all n attributes. Then some metric is computed on the model n times, one for all combinations of n-1 attributes. The attribute which decreases the error the least is then dropped. We do this recursively finally leaving us with one attribute and hence an importance order. To be sure to prune of the correct attributes we look at the accuracy using two different classifiers, logistic regression and a k-nearest neighbour classifier. The algorithm is implemented in bfe.py.\n2.2 Model selection\nTesting and deciding on a predictive model. The training data is split into a validation set and a training set (10%).\n2.2.1 Comparing classification models with K-fold cross validation\nA baseline for the problem is established by using cross validation and a few classification models. If we use k-fold cross validation, since our dataset is quite small, a splitting of our data into to few folds could introduce a substantial bias. On the other hand if we chose k to large we will have a lot of variance. With the small data-set in the back of out head we chose k to be moderately large, 18. The models used are Logistic regression, Gaussian Naive Bayes, 4-Neighbors, Decision tree with Gini impurity criterion, Decision tree with Information gain criterion and Support vector machine.\n2.2.2 Evaluate models using Confusion Matrixes and validation data\nA closer look on how the different models perform on the validation data and if the confusion matrixes reveals any further information about the models.\n2.2.3 Inspecting and optimizing the model\nWith respect to the result of the previous two sections we should have reduced the number of models to one and decided on a transform of the data. Next we inspect how the model varies across different parameter choices. We analyse if there is any substantial variance or bias in the model. This is then followed up by a complete parameter search (Gridsearch) to find the optimal choice. The algorithm is implemented in utils.py and is called gridsearch. The algorithm supports, in contrast to the sklearn algorithm, evaluation of arbitrary metric on validation data to find the optimal parameter combination as well as an tiebreaker metric.\n2.2.4 Pipeline\nTo automate the work-flow the final model is incorporated into an pipeline that can handle eventual missing values and performs the necessary transformations.\n2.2.5 Test\nFinally we test the final model on the held out test-set.\n3. Result\n3.1 The data\nInspecting the data reveals some missing values (values that are physically impossible), labelled as 0’s. We replaced all of these with NaN place-holders instead. The distributions of the attributes are a mix of normal-looking, often with an positive skew, and exponential looking-distributions. The correlations reveal minor positive linear relationships and not anything unexpected.\n\n3.1.1 Principal component analysis\nAs the explained variance ratio is inspected we note that most of the components will be needed to account for all the variance. Using two components a scatter plot of the data is viewed to see how well the classes is separated, not very good in a linear sense. 5 components is chosen, that will cover almost 100 percent of the variance.\n\n3.1.2 Backward Attribute Elimination\nBoth logistic regression and the 6-nearest neighbour classifier (euclidean distance) agrees on the importance of the attributes to some extent. The accuracy increase if we drop two or three attributes depending on the set, taking the union of these two subsets we get the new set: Glucose, Pregnancies, BMI, SkinThickness, Insulin and BloodPressure Hence we drop DiabetesPedi- greeFunction and Age.\n3.2 Models\nEvaluating the models using 18-fold cross validation and the three different versions of the dataset (Raw data, PCA data and BFE data) does not reveal any significantly better accuracy for any of the data sets, different models perform differently across the datasets. Logistic regression seems to be the best performing model.\n\n3.2.1 Confusion Matrixes\nAlmost all models predict the unseen validation worse than the 18-fold cross validation score revealed. The models that classifies the validation set significantly better is the decision trees. As we inspect the confusion matrix we note that most of the models have almost identical predictions when it comes to instances with true negative outcomes (Figure 4). Where they differ and where some of the the decision trees is superior is when we try to predict true positive outcomes. Many of the models are worse than random guessing. This could be the False positive paradox. Basically since the majority of the instances has outcome not diabetes our models will favour predicting not diabetes. This leads to another paradox, namely the accuracy paradox. Basically it means that because of the imbalance in outcomes predictive models with a given accuracy might have greater predictive capability than a model with higher accuracy. Hence we exchange accuracy as metric in favour of AUC - The area under the ROC (receiver operating characteristic) curve. The ROC curve is the true positive rate (TPR) against the false positive rate (FPR) at various thresholds/ranks for the instances. The area under the curve measures discrimination, the ability to correctly classify those with and without diabetes in our case.\nEvaluating our models using the validation set and AUC instead of accuracy the decision trees using all the data is superior.\n\n3.2.2 Explore the model\nAs familiar decision trees have high variance. As such we now look at the effect of increasing the maximum depth of the tree and at the same time inspecting the deviation of 100 trees at that depth. The maximum leaf nodes is fixed to avoid overfitting. The resulting plot does not imply any overfitting, by inspection the best model is the decision tree with entropy criterion however the gini trees seem to handle false positives better.\n\n3.2.3 Optimizing the parameters\nBy using a grid search the entire parameter space is explored with AUC as the metric to optimize and zero-one-loss as an tiebreaker. The best trees chosen usually have the same AUC score and zero-one-loss, most often 0.8875. Every time we run the parameter search another combination of parameters will be the best because of the intrinsic variance of decision trees, though most of the best trees performs well because of the natural low bias of decision trees. However reusing the best parameter combination yields different result every time we train a new tree because of the intrinsic variance, sometimes the predictions are really good and sometimes worse. Remember that the trees are tuned to the validation set and might, probably wont, generalize good to new data.\nThere is some pattern to what sort of combinations work for the problem. For the entropy criterion trees the best performing ones the maximum depth is between 5 and 7, the maximum number of leaves between 22 and 26 and using balanced weighting for the classes. The balanced weighting adjust the weights for the classes inversely proportional to class frequencies, basically counteracting the false positive hypothesis paradox mentioned earlier. For the gini criterion trees the maximum depth is around 7, the maximum number of leaves varies a lot but tend to approach higher values (≈25) and using the proposed 1.105, 1.15 weighting for the classes.\n3.2.4 Ensembles\nWe could use an ensemble to decrease variance and try to make our model generalize well. Both Bootstrap aggregating and ran- dom forest is tried using the generally best decision tree: entropy, max_depth=5, max_leaf_nodes=22, and class_weight=’balanced’. It should theoretically provide the stability we need and reduce variance. Both the algorithms provide the decrease in variance but does instead introduce an substantial unacceptable bias. Looking back at when we compared entropy and gini criterion and looked at the effect of the depth and variance. Remember that the gini trees generally had few false positives while entropy trees had few false negatives. An viable hypothesis might be that the two complement each other, and because we in the ensembles above only use the one or the other they doesn’t improve our predictive capability.\n\n\n3.2.5 Final model: Hard Voting Classifier\nThe voting classifier consists of 100 trees and a 5:4 ratio of entropy and gini trees since the gini trees showed less potential in the grid search. The classification is done using a majority vote rule. The parameters for the entropy tree is as above and for the gini tree max_depth=7, max_leaf_nodes=25, class_weight={0: 1.105, 1: 1.15}. This yields an amazing result, AUC of nearly 89 for the validation set and 93 for the training set. That’s not a gigantic difference and hopefully the constraints on the trees have prevented the model from overfitting on the training data.\n3.2.6 Pipeline\nBefore evaluating the model on the test set we train our model on the entire training dataset with some simple mean-imputing. We also put it into a pipeline to automate the workflow. The model is found in model.py.\n3.3 Test\nEvaluating our model on the test set without missing values gives an accuracy of 0.88 and AUC of 0.89.\n\n4. Discussion\nI think that the best accuracy I’ve seen on this dataset was an optimized gradient boosting classifier with approximately 86%. On the other hand this classifier could handle missing values and used 20% of the data as an testing set. So an future project could be to by further looking in to bagging, construct something using both entropy and gini and that samples both the features and data with replacement making it prone to missing values.\nAlso since dimensionality reduction clearly did not work out feature-construction might be something that could boost the predictive capability of an model.\n5. Conclusion\nThe model does classify the new test data with really good accuracy but do not have the interpretability that you might want or any sophisticated way to handle missing values.\nAuthor\n\nLudwig Tranheden\n\n'], 'url_profile': 'https://github.com/Tranhd'}"
"{'location': 'Patna', 'stats_list': [['10', '          followers'], ['17', '          following'], ['5']], 'contributions': '152 contributions\n        in the last year', 'description': ['Early Stage Diabetes Prediction - Deployed\n\n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• Dataset link: https://archive.ics.uci.edu/ml/datasets/Early+stage+diabetes+risk+prediction+dataset.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://early-diabetes-pred.herokuapp.com/\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n'], 'url_profile': 'https://github.com/Sonalikhasyap15'}","{'location': 'Goiânia - GO', 'stats_list': [['64', '          followers'], ['12', '          following'], ['2']], 'contributions': '69 contributions\n        in the last year', 'description': ['Analise Exploratória de Casos de Diabetes\nAnálise exploratória utilizando  Pandas e Numpy e criação de modelo de classificação com Machine Learning para casos de diabetes.\nOs modelos criados para testes foram:\n\nNaive Bayes\nRandom Forest\nLogistic Regression\n\nPara utlização do modelo a fins de testes foi utilizado uma API com o Flask.\n'], 'url_profile': 'https://github.com/cicerojmm'}","{'location': 'Huntington Beach, CA', 'stats_list': [['96', '          followers'], ['38', '          following'], ['153']], 'contributions': '1,182 contributions\n        in the last year', 'description': [""Deep Learning Example using SHAInet\nThis workbook demonstrates how to create a Deep Learning network using SHAInet.  We will be using the Pima Indians dataset to predict diabetes.\nInstallation\nThis requires crystal 0.23.1\nUsage\nThis project uses crystal's playground.  You can load and run the playground workbook using:\nshards install\ncrystal play\nopen http://localhost:8080\nThen select the Workbook -> Diabetes from the menu.\nYou can also compile and run the application:\ncrystal run src/diabetes.cr\nContributing\n\nFork it ( https://github.com/drujensen/diabetes/fork )\nCreate your feature branch (git checkout -b my-new-feature)\nCommit your changes (git commit -am 'Add some feature')\nPush to the branch (git push origin my-new-feature)\nCreate a new Pull Request\n\nContributors\n\ndrujensen Dru Jensen - creator, maintainer\n\n""], 'url_profile': 'https://github.com/drujensen'}","{'location': 'Seattle', 'stats_list': [['62', '          followers'], ['0', '          following'], ['1']], 'contributions': '273 contributions\n        in the last year', 'description': ['\n\n\ndescription\n\n\n\n\nHow artificial pancreas “closed loop” systems can aid you in living with diabetes\n\n\n\nAutomated Insulin Delivery\nAutomated insulin delivery is a technology for managing type 1 diabetes that goes by many names: hybrid or full closed loop, artificial pancreas system (APS), “looping”, and more. But whatever you call them, automated insulin delivery systems are not all the same. You have choices, ranging from the type of insulin pump body and CGM you want to use, to the algorithm and controller, to the interoperability and remote monitoring options, and more. Like switching from multiple daily injections to an insulin pump, switching from manual diabetes to automated insulin delivery has a learning curve.\nIt’s certainly one you can tackle. After all, you’re already tackling type 1 diabetes! You already have the base knowledge and experience you need to succeed with a closed loop system, if it’s right for you. But you might be wondering how to get ahead of your learning curve before you start or even choose an APS. Or maybe you’ve started and want to dig even deeper into optimizing how an automated insulin delivery system fits into your lifestyle. This book was written for you! It leverages the collective knowledge of the early adopters of do-it-yourself and commercial systems from the past five years and packages it into easy, understandable guides and lessons learned.\nIn this book, you’ll find new analogies to help you understand – and explain – this new method of diabetes management, and tips on how to communicate with your healthcare provider(s) about it. You’ll see stories and examples from real families and individuals living with type 1 diabetes and how they benefit from artificial pancreas systems, and why they chose and continue to choose to use them. You’ll be empowered to understand the basic components of artificial pancreas systems, how they work, and what questions to ask as you evaluate your choices and learn how best to integrate them into your lifestyle.\n\n{% hint style=""success"" %}\nA traditional, physical “book” format - a physical, printed book that’s available through self-publishing. It’s priced so that every 2 copies purchased will fund an author-priced copy that I will donate to hospitals, libraries, etc. You can find it here on Amazon.\n{% endhint %}\n{% hint style=""success"" %}\nAn “e-book” format - a version that can be downloaded to your Kindle. You can find it here on Amazon.\n{% endhint %}\n{% hint style=""info"" %}\nA PDF format - which you can download for free and read on your computer or other e-reader of choice. Click here to go to the download page. \n{% endhint %}\n{% hint style=""info"" %}\nA website (this site!)- so you can review portions of the content anytime, and see any changes over time. There will also be additional links and videos with more content. The website and its content are open source, so if you see any typos or have suggestions, you can make those suggestions or edits directly!\n(To keep reading the web version, just hit the ""Next"" button below.)\n{% endhint %}\n'], 'url_profile': 'https://github.com/danamlewis'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['lita-diabetes\n\nA plugin for diabetes-related plugins for lita\nInstallation\nAdd lita-diabetes to your Lita instance\'s Gemfile:\ngem ""lita-diabetes"", :git => ""https://github.com/reddit-diabetes/lita-diabetes.git""\nConfiguration\n# for values entered without units in this range the bot will\n# respond with both conversions\n# lower bound for ambiguious bg entries\nconfig.handlers.diabetes.lower_bg_bound = \'20\'\n# upper bound\nconfig.handlers.diabetes.upper_bg_bound = \'35\'\nUsage\n<number> - Convert glucose between mass/molar concentration units.\n_<number>_ - Convert glucose between mass/molar concentration units inline. E.g ""I started at 125 today""\n<number> [mmol/l | mg/dl] - Convert glucose from specified units\nLita: estimate a1c [from average] <glucose level> - Estimates A1C based on average BG level\nLita: estimate average [from a1c] <A1C> - Estimates average blood glucose\nLicense\nMIT\n'], 'url_profile': 'https://github.com/reddit-diabetes'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['IDMVis\nIDMVis is an open source interactive visualization tool for showing type 1 diabetes patient data.\nIt is designed to help clinicians perform temporal inference tasks:\nspecifically for recommending adjustments to patient insulin protocol, diet, and behavior.\nIDMVis is built with JavaScript and the d3.js library.\nIntroductory and Demo Videos\nYou can see a live demo at visdunneright.github.io/IDMVis/public/ and watch our 30 second teaser video:\n\nor a five minute demo video:\n\nSetup\n\nOpen terminal/command prompt.\nFork and clone the github repository to your local system in a dedicated folder.\nChange to the public directory.\nAt the command line, run python -m http.server with the version Python 3.\nVisit http://localhost:8000/ in your browser.\n\nLegend\n\nPublication\nYixuan Zhang, Kartik Chanana, and Cody Dunne, ""IDMVis: Temporal Event Sequence Visualization for Type 1 Diabetes Treatment Decision Support"", IEEE Transactions on Visualization and Computer Graphics (Proc. Information Visualization 2018), vol. 25, no. 1, Jan. 2019. doi: 10.1109/TVCG.2018.2865076\nVIS 2018 Presentation\nPlease see slides from the presentation and the presentation recording.\nAuthors\nYixuan Zhang, Kartik Chanana, and Cody Dunne\nNortheastern University Data Visualization @ CCIS\nLicense\nThis project is open source under the MIT License.\nAcknowledgments\nThis material is based upon work supported by the National Science Foundation under Grant No. 1755901. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the\nauthor(s) and do not necessarily reflect the views of the National Science Foundation.\n'], 'url_profile': 'https://github.com/VisDunneRight'}","{'location': 'Knoxville', 'stats_list': [['10', '          followers'], ['7', '          following'], ['142']], 'contributions': '222 contributions\n        in the last year', 'description': ['Project Glucose Tracker\nTeam Name: Code Bashers\nProject Owner: Kawsar Project\nTeam Members: Aaron Barlow, David Beverley, Grant Watson, Josiah Smythe, Justin Cathelyn, and Thomas Burtner\nScrum Master: David Beverley\nProduct Owners: Aaron Barlow & Josiah Smythe\nBrief Description\nPatients submit their food intake, blood glucose level and exercise information from their phone applications and doctors can view those information graphically from a phone application or web app\nLanguages, Frameworks, and Libraries\nLanguages: JavaScript & CSS\nFrameworks: React & React Native\nLibraries: React Native Paper, Firebase, DataTable, React Timeseries Charts, React Native Chart Kit, React Icons, and Pond.js\nRunning Mobile and Web App\n\tPre-Conditions: Must have node.js install and have the expo app on your phone\n\t   https://facebook.github.io/react-native/docs/getting-started.html\n\t   https://nodejs.org/en/download/\n\n\tMobile:\n\t   1) Download the glucose tracker zip file and extract it\n\t   2) In file explorer inside of the GlucoseTracker file and type cmd in the top bar\n\t   3) Install react by running the command “npm install react-native""\n\t   4) Once installed run the command “npm start”\n\t   5) After a short while, there should be a QR code. Scan the code with the expo app for Android or with the camera app for iPhone\n\t   6) Allow the application to build and it will start automatically\n\n\tWeb:\n\t   1) Download the glucose tracker zip file and extract it\n\t   2) In file explorer inside of the GlucoseTracker\\web and type cmd in the top bar\n\t   3) Install react by running the command “npm install react-native""\n\t   4) Once installed run the command “npm start”\n\t   5) The application will build and then open up in your web browser\n\nPublishing the Application\nWeb: (1) Follow the Running Mobile and Web App guideline, (2) Host on a Linux server, and (3) run npm start in the web directory\nAndroid: expo build:android\nIOS: expo build:ios\nMobile ScreenShots\n\n\n\nPatient Login\nPatient SignUp\nPatient Settings Page\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlucose List\nAdd Glucose\nAdd Nutrition\nAdd Exercise\n\n\n\n\n\n\n\n\n\n\n\nWeb ScreenShots: Admin View\n\n\nWeb ScreenShots: Doctor View\n\n\n\n\n\n'], 'url_profile': 'https://github.com/AroSwift'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes\nRepository created on  <d>2017/12/08 11:43:42 By user mahhemani\n'], 'url_profile': 'https://github.com/prabhuk12'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['7']], 'contributions': '12 contributions\n        in the last year', 'description': ['jOmnipod\njOmnipod is a Java library for parsing the IBF files created by the Omnipod PDM. jOmnipod requires Java 8 and is available under the MIT license.\nYour first program\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream inputStream = new FileInputStream(new File(""my.ibf""));\n\n\t\tIBF ibf = new IBF(inputStream);\n\n\t\tfor (LogRecord logRecord : ibf.logRecords()) {\n\t\t\tSystem.out.print(logRecord.timestamp() + "" : "");\n\t\t\tlogRecord.accept(new LogRecordVisitor() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(IgnoreLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(DeletedLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(PumpAlarmDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(UnknownLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(OcclusionLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(DownloadLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(ResumeLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(TerminateBasalLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(TerminateBolusLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(CarbLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(BloodGlucoseLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(AlarmLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(RemoteHazardAlarmLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(SuggestedCalcLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(DateChangeLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(SuspendLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(BasalLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(BolusLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(TimeChangeLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(DeactivateLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(EndMarkerLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void visit(ActivateLogRecordDetails details) {\n\t\t\t\t\tSystem.out.println(details.toString());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\n'], 'url_profile': 'https://github.com/tias79'}","{'location': 'San Jose, CA', 'stats_list': [['6', '          followers'], ['0', '          following'], ['19']], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nData mining project to detect if a person is diabetic using logistic regression in R\nDataset Description\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nNumber of Instances: 768\nNumber of Attributes: 8 plus class\nAttributes\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nClass Distribution: (class value 1 is interpreted as ""tested positive for\ndiabetes"")\n\n\n\nClass Value\nNumber of instances\n\n\n\n\n0\n500\n\n\n1\n268\n\n\n\n'], 'url_profile': 'https://github.com/jerisalan'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\nDISCLAIMER: This notebook is used for demonstrative and illustrative purposes only and does not constitute an offering that has gone through regulatory review. It is not intended to serve as a medical application. There is no representation as to the accuracy of the output of this application and it is presented without warranty.\n\nMachine learning using synthesized patient health records\nThis notebook explores how to train a machine learning model to predict type 2 diabetes using synthesized patient health records.\nThe use of synthesized data allows us to learn about building a model without any concern about the privacy issues surrounding the use of real patient health records.\nWhen the reader has completed this Code Pattern, they will understand how to:\n\nPrepare data using Apache Spark.\nVisualize data relationships using Pixiedust.\nTrain a machine learning model and publish it in the Watson Machine Learning (WML) repository.\nDeploy the model as a web service and use it to make predictions.\n\nFlow\n\n\nLog in to IBM Watson Studio\nLoad the provided notebook into Watson Studio\nLoad data in the notebook\nTransform the data with Apache Spark\nCreate charts with PixieDust\nPublish and deploy model with Watson Machine Learning\n\nPrerequisites\nThis project is part of a series of code patterns pertaining to a fictional health care company called Example Health.\nThis company stores electronic health records in a database on a z/OS server.\nBefore running the notebook, the synthesized health records must be created and loaded into this database.\nAnother project, https://github.com/IBM/example-health-synthea, provides the steps for doing this.\nThe records are created using a tool called Synthea, transformed and loaded into the database.\nIf required, set up the Secure Gateway service\nto provide you with a secure way to access your on-premise data source.\nSteps\nSign up for Watson Studio\nSign up for IBM Watson Studio.\nCreate a project\n\nClick the Create a project tile.\nA list of project types appears.  Click the Data Science project type.\nProvide a name for the project (e.g. ""diabetes-prediction"") and click the Create button.\nThe project is saved in a lite object storage instance in your account.\n\nCreate a Watson Machine Learning instance\n\nClick on the Settings tab of your project.\nScroll down to Associated Services.\nClick Add service and select Watson from the drop-down menu.\nClick Add on the Machine Learning tile.\nSelect the lite plan and click the Create button.\n\nAdd the notebook to your project\n\nClick on the Add to project button.\nClick on Notebook.\nClick on From URL.\nFill in a name for the notebook (e.g. ""diabetes-prediction"").\nCopy and paste this URL into the notebook URL field: https://raw.githubusercontent.com/IBM/example-health-machine-learning/master/diabetes-prediction.ipynb\nIn the Select runtime drop-down box, choose the entry that begins with Default Spark Python.\nClick the Create Notebook button.\n\nRun the notebook\n\n\nClick on Cell in the menu bar and select All Output > Clear to clear out the existing notebook output.\n\n\nMove your cursor to each code cell and run the code in it.  Read the comments for each cell to understand what the code is doing.\nWhen the code in a cell is still running, the label to the left changes to In [*]:.\nDo not continue to the next cell until the code is finished running.\n\n\nThere are a couple of cells which you have to update to provide your credentials.\n\nAt the top of the notebook is a cell for your database credentials.\nFurther on you will encounter a cell for your Watson Machine Learning credentials.\nIn order to find these, click on the hamburger menu at the top left of the screen and select Watson Services.\nClick on your machine learning instance and then click on the Service Credentials tab.\nClick on View Credentials.\n\n\n\nSample output\nThe notebook uses Pixiedust to visualize relationships between the data.\nHere are examples of scatter plots that it can produce.\n\nHDL/LDL cholesterol for diabetics vs non-diabetics.\nThe diabetes simulation in Synthea uses a distinct range of HDL readings for diabetic vs. non-diabetic patients.\nThis makes the correlation of cholesterol readings to diabetes abnormally high.\n\n\n\nSystolic/diastolic blood pressure for diabetics vs non-diabetics.\nThe diabetes simulation in Synthea increases the chance of high blood pressure (hypertension) for diabetics\nbut the non-diabetic patients also can have high blood pressure.  Therefore the correlation\nof high blood pressure to diabetes isn\'t very strong.\n\n\n\nBody mass index  for diabetics vs non-diabetics.\nThe diabetes simulation in Synthea does not change the weight of any diabetic patients so BMI has no correlation.\n\n\nLicense\nThis code pattern is licensed under the Apache License, Version 2.\nSeparate third-party code objects invoked within this code pattern are licensed by their respective providers pursuant to their own separate licenses.\nContributions are subject to the Developer Certificate of Origin, Version 1.1 and the Apache License, Version 2.\nApache License FAQ\n'], 'url_profile': 'https://github.com/IBM'}","{'location': 'Berlin', 'stats_list': [['145', '          followers'], ['36', '          following'], ['189']], 'contributions': '438 contributions\n        in the last year', 'description': ['GlucoLog  \n¿Qué es GlucoLog?\nGlucolog es un API destinado al registro y seguimiento de los niveles de glicemia en la sangre, orientado para niños menores de 14 años.\n¿Cómo puedo utilizar GlucoLog?\nEl código es totalmente Open Source, puede ser descargado e instalado por cualquier persona o institución y desarrollar encima de la plataforma.\nQuiero colaborar ¿Cómo lo hago?\nPpuede reportar cualquier fallo en éste repositorio. Si eres desarrollador y tienes unas propuestas, puede colocar un Pull Request, no sin antes abrir un issue con la propuesta.\nAPI\nLa definición del API está pública en https://glucologapi.docs.apiary.io/ favor revisar.\n'], 'url_profile': 'https://github.com/davidtavarez'}","{'location': 'NONE', 'stats_list': [['101', '          followers'], ['63', '          following'], ['55']], 'contributions': '5 contributions\n        in the last year', 'description': ['Data Analysis Of Factors Affecting Diabetes In Python\nContext\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes,\nbased on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of\nthese instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nContent\nThe datasets consists of several medical predictor variables and one target variable, Outcome.\nPredictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nPython Libraries Used\nNumpy, Pandas, Matplotlib, Seaborn\nData Visualization\nHistogram\n\nBar Plot\n\nBox Plot\n\nCorrelation\n\n'], 'url_profile': 'https://github.com/DivyaThakur24'}","{'location': 'Brazil', 'stats_list': [['5', '          followers'], ['3', '          following'], ['26']], 'contributions': '199 contributions\n        in the last year', 'description': ['OpenLibreNFC\nDisclaimer\nDo not use sensors modified with this app to make medical decisions. I am not responsible to any damage to the sensor that might occur, use this at your own risk. This app is only intended for research.\nInstallation\nApks are available on the Release tab here on GitHub.\nYou can also build the app yourself:\nThis guide from the AndroidAPS docs explains how to build an apk, the steps should be basically the same, just using this repository instead.\nYou\'ll need the Android SDK installed and define the ANDROID_SDK_ROOT environment variable, after that, you can run gradlew to build the .apk file (it should probably be signed so you can install it).\nYou can also install Android Studio and build it from there.\nUsage\nWhen you open the app, you can select different options (Scan, Reset Age, Start...) and then scan the sensor, which will execute whatever you selected.\nWhen you scan the sensor to perform any action, you should wait for the second vibration to stop scanning. This might take a bit longer with operations which involve writing into memory.\nThe ""Dump Memory"" option will dump 360 bytes of the sensor\'s FRAM to sdcard/openlibrenfc/memory_dump.txt, and the ""Load Memory"" will load that same file. If you edit that file, the checksums won\'t be checked, and it might send the sensor into failure if a checksum is incorrect.\nMake sure you have backups of previous memory dumps so you can restore it in case anything happens.\n'], 'url_profile': 'https://github.com/cominixo'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '45 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/susan289'}","{'location': 'Pokhara, Nepal', 'stats_list': [['62', '          followers'], ['31', '          following'], ['275']], 'contributions': '1,982 contributions\n        in the last year', 'description': ['Disease Predictor\nA web app for heart disease prediction, diabetes prediction and breast cancer prediciton using Machine Learning based on the Kaggle Datasets.\nGetting Started\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\nInstallation\nFollow the instructions to run the system on your local machine :\nFirst, clone the project and\nhttps://github.com/theArjun/disease-predictor.git\n\nInstall the virtual environment.\npip install virtualenv\n\nThen,\nvirtualenv myenv\n\nAfter that, activate the virtual environment\nsource myenv/bin/activate\n\nSubsequently, install the dependencies on your local machine.\npip install -r requirement.txt\n\nFinally, run the application.\npython manage.py runserver\n\nBuilt With\n\nDjango - The web framework used\nPIP - Dependency Management\n\nContributing\nPlease fork this project and send us a pull request.\nAuthors\n\nArjun Adhikari\n\n'], 'url_profile': 'https://github.com/theArjun'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['This dataset contains number and percentage of diabetes patients in the US during 2013 grouped by ZIP code. The prevalence and incidence of diabetes have increased in the United States in recent decades, no studies have systematically examined long-term, national trends in the prevalence and incidence of diagnosed diabetes. The prevalence of diabetes increased substantially between 2000 and 2007, mainly because there are more patients with a new diagnosis each year than those who die. The increase observed by 2007 almost reached the World Health Organization prediction for 2030.\nBetter local estimates of diabetes and obesity prevalence might influence public health efforts in various ways. First, awareness of the size and scope of the problems is important for local policymakers to identify the necessary community and clinical services to prevent and control the conditions. For example, lifestyle programs for diabetes prevention and community support groups for diabetes self-management have been shown effective when they are linked to a referring clinical center. Second, population-targeted interventions (e.g., changes in health-care access, preventive care, food taxation, or food labeling) might affect specific areas, populations segments, or high-risk populations in ways that are not detectable via broad, population-based surveys. More sensitive local area surveillance can provide a better means of tracking such effects.(from MMWR Estimated County-Level Prevalence of Diabetes and Obesity --- United States, 2007)\n'], 'url_profile': 'https://github.com/datasets'}","{'location': 'Bangalore', 'stats_list': [['12', '          followers'], ['60', '          following'], ['18']], 'contributions': '259 contributions\n        in the last year', 'description': ['Pima-Indians-onset-of-diabetes-dataset-Prediction-using-Neural-Networks-in-Keras\nThis is a simple Neural Network Implementation using Keras.\nI have used the Pima-Indians-onset-of-diabetes-dataset which you can find on this link: http://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes\nYou can also fit other data sets of the same type, which can be downloaded from the UCI Machine Learning Repository\nPre-Requisities:\n1) Python 2 or 3 installed and configured.\n2) You have SciPy (including NumPy) installed and configured.\n3)You have Keras and a backend (Theano or TensorFlow) installed and configured.\nAlgorithm:\n1) Initialize the random number generator with any seed you like(I have taken 10)\n2) Download the data set in .csv format and put it in the local working directory as NN.py\n3) Load the data set using loadtxt()\n4) Split the data set into the Independent Variables and the Class to be predicted into Z and Q\n5) Create a Sequential model and add layers:\n^First layer contains 12 neurons and will take 8 input variables(Activation Funtion=rectifier activation functio)\n^Second layer contains 8 neurons(Hidden layer: Activation Funtion=rectifier activation function)\n^Output layer will contain one neuron(Activation Funtion=Sigmoid Function:Because its a binary classification: 0 or 1)\n6)Fit the data in the model using fit()(The training process will run for a fixed number of iterations through the dataset called                                                   epochs, that we must specify using the nepochs argument)\n7)Set the number of instances that are evaluated before a weight update in the network is performed, called the batch size\n8)Used model.predict() to predict the class variables.\nUnder update! please be patient\n'], 'url_profile': 'https://github.com/architsingh15'}","{'location': 'Beijing, China', 'stats_list': [['100', '          followers'], ['18', '          following'], ['138']], 'contributions': '335 contributions\n        in the last year', 'description': ['Readmission Prediction\n\n\n\n\n\n1. Dependencies\npython>=3.6\nLibraries:\n- numpy\n- pandas\n- scipy\n- imbalanced-learn\n- seaborn\n- XGBoost\n- scikit-learn\n- matplotlib\n\n2. Datasets\nRaw dataset Diabetes 130-US hospitals for years 1999-2008 Data Set can be found hear.\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes over 50 features representing patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria.\n\n(1) It is an inpatient encounter (a hospital admission).\n(2) It is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\n(3) The length of stay was at least 1 day and at most 14 days.\n(4) Laboratory tests were performed during the encounter.\n(5) Medications were administered during the encounter. The data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\n\n3. Files\nReadmission prediction task can be concluded by the figure below:\n\npreprocess.py: used for preprocessing data, generate the processed data file preprocessed_data.csv which saved in folder data.\ntrain.py: used for training and output, test models are XGBoost and Random Forest. Accuracy, confusion matrix and overall report of models will shown after running.\n4. Usage\n>_ python3.6 preprocess.py\n>_ python3.6 train.py\n\n5. Performances\nXGBoost\nConfusion matrix:\n\nTop 10 importent features:\n\nRandom Forest\nConfusion matrix:\n\nTop 10 important features:\n\n6. License\n\n'], 'url_profile': 'https://github.com/freesinger'}","{'location': 'Kolkata, West Bengal, India', 'stats_list': [['14', '          followers'], ['2', '          following'], ['2']], 'contributions': '188 contributions\n        in the last year', 'description': [""Genre\nTo predict if the person is suffering from diabetes or not on the basis of information entered.\nMovie Genre Prediction:\nTable of Content\n\nDemo\nOverview\nInstallation\nDeployment on Heroku\n\nDemo\nlink\n\nOverview\nThis is a Web app which will predict diabetes.\nInstallation\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nDeployment on Heroku\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nTechnologies Used\n\n  \n""], 'url_profile': 'https://github.com/ANJALIAGARWAL-IT'}"
"{'location': 'Salt Lake City, UT', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes Management\nWhile there are a variety of technologies out there today that make managing diabetes easier, they are generally single-purpose and integration of information between multiple devices can mean double or triple entry of information.\nThe goal of this project is to improve visibility with minimal lift by extracting information from various monitoring and management devices to allow for insights that are not possible on their own.  Additionally, this will generate a tabular version of the Omnipod data, extracting information from comments, etc. for easier analysis.\nAfter cloning this repository and installing the required software, you\'ll need to enter the name of your files and run all cells in the Jupyter Notebook.\nBackground\nThough not all of this is yet included, here is some useful background information related to the data sources.\n\na1c: The measure of glycolated hemoglobin in the blood.  This is generally-speaking a 3-month average of blood sugar.  A good target range is < 7.0.\nBolus insulin: an amount of insulin taken at once\nBasal insulin: a rate of insulin released into the body over time throughout the day.  Different parts of the day will have different basal insulin rates\nBG or bg: a common abbreviation for blood sugar (blood glucose)\nCGM: Continuous Glucose Monitor.  Dexcom is an example of a CGM.  A CGM takes samples of blood sugar from interstitial fluid rather than directly from the blood.  As a result, CGM blood sugar values are generally considered to be 10-15 minutes behind the actual blood sugar.\n\nGetting Started\nCurrently, this project supports two types of (.csv or .xlsx) files:\n\nOmnipod log files: FreeStyle CoPilot Health Management System\n\nThere is no export option, but you can easily copy and paste all of this data as-is into an excel or csv file.\n\n\nDexcom: Export from your Dexcom Clarity account - Maximum download is 90 days.\n\nhttps://clarity.dexcom.com\nReports > Export\n\n\n\nTo use this package, clone the repository and move copies of your Omnipod and Dexcom data into the corresponding folders in the repository.\nFor reference, files are places in the repository now.\nOnce all files are located in their place, you will just need to use the file paths/folder within the Jupyter notebook to get started.\nOmnipod\n- Meal Bolus: Insulin taken for food eaten\n- Bolus Insulin: A bolus taken for ANY reason where the reason is not specified in the device.\n- Correction Bolus: Insulin taken if blood glucose levels are above target.  A correction bolus is broken out separately from a Meal bolus when bg is above the target.\n- IOB: Insulin On Board - Fast-acting insulin is used in Insulin Pumps (Omnipod, Medtronic, etc.).  When calculating how much insulin to take, either the person or the device must understand how much insulin is already in the body to calculate a correct dose.  If insulin is not used within ~20 minutes after it entered the body, it will be be excreted with no effect on blood sugar.  \n- Extended Meal Bolus: Bolus insulin delivered over a time period.  In the omnipod data, this is seen as a fraction, 0.4 = 40% of the Meal Bolus, for example, will be delivered after a designated time period.  Since some foods take longer for the body to digest into sugars that can be processed by the insulin, extended meal boluses allow for a programmatic way to handle complex foods (i.e. pizza).\n- Blood Sugar (bg) Target: A numeric value that the device uses to calculate the ""ideal"" blood sugar and uses to calculate the amount of insulin to deliver.\n\nDexcom\n- Calibration: A Dexcom (G5) is generally celibrated 2x per day.  Each calibration takes 2 back-to-back blood sugar readings.  \n- Lifecycle: The life of a single device is about 7 days.  After 7 days, the site is switched and there is a two-hour warm-up phase required to activate the new site.\n\nNote: For a variety of reasons, the Dexcom calibration may not be accurate.  Some of these reasons include blood sugar volatility during the warm-up phase of the device (occurs weekly), a faulty insertion (blood affecting the measurement), or over-calibration.\n\nPrerequisites [ Will add Requirements file ]\nSoftware\n\nFreeStyle CoPilot Health Management System\n\nFor instructions: https://www.myomnipod.com/learning-center/download-software/download-abbott\n\n\nPython\nJupyter Notebook\n\nPython Packages to install (imports are in the file but you made need to install some first)\n\nholoviews\nbokeh\nos\npandas\ndatetime\ndateutil\nnumpy\n\nContributing\nAs this project is further developed, I will open it up for contribution.  If you are interested in seeing any particular data sources added, please contact me: [chelsea.lapeikis@gmail.com]\nVersioning\nVersion 0.1 - 12/15/2017\nAuthors\n\nChelsea Lapeikis - Initial work - chelseamlap\n\nLicense\nThis project is licensed under the GNU License - see the LICENSE.md file for details\nAcknowledgments\nMy husband for expanding my understanding of the complex world of diabetes management and for explaining the many variables that exist within each of the systems.\n'], 'url_profile': 'https://github.com/chelseamlap'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Artificial Pancreas Simulator\nA simulation environment for artificial pancreas type 1 diabetes treatments.\nTable of contents\n\nOverview\nStructure\nUsage\nAdditional Resources\nCredits\nContact and Issues\n\nOverview\nA quick introduction to this simulator can be found here\nThe simulator is divided into three components: the virtual patient, the infusion controller and the results manager. Each component can be configured by the user to customize the simulation.\nVirtual Patient\nThe virtual patient defines the patient model used in the simulation. It defines the dynamics of the gluco-regulatory system after infusion of a drugs such as insulin or glucagon, as well as after meals consumption or exercise. It is embodied by the VirtualPatient class.\nPart of this component are the MealPlan and ExercisePlan classes, which define when the patient receives meals or exercises and the corresponding quantities.\nInfusion Controller\nThe infusion controller defines the algorithm used to control the administration of infusions to the patient. It uses blood glucose readings from the patient, as well as meal and exercise information, to set the basal and bolus rates of hormones such as insulin and glucagon. It is embodied by the InfusionController class.\nResults Manager\nThe results manager defines how the results should be accumulated during the simulation and how the results should be presented to the user after the simulation has completed. It is embodied by the ResultsManager class.\nStructure\nThis repository is structured as follows\n.\n├── simulator\n├── library\n│\xa0\xa0 ├── virtual-patients\n│\xa0\xa0 ├── controllers\n│\xa0\xa0 ├── exercise-plans\n│\xa0\xa0 ├── meal-plans\n│\xa0\xa0 ├── results-managers\n│\xa0\xa0 └── utilities\n├── templates\n├── docs\n└── ...\n\nSimulator\nThe core implementation of the simulator is here. The simulator provides the back-end framework which handles communication between libraries, real-time simulation, and GUI. Each component of the simulator is well documented, and documentation can be accessed by:\ndoc ArtificialPancreasSimulator\nLibrary\nMinimal implementation of different component of the simulator. Users are encouraged to make their implementations or to improve existing ones.\nTemplates\nIn this folder you can find empty template which can serve as a starting point for your own library implementation.\nDocs\nThis folder contains additional documentation.\nUsage\nGraphical User Interface\nThe user interface can be used by running:\nguiSimulation\nAs a result the following GUI should show.\n\nThe GUI is composed of two parts Configuration and Simulation. In configuration, it is possible to reconfigure each component. In simulation, you can select the desired configuration to simulate.\nFor a quick start run Start. In the configuration section, it is possible to create different flavors of the same module with different options. By default, we create 2 instances of HovorkaPatient one called HovorkaPatient_AvgNoNoise and the other HovorkaPatient_AvgWithVar. These represents 2 different configurations of the same HovorkaPatient module.\nBy default, the simulator searches for all folder classes defined in getLibraryPaths. It is possible to modify getLibraryPaths to add your custom path, more on this here Adding User Functions.\nScripts\nA sample simulation can be excuted by running:\nsimulation\nThis simulator can be used as a library from anywhere in your local repository. For this you need to configure the path to include the artificial pancreas simulator. For this, we write:\nrun(\'[YOUR PATH]/artificial-pancreas-simulator/configurePaths\');\nNext we should configure the simulator options using SimulatorOptions\noptions = SimulatorOptions;\nMinimal SimulatorOptions can be set by:\noptions.simulationStartTime = 8 * 60; % minutes\noptions.simulationDuration = 24 * 60; % minutes\noptions.simulationStepSize = 10; % minutes\noptions.virtualPatients = {{ ...\n    \'HovorkaPatient\', ...\n    \'DailyMealPlan\', ...\n    \'EmptyExercisePlan\', ...\n    \'PumpTherapy\'}};\nIn this example, we want to run a 24h simulation, starting at 8am, with a step size of 10 min. The simulation will use HovorkaPatient for the virtual patient simulation, the meals that will be consumed by this patient are described in DailyMealPlan, the patient will not exercise EmptyExercisePlan, and the patient will use a standard insulin pump for his insulin treatment PumpTherapy.\nObserve how options.virtualPatients is a double cell using {{, }}. This is done since the virtualPatients option support multiple patient definition, more on this here Multiple Patient Simulation.\nWe need to specify the format in which the results should be done, we do this by:\noptions.resultsManager = \'PublishResultsManager\';\nNow, we can run the simulation by doing:\nsimulator = ArtificialPancreasSimulator(options);\nsimulator.simulate();\nExample of expected result\n\nModules options\nEach module (a folder class, example PumpTherapy) implementes options specific to the modeule. To view all availaible options run:\nSimulatorOptions.getOptions(\'PumpTherapy\');\nTo modify an option:\noptPump = SimulatorOptions.getOptions(\'PumpTherapy\');\noptPump.correctionBolus = false;\nThese options will show in the GUI by double clicking on the configuration (example HovorkaPatient_AvgNoNoise). They can be used in a script by passing them in options.virtualPatients, for example:\noptions.virtualPatients = {{ ...\n    \'HovorkaPatient\', ...\n    \'DailyMealPlan\', ...\n    \'EmptyExercisePlan\', ...\n    {\'PumpTherapy\', optPump}}};\nIt is hard to document each feature/option existing in each module. However, the name of the option should be a good indicator of what the option will be doing. Also, it is hard to understand what the option is doing without going and checking how it is coded. I guess options are for advanced users. Adding new features is encouraged.\nAn example of options use can be found here example\\detailedSim.m.\nAdditional Resources\n\nSoftware Requirements Specification\nDetailed Script Simulation\nMultiple Patient Simulation\nAdding User Functions\n\nCredits\nThis simulator was designed by the team in McGill Artificial Pancreas Lab, mainly:\n\nAndrei Purcarus: Implemented the simulator backbone code.\nAnas El Fathi: Implemented library modules, and provides long-term support.\nProf. Ahmad Haidar: Provided overall supervision and feedback.\nA list of all contributors is here.\n\nA schalary paper about the simulator is in-progress, meanwhile, if you find this simulator usefull please feel free to cite our review paper describing BergmanPatient and MPController.\nA. El Fathi, M. Raef Smaoui, V. Gingras, B. Boulet and A. Haidar, ""The Artificial Pancreas and Meal Control: An Overview of Postprandial Glucose Regulation in Type 1 Diabetes,"" in IEEE Control Systems Magazine, vol. 38, no. 1, pp. 67-85, Feb. 2018, doi: 10.1109/MCS.2017.2766323.\n\nContact and Issues\nFor additional assistance, please use GitHub Issues.\n'], 'url_profile': 'https://github.com/McGillDiabetesLab'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/reddit-diabetes'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['6']], 'contributions': '28 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Barlow1'}","{'location': 'Brazil', 'stats_list': [['107', '          followers'], ['133', '          following'], ['423']], 'contributions': '4,802 contributions\n        in the last year', 'description': ['Meu Diabetes\nRepositório da plataforma meu diabetes um projeto da disciplina de inteligência artificial da UFRN\n\nInstalação\nPara instalar o projeto entre na pasta após a realização do git clone e execute os comandos a seguir (Para o projeto é necessário o python 3.6 e o pip já instalados):\nPrimeiramente deveremos instalar o pipenv:\n$ pip install pipenv\nCom o pipenv instalados devemos entrar no nosso virtualenv com:\n$ pipenv shell\nCom o pipenv instalado deveremos instalar nossas dependencias:\n$ pipenv install requeriments\nCaso o pipenv install der problema instale o numpy:\n$ pipenv install numpy\nExecução\nPara executar o projeto entre na pasta meuDiabetes:\n$ cd meuDiabetes\nAgora inicie seu servidor:\n$ python manage.py runserver\nSe tudo ocorreu bem seu servidor está ativo na porta 8000 basta entrar no link do seu localhost\n'], 'url_profile': 'https://github.com/mpsdantas'}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['8', '          following'], ['10']], 'contributions': '684 contributions\n        in the last year', 'description': ['BMI_Foundations_Diabetes_ML\nDemonstration of using machine learning to predict diabetes for University of Utah DBMI Foundations of Healthcare Informatics class\n'], 'url_profile': 'https://github.com/abchapman93'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Type2-Diabetes-prediction\nAbstract-\nThis project aims to make a Data Science Model to Predict Type-2 Diabetes.\nIndia is home to over 60 million adults with diabetes (7.8% of the population), of which more than 30 million are undiagnosed or untreated, thus increasing the risk of developing complications and premature mortality. Diabetes is a growing threat nowadays, one of the reasons being that there is no perfect cure for it.\nLibraries used-Numpy, Pandas, Matplotlib, Scikit-learn, Seaborn\nAlgorithms used- Logistic Regression, Support Vector Machine, KNN, Random Forest Classifier, Naivye Bayes, Gradient Boosting\nModel Evaluation methods used- Accuracy Score, ROC AUC Curve, Cross Validation, Confusion Matrix\n'], 'url_profile': 'https://github.com/WooTechnology'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Pima Indians Diabetes Database\nPredict the onset of diabetes based on diagnostic measures\nO objetivo geral do problema é prever se a pessoa possui ou não diabetes mellitus, com base em uma série de variáveis preditoras. O desafio foi posto declaradamente como um problema de aprendizagem.\nO banco de dados possui todas suas observações constituídas de pessoas do gênero feminino, com idade superior a 21 anos, de ascendência do povo Pima (grupo de nativos norte-americanos). Os dados, que são atualmente abertos e gratuitos para download CC0 1.0, são provenientes do Instituto Nacional de Diabetes e Distúrbios Digestivos e do Rim (NIDDK) dos EUA e mantidos pela UC Irvine Machine Learning Repository (University of California-Irvine).\nEm essência, o conjunto de dados será analisado como um problema de inferência (dado que se tem uma variável resposta disponível), mas pode eventualmente ser tratado com um problema de predição, caso se queira utilizar o modelo para prever a condição de novos indivíduos, conforme entendimento de JAMES, HASTIE & TIBSHIRANI (2013).\nConsiderando a natureza categórica da variável resposta, o problema será, em princípio, um problema de classificação (em contraste com os problemas de regressão). No entanto, como reconhecem JAMES, HASTIE & TIBSHIRANI (2013), essa distinção pode não ser muito clara quando se trabalha com variáveis resposta dicotômicas e se deseja estimar, por exemplo, probabilidades esperadas em um modelo de regressão logístico, ao invés de se desejar uma classificação/discriminação. Nesse sentido, como a utilização de modelos de regressão com respostas categóricas é uma das possibilidades a serem consideradas para a análise desses dados, o problema poderia ser tanto de classificação quanto de regressão.\nNo que se refere ao tipo de aprendizagem, o conjunto das possíveis técnicas a serem utilizadas direciona o problema para que seja do tipo supervisionado. Dentre as muitas possibilidades, pode-se citar a própria regressão logística e a máquina de suporte vetorial support vector machine. Mas, como se tem disponível uma variável resposta, será também possível utilizar técnicas tipicamente não-supervisionadas (tais como a análise de agrupamentos ou clusters) com apoio de uma validação cruzada.\nEndereço da Página do Problema\nO conjunto dos dados, bem como outras informações, podem ser obtidos em:\nhttps://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/Diabetes-Database-MAE0501-IME-USP'}","{'location': 'Cuttack , Odisha , India', 'stats_list': [['13', '          followers'], ['10', '          following'], ['8']], 'contributions': '32 contributions\n        in the last year', 'description': ['Pima-Diabetes-Prediction\nDiabeties Prediction Model from pima data set\npima dataset :\nOriginal Owners:\nNational Institute of Diabetes and Digestive and Kidney Diseases\nData Set Information:\nSeveral constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage. ADAP is an adaptive learning routine that generates and executes digital analogs of perceptron-like devices. It is a unique algorithm; see the paper for details.\nAttribute Information:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nThe reformatted data set csv used in the project can be found here\n.. ML Algorithim\nEntire prdeicition model is written with Python3 and Jupyter Notebook.\nused python lib : pandas, numpy , matplot-lib , scikit.\nEntire notebook source in pdf here\n'], 'url_profile': 'https://github.com/DevSurya'}","{'location': 'Irvine, CA', 'stats_list': [['9', '          followers'], ['18', '          following'], ['36']], 'contributions': '19 contributions\n        in the last year', 'description': ['Diabetes Monitoring & Assist\nA project in the Winter 2019 offering of CS 125 (Next Generation Search Systems) at the University of California, Irvine\nAbout the Project\nOur group has developed a mobile application that will help diabetic individuals keep track of the their food intake and exercise. The application’s goal is to be able to suggest healthy recipes and workout schedules for the individual based on research specifically done for diabetics. We have chosen to tackle this problem because diabetes is a huge problem in the United States and a worldwide epidemic. Statistics has shown that 1 in 11 adults have diabetes; that accounts to over 415 million people. We hope that with our application can help improve the lives of people living with this condition.\nTeam Member\n\nAndre Ace Aquiler\nJason Padilla\nKunal Kathuria\nWyte Krongapiradee\n\nAttributions\n\nEstimated Calorie Needs Table from Health.gov\nNutritional Goals Table from Health.gov\nGlyphs from Icons8\nFood Search and Nutrition APIs powered by Nutritionix\nTutorials on raywenderlich.com\n\n'], 'url_profile': 'https://github.com/wytesk133'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['insulin-engine\nNaive implementation of insulin and blood glucose interaction, for educational purposes.\nView the running engine implementation at https://magikcraft.github.io/insulin-engine/\nPull Requests and feedback via Github issues are welcome!\nThis engine integrates with a Minecraft plugin to provide a Virtual Reality experience of living with Type 1 Diabetes for newly diagnosed children and families to understand the interaction of carbs, insulin, and Blood Glucose Levels; to experience community with others living with the condition; and for their friends and communities to understand what they live with and how to support them.\nProject adviser Scott Hanselman is a software developer, Type 1 Diabetic, and activist. In this video Scott describes what it is like to live with Type 1 Diabetes:\n[](https://www.youtube.com/watch?v=jsxFbDIvQRw target=""_blank"")\nIf you are a parent of a child diagnosed with Type 1 Diabetes in Queensland, join the TOPIQ (Type One Parents In Queensland) Facebook group for a supportive community.\nThis project was initiated as a Landmark Self-Expression and Leadership Program project using the structures and coaching of the program, and is empowered by developers from Magikcraft, with the support of Diabetes Queensland.\nFor more information on Type 1 Diabetes initiatives by technology teams around the world, see the #WeAreNotWaiting hashtag on Twitter.\n'], 'url_profile': 'https://github.com/mc-t1'}","{'location': 'NONE', 'stats_list': [['23', '          followers'], ['10', '          following'], ['0']], 'contributions': '62 contributions\n        in the last year', 'description': ['Risk Equations for Complications Of type 2 Diabetes (RECODe)\nType 2 diabetes mellitus is an increasing cause of morbidity and mortality worldwide. Treatment of type 2 diabetes involves complex decision-making to prevent microvascular and macrovascular complications of diabetes, while minimizing side effects from therapy. Treatment decisions for type 2 diabetes, as for a number of chronic disease conditions, have increasingly been informed by risk equations, which estimate the risk of complications given the demographics, clinical features, and biomarkers of a patient. Treatment decisions using risk calculations to direct therapies for microvascular conditions (e.g., calculating benefit/risk of insulin titration, rather than using the same hemoglobin A1c target for all individuals) has been suggested, with simulation models indicating that such “benefit-tailored therapy” could reduce microvascular complications of type 2 diabetes, complications induced by therapies themselves, and the overall costs of type 2 diabetes treatment. Treatment guidelines for macrovascular risk reduction already recommend clinicians to perform risk calculations as a standard part of lipid management (e.g., to direct therapy to those with a high 10-year risk of myocardial infarction or stroke), but existing equations have been criticized for misestimating risk. The availability of accurate type 2 diabetes risk equations is therefore important to personalize treatment, ensure informed decision-making on the part of both clinicians and patients, and compare the effectiveness and cost-effectiveness of alternative treatment guidelines.\nRecent studies of type 2 diabetes outcomes revealed that commonly-used risk equations misestimate the risk of both microvascular and macrovascular complications among diverse participants in recent randomized trials and longitudinal cohort studies. The poor calibration of existing type 2 diabetes risk equations may be partly because available risk equations were developed from older cohorts not exposed to modern trends in risk, prevention, diagnosis, and treatment.\nThe development and validation of updated type 2 diabetes risk equations is potentially facilitated by the release of newer large-scale data from trials that provide a unique opportunity to develop equations for type 2 diabetes complications and mortality among modern populations with contemporary risk and treatment exposures. Here, answering a call from the U.S. Centers for Disease Control and Prevention [ http://bit.ly/2m9Pw4g ], we sought to develop and validate an updated series of risk equations for both microvascular and macrovascular complications of type 2 diabetes, using individual participant data recently released from a large study of diabetes complications, the Action to Control Cardiovascular Risk in Diabetes (ACCORD) trial. After we developed risk equations from the ACCORD trial [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/accorddevelopment.R ], we validated the equations using individual participant data from people who developed type 2 diabetes in the Diabetes Prevention Program Outcomes Study (DPPOS, which provided microvascular outcome data) [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/dpposvalidation.R ], and all subjects in the Action for Health in Diabetes trial (Look AHEAD, which provided macrovascular outcome data) [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/lookaheadvalidation.R ]. We additionally compared the newly-developed risk equations to older equations from the UK Prospective Diabetes Study Outcomes Model 2 (for microvascular and macrovascular outcomes) and the ACC/AHA Pooled Cohort Equations (for macrovascular outcomes) [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/ukpdsacc%20v3.R ].\nCode to implement an automated GUI calculator (using the Shiny app for R) is available in either US/conventional units [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/app.R ] or SI units [ https://github.com/sanjaybasu/t2dmriskeqns/blob/master/appSI.R ], and implemented online [ https://sanjaybasu.shinyapps.io/recode/ ].\nFor additional reading, please see:\n1 Basu S, Sussman JB, Berkowitz SA, Hayward RA, Yudkin JS. Development and validation of Risk Equations for Complications Of type 2 Diabetes (RECODe) using individual participant data from randomised trials. Lancet Diabetes Endocrinol 2017; 5: 788–98.\nhttps://www.sciencedirect.com/science/article/pii/S2213858717302218\n2 Basu S, Sussman JB, Berkowitz SA, et al. Validation of Risk Equations for Complications of Type 2 Diabetes (RECODe) Using Individual Participant Data From Diverse Longitudinal Cohorts in the U.S. Diabetes Care 2018; 41: 586–95.\nhttp://care.diabetesjournals.org/content/41/3/586\nSanjay Basu, M.D., Ph.D.1,2*, Rodney A. Hayward, M.D.3,4, Jeremy B. Sussman, M.D., M.S.3,4, Seth A. Berkowitz, M.D., M.P.H.5,6, John S. Yudkin, M.D.7\n1 Department of Medicine, Center for Population Health Sciences and Center for Primary Care Outcomes Research, Stanford University\n2 Center for Primary Care, Harvard Medical School\n3 Division of General Medicine, University of Michigan\n4 Center for Clinical Management Research, Veterans Affairs Ann Arbor Healthcare\n5 Division of General Internal Medicine and Diabetes Unit, Massachusetts General Hospital\n6 Department of Medicine, Harvard Medical School\n7 Division of Medicine, University College London\n*Email: basus@stanford.edu\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n'], 'url_profile': 'https://github.com/sanjaybasu'}","{'location': 'Chengdu', 'stats_list': [['7', '          followers'], ['1', '          following'], ['6']], 'contributions': '61 contributions\n        in the last year', 'description': ['Tianchi_DiabetesPredict\n天池大数据竞赛数据集&代码\nCode\n1.神经网络博文链接.txt\n\u2003\u2003神经网络相关的一篇博文\n2.Reference\n\u2003\u2003比赛过程中的参考文献\n\u2003\u2003其中包括数据预处理、BoxCox变换等内容\n3.数据可视化\n\u2003\u2003比赛过程中，对特征和结果的分布一些图\n\u2003\u2003特征权重的结果图等\n4.process&predict_data\n\u2003\u2003比赛过程中数据处理和预测的代码\n\u2003\u2003需要注意的是，代码中读取数据的路径需要修改\n\u2003\u2003数据处理运行得到的处理后的数据集文件没有保留，需要自己运行后获得～\n5.keras_code\n\u2003\u2003采用神经网络keras进行预测部分的代码\nDataSet\n\u2003\u2003主办方提供的原始数据集\nReference\n\u2003\u2003人工智能辅助糖尿病遗传风险预测参考文献\n\u2003\u2003比赛主办方提供参考文献\n2.知网下载文献\n\u2003\u2003知网上下载的相关的文章\n'], 'url_profile': 'https://github.com/AmbitionC'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rajan1112'}","{'location': 'Shenzhen, China', 'stats_list': [['28', '          followers'], ['5', '          following'], ['208']], 'contributions': '40 contributions\n        in the last year', 'description': ['Diabetes Diagnosis Expert System\nThis program is written by Liu Kanglong, Kim Dung Bui, Meng Yang, Lwi Tiong Chai,\nDipti Bijpuria, Tan Xinli Steven, 2016, NUS (Copyright).\nThis is a knowledge-based recommender system to help diagnose diabetes for users.\n'], 'url_profile': 'https://github.com/mikelkl'}","{'location': 'Oakland, CA', 'stats_list': [['111', '          followers'], ['16', '          following'], ['94']], 'contributions': '56 contributions\n        in the last year', 'description': ['README\nA simple web app to help calibrate Medtronic MiniMed insulin pumps and CGM sensors.\nDevelopment\n\nnpm i to install development dependencies\nnpm run start to start a development server\nnpm run build to create a production ready build located in the build folder\n\n'], 'url_profile': 'https://github.com/ryanwiemer'}","{'location': 'Portland, OR', 'stats_list': [['7.6k', '          followers'], ['31', '          following'], ['680']], 'contributions': '337 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shanselman'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['T2DREAM Metadata Database\n\n\nSetting Up Your Environment\nThese are the primary software versions used in production, and you should be able to use them locally:\n\nPython 3.4.3\nNode 6\nElasticsearch 1.7\nJava VM 1.8\nUbuntu 14.04\n\n0. Xcode for Mac OS build tools\n\nInstall Xcode from the website or Mac App store because the local build will use some of Xcode\'s compilation tools.\nInstall the Xcode commandline tools (the commandline tools may need to be reinstalled after OS and Xcode updates)\n\nxcode-select --install\n\n\n\n\n⭐ Note: You will need to open Xcode to accept the end-user agreement from the application, or from the commandline run:_\n\nsudo xcodebuild -license accept\n\n\n1. Homebrew for Mac OS package management\n\nVerify that Homebrew is installed and working properly:\n\nbrew doctor\n\n\n\n2. (Mac) Install or update other dependencies:\nbrew install libevent libmagic libxml2 libxslt openssl graphviz nginx\nbrew install freetype libjpeg libtiff littlecms webp chromedriver\nbrew tap petere/postgresql\nbrew install postgresql@9.3\nbrew link --force postgresql@9.3\nbrew install --force node@6\nbrew link node@6 --force\nbrew cask install java8\nbrew install elasticsearch@5.6\npip3 install typing\n\n⭐ Note: Elasticsearch 1.7 does not work with Java 9\n⭐ Note: To unlink elasticsearch 1.7 and install elasticsearch 5.6\n\nbrew search elasticsearch\nbrew install elasticsearch@5.6\nbrew unlink elasticsearch@1.7 && brew link elasticsearch@5.6 --force\n\n\n\n⭐ Note: Brew cannot find java8\n\nbrew tap caskroom/versions # lookup more versions\nbrew cask search java # java8 now in list\nbrew cask install java8\n\n\n\n⭐ Note: This additional step is required for new macOS Sierra installations\n\nbrew cask install Caskroom/cask/xquartz\n\n\n\n⭐ Note: Node version mangement with nvm: If you need to easily switch between node versions you may wish to use nvm instead (not required for most users)\n\nnpm install -g nvm\nnvm install 6\nnvm use 6\n\n⭐ Note: Node version mangement with homebrew: Switching node versions with homebrew (which is not package manager but not a typical version manager) is possible but is not as flexbible for this purpose, e.g.:\n\nbrew install node@7\nbrew unlink node@6 && brew link --overwrite --force node@7\nnode --version\nbrew unlink node@7 && brew link --overwrite --force node@6\nnode --version\n\n\n\n⚠️ Note: If you need to update Python dependencies (do not do this randomly as you may lose important brew versions of packages you need):\n\nrm -rf encoded/eggs (then re-run buildout below)\nand possibly\nbrew update\nbrew upgrade\n\n\n3. Python\nEncoded requires a UNIX based system (Mac or Linux) and Python 3.4.3 (but works with 3.5.x):\n\n\nFor local development on a Mac, follow the steps below.  For Linux use apt-get or yum as your Linux flavor demands.  You can consult cloud-config.yml for other steps.\n\n\nNote: Production is currently using the versions above thus your primary development should always work on that version, and you should test that your code works on versions that will be used in production.\n\n\nLinux: apt-get install python3.4-dev or equivalent\n\n\nMac OSX Python install instructions\nThe Python version management tool pyenv is very useful.\n\n⚠️ Note: If you have previously installed python3 from homebrew, you may possibly wish to uninstall it (not required):\n\nbrew uninstall --force python3\n\n\nInstall pyenv and set the default versions:\nbrew install pyenv\npyenv install 3.4.3\npyenv install 2.7.13\necho \'export PYENV_ROOT=""$HOME/.pyenv""\' >> ~/.bash_profile\necho \'export PATH=""$PYENV_ROOT/bin:$PATH""\' >> ~/.bash_profile\necho \'eval ""$(pyenv init -)""\' >> ~/.bash_profile\necho \'eval ""pyenv shell 2.7.13 3.4.3""\' >> ~/.bash_profile\nsource ~/.bash_profile\n\n⭐ Note: Migrating pyenv Python packages\nIf you have previously installed a Python version from pyenv, and want to quickly migrate all your pypi packages to a new version (Python 2 to 2, and Python 3 to 3 only):\n\nbrew install pyenv-pip-migrate\n\nExample if you previously installed 2.7 which really is 2.7.0:\n\npyenv install 2.7.13\npyenv migrate 2.7 2.7.13\n\n\n\n⭐ _Note: pyenv install fails with ""ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?"" for MAC OS High Sierra\nUninstall and re-install openssl using the following command when you install pyenv\n\nbrew uninstall --ignore-dependencies openssl && brew install openssl && CFLAGS=""-I$(brew --prefix openssl)/include"" LDFLAGS=""-L$(brew --prefix openssl)/lib"" pyenv install <VERSION>\n\n\nSet the correct Python for the current directory:\npyenv local 3.4.3\n4. Run buildout:\n\npython3 bootstrap.py --buildout-version 2.9.5 --setuptools-version 18.5\nbin/buildout\n\n\n⭐ Note: If you have issues with postgres or the python interface to it (psycogpg2) you probably need to install postgresql via homebrew (as above)\n\n\n⭐ Note: If you have issues with Pillow you may need to install new xcode command line tools:\nUpdate or Install Xcode from the Mac AppStore (reboot may be required) and re-run:\n\nxcode-select --install\n\n\n\n⭐ Note: Clean ALL the Things! If you wish to completely rebuild the application or cleanly reload dependencies (⚠️ long re-build time!):\n\nmake clean && buildout bootstrap && bin/buildout\n\n\n5. Start the application locally\n\n\nTerminal window 1:\nIn one terminal window startup the database servers and nginx proxy with:\n\nbin/dev-servers development.ini --app-name app --clear --init --load\n\nThis will first clear any existing data in /tmp/encoded.\nThen postgres and elasticsearch servers will be initiated within /tmp/encoded.\nAn nginx proxy running on port 8000 will be started.\nThe servers are started, and finally the test set will be loaded.\n\n\nTerminal window 2:\nIn a second terminal, run the app with:\n\nbin/pserve development.ini\n\n\n\nIndexing will then proceed in a background thread similar to the production setup.\n\n⭐ Note: If you run into a java stack trace when you run the app, it is worth checking if /usr/local/etc/elasticsearch/elasticsearch.yml might have the line: ‘path.plugins: /usr/local/var/lib/elasticsearch/plugins’. If it does, it needs to be commented out.\n\n6. 🎉 Check out the app! 🎉\n\nBrowse to the interface at http://localhost:8000/.\n\nRunning tests\n\n\nTo run specific tests locally:\nbin/test -k test_name\n\n\nTo run with a debugger:\nbin/test --pdb\n\n\nSpecific tests to run locally for schema changes:\nbin/test -k test_load_workbook\nbin/test -k test_load_schema\n\n\nRun the Pyramid tests with:\nbin/test -m ""not bdd""\n\n\nRun the Browser tests with:\nbin/test -m bdd -v --splinter-webdriver chrome\n\n\nRun the Javascript tests with:\nnpm test\n\n\nOr if you need to supply command line arguments:\n./node_modules/.bin/jest\n\n\nTest ALL the things!\nbin/test -v -v --splinter-webdriver chrome && npm test\n\n\nBuilding Javascript and CSS\nOur Javascript is written using ES6 and JSX, so needs to be compiled using babel and webpack. Our CSS is written in the SCSS variant of Sass and also needs compilation using webpack.\n\n\nTo re-build production-ready bundles, do:\nnpm run build\n(This is also done as part of running buildout.)\n\n\nTo build development bundles and continue updating them as you edit source files, run:\nnpm run dev\n\n\nThe development bundles are not minified, to speed up building. The above command runs continually in your terminal window and watches for changes in Javascript and SCSS files, rebuilding the bundles as you make changes.\nCreating a demo machine\n\n\nAfter buildout you (if you have the correct permissions) can run for a single-node ""cluster"":\nbin/deploy\n\n\nThe script above will spin up a server in the AWS cloud with the current branch, and with a computed nameserver alias based on the branch and your username.  Note that this retrieves a Postgres database from the current backup, so ""as is"" applies specifically to the T2DREAM Portal (if you have forked the repo you will not have permission to retrieve the db).   There are options to use a different branch and/or different instance name and also if you want to use AWS spot instances...and you can specify which AWS profile you want to use.\n\n\nDeploy script help (how to specify name, instance size, etc):\nbin/deploy --help\n\n\nFor all options, including setting up ES clusters (needed for full production).  After indexing (currently 8+hrs) the machine can be downsized at AWS to an m4.2xlarge, unless you are planning to submit significant data to it.\nLinting your code within your code editor\nTo set up linting with Sublime Text 3 or Visual Studio Code, first install the linters:\npip3 install flake8\nnpm install -g eslint\nnpm install -g eslint-plugin-react\n\n⚠️ Note: You don\'t have to use Sublime Text 3 but you must insure that linting in your editor behaves as it does in Sublime Text 3.\n\nSublime Text 3\nAfter first setting up Package Control (follow install and usage instructions on site), use it to install the following linting packages in Sublime Text 3:\n\nsublimelinter\nsublimelinter-flake8\nSublimeLinter-contrib-eslint (Sublime linter eslint instructions)\nbabel (Babel instructions)\n\nSublime Linting with pyenv\nTo get Sublime to lint Python code using pyenv you must add the python version and paths and python_paths to your Sublime Linter Preferences. In Sublime Text, navigate to the user linter preferences:\n\n\nSublime Preferences  -> Package Settings -> Sublime Linter -> Settings-User\n\n\nAdd the following (modify existing preference settings file or add this entire JSON object below if the file is blank):\n\n\n{\n    ""user"": {\n        ""@python"": 3.4,\n        \n        ""paths"": {\n            ""linux"": [],\n            ""osx"": [\n                ""/Users/YOURUSERNAME/.pyenv/versions/3.4.3/bin/"",\n                ""/Users/YOURUSERNAME/.pyenv/versions/2.7/bin/""\n            ],\n            ""windows"": []\n        },\n        ""python_paths"": {\n            ""linux"": [],\n            ""osx"": [\n                ""/Users/YOURUSERNAME/.pyenv/versions/3.4.3/bin/python3"",\n                ""/Users/YOURUSERNAME/.pyenv/versions/2.7/bin/python""\n            ],\n            ""windows"": []\n        }\n    }\n}\n\nRestart Sublime\n\nVisual Studio Code\nGo to the Visual Studio Code marketplace and install these extensions:\n\nESLint\nPython\nSass\n\nCheck versions and linting\nVersions\n\npython3 --version returns Python 3.4.3 (or variant like  3.4.x)\nnode --version returns v6.10.3  (or variant like  v6.x.y)\nelasticsearch -v returns Version: 1.7.6 (or variant like  Version: 1.7.x)\npostgres --version returns postgres (PostgreSQL) 9.3 (or variant like 9.3.x)\n\nLinting check\n\n\nPython: Open Sublime, make a change to a Python file, make an intentional syntax error (no : at the end an if evaluation). Warnings and errors should show on the left side of the line.\n\n\nJavaScript: Make a syntax error, or style error, in a JS file. Warnings and errors should show on the left side of the line.\n\n\n'], 'url_profile': 'https://github.com/T2DREAM'}","{'location': 'NONE', 'stats_list': [['27', '          followers'], ['10', '          following'], ['52']], 'contributions': '33 contributions\n        in the last year', 'description': [""DiabetesPrediction\nDiabetes Prediction Model\nCreated a prediction model on PIMA INDIAN Diabetes data with a respectable 78.35% accuracy.\nThe accuracy was based upon test data which was not used in model creation.\nThe csv files used are in csv folder and the R code are included in the script folder. The folder GUI consists server/ui r script.\nAll of the function might not run in standard R packages and additional packages should be installed accordingly. For the server to run\nit is vital to load the same environment in Rstudio that was created while running the scripts. The working directory should be set to csv folder.\nIt is recommended to run the code line wise.\nThe detailed documentation of the project is included as 'documentation' in Word file. It contains detailed processes, decisions, choices, results, comparision, plots, acuuracy and all the things necessary for explanation, understanding and reasoning of processes.\n""], 'url_profile': 'https://github.com/bipinkc19'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['DiabetesGroup\nDiabetesGroup is working on an app for Diabetes patients as well as their doctors and nutritionists.\nTesting Accounts\nPatient\nUsername/Email: jane@email.com\nPassword: password\nNutritionist\nUsername/Email: joe@email.com\nPassword: password\nClinician\nUsername/Email: doe@email.com\nPassword: password\nDownloading the APK\nThe quickest way to run our app is downloading the most recent APK from https://github.com/SCCapstone/DiabetesGroup/releases and installing it on your android device. However, in order to view our progress in between APK releases, the following steps can be used to set up your environment and run the app.\nEnvironment setup to run the app:\nThe following steps can also be found at https://facebook.github.io/react-native/docs/getting-started.html under the ""Building Projects with Native Code"" tab.\nDownload Node, Python2, JDK via Chocolately:\n\nOpen Administrator Command Prompt (right click Command Prompt icon and select ""Run as Administrator"").\nRun the command:\n\n@""%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command ""iex ((New-Object System.Net.WebClient).DownloadString(\'https://chocolatey.org/install.ps1\'))"" && SET ""PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin"" \n\n\nClose the command window.\nOpen a new Administrator Command Prompt.\nRun the command:\n\nchoco install -y nodejs.install python2 jdk8 \n\n\nClose the command window.\n\nDownload React Native CLI:\n\nOpen a new Administrator Command Prompt.\nRun the command:\n\nnpm install -g react-native-cli\n\n\nClose the command window.\n\nDownloading Android Studio:\n\nDownload Android Studio from https://developer.android.com/studio/index.html.\nFollow the install wizard until prompted to select an installation type. Here choose ""Custom"" setup.\nMake sure the following boxes are selected when prompted:\n\n\nAndroid SDK\nAndroid SDK Platform\nPerformance (Intel @ HAXM)\nAndroid Virtual Device\n\n\nOnce the installation is finished, the ""Welcome to Android Studio"" screen will open.\nHere click on ""Configure"" and select ""SDK Manager"".\nUnder tab ""SDK Platforms"", make sure the following are checked under ""Android 6.0 (Marshmallow)"":\n\n\nGoogle APIs\nAndroid SDK Platform 23\nIntel x86 Atom_64 System Image\nGoogle APIs Intel x86 Atom_64 System Image\n\n\nUnder the tab ""SDK Tools"" make sure ""23.0.1"" is checked under the ""Android SDK Build-Tools"".\nClick ""Apply"" and continue through the installation wizard until pressing ""Finish"".\n\nAndroid Studio Path Variables:\n\nOpen your ""Environment Variables"" settings. Under ""Edit User Variable"" create a ""New"" user variable:\n\n\nVariable Name: ""ANDROID_HOME""\nVariable Value: ""c:\\Users\\YOUR_USERNAME\\AppData\\Local\\Android\\Sdk""\n\n\nClick ""Okay"" and close the window.\n\nSetting Up Android Emulator in Android Studio (If you prefer to use USB debugging then skip this section.):\n\nFrom the ""Welcome to Android Studio"" screen, click ""Start a New Android Studio Project"" (Necessary for using the Android         emulators).\nFollow the ""Create New Project"" wizard leaving everything default until finally pressing ""Finish"".\nOnce the project is finished building, go to ""Tools"" --> ""Android"" --> ""AVD Manager.""\nClick ""Create New Virtual Device"".\nSelect the ""x86 Images"" tab and select ""Marshmallow"" with attributes:\n\n\nAPI Level: 23\nABI: x86_64\nTarget: Android 6.0 (Google APIs)\n\n\nClick ""Next"" and ""Finish"".\nThe ""Android Virtual Device Manager"" screen should appear with a green triangle button on the right. Click this button to start the emulator.\n\nUSB Debugging Setup\n\nOn your android phone, go to ""Settings"" --> ""About Phone"" and then tap the ""Build Number"" at the bottom seven times.\nBy going back to ""Settings"", ""Developer Options"" should now be an option.\nEnable ""USB Debugging"".\nPlug your device into your computer via USB.\n\nRunning the App\n\nClone the project from https://github.com/SCCapstone/DiabetesGroup\nOpen the cloned directory using the node.js CLI\nOpen an Android emulator or connect an Android device via USB\nIn node.js run the following command:\n\nnpm install\n\n\nAfter the previous command is done, run the following command:\n\nreact-native run-android\n\n\nThe app should now be open running on your emulator or USB device.\n\nTo run Unit-Testing with Jest:\nCheck Wiki Page for Dependencies on Unit-Testing\n\nOpen the project directory using node.js CLI\nNavigate to the test directory using the following command:\n\ncd __tests__\\test\n\n\nNow run the test using:\n\nnpm test jest.js\n\n'], 'url_profile': 'https://github.com/SCCapstone'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['OpenDiabetesVault\nOpenDiabetesVault was developed to combine several diabetes related data sources to one format.\nThis should mainly accelerate our work with artificial intelligence supported data analytics.\nBuild the Project\nTogether with the code, we provide a Netbeans 8.2 project to build the program and run example code.\nHowever, as the project code and any dependencies are in pure java, any build system should work just fine.\nRun the Program\nAfter compiling the program you can show the commandline help page by using the command:\njava -jar OpenDiabetesVault.jar -h\n\nGetting Started!\nTo get started using OpenDiabetesVault or contribute to the project, please visit our Wiki pages:\n\nGetting Started\nContribute\n\n'], 'url_profile': 'https://github.com/OpenDiabetes'}","{'location': 'Bangalore, India', 'stats_list': [['6', '          followers'], ['3', '          following'], ['79']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sekhar101'}","{'location': 'Lagos, Nigeria', 'stats_list': [['57', '          followers'], ['38', '          following'], ['179']], 'contributions': '810 contributions\n        in the last year', 'description': ['Diabetes-Prediction-API\nDeploying a simple Diabetic Machine Learning classification model with Django via an API\nEndpoint\nhttps://diabetiespred.herokuapp.com/\nAPI documentation\nhttps://documenter.getpostman.com/view/10327129/SzRuZCfD?version=latest\n'], 'url_profile': 'https://github.com/AminuIsrael'}","{'location': 'Mclean', 'stats_list': [['1', '          follower'], ['0', '          following'], ['6']], 'contributions': '19 contributions\n        in the last year', 'description': ['Diabetes-Patient-Readdmission-Prediction\nThe dataset represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. It includes over 50 features representing patient and hospital outcomes. Information was extracted from the database for encounters that satisfied the following criteria.\n(1) It is an inpatient encounter (a hospital admission).\n(2) It is a diabetic encounter, that is, one during which any kind of diabetes was entered to the system as a diagnosis.\n(3) The length of stay was at least 1 day and at most 14 days.\n(4) Laboratory tests were performed during the encounter.\n(5) Medications were administered during the encounter.\nThe data contains such attributes as patient number, race, gender, age, admission type, time in hospital, medical specialty of admitting physician, number of lab test performed, HbA1c test result, diagnosis, number of medication, diabetic medications, number of outpatient, inpatient, and emergency visits in the year before the hospitalization, etc.\n'], 'url_profile': 'https://github.com/Srashti13'}","{'location': 'The Netherlands', 'stats_list': [['33', '          followers'], ['2', '          following'], ['2']], 'contributions': '264 contributions\n        in the last year', 'description': [""d-calc\nd-calc is a bolus calculator for type 1 diabetics using an insulin pen (not an insulin pump).\n\nIntroduction\nOnce configured, start the app, input your blood glucose reading, input your estimated carbohydrate intake and it will suggest a bolus based on that information.\nd-calc has been designed for convenience and helps to remove errors and guesswork when calculating your insulin dose.\nHistory\nStarted in 2012, d-calc is a bolus calculator for your iPhone. The project was originally in Delphi XE2 - the 1st Delphi version that came with an iOS compiler (and the FireMonkey framework). It ran on iOS4 and iOS5 and iOS6.\nIn 2014, the project was re-written in Delphi XE6. The new version added support for IOB (insulin on board), and an application badge (for units of insulin on board). It ran on iOS7 and iOS8.\nd-calc integrates with Chris Bowley's Diabetes Diary (available separately on the App Store).\nIn 2015, Apple pulled d-calc from the App Store because it is out of compliance with guideline 22.9:\n\n22.9 Apps that calculate medicinal dosages must be submitted by the manufacturer of those medications or recognized institutions such as hospitals, insurance companies, and universities.\n\nAre you a hospital, university, insurance company, or drug manufacturer? Please contact me. Together, we might bring this project back to life. Diabetes is hard work. We can help patients with diabetes (often children) and remove errors from their guesswork.\nRequirements\n\nDelphi 10 Seattle\nDelphi Mobile Add-On Pack\n\nDisclaimer\nAlways consult your physician or diabetes clinic before use and please adjust the settings before using the calculator for the first time.\n""], 'url_profile': 'https://github.com/svanas'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['adapt\n\nA planning tool for using diabetes-related open source projects.\nTo Do\nFeatures\n\n Include relevant reading material for projects/configurations\n Indicate configurations as ""preferred""/""substandard""/""discontinued""/""beta""\n Add requirement info modal\nAssign approximate costs to each requirement\n\nTests\n\n Add continuous integration (TravisCI)\n Write unit tests for Transducer class\n Check to make sure configuration elements/requirements are in sync\n\nBugs\n\n Package install fails\n\nREADME\n\n Add badges\n Add logo\n\nMisc.\n\n Standardize Javascript style\n UI - create two columns for project list\n Git Hook - yarn deploy on every commit to master\n Add a description\n Alphabetize everything\n\nContributing\nThe first step is cloning the repo:\n$ git clone --recursive https://github.com/use-adapt/adapt.git\n\nNext, go to Yarn package manager and install it. (You\'ll need this on your computer to build the project.)\nThen:\n$ cd adapt\n$ yarn install\n$ yarn start\n\nThese steps will fetch the dependencies for you, install the package, and fire\nup your browser for you. You should be good to go!\nDeployment\nCurrently, the adapt website is hosted by Github Pages.\nProvided you have push access to the repository for the site,\nyou can execute\n$ yarn deploy\n\nfrom the root of the project. It will create a production build for you and push\nit.\nTroubleshooting\nYou may get an error that suggests you may need the latest npm and node.js. To update yours:\nnpm install npm@latest -g\n'], 'url_profile': 'https://github.com/use-adapt'}","{'location': 'Israel', 'stats_list': [['45', '          followers'], ['21', '          following'], ['319']], 'contributions': '2,488 contributions\n        in the last year', 'description': ['Glycemic Load Calculator https://glcalc.com\n'], 'url_profile': 'https://github.com/assafmo'}","{'location': 'Montreal', 'stats_list': [['30', '          followers'], ['27', '          following'], ['41']], 'contributions': '235 contributions\n        in the last year', 'description': [""FreshPulse\nBuilt by @edumonteiro, @fantasticjimmy, @prateeksan\n\nFreshPulse is an app built to make life a little easier for diabetes patients. It offers an interactive and robust way to record meals, medications and medical readings. Furthermore, it uses this data to monitor BMI and nutritional intakes, make dietary recommendations and generate reports which may be equally useful for the patient and his or her doctor.\n\nTech-Stack\n\nServer-Side: Ruby -v 2.2.3, Sinatra (Sinatra-Contrib, Sintra-ActiveRecord, Sintra-Partial), Rake, ActiveSupport, Faker, Prawn, Puma, Tux, Google Charts.\nClient-Side: HTML/CSS, Normalize CSS, Bootstrap, Font-Awesome, Javascript, JQuery, ChartJS, ClassieJS\n\nDemo\nImportant Note: FreshPulse's current deployment is for demonstration purposes only. Please do not use this site for any other purposes. It has not been built or verified by medical professionals and none of its content should be treated as a credible source of information or advice. If you visit our site to test it's features, please keep the aforementioned in mind and treat it as nothing more than an experimental model.\nClick Here  to visit the site.\n\nUsername: test0\nPassword: 1234\n\nFeatures\nFollowing are a few of FreshPulse's nifty features:\n\nMaintain an up-to-date profile with medical history and other important details.\nTrack all meals and medications with a robust entry logging system.\nRecord blood pressure and blood sugar levels daily.\nAccess automatically generated analytics and interactive reports based on previous entries.\nReceive daily nutritional recommendations based on BMI calculations, recent meals and other relevant factors.\nAll this and more in a clean and compact user-interface!\n\nScreenshots\nLog In Screen\nUser authentication and encryption architecture built using BCrypt. The app maintains sessions for previously authenticated users.\n\nSign Up Page\nForm fields contain server-side validations to ensure all important information is submitted in proper format.\n\nDashboard\nThe user's personalized dashboard is accessible upon login. It links to all other components of the app and displays important information about daily nutritional intake, BMI measurements, and dietary recommendations.\n\nMeal Reports\nA breakdown of daily nutritional intake along with a list of all foods consumed per day and the total calorific consumption.\n\nNew Entry Forms\nForms for recording meals, medications, blood pressure readings, and blood sugar level readings. The form displayed below is for recording medications. FreshPulse comes loaded with a database of every single medicine legally registered in Canada as of February 2016, along with its Drug Identification Number. This database is integrated with the autocomplete feature of the input field for new medicines. The Drug Identification Number is updated automatically and can be shown to a doctor or pharmacist for precise drug identification (A similar database is also integrated for food items and their estimated nutritional value).\n\nEntry Logs\nAutomatically generated logs for all recorded meals, medications and readings in the user's recent history. All logs are categorized by date and ordered by time of consumption/reading. A user can edit previous entries recorded in the logs.\n\nReadings Report\nA patient-friendly and doctor-friendly report containing the user's blood pressure readings, blood sugar levels and weight readings in interactive graphs. This page also contains other important analytics computed by the app including the average, highest and lowest readings for each of the aforementioned parameters.\n\n""], 'url_profile': 'https://github.com/prateeksan'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""#Type II Diabetes Management System\n\nDISCLAIMER\n** The patient records in this system are simplified simulations of Electronic Health Records (EHRs) for research and teaching purpose only. They are different from EHRs and do not comply with HIPAA. All patient data are fictional and no actual patient data are used. **\n\nDevelopment\nThe system use CakePHP 2.4.1 as the framework to implement. For developers may refer to CakePHP web site\nFor frontend designers\nYou can find view files from the path of app/View/[CONTROLLER_NAME]/[ACTION_NAME].ctp\nSASS\nWe use SASS to organize stylesheets, compass configuration file (config.rb) had already been setup.\nUsing the command:\n$ compass watch\n\nWill start monitoring sass/*.scss and put the compiled CSS file to app/webroot/css/*.css\nSASS files with a prefiex underscore (_) will be treated as a partial file to be used in other SASS files and will not be compiled into a standalone file.\nBackbone.js\nWe're plaing to adapt backbone.js as the frontend MV* framework.\nAngular.js\nSome sections of website need a rich frontend but not really backend related (e.g. calculator pages) will use Angular.js to handle MV binding.\nHow to use\n""], 'url_profile': 'https://github.com/met-hilab'}","{'location': 'Singapore', 'stats_list': [['3', '          followers'], ['1', '          following'], ['18']], 'contributions': '19 contributions\n        in the last year', 'description': [""DiabetesPredictionSystemPrototype\nNeural Network, Big Data. The design of the diabetes prediction system based on Neural Network.\nWe used the PyBrain as the Neural Network data training and prediction framework.\nIt's a prototype based on “python with django” as the programing language and framework.\nPurpose: We are going to develop an online system that is used to predict females’ health conditions, especially for diabetes. After initial specification, we decide to use the neural network as an approach to train the prediction model. Otherwise some web pages using will be the user interfaces. Because we are lack of clarity in conceptual design, we are going to build an experimental prototype that could help us to complement the specification. This prototype will have high fidelity and become a part of the system in the future. In this prototype, we are mainly focus on the following points.\n\nChoosing the best neural network that could generate efficient and accurate algorithm, and using the trained model to do the prediction service.\nBuilding a stable and excellent interactive interface.\n\nTest Scenarios:\n\nEnter the main page by 127.0.0.1:8000/main/;\nThen click the start button to enter the data processing page; in this page, it shows the\nrelated algorithm to do the data processing, and there are two options, one is the “Show the Raw Data” button to show the list of the raw training data, the other one is “Data Processing” to do the processing;\nEnter the data processing page, we could see the data which we remove from the raw data based on the outlier algorithm of the box plot; moreover, the processed data can be shown by clicking the “Show Processed Data” button, and the following step can be processed by clicking the “Training and Test” button;\nAfter clicking the “Training and Test” button, the client will send the request for training and test the processed data to the server by jQuery/Ajax (cause the training and test stage will spend longer time comparatively), and the server will begin training and test the related data, then the result will show on the next page;\nThen just clicking the “Predict” button, two options (multiple-record predict and single- record predict) can be chosen for the prediction stage;\nFor the multiple-record prediction, just uploading the CSV file with the related format, and for the single-record prediction, just filling with the blanks (still using jQuery/JavaScript to control the input), then the prediction output will be shown on the page; then, there still are two options that one is prediction by the current trained neural network model, and the other is return to the main page.\n\n""], 'url_profile': 'https://github.com/xljiadahao'}"
"{'location': 'Bangalore', 'stats_list': [['15', '          followers'], ['13', '          following'], ['27']], 'contributions': '139 contributions\n        in the last year', 'description': ['DiabetesDetectionApp\nDiscription\nThis is a ML oriented Web Application for detection of the diabetes based on the parameters that the user enters. It predicts whether it is benign or malignant by learning from the parameters. We have developed a deep neural network model to classify if the user has diabetes or not. The model is trained based on the PIMA Indian Diabetes dataset.\nDataset\nthe PIMA Indian Diabetes dataset from  National Institute of Diabetes and Digestive and Kidney Diseases; Includes cost data (donated by Peter Turney). The attributes are as follows:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\nTechnology Used\nFor the front end HTML5,CSS and bootstrap has been used. Flask based python is the backend. All interactions with the backend are made via RESTful API calls. A python ML model has been used to predict the disease stage. The weights of the trained model are saved and when a call is made to predict the model, inference is done based on the model weights. Iframes have been used to implement Ajax Patterns.\nWhat does the application have?\nHomepage\n\nDashboard\n\n\n'], 'url_profile': 'https://github.com/shreyavshetty'}","{'location': 'Mumbai', 'stats_list': [['0', '          followers'], ['0', '          following'], ['11']], 'contributions': '0 contributions\n        in the last year', 'description': ['Dcare\nHybrid Mobile App for Diabetes Care using PhoneGap + Ionic + AngularJs Material\n'], 'url_profile': 'https://github.com/nozelrosario'}","{'location': 'Italy', 'stats_list': [['2', '          followers'], ['5', '          following'], ['2']], 'contributions': '628 contributions\n        in the last year', 'description': ['\nSince the FreeStyle Libre 2 glucose sensor is a Bluetooth Low Energy BLE device and my purchase experience with the transmitters available for the previous generation has been quite frustrating, I am trying to leverage its capabilities to implement something new compared to the traditional apps:\n\na universal SwiftUI application for iPhone, iPad and Mac Catalyst;\nan independent Apple Watch app connecting directly via Bluetooth;\nscanning the Libre directly via NFC;\nusing both online servers and offline methods for calibrating just like Abbott’s algorithm;\nshowing for comparison the HealthKit and Nightscout data shared with other apps;\nvarying the reading interval instead of the usual 5-minute one;\na detailed log to check the traffic from/to the BLE devices and remote servers.\n\nStill too early to decide the final design (but I really like already the evil logo 😈), here there are some recent screenshots I tweeted:\n\n\xa0\xa0\nLibre 2 decrypted thanks to @ivalkou  -  Atlas stress test: 1-minute uploads\n\nPhones and transmitters: who needs them?\n\nFilling the gaps from a Mac\n\nThe project started as a single script for the iPad Swift Playgrounds to test the workings of the several BLE devices I bought, mainly the Bubble and the MiaoMiao. It was then quickly converted to an app by using a standard Xcode template: it should compile finely without external dependencies just after changing the Bundle Identifier in the General panel and the Team in the Signing and Capabilities tab of Xcode -- Spike users know already very well what that means... ;)\nI am targeting only the latest betas of Xcode. To send the custom NFC commands you have to switch from “Basic” to “Devel” mode in the Log tab and enjoy the verbose flow of debug messages.\nPlease refer to the TODOs list for the up-to-date status of all the current limitations and known bugs of this prototype.\n\nCredits: @bubbledevteam, @captainbeeheart, @cryptax, @dabear, @ivalkou, LibreMonitor, Loop, Nightguard, @travisgoodspeed, WoofWoof, xDrip+, xDrip4iOS.\n'], 'url_profile': 'https://github.com/gui-dos'}","{'location': 'Japan', 'stats_list': [['15', '          followers'], ['21', '          following'], ['11']], 'contributions': '287 contributions\n        in the last year', 'description': ['DiaBeatIt\nClick here to view user authentication implemented deployed app\nClick here to view single user deployed app\n\n\nClick here to view app code with user authentication implemented\n\n\nTechnologies used: HTML, CSS, JavaScript, React, JSX, Bootstrap, Font Awesome, Datepicker, Moment, Node, Express, Mongoose, ORM (Object-Relational Mapping), MongoDB, NoSQL, RESTful API, Google Maps API, Yelp Fusion API, Edamam API, JSON, AXIOS, Passport, Google OAuth, mLab, Heroku.\n\nApp is responsive and designed for a mobile screen and larger.\n\nOverview:\nAn app that helps prevent diabetes through healthy eating.\n\nThis is a group project of an eight member team.\nDiaBeatIt is a MERN Stack app (MongoDB, Express, React, Node).\n\n\n\nTechnical specification by page:\nLogin:\nThe user logs in with their google credientials and their email address is assigned as the username and saved to window localStorage. Whenever a user logs in, a data entry they make through the app will be saved together with their username as one of the data fields, into MongoDB. While signed in, out of all the data that is stored in MongoDB, only data that has their username saved together with it, will display to the app.  When the user clicks any of the sign out buttons on the app, localStorage will be cleared out and the user will be taken back to the splash page. The page uses Passport and Google OAuth for user authentication.\n\nCalorie Entry:\nThe user can enter their calorie intake by meal, drink or ingredient from a predefined list, or they can type in the information by manual entry. The data is then sent and stored in MongoDB.\nThe app uses its own RESTful API. A RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data. This functionality is also known as CRUD (Create, Read, Update, Delete).\n\nCalorie Data:\nThe user can retrieve the data entered on the Calorie Entry page from MongoDB.  The retrieved data is then filtered by date and sorted by meal category. The page has button options to allow a user to edit or delete an entry in MongoDB.\n\nStore Finder:\nThe user can search for market or fitness places based on their specified location. The result is then displayed to a map. The page uses a Yelp Fusion API to make the store search request and a Google Maps API to display the location of the store.\n\nRecipe Finder:\nThe user can search for recipes by entering the ingredients they wish to have included and their target calorie amount.  The page uses an Edamam API to make the receipe search request.\n\nHealth Timeline:\nThe user can enter a variety of information including gender, height and weight to display their life expectancy in a horizontal bar chart.\n\nDigital Health Card:\nThe user can enter their emergency and personal information to render a digital health card. This data is sent and stored in MongoDB.\n\nResources:\nThe user can find information on what diabetes is and how to prevent becoming diabetic.\n'], 'url_profile': 'https://github.com/makicoding'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['31']], 'contributions': '4 contributions\n        in the last year', 'description': ['README\n1 问题描述\n这个比赛的任务是预测妊娠期妇女是否患有妊娠期糖尿病，label只有一列，0表示未患病，1表示患病。一共有1000条训练样本，85维特征。线上测试样本为200条，采用F1值来评价结果好坏。由于样本较少所以很容易出现过拟合问题。在85维特征中，有30个是身体指标特征，诸如年龄、身高、体重、BMI、胆固醇指标等等，其他55个是基因特征，基因特征有3中取值0,1,2代表生物学中的AA、Aa、aa。下面介绍赛题思路。\n赛题地址\n赛题数据\n\n\n1 连续特征类\n查看数据的分布，采用不同的填充办法，比如平均值、中值、众数等 \n以平均值为标准值，添加和平均值的差值，以及差值的绝对值 \n对连续特征做归一化处理，由于后面需要对特征之间做运算，所以需要把0替换成极小值 \n归一化处理后做加减乘除和反除，以得到组合特征。 \n\n2 离散特征类\n离散特征采用one-ht编码\n编码后的特征做与、或、异或、同或处理\n\n3 特征筛选\n线性回归筛选特征+非线性XGBoost筛选\n\n\n3 模型\n这里采用的模型主要有3种，LR、XGB和LGB，其中LR采用线性筛选得到的特征，XGB和LGB采用非线性筛选得到的特征\n\n\n4 融合\n这里采用简单的加权融合的办法，最终结果线上F1值0.6429，复赛排名57。总体上来说思路比较简单，传统，和排名靠前的选手有很大的差距。下面根据答辩的情况，对每位选手的方案作出总结\n\n\n5 对答辩选手的总结\n在数据填充中，选手不是采用简单的平均值和中位数的填充办法，而是Nuclear和范数填充的办法。对于特征处理，选手先去掉了相关度非常小的几个特征以剔除噪声。然后分析所有特征对于label的单调性，实际上也类似于相关度，筛选出强特征和弱特征，在对强特征之间做组合，又一次通过单调性筛选出强特征。一般迭代4,5次可以得到不错的结果。这个的筛选指标不仅仅可以使用单调性、相关度等，还可以使用IV值，REFCV的办法来筛选。这里面ACEID也是一个非常不错的特征，但是缺失值很多，容易发生过拟合，选手们的办法是不填充缺失值或者干脆这个特征不用。\n在模型选择上大家都大同小异，LR、SVM、RF、GBDT、XGB、LGB都试一遍，看看效果，有一个选手用了Catboost的模型。在调参上面，有选手采用了遗传算法来调试出最佳的参数，思路不错。\n后处理，，对于不确定的结果，正例和负例相接近的(患病概率为0.49~0.50之间的也预测为患病)，可以在一定程度上提高成绩。\n'], 'url_profile': 'https://github.com/dayL-W'}","{'location': 'Pune, India', 'stats_list': [['29', '          followers'], ['37', '          following'], ['437']], 'contributions': '155 contributions\n        in the last year', 'description': ['Diabetes Prediction\n\nOnset of diabetes binary classification.\n\nPartial implementation of MLP as described in this paper.\nDataset - pima-indians-diabetes\nMultilayer perceptron neural network with 8 inputs in the visible layer, 32 and 16 neurons in the 2 hidden layer with ReLu activation function and 1 neuron in the output layer with sigmoid activation function.\nNetwork trained for 700 epochs with batch size of 10 using ADAM optimizer and binary_crossentropy loss function.\nAttribute Information:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\nClass variable (0 or 1)\n\n'], 'url_profile': 'https://github.com/nirajpandkar'}","{'location': 'Accra,Ghana', 'stats_list': [['83', '          followers'], ['63', '          following'], ['39']], 'contributions': '0 contributions\n        in the last year', 'description': ['Introduction\n\nThis is a python project that we are looking for contributors to re-build this code into a solution that helps minimize the rise of diabetes in Africa.All you need to do is re-write this code in any programming language, put life into to this code and automatically we will employ you as a developer at Oasis WebSoft Organisation.\n'], 'url_profile': 'https://github.com/raindolf'}","{'location': 'London, Ontario', 'stats_list': [['12', '          followers'], ['11', '          following'], ['217']], 'contributions': '52 contributions\n        in the last year', 'description': [""OpenDataBetes\n###an all-inclusive data-format to store diabetes treatment information.\nWe are currently at version 0.000, so there's not much to download, but there's a lot of work to be done\nOnce the dataformat is all shiny and nice, the primary focus will shift to providing conversions for other systems into the opendatabetes format. Ultimately it would be completely awesome to have a conversion for every pump, glucometer and diabetes app out there.\nRight now there are hundreds of fragmented solutions for tracking blood glucose and insulin, exercise, life information that relate to living with diabetes. Most are proprietary. Every company has its own method of tracking and storing the data and they don't tend to play nice with each other.\nOpen-data-betes started because I wanted to make my own Diabetes management application, but I didn't want to exclude users of specific devices or treatment strategies. I was disappointed that with the proliferation of Diabetes Management tools, nothing existed that was really universal, and all the valuable data was essentially being siloed.\nAfter completing a rough prototype of Sanguine Diabetes Manager, I realized that there was a better first step. Rather than adding one more management application to help expediate putting any tech-using diabetic into decision paralysis, I ought to focus on the foundation of the community: Encourage DiabetesIT development to behave in a progressive, open, helpful way; much like the front-end web community does.\nSo to get the ball rolling, here is a github repo and a readme.\nIf you're interested in contributing to this project, or if there's other projects already doing this that I haven't found please contact me.\nFor an inventory of existing formats in the wild, the Diabetes Data Wiki is a good place to start, the author farrell paper also has some suggestions.\n\n~bewest\nIs there a way to re-use git/npm/egg style compilations of data, so that there is a sane structure of plain text files?\nThese are easy to work with/reformat into csv/json/xml, etc, and we will need many adapters.\nThis way, I could point the tool, sanguine <git://github.com/bewest/my-data.git> or insulaudit upload git@github.com:bewest/my-phr.git\nWe can bundle some basic tools to verify/reformat data, and it provides a nice audit trail on what software has done to it, and is endlessly extensible.\n\n\n~thedamon\nI'm not familiar with those, personally.\nI was thinking of using straight up JSON because of its seeming ubiquity and ease of parsing it in most circumstances. With JSON you get a low point of entry for people wanting to plug things in and play around.\nBut if one of these formats is more easily parsed, that could make sense.\n\n""], 'url_profile': 'https://github.com/thedamon'}","{'location': 'Oulu, Finland. ', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '52 contributions\n        in the last year', 'description': ['This android application is a wellbeing fitness application developed for people who are diabetic. This application allow user to view statistics on his activities  to track the physical activities. We tried to cover social spectrum by adding friends feature such as, if a user is going for exercise or any other activities he can invite his friends. The app is developed with basic features and it needs future work.\n\nDashboard\n\n'], 'url_profile': 'https://github.com/MuradAhmad'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['5', '          following'], ['38']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kapoyegou'}"
"{'location': 'Pakistan', 'stats_list': [['30', '          followers'], ['5', '          following'], ['0']], 'contributions': '93 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MesumRaza'}","{'location': 'Vancouver, Canada', 'stats_list': [['1', '          follower'], ['0', '          following'], ['15']], 'contributions': '0 contributions\n        in the last year', 'description': ['hackingdiabetes\nHacking Diabetes repo for team 4 @ Hacking Health 2014 Vancouver\nSee Pi/README.md\n'], 'url_profile': 'https://github.com/StefanCodes'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Welcome to GameStartDiabetes\nTango AR Setup\nAn installation guide video is available on YouTube.\n\nInstall Android Studio with ""Standard"" settings.\nInstall the Java Development Kit\nInstall Unity 5.6 Beta.  Make sure to include the Android platform option during installation\nIn Unity\'s Edit -> Preferences menu, navigate to External Tools and set the file path for the Android SDK field (on Mac, this is typically /Users//Library/Android/sdk, on Windows, it will be C:\\Users<name>\\AppData\\Local\\Android\\sdk)\nClone or download the project.  In Unity, choose File -> Open Project to open the project.\n\nYou should now be able to go to File -> Build Settings, select Android as your platform, and successfully build an APK file.\nStill having trouble?\nIf you have any trouble, try these instructions:\nhttps://developers.google.com/tango/apis/unity/\n\n'], 'url_profile': 'https://github.com/HealthDesignbyUS'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['message-api\nRepository for the message API\n\nThe documentation for the API lives here: http://docs.tidepoolmessages.apiary.io/\nInstall\nRequirements:\n\nNode.js\nMongoDB\n\nClone this repo then install dependencies:\n$ npm install\nQuick start\nAssuming you have a set of config values (see ""Config"" below), load them with:\nsource config/local.sh\nIf running locally, you will need to start a local instance of MongoDB:\ngrunt start-mongo\nStart the server for the API with:\ngrunt start-api\nRunning Integration Tests\nTo run the integration tests in three seperate terminal windows do the following\ngrunt start-mongo\ngrunt start-api\ngrunt test\nConfig\nBy default, the message-api runs on port 3002. You can change this by setting the PORT environment variable.\nConfiguration is handled by env.js and loads environment variables. Check the file for defaults and documentatio.\nYou can set environment variables manually, or use a bash script. For example:\nsource config/dev.sh\nAsk the project owners to provide you with config scripts for different environments, or you can create one of your own. It is recommended to put them in the config/ directory, where they will be ignored by Git.\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'Warsaw, Poland', 'stats_list': [['6', '          followers'], ['3', '          following'], ['9']], 'contributions': '90 contributions\n        in the last year', 'description': ['Diabetes Diagnosis and Classification using Machine Learning ( Neural Networks )\nTech: Paul Walczak, Konrad Sobolewski\nMed: Doctor Agata Walczak-Bogatek\n\n'], 'url_profile': 'https://github.com/WalczakPaulo'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '182 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AhmedA998'}","{'location': 'Mumbai, India', 'stats_list': [['4', '          followers'], ['0', '          following'], ['8']], 'contributions': '131 contributions\n        in the last year', 'description': ['Diabetes Prediction\nThis is a project that aims to build a smart, versatile app that can predict the probbability of diabetes in a person using basic information.\nThis Machine Learning Project involves mainly 8 steps:\n\nDeciding the title\nCollection of Data\nData Cleaning\nExploratory Data Analysis\nDesigning the models\nHyperparameter tuning\nDeploying the model\nBuilding a front-end application, open for the users.\n\n'], 'url_profile': 'https://github.com/kxerxess'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['2', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes Prediction\nUsing Machine Learning\n'], 'url_profile': 'https://github.com/Piyush46'}","{'location': 'New Delhi, India', 'stats_list': [['17', '          followers'], ['6', '          following'], ['46']], 'contributions': '99 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shubhammittal009'}","{'location': 'San Francisco, CA', 'stats_list': [['4', '          followers'], ['3', '          following'], ['15']], 'contributions': '81 contributions\n        in the last year', 'description': [""diabetes-pancreas\nLocal Development\n\nnvm use\nnpm install\nnpm start\n\nYou'll need to make sure you have nvm installed and the proper version of node as specified in the .nvmrc file.\nInstalling nvm and the required version of node\n\nnpm install -g nvm\nnvm install\n\n""], 'url_profile': 'https://github.com/jakobsandberg'}"
"{'location': 'Philadelphia, PA', 'stats_list': [['12', '          followers'], ['18', '          following'], ['13']], 'contributions': '107 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/loafyyy'}","{'location': 'Hong Kong', 'stats_list': [['1', '          follower'], ['2', '          following'], ['69']], 'contributions': '7 contributions\n        in the last year', 'description': [""天池精准医疗大赛——人工智能辅助糖尿病遗传风险预测\n这是天池平台上的一道关于精准医疗方面的赛题：链接。\n解决方案\n[待写...]\n代码说明\ndata\n存放原始的数据文件，包括：\n\n训练数据，draft_data_train.csv\nA榜测试数据，d_test_A_20180102\nB榜测试数据，d_test_B_20180128.csv\n\n数据分析与特征提取\n\nfeature_extract.py,提取特征，在data目录下生成feature目录，存放特征文件\noffline_data_extract.py,提取线下训练与测试集\n\nclassification\n\nxgb_hp95.py，训练xgboost分类器，判断'id'的血糖是否大于95百分位数\nxgb_lp30.py，训练xgboost分类器，判断'id'的血糖是否小于30百分位数\nseries_model.py,训练一系列分类器，包括MLP,RF,XGB等，模型均保持在model/classification文件夹下\nlevel_elimination.py,加载一些列保存的分类模型，对test数据集进行瀑布流筛选，保留top150\n\nMLP_regression\n\nyy_tensorflow.py,训练MLP回归模型，并同时对测试集进行回归预测\n\nmodel\n\nclassification 文件夹保存分类器的各类模型\nregression 文件夹保存回归其的各类模型(lightdm模型除外)\n\nregression\n\n\nxgb.py 训练xgboost回归器\n\n\ndart.py，训练dart回归器\n\n\nlightdm.py，训练lightdm回归器\n\n\nrf.py,训练lightdm回归器\n\n\ngen_submission.py，生成提交文件，融合了四个回归模型的结果。\n\n\npost_process.py，使用分类模型的预测结果，对回归预测的结果进行后处理\n\n\n""], 'url_profile': 'https://github.com/LBAWMY'}","{'location': 'NONE', 'stats_list': [], 'contributions': '35 contributions\n        in the last year', 'description': ['Capstone_Diabetes\n** NYCDSA _Capstone project\nTitle: Project 1 - Readmission Prediction\nPurpose: The purpose of this project is to develop a predictive model which will help hospitals reduce their readmission rates among diabetic patients.\nIntroduction:\nA goal of the Affordable Health Care act is to increase the quality of hospital care in U.S hospitals.  One specific issue area in which hospitals can improve quality is by improving hospital readmission rates.  Under the Affordable Care Act, CMS created the Hospital Readmission Reduction Program in order to link payment data to the quality of hospital care in order to improve health quality for Americans.  Essentially, payments to Inpatient Prospective Payment System (IPPS) hospitals depend on each hospital’s readmission rates.  Hospitals with poor readmission performance are financially penalized through reduced payments.\nHospital Readmission Definitions according to CMS:\nThe 30-day risk standardized readmission measures include:\nAll-cause unplanned readmissions that happen within 30 days of discharge from the index (i.e., initial) admission.\nPatients who are readmitted to the same hospital, or another applicable acute care hospital for any reason.\nData\nhttps://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008\nBeata Strack, Jonathan P. DeShazo, Chris Gennings, Juan L. Olmo, Sebastian Ventura, Krzysztof J. Cios, and John N. Clore, “Impact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records,” BioMed Research International, vol. 2014, Article ID 781670, 11 pages, 2014.\nChallenge:\nDevelop a model which predicts whether a patient will be readmitted in under 30 days.  A diabetic readmission reduction program intervention will use this model in order to target patients at high risk for readmission.   Models will be evaluated on AUC and FPR.\nYou will be expected to present this model to\nHospital health intervention team - how will this affect rates / payment / the bottom line?\nData science team - how well does this model perform/ how is this model evaluated?\nData engineering team - what is needed for model implementation?\nDeliverables\nModel which predicts <30 readmission\nPresentation\nSupplemental Information:\nDefinitions:\nInpatient Prospective Payment System (IPPS) :Section 1886(d) of the Social Security Act (the Act) sets forth a system of payment for the operating costs of acute care hospital inpatient stays under Medicare Part A (Hospital Insurance) based on prospectively set rates. This payment system is referred to as the inpatient prospective payment system (IPPS). Under the IPPS, each case is categorized into a diagnosis-related group (DRG). Each DRG has a payment weight assigned to it, based on the average resources used to treat Medicare patients in that DRG.\nReadmission Measures List: https://www.medicare.gov/hospitalCompare/Data/data-updated.html#MG16\nWhat is Hospital Readmission Reduction Program?\nhttps://www.cms.gov/Medicare/Quality-Initiatives-Patient-Assessment-Instruments/Value-Based-Programs/HRRP/Hospital-Readmission-Reduction-Program.html\nApplicable Hospitals: https://www.ssa.gov/OP_Home/ssact/title18/1886.htm\nArchives of Readmission Reduction Program:\nhttps://www.cms.gov/Medicare/Medicare-Fee-for-Service-Payment/AcuteInpatientPPS/HRRP-Archives.html\nDetails on Readmission Calculations:\nhttps://www.medicare.gov/hospitalcompare/Data/30-day-measures.html\nSee hospital performance categories\n30 day risk standardized readmission calculations http://www.qualitynet.org/dcs/ContentServer?c=Page&pagename=QnetPublic%2FPage%2FQnetTier3&cid=1219069855273\nPayment Adjustment Non-Stratified Methodology (FY 2013 – FY 2018)\nCMS measures hospital performance in the HRRP by calculating excess readmission ratios (ERRs) for each of the six program measures. An ERR is the ratio of predicted-to-expected readmissions for a given measure. Under the non-stratified methodology, measures with 25 or more eligible discharges and an ERR greater than 1.0 enter the payment adjustment factor formula. The threshold of 1.0 is applied to all hospitals, and an ERR greater than 1.0 indicates that a hospital performed worse than the average performance of all hospitals. The payment adjustment factor formula is used to calculate the size of the payment reduction. Payment reductions were capped at 1% (i.e. a minimum payment adjustment factor of 0.99) for FY 2013, 2% for FY 2014 (i.e. a minimum payment adjustment factor of 0.98) and 3% (i.e. a minimum payment adjustment factor of 0.97) for FY 2015 and onward. Payment reductions are applied to all Medicare FFS base operating DRG payments for the fiscal year.\n'], 'url_profile': 'https://github.com/csongdechakraiwut'}","{'location': 'CA', 'stats_list': [['3', '          followers'], ['1', '          following'], ['13']], 'contributions': '5 contributions\n        in the last year', 'description': [""Laravel PHP Framework\n  \nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, and caching.\nLaravel aims to make the development process a pleasing one for the developer without sacrificing application functionality. Happy developers make the best code. To this end, we've attempted to combine the very best of what we have seen in other web frameworks, including frameworks implemented in other languages, such as Ruby on Rails, ASP.NET MVC, and Sinatra.\nLaravel is accessible, yet powerful, providing powerful tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.\nOfficial Documentation\nDocumentation for the entire framework can be found on the Laravel website.\nContributing To Laravel\nAll issues and pull requests should be filed on the laravel/framework repository.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license\n""], 'url_profile': 'https://github.com/jooskim'}","{'location': 'UK', 'stats_list': [['11', '          followers'], ['17', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes-Classification\nPredict whether a patient has diabetes.\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict based on diagnostic measurements whether a patient has diabetes.\nI conducted a brief exploratory data analysis then ran three models: logistic regression, linear SVC and gradient boosting classification.\nLinks\n[1] - https://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/mldataanalysis'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/visionstech'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['19', '          following'], ['0']], 'contributions': '46 contributions\n        in the last year', 'description': ['kdd-diabetes\nFor group collaboration on the KDD project, UNCC Spring 2017\n'], 'url_profile': 'https://github.com/keithgw'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""sc-diabetes\nThis repositories provides source code for Semantic Containers and sample data to demonstrate handling of Diabetes data. The work was funded by the European Union's Horizon 2020 Research and Innovation Programme under the NGI TRUST Grant Agreement No. 825618.\nFind more information about the respective topics:\n\nOwnYourData: https://www.ownyourdata.eu\nSemantic Container: https://www.ownyourdata.eu/semcon\nDocker Image for Semantic Container: https://hub.docker.com/repository/docker/semcon/sc-base\n\nData Flows\nThe following data flows are documented in detailed:\n\nTidepol Integration: https://github.com/sem-con/sc-diabetes/blob/master/dataflows/Tidepool_Integration/README.md\nData Donation: https://github.com/sem-con/sc-diabetes/blob/master/dataflows/Data_Donation/README.md\nPersonal Data: https://github.com/sem-con/sc-diabetes/blob/master/dataflows/Personal_Data/README.md\nData Tracing: https://github.com/sem-con/sc-diabetes/blob/master/dataflows/Data_Tracing/README.md\n\n\xa0\nImprove the Diabetes Semantic Container\nPlease report bugs and suggestions for new features using the GitHub Issue-Tracker and follow the Contributor Guidelines.\nIf you want to contribute, please follow these steps:\n\nFork it!\nCreate a feature branch: git checkout -b my-new-feature\nCommit changes: git commit -am 'Add some feature'\nPush into branch: git push origin my-new-feature\nSend a Pull Request\n\n\xa0\nLizenz\nMIT License 2020 - OwnYourData.eu\n""], 'url_profile': 'https://github.com/sem-con'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/education454'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '25 contributions\n        in the last year', 'description': ['diabetes-registry\nThis diabetes registry source code can be used to build a system for saving and tracking health information on patients with diabetes.\n\n  Figure 1. Main Menu\n\n\n\n  Figure 2. Add Patient\n\n\n\n  Figure 3. Data Entry\n\n\n\n  Figure 4. Blood Pressure History\n\n\nDiabetes Registry Setup and Run Instructions\nSections\nA - requirements\n\nB - build MySQL database\n\nC - build application\n\nD - deploy application\n\nE - notes\n\nSection A - requirements\na) Download and install MySQL Community Server 5.7 and Workbench from\nhttp://dev.mysql.com/downloads/\nb) Download and install JDK 8 from\nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\nc) Download and install Apache Tomcat 7 from\nhttps://tomcat.apache.org\nd) Download and install NetBeans 8 IDE from\nhttps://netbeans.org/downloads/\nSection B - build MySQL database\na) In Workbench, open and execute the file named ""createdbscript.sql"" found in the db directory.\nb) In Workbench, open and execute the file named ""data_dump.sql"" found in the db directory.\nSection C - build application\na) Place the following JAR files in the Tomcat/lib directory:\nGo to\nhttps://jstl.java.net/download.html and download\n\t- javax.servlet.jsp.jstl-api-1.2.1.jar\n\t\n\t- javax.servlet.jsp.jstl-1.2.1.jar\n\nGo to\nhttps://dev.mysql.com/downloads/connector/j/ and download\n\t- MySQL Connector/J\n\nGo to\nhttp://www.jfree.org/jfreechart/download.html and download\n- jcommon-1.0.23\n\n- jfreechart-1.0.19\n\nb) Open the project in NetBeans to finish building the application.  Three more JAR files must be added to the project:\n\n\ncommons-lang3-3.4.jar found at https://commons.apache.org/proper/commons-lang/download_lang.cgi\n\n\njavax.mail-1.5.1.jar found at http://mvnrepository.com/artifact/javax.mail/javax.mail-api/1.5.1\n\n\npdfbox-app-1.8.11.jar found at https://pdfbox.apache.org/download.cgi\n\n\nRight-click on the Libraries node in the Projects view and select the \'Add JAR/Folder\' option to find the downloaded JAR files and add them to the project.\nc) Once the program compiles, build the application by selecting the \'Clean and Build Project\' menu item in the \'Run\' menu to produce a WAR file in the dist folder.\nSection D - deploy application\na) Place the WAR file in the Tomcat/webapps directory.\nb) Run the application by executing the startup file in the Tomcat/bin directory.\nc) View the application by pointing the browser to https://localhost:8443/diabetesregistry for a connection with SSL/TLS implemented.  Otherwise, comment out the application\'s security constraint in diabetesregistry/WEB-INF/web.xml and point the browser to http://localhost:8080/diabetesregistry.\nd) Stop the application by executing the shutdown file in the Tomcat/bin directory.\nSection E - notes\na) By running the data_dump.sql file after createdbscript.sql, a default user is provided with the following credentials:\nusername = joeUser\npassword = Test1234?!\nb) A default clinic, named ""Test Clinic"", is also provided by running the data_dump.sql file.\nc) SSL/TLS:\nTo utilize SSL/TLS on localhost, a self-signed certificate is required.  With a self-signed certificate created, access the running application by SSL/TLS by pointing a web browser to https://localhost:8443/diabetesregistry\n\nOtherwise, comment out the application\'s security constraint in diabetesregistry/WEB-INF/web.xml and access the running application by pointing a web browser to http://localhost:8080/diabetesregistry\n\nd) storage encryption:\nA default key used for database encryption of sensitive attributes is stored in the clinic number value in configuration.xml.  The value of the default key can be modified in the configuration file before use.\n\n'], 'url_profile': 'https://github.com/bryandaniel1'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['README: Diabetes_readmission_Project\nDataset information:\nThe diabetes data set was collected from 130 US hospitals over almost 10 years (1999-2008). This data set includes 50 different features. The detailed information for each feature can be found here. The data sets can be downloaded here.\nProblem statements:\nThis project deals with the readmission rate of diabetes patients. When the diabetes patients are admitted to a hospital, they get treated and discharged. What you don’t want is they will require readmission because that is a waste of money and resources and it’s also not good care. I think in this problem we will care more about false negative, which means that people was predicted to not require readmission while the reality is otherwise.\n\nGoal:  Use this data set and apply machine learning algorithms to predict whether a future patient will be readmitted or not. This will help save the cost and improve the care condition.\n\nFiles:\n\nReadme: you are reading this file\ndiabetes_data.csv: Data file.\nadmission_mapping.csv: Second part of data for types of admission\nDiabetes_visualize_model.ipynb: Python jupyter notebook for visualization and modeling data\n\nRequired libraries to run this project:\n\nNumpy\nPandas\nMatplotlib\nSKlearn\nSeaborn\n\nSummary/Discussion:\nIn this project, I used Logistics Regression, Adaboosted classifier and Random Forest classifier to predict whether a diabetes patient will experience readmission. I used GridSearchCV to tuen hyperparameters on Adaboosted to improve the performance of model.\n\nThe performances of all models are very similarly with accuraries ranging from 61% to 64%. The tuned Adaboost and Random Forest have the best performance (~64%). This accuracy level is not very good YET. It requires more work to improve.\nLooking at the confusion-matrix, precision, recall and F1-score for each model, I can see that the false negative is very big, which means recall for ‘readmission’ is low. However, they differ quite a lot between models (The readmission Recall of Logistic Regressioin is 39% while that of Random Forest is 52%). Even though this recall is very low and needs to be improved, I think that Random Forest gives us the best performance in terms of both accuracy and readmission recall.\nTo improve the performance of model on this data I need to spend more time to find the pattern and optimize the feature selection. I am also thinking about reducing the number of dimensions of features. Improving the parameter tuning process and applying cross validation may also help.\n\n'], 'url_profile': 'https://github.com/Dien0426'}","{'location': 'Anantapur,Andhrapradesh', 'stats_list': [['34', '          followers'], ['5', '          following'], ['41']], 'contributions': '277 contributions\n        in the last year', 'description': ['Linear Regression Using Python\n\nClick here to download the code.\nPrerequisites\nThe things that you must have a decent knowledge on:\n    * Python\n    * Linear Algebra\n    * Calculus\n\nInstallation\n\nThis project is fully based on python. So, the necessary modules needed for computaion are:\n\n    * Numpy\n    * Sklearn\n    * Matplotlib\n    * Pandas\n\n\nThe commands needed for installing the above modules on windows platfom are:\n\n    pip install numpy\n    pip install sklearn\n    pip install matplotlib\n \n\nwe can verify the installation of modules by  importing the modules. For example:\n\n    import numpy\n    from sklearn.decomposition import kernelPCA \n    import matplotlib.pyplot as plt\n    \nExplanation\n\n\nHere were performing linear regression on the Boston house pricing dataset.\n\n\nThe details of the dataset are:\n\n\nTitle: Boston Housing Data\n\n\nSources:\n(a) Origin:  This dataset was taken from the StatLib library which is\nmaintained at Carnegie Mellon University.\n(b) Creator:  Harrison, D. and Rubinfeld, D.L. \'Hedonic prices and the\ndemand for clean air\', J. Environ. Economics & Management,\nvol.5, 81-102, 1978.\n(c) Date: July 7, 1993\n\n\nPast Usage:\n\n\n\nUsed in Belsley, Kuh & Welsch, \'Regression diagnostics ...\', Wiley,\n1980.   N.B. Various transformations are used in the table on\npages 244-261.\nQuinlan,R. (1993). Combining Instance-Based and Model-Based Learning.\nIn Proceedings on the Tenth International Conference of Machine\nLearning, 236-243, University of Massachusetts, Amherst. Morgan\nKaufmann.\n\n\n\nRelevant Information:\nConcerns housing values in suburbs of Boston.\n\n\nNumber of Instances: 506\n\n\nNumber of Attributes: 13 continuous attributes (including ""class""\nattribute ""MEDV""), 1 binary-valued attribute.\n\n\nAttribute Information:\n\nCRIM      per capita crime rate by town\nZN        proportion of residential land zoned for lots over 25,000 sq.ft.\nINDUS     proportion of non-retail business acres per town\nCHAS      Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\nNOX       nitric oxides concentration (parts per 10 million)\nRM        average number of rooms per dwelling\nAGE       proportion of owner-occupied units built prior to 1940\nDIS       weighted distances to five Boston employment centres\nRAD       index of accessibility to radial highways\nTAX      full-value property-tax rate per $10,000\nPTRATIO  pupil-teacher ratio by town\nB        1000(Bk - 0.63)^2 where Bk is the proportion of black by town\nLSTAT    % lower status of the population\nMEDV     Median value of owner-occupied homes in $1000\'s\n\n\n\nMissing Attribute Values:  None.\n\n\n\n\nClick here to find the program LinearRegression_BOSTON_Dataset.py\n\n\nResult:\n\n\nThe above program results a scatter plot showed below:\n\n\n\nThe output of the program is showed below:\n\n\n\nclick here to see the program LinearRegression_DIABETES_Dataset.py implementing linear regression on Diabetes dataset.\nConclusion\n\nPerformed Linear Regression on BOSTON house pricing and Diabetes dataset.\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md\n'], 'url_profile': 'https://github.com/syamkakarla98'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['3', '          following'], ['1']], 'contributions': '69 contributions\n        in the last year', 'description': ['\n\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/tamasane'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['MachineLearningWithPython\nAnalysing the pima-indian diabetes data set , predict which people will develop diabetes\n'], 'url_profile': 'https://github.com/khamchand'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/dcampbell-macadamian'}","{'location': 'fuzhou', 'stats_list': [['17', '          followers'], ['10', '          following'], ['47']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesArithmetic_version3.0\nThis resource includes the use of a variety of machine learning methods (KNN,  DecisionTree, random forest, logistic regression, support vector machine , etc.) to predict diabetes\n'], 'url_profile': 'https://github.com/hanlaoshi'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Documentation hub\nDocumentation hub for links to open source documentation in the DIY diabetes ecosystem\nTODO:\n\nCreate master list of content - categories, links to each open source project\nConsider using an open source tool to allow people to select equipment and see applicable open source projects, such as use-adapt (webpage example here, source here).\n\nDraft categories based on 26 May 18 discussion:\n\nAPS algo\nGlucose Source\nxDrip\nPump\nTreatment source\nReporting/Visualization\nProfile\nSystem functions\nThird party integration\n\n'], 'url_profile': 'https://github.com/nightscout'}","{'location': 'Mumbai', 'stats_list': [['4', '          followers'], ['5', '          following'], ['2']], 'contributions': '47 contributions\n        in the last year', 'description': ['Pima-Indian-Diabetes-Prediction\nPima Indian Diabetes Prediction\nThe dataset consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.The main objective is to build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?\nSource : https://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/VishalMalpure'}","{'location': 'Hamburg', 'stats_list': [['22', '          followers'], ['19', '          following'], ['27']], 'contributions': '28 contributions\n        in the last year', 'description': ['\nDiabertie\n\nDiabertie is a personal diabetes chatbot.\nIt uses the awesome Telegram Bot API.\nYou can send Diabertie your blood sugar levels, insulin doses and whatever is important for your daily diabetes logging.\nFor a detailed documentation on how to use this bot there is a detailed guide on that.\nContribute\nYou are very encouraged and welcome to contribute to this project as long as you stick to the code of conduct.\nRun development server\nYou have to set some environment variables. There is a .env.example with all the needed variables.\nnpm run dev\nRun tests\n$ npm test\n'], 'url_profile': 'https://github.com/sebashwa'}","{'location': 'Berlin, Germany', 'stats_list': [['13', '          followers'], ['14', '          following'], ['394']], 'contributions': '595 contributions\n        in the last year', 'description': ['gmi\n\n\n\n\n\n\ngmi (glucose metabolism indices) is an R package that bundles\npopular insulin sensitivity and beta cell function indexes, so you don\'t need an\nextra excel sheet, to copy-paste a function, or to write the formula yourself.\nInstallation\nOnly the developmental version is currently available.\n# install.packages(""remotes"")\nremotes::install_github(""jcpsantiago/gmi"")\nIf you use gmi please cite it using the DOI: 10.5281/zenodo.2631368.\nIndexes\nComparisons between each index and the hyperinsulinaemic-euglycaemic clamp are discussed in Otten et al., 2014\nThe following indices are currently implemented:\nFasting indices:\n\nFIRI\nHOMA-IR\nQUICKI (both original and revised)\n\nOGTT indices:\n\nCederholm\nGutt (ISI0,120)\nMatsuda (Composite Index)\nNEFA-ISI\nStumvoll-ISI\nStumvoll-MCR\n\nTODO\n\nImplement OGIS.\n\n'], 'url_profile': 'https://github.com/jcpsantiago'}"
"{'location': 'NONE', 'stats_list': [['14', '          followers'], ['0', '          following'], ['4']], 'contributions': '28 contributions\n        in the last year', 'description': ['sim_diabetes_data\nSimulating a large-scale semi-synthetic healthcare dataset for education and demos\nThis is a collection of simulations to construct a large set of data for a health care analytics use case. Starting with published anonymized data about hospital readmission rates for diabetic patients we reverse-engineered admission histories, generated fictitious personal details (names, birthdates, zipcodes, weights), and simulated a variety of additional data sources from which we can engineer analytical features. These include grocery purchases (used to estimate percentage of calories from carbohydrates in the diet), continuous blood glucose monitoring measurements (used to calculate standard deviation), and wearable vital sign sensor data (to quantify activity). We used Hive, Pig, and Microsoft R Server on an HDInsight cluster to extract the features from these large datasets, and I will collect the analysis scripts here as well.\nSince there are no privacy concerns with this simulated data, it should be useful for a variety of training exercises and demonstrations that bring together demographic information, wearable sensor data, and electronic medical records to predict a medical outcome.\nSimulating data for analysis is a sort of ""red team/blue team"" exercise, where the simulation team embeds signals in the data and the analysis team tries to find them. The various RMarkdown files describe the approaches used to generate the simulated data such that the engineered features are predictive of the outcome.\n'], 'url_profile': 'https://github.com/rmhorton'}","{'location': 'New Delhi, India', 'stats_list': [['15', '          followers'], ['0', '          following'], ['62']], 'contributions': '667 contributions\n        in the last year', 'description': [""Diabetes-Predicition-Model\nIn this project we are given a Diabetes Data set consisting of following features -\n['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']\nWe have to predict whether a person is suffering from diabetes or not (Binary Classification).\nClassification Task - Classify a person as 0 or 1 (Diabetic or Not) using K-Nearest Neighbors classifier.\nWe are saving our predictions of test cases in a CSV file. File should have same structure as that of Sample Submission File.\n""], 'url_profile': 'https://github.com/shubhamgoel90'}","{'location': 'Sri Lanka', 'stats_list': [['4', '          followers'], ['0', '          following'], ['7']], 'contributions': '164 contributions\n        in the last year', 'description': ['Diabetes Prediction App\nStreamlit Web App to predict the onset of diabetes based on diagnostic measures.\nData\nThe data for the following example is originally from the National Institute of Diabetes and Digestive and Kidney Diseases and is available on Kaggle. The data contains information on females at least 21 years old of Pima Indian heritage.\nSince the data has been added to the data/ directory, cloning this repository would suffice.\nPre-requisites\nThe project was developed using python 3.6.7 with the following packages.\n\nPandas\nNumpy\nScikit-learn\nPandas-profiling\nJoblib\nStreamlit\n\nInstallation with pip:\npip install -r requirements.txt\nGetting Started\nOpen the terminal in you machine and run the following command to access the web application in your localhost.\nstreamlit run app.py\nRun on Docker\nAlternatively you can build the Docker container and access the application at localhost:8051 on your browser.\ndocker build --tag app:1.0 .\ndocker run --publish 8051:8051 -it app:1.0\nFiles\n\ndiabetes_prediction_pipeline.ipynb : Jupyter Notebook with all the workings including pre-processing, modelling and inference.\napp.py : Streamlit App script\nrequirements.txt : pre-requiste libraries for the project\nmodels/ : trained model files and scaler objects\ndata/ : source data\n\nSummary\nThis repository acts as a guide to [this blog post] where I talk about how I use Streamlit to build Machine Learning Applications quickly. Here we use a real-world example of predicting if a patient has diabetes and built a machine learning model. A Streamlit App was then built using a step-by-step approach in this project.\nAcknowledgements\nKaggle, for providing the data for the machine learning pipeline.\nStreamlit, for the open-source library for rapid prototyping.\n'], 'url_profile': 'https://github.com/arunnthevapalan'}","{'location': 'Denver, Colorado', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '252 contributions\n        in the last year', 'description': [""Diabetes-Demographics-in-Colorado\nVisualization project of diabetes rates along Age, Income, Food Security, and Urban/Rural settings.\nMotivation\nEffectiveness in health awareness programs and education come from a greater understanding of the demographics involved. By indentifying target areas within the population, health and food resources, prevention and treatment programs can be aimed with greater precision.\nWe believe that the stated variables of age, income, food security, urban/rural setting have an effect on the rates of diabetes amongst the population of Colorado.\nGoal\nBy visualizing the demographics of Colorado along age, income, food security, and urban/rural settings as they pertain to diabetes rates, the aim is to identify areas within the state's population that would benefit from allocation of resources and education.\nData\nData Sources: USDA Food Environment Atlas Data for Colorado Census Tracts (2017), Diabetes in Adults - CDPHE Community Level Estimates (Census Tracts) (2014-2017),  Diabetes Hospitalization Rate (Census Tracts) (2013-2017), Income/Poverty (Census Tracts) (2014-2017) , Current Prevalence of Diabetes - Center for Disease Control(2011-2020), Educational Attainment (Census Tracts) (2013-2017).  All resources were accessed from CDPHE Open Data:  https://data-cdphe.opendata.arcgis.com/\nUsing the above sources, the data will be visualized across multiple charting methods.\nUrban vs. Rural Diabetes and Hospitalization Rates\nRural and urban Coloradans have roughly equivalent average diabetes rates (8%).  However, urban Coloradans are hospitalized for diabetes far more often than rural Coloradans (+20%).  We conjectured that distance to a hospital may account for why rural diabetics are hospitalized less often than urban diabetics.  Looking into this, we mapped hospital locations in reference to rural and urban census tracts, and differences were not significant.\nWhile rural Coloradans do have less access to hospitals in terms of distance, that doesn't explain why hospitalizations per 100,000 people occur at a much greater rate in urban areas.  We conjecture that people in urban areas may have less access to consistent care in terms of yearly checkups and prescription compliance and may have lower insured rates, leading to more complications and hospitalizations.\nAdditionally, there is a slightly higher correlation between almost all access-impairing factors (income, distance, education) and both hospitalization per 100,000 and estimated diabetes rates (%) in urban census tracts, suggesting that the higher hospitalization rate in urban areas may be connected to a compounding of access-imparing issues.  This study could be furuther pursued by adding in census data regarding rural and urban insured rates and by looking at compounded access-imparing factors.  Insured data is available from the Small Area Health Insurance Estimates (2018) dataset from the Census Bureau.\nDiabetes Rates along LILA rated census tracts\nLow Income(LI) rankings are determined by poverty rates(at least 20%) or median family income ( at or below 80% of metropolitan area or the state's median income.\nLow Access(LA) status is measured in four different ways. The first three are based on the distance to the nearest supermarket or grocer. The distance thresholds for urban ares is 0.5 and 1 mile, while rural areas are measured at 10 and 20 miles. The last measure is based on household without access to a vehicle that live over 0.5  miles\nColorado has 52.9% of it's census tracts with no LILA designation. That represents 3,701,428 residents of Colorado's 5,395,805 total population. This analysis will compare their rates of diabetes along their population sizes.\nThere was a slight negative correlation between the diabetes rates and the population size of each LILA tract group, this was also showed in the census tracts that did not have a LILA designation though not as strongly. Given the weight of the Non-LILA tracts it was worth investigating where that correlation was coming from. The variance among the data points in the lower population tracts gave a path for the data to determine where that variance would come from.\nSeperating the data along the Urban/Rural designation in each LILA tract allowed for more visualization of where the variance was occuring. The lower population rural tracts showed significantly higher rates of diabetes rates. Adding health and education resources per capita would allow for a clearer view of how these affected tracts are being managed from a medical perspective.\n""], 'url_profile': 'https://github.com/Ryan-Eberle'}","{'location': 'Dublin, Ireland', 'stats_list': [['29', '          followers'], ['39', '          following'], ['10']], 'contributions': '121 contributions\n        in the last year', 'description': ['Trocaire Diabetes Management App Collection\nThe goal of this project is to provide tools to enable patients with diabetes to\ncommunicate their blood sugar level and blood pressure test results. These test\nresults data must be visualised for doctors so that they can track the health\nand wellbeing of their patients and take actions if necessary.\nClient Requirements\nIn countries like Somalia, in which poor health literacy is prevalent, diabetic\npatients are unable to attend frequent doctor appointments. Diabetes mellitus is\na chronic condition, predominantly affecting the pancreas, that fails to\nadequately produce insulin. This results in dangerously high blood sugar levels.\nThese spikes often cause comorbidities such as diabetic ulcers, blindness and\nhypertension. As these can rapidly develop, regularly scheduled doctor\nappointments are highly recommended to maximise patient care. However, poor\nonline infrastructure in Somalia has resulted in poor patient compliance for\nthese appointments as there is currently no digital platform for doctors to\ntrack and monitor their patients.\nSolution\nTo combat this problem we have developed an app entitled ""Korta"", that aims to\nresolve the disconnect between patients and doctors. This results in an\nimprovement in both patient compliance and overall care. Korta is a mobile and\nweb-based app designed for both diabetic patients and their doctors. Using the\napp, doctors can create individual patient profiles to allow for the ability to\nautomatically and securely upload patient data with minimal literary\nrequirements. The biometric data is displayed graphically for the clinician with\nany abnormalities highlighted. Notifications alert the doctor to contact a\npatient should they need to be called in for an appointment.\nOverall, a platform has been created to track and monitor diabetic patients in\nSomalia, thereby improving patient care. The app has the potential to be\ntranslated to other regions or to monitor additional biometrics like\ncholesterol.\nFinally, the app is particularly relevant to COVID-19 (of which diabetes is a\nlarge risk factor), as allowing doctors to remotely identify and monitor these\nhigh-risk patients without the need for an in-person assessment would reduce a\ndiabetic patient\'s risk of contracting the virus.\nPatient Android App\nAllows patients to input readings. Designed for illiterate users. Readings can\nbe inputted manually or through optical character recognition.\nDoctor Android App\nAllows doctors to sign-up patients and monitor them. Includes a visualisation\nand alert system, patient follow-up reminders and patient profiles.\nAdministrative Dashboard Web App\nAllows signing-up doctors, clinics and admins. This dashboard serves both\nadministrators and doctors. Includes an email verification procedure.\nTechnology Description: Front End\n\n\nAndroid Studio for the doctor and patient apps.\n\n\nGoogle Vision API and OpenCV for OCR.\n\n\nMPAndroidChart for visualisations.\n\n\nFirebase for authentication.\n\n\nTechnology Description: Back End\n\n\nNode.js for the server.\n\n\nExpress to handle requests.\n\n\nMySQL as the database.\n\n\nDeveloped using TypeScript.\n\n\nFirebase for authentication.\n\n\nAzure Blob Storage to store images.\n\n\nScreenshots\nPatient App\n\nDoctor App\n\nWeb App\n\nTeam\nDeveloped by a team comprising of Senior Sophister, BA (Mod.) Computer Science\nstudents and MSc Bioengineering students at Trinity College, Dublin.\nInstallation \xa0\nPlease get in touch with one of the contributors to discuss installation.\n'], 'url_profile': 'https://github.com/sullaVM'}","{'location': 'Paris, France', 'stats_list': [['45', '          followers'], ['46', '          following'], ['44']], 'contributions': '55 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nicolasfguillaume'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['ProjectCode-BeatDiabetes\nA data visualization and blood sugar tracking project for diabetes patients\n\nChart Js based frontend UI for Blood Sugar Level Values copied from MyTracks project by Avinash Kumar Gupta.\nBackend Code to Update UI data from database\nAdd New Data of Blood Sugar Level Values\nHIPAA compliant login\nRe-Design Visualization of available Data\n\n'], 'url_profile': 'https://github.com/TheSciFiMed'}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['2', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/patel8'}","{'location': 'NONE', 'stats_list': [['12', '          followers'], ['6', '          following'], ['2']], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes Network!\n-u_ID\n    -username\n    -password\n    -weight[]\n        -{weight,dateModified}\n    -height\n    -insulnDose\n    -DailyModifiedData\n\n'], 'url_profile': 'https://github.com/robinonsay'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Predict Onset of Diabetes Using Big Data System Design (Big Data System Design class)\n\n- John Carneiro - johnmcarneiro@gmail.com\n- Janakiram Sundaraneedi - janakiram_sundaraneedi@student.uml.edu\n- Jan Zaloudek - honzicekz@gmail.com\nDataset - Practice Fusion - Diabetes Classification - Identify patients diagnosed with Type 2 Diabetes\n- Overview - https://www.kaggle.com/c/pf2012-diabetes\n- Training data set - https://github.com/Itelina/DiabetesPrediction/blob/master/trainingSet.zip\n- Test data set - https://github.com/Itelina/DiabetesPrediction/blob/master/testSet.zip\n'], 'url_profile': 'https://github.com/bigdatasystem'}"
"{'location': 'Pune', 'stats_list': [['3', '          followers'], ['4', '          following'], ['2']], 'contributions': '33 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nData visualization and exploratory data analysis are performed on Pima Indians Diabetes dataset. The aim is to construct a classifier to predict whether a patient has diabetes based on a set of diagnostics.  After cleaning the data, importance of features are analyzed using different methods.\nFir Machine learning model we have used two algorithm that is knn and logistic regression.\n'], 'url_profile': 'https://github.com/pratik7478'}","{'location': 'Shanghai', 'stats_list': [['4', '          followers'], ['3', '          following'], ['36']], 'contributions': '640 contributions\n        in the last year', 'description': ['Diabetes Control App\nAn Android app to record the blood sugar and other data for diabetes users.\n\nrecord the data\npresentation in table and chart\nupload to the cloud to be accessed by doctors\nremind user to take medications\nbuild up good habits for taking pills and record data on time\n\n'], 'url_profile': 'https://github.com/chennanni'}","{'location': 'Lagos, Nigeria', 'stats_list': [['2', '          followers'], ['0', '          following'], ['1']], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/debowaletobi'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': [""Scala-Spark-Health-Record-Analyzer\nDetermines if individual patients have Diabetes, High Blood Pressure, and/or High Cholesterol\nand aggregates the percent occurrence for each condition within the population.\nNOTE: This App was written TDD style AND has end-to-end tests\nFlow of App\nInput\nAccepts a file of health records, where each health record contains:\nfasting blood sugar level (mg/DL), cholesterol figures (total, ldl, hdl, & triglycerides - all in mg/dL),\nand blood pressure in units: mm Hg, where the numerator is Systolic, and the denominator is Diastolic.\nOutput\nFrom the vital signs in each health record, the application will then determine a patient's results\nand save all to file.\nThe patient results are then aggregated to display:\n\n% of patients with Diabetes\n% of patients with High Blood pressure\n% of patients with High Cholesterol\n% of Healthy patients (% of patients without any of the above conditions)\n\nFuture Work\n\nGroup Patient Results by Age, Region, and Gender to derive insightful info\nIncorporate more precise rules based on age and gender to derive a patient health results\n\n""], 'url_profile': 'https://github.com/BFrazToInfAndBeyond'}","{'location': 'Markhan, ON', 'stats_list': [['1', '          follower'], ['0', '          following'], ['5']], 'contributions': '28 contributions\n        in the last year', 'description': ['Diabetes\nmain.py ~ to compare the accuracy of all five techniques below\nnn.py ~ to modify parameters to improve the accuracy of deep neural network\nSVC.py ~ to modify parameters to improve the accuracy of support vector machine\ndecisiontree.py ~ to modify parameters to improve the accuracy of decision tree\nlogicticregression.py ~ to modify parameters to improve the accuracy of logistic regression\nnaiveBayes.py ~ to modify parameters to improve the accuracy of naive Bayes\n'], 'url_profile': 'https://github.com/sidongwei'}","{'location': 'sector 35 b chandighar', 'stats_list': [['7', '          followers'], ['6', '          following'], ['45']], 'contributions': '77 contributions\n        in the last year', 'description': ['pima-diabetes-prediction-using-tensflow\n'], 'url_profile': 'https://github.com/adilshagoo87'}","{'location': 'Tehran, Iran ', 'stats_list': [['86', '          followers'], ['283', '          following'], ['185']], 'contributions': '337 contributions\n        in the last year', 'description': ['Pima indian diabetes Deep Learning\n\n\n\nDiabetes prediction with deep MLP models webapp (StreamLit.io) + ipynb\nData\nthe datasets consist of several medical predictor (independent) variables and one target (dependent) variable, Outcome. Independent variables include the number of pregnancies the patient has had, their BMI, insulin level, age, and so on. link of data in kaggle\nColumns\n\n\n\nColumns\nDescription\n\n\n\n\nPregnancies\nNumber of times pregnant\n\n\nGlucose\nPlasma glucose concentration for 2 hours in an oral glucose tolerance test\n\n\nBloodPressure\nDiastolic blood pressure (mm Hg)\n\n\nSkinThickness\nTriceps skin fold thickness (mm)\n\n\nInsulin\n2-Hour serum insulin (mu U/ml)\n\n\nBMI\nBody mass index (weight in kg/(height in m)^2)\n\n\nDiabetesPedigreeFunction\nDiabetes pedigree function\n\n\nAge\nAge (years)\n\n\nOutcome\nClass variable (0 or 1) 268 of 768 are 1, the others are 0\n\n\n\nContext\nThis dataset is originally from the National Institute of Diabetes, Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\nAcknowledgements\nSmith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). Using the ADAP learning algorithm to forecast the onset of diabetes mellitus. In Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). IEEE Computer Society Press.\nInspiration\nCan you build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes?\nTODO\n\n add unblacend class\n  train/dev/test\n add normalizing\n regularizer\n Linear Regression\n Support vector machine\n Naive bayes\n Streamlit\n Deep Learning\n Graduation Project Report\n batch norm\n lr tuner\n lime\n production tips for speed ( tf.server, purning, qunatization)\n deploy diabetes_large data\n Persian Blog\n English Blog\n upload dataset to kaggle\n transfer learning\n online learning\n adding more languages for UI\n refactor paging capability\n dockerize it (fandoughe for eg or my vps)\n flask api\n flutter app\n error analysis\n feature enginearing\n database for patients\n test learning curve\n fill missing data (with a model or other stuff)\n\n'], 'url_profile': 'https://github.com/AminTaheri23'}","{'location': 'The Internet', 'stats_list': [['64', '          followers'], ['88', '          following'], ['297']], 'contributions': '230 contributions\n        in the last year', 'description': ['WowDiabetesWebsite\nWebsite for WoW Addon for diabetes research\nAddon Repo\nSetup\nnpm install\ngulp\n\nFor production build:\ngulp production\n\nIcon Font\ngulp iconFont\n\n'], 'url_profile': 'https://github.com/lcb931023'}","{'location': 'Phoenix', 'stats_list': [['2', '          followers'], ['3', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hmusugu'}","{'location': 'Syracuse, New York, US', 'stats_list': [['5', '          followers'], ['1', '          following'], ['7']], 'contributions': '82 contributions\n        in the last year', 'description': [""Hospital-Readmission-based-on-DiabetesData\n\nProblem Statement\nDiabetes is a widespread chronic disease that is accompanied with irregularities of blood glucose levels due to problems related to insulin. For diabetes; the cost analysis estimates that $250 million can be saved across 98,000 diabetic patients by incorporating predictive modeling and prompting greater attention to those who were predicted to get readmitted. Hospital readmission rates are an indicator of hospital quality as well as a means to reduce healthcare costs. High readmission rate is an indication of poor hospital quality, poor treatment and results in the hospital getting penalized. Hence by identifying the factors that lead to higher readmission and being able to predict if a patient is going to be readmitted, the treatment provided by the hospital can be changed, to avoid a readmission and thereby the quality of healthcare provided to the patient can be largely improved, as well as billions of dollars can be saved.\nData Science Methodology\nBy leveraging the dataset, we will perform extensive Exploratory Data Analysis and perform feature engineering to identify the suitable attributes that are having significant effects on the target variable i.e readmission. After doing exploratory data analysis (EDA) and feature selection, we can build Classification and Clustering Machine Learning models in order to predict whether the patient is going to be readmitted or not. We are planning on implementing Classification algorithms like Logistic Regression, SVM, Feedforward Neural network, etc. and clustering techniques like Kmeans and Hierarchical Agglomerative Clustering algorithms in order to produce the optimum number of clusters. We will then go ahead with the clustering algorithm that produces clusters with the highest purity and least entropy. Extensive model fine-tuning can be done in order to build a model with the best accuracy and recall. The recall is more important in this case as it is very important to minimize Recall by reducing the False Negatives, as incorrectly classifying a patient as ‘Not Readmitted’ when he/she is going to be readmitted can be very problematic and is highly undesirable.\nProject Objective\nThe objective of the project is to help the hospitals accurately predict if a patient is going to get readmitted after discharge. The predictions made will help the hospital make informed decisions on the necessary treatment process alterations in order to reduce patient readmission rate. In this context, you can see different objective functions for the problem. We have to try to figure out situations where the patient will not be readmitted, or if they are going to be readmitted in less than 30 days. Make your choice and let's help them create new approaches for the problem. We will try to predict which factors are more important in determining if a patient might get readmitted within 30 days.\nExpected Results\nBy accurately predicting if a patient is going to be readmitted, the hospital will be able to (taking into account the patient demographics, the treatment procedure and medicines) make necessary treatment changes to avoid the patient readmission. This reduction in patient readmission rate will help the hospital save billions of dollars and also improve their customer rating. The process of EDA followed by model building, fine tuning and performance evaluation is an iterative process which can be carried out until the best and desirable results are achieved.\nDataset Source\nPrediction on Hospital Readmission Classification using Diabetes dataset is obtained from the UCI ML Repository. The data set represents 10 years (1999-2008) of clinical care at 130 US hospitals and integrated delivery networks. The data has around 100k+ observations and 50 attributes. The data contains categorical attributes such as race, admission type, insulin, medical specialty of admitting, etc. and binary variables such as gender, change, diabetes Medicine and numeric variables like age, time in hospital, number of lab test performed, number of medication, number of outpatient, inpatient, and emergency visits in the year before the hospitalization. The target variable has 3 different classes which are “No readmission”, “A readmission in less than 30 days” & “A readmission in more than 30 days”.\n\n""], 'url_profile': 'https://github.com/Laxman-Kumar'}"
"{'location': 'Lagos,Nigeria', 'stats_list': [['10', '          followers'], ['34', '          following'], ['27']], 'contributions': '93 contributions\n        in the last year', 'description': [""diabetesDiagnosis\nThis is a project for the front end of a final year project I'm working on.\nThe whole idea of the project is to have inputs from a form interact with a backend algorithm in python\nThis algorithm which has already been trained with real life data theen predicts the possibility of a patient being diabetic or not.\nResults annd suggestions are sent back to the user to help make lifestyle choices that would improve their health with regards to being\ndiabetic.\n""], 'url_profile': 'https://github.com/temideewan'}","{'location': 'India', 'stats_list': [['1', '          follower'], ['3', '          following'], ['16']], 'contributions': '47 contributions\n        in the last year', 'description': [""DiabetesML\nDetection of type of diabetes including Decision Tree algorithm in machine learning\nWe took the dataset of aboout 768 patients which contains different attributes such as blood-ressure,BMI,blood-sugagr-level,etc as the\ndeciding factores for diabetes.Diabetes are classified into 2 types in this dataset i,e Type-1 and Type-2.\nThere are also information about patients who don't have diabetes also present in the diabetes.\nWe replace the Type-1 diabetic patients as 1 ,Type-2 diabetic patients as 2 and the patients who don't have diabetes as 0\nfor simplification purposes in our dataset.\nWe then visalize the data and us our Decision Tree Algorithm for traininng and testing puposes and get our desired results.\nWe can fix the random state of the training model at a point where we get the most desired output.This helps us to acive more accurarte results in the detection and makes our model strong.\n""], 'url_profile': 'https://github.com/avisheknayak'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""Creciendo juntos\nProject\nThis project is made with the intention of manage the participants of a diabetic camp, specially children and younger people, to have a control and management of every kid by dividing then in groups and allow to modify when needed\nStack\nThe stack used to develop the webapp is the following\nFront\n\nAngular 5\nSass\nProgressive web app\n\nBack\n\nFirestore\n\nserver / cdn\nfirebase\nCoding\nThe code is linted with tslinter, so the most recommended action is to add tslint to the ide that is being used for code\nInitialization\nthere must exist a file in the directory src/environments/firestore.ts in the format:\nconst firebase = {\n  apiKey: '<api key>',\n  authDomain: '<auth firebase domain>',\n  databaseURL: '<database firebase url>',\n  projectId: '<id of the project>',\n  storageBucket: '<bucket where we will store the assets>',\n  messagingSenderId: '<message sender id>'\n};\n\nexport default firebase;\n""], 'url_profile': 'https://github.com/HungryMinds'}","{'location': 'NONE', 'stats_list': [], 'contributions': '191 contributions\n        in the last year', 'description': ['DiabetesApp\nOfficial fontys groep 3 app\nGun example docs:\nhttps://gun.eco/docs/Todo-Dapp\nGun SEA docs:\nhttps://gun.eco/docs/SEA\nGun SEA Server?:\nhttps://github.com/shaqarava/superPeer\nASP tutorial:\nhttps://www.youtube.com/watch?v=4IgC2Q5-yDE&list=PL6n9fhu94yhVkdrusLaQsfERmL_Jh4XmU\nJS Unit testing:\nhttps://designmodo.com/test-javascript-unit/\nJS Unit testing video:\nhttps://www.youtube.com/watch?v=r9HdJ8P6GQI\njQuery Tutorial:\nhttps://www.youtube.com/watch?v=hMxGhHNOkCU\n'], 'url_profile': 'https://github.com/RipOrbofWinter'}","{'location': 'Jabalpur,India', 'stats_list': [['1', '          follower'], ['10', '          following'], ['29']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes-Detection-using-Neural-Network\nDiabetes Mellitus (DM), commonly known as diabetes, is a group of metabolic disorders characterized by high blood sugar levels over a prolonged period. Artificial Intelligence in Medical Science refers to real-world medical domains, considered and discussed at the proper depth, from both the technical and the medical points of view.\nData Science and Machine Learning is helping medical professionals make diagnosis easier by bridging the gap between huge data sets and human knowledge. We can begin to apply Machine L earning techniques for classification in a dataset that describes a population that is under a high risk of the onset of diabetes.\nGiven the medical data we can gather about people, we should be able to make better predictions on how likely a person is to suffer the onset of diabetes, and therefore act appropriately to help. We can start analyzing data and experimenting with algorithms that will help us study the onset of diabetes.\n'], 'url_profile': 'https://github.com/akanshu11121'}","{'location': 'Milwaukee, WI', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '62 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/NJJeske'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes-onset-prediction-and-detection\n'], 'url_profile': 'https://github.com/KritiArora'}","{'location': 'Nairobi Kenya', 'stats_list': [['91', '          followers'], ['77', '          following'], ['90']], 'contributions': '1,358 contributions\n        in the last year', 'description': ['DiabetesChatbot\nA chatbot model notebook to answer all your diabetes queries using Tensorflow library.\nHow to use\nDownload all the required libraries and run the code in an Ipyhton File e.g Jupyter Notebook\n'], 'url_profile': 'https://github.com/WanjiruCate'}","{'location': 'USA', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '25 contributions\n        in the last year', 'description': ['Nutrition-Expert-System-Gestational-Diabetes\n'], 'url_profile': 'https://github.com/sharminpathan'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['cs428project\ndiabetes tracker\n'], 'url_profile': 'https://github.com/weishi3'}"
"{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['12']], 'contributions': '379 contributions\n        in the last year', 'description': ['Diabetes-Predictor-Application\nDiabetes is a disease that occurs when your blood glucose, also called blood sugar, is too high. Victims of this disease are increasing day by day.\nIn this respository, a diabetes prediction application is created having machine learning frontend and web based backend. Here different classification models are used to predict if a patient is diabetic or not by taking essential patient details as input such as number of pregnancies, Plasma glucose concentration, Diastolic blood pressure, Triceps skin fold thickness, 2-Hour serum insulin, Body mass index, Diabetes pedigree function, and Age to predict if the patient is diabetic or normal.\nThe dataset is obtained from kaggle: https://www.kaggle.com/uciml/pima-indians-diabetes-database\nBelow are the various classification models applied to the dataset are compared using accuracy_score r2_score:\n\n\n\nRegression Models\nAccuracy\nR2 Score\n\n\n\n\nK Nearest Neighbor\n75.32\n-0.1636\n\n\nNaive Bayes\n79.22\n0.0200\n\n\nRandom Forest Classification\n75.32\n-0.1636\n\n\nLinear Support Vector Classification\n70.12\n-0.3780\n\n\nSupport Vector Classification\n81.81\n0.1425\n\n\n\naccuracy_score is the percentage of the success of a model to predcit the independent attribute and r2_score is a statistical measure that represents the goodness of fit of a regression model. The ideal value for r2_score is 1, its range is from -1 to 1. Some other methods to determine the success of a classification model are mean_squared_error, mean_absolute_error, confusion_matrix, calssification_report.\nOut of all the  Classification models above Support Vector Classification has the highest accuracy of 81.81%, this model is deployed using flask inorder to provide a web based interactive interface for users.\n'], 'url_profile': 'https://github.com/RiturajSaha'}","{'location': 'India', 'stats_list': [['8', '          followers'], ['51', '          following'], ['31']], 'contributions': '109 contributions\n        in the last year', 'description': ['bays-classifer-diabetes-via-age\nIts a bays classsifer which predict your diabetes based on your age\n'], 'url_profile': 'https://github.com/kartikpaliwal'}","{'location': 'Blumenau', 'stats_list': [['67', '          followers'], ['18', '          following'], ['41']], 'contributions': '295 contributions\n        in the last year', 'description': ['Estratificando riscos usando registros eletrônicos de pacientes diabéticos\nTipicamente, dez por cento dos pacientes geram cerca de 70% das despesas de saúde (dado dos EUA). Ao identificar quais as pessoas são de alto risco ou a probabilidade de se tornarem de alto risco, as equipes de saúde podem intervir para melhorar seus resultados e reduzir os respectivos custos de saúde.\nUm dos problemas mais comuns e que refletem as inadequações no sistema de saúde são as readmissões hospitalares. Nos Estados Unidos sozinho, o tratamento de pacientes diabéticos readmitidos excede 300 milhões de dólares por ano (https://www.diabetes.org/). A readmissão hospitalar é uma das principais preocupações no tratamento do diabetes, com milhões de dólares sendo gastos no tratamento de pacientes diabéticos que precisam ser readmitidos em um hospital após receberem alta.\nIdentificação precoce de pacientes que enfrentam um alto risco de readmissão pode permitir que os profissionais de saúde conduzam investigações adicionais e possivelmente impeçam futuras readmissões.\nSendo assim, proposta aqui é utilizar os registros eletrônicos de dados médicos dos pacientes, tais como: resultados dos exames, nível de insulina, diagnósticos de outras doenças, etc... a fim de prever se um paciente pode ou não ser readmitido. Aliás, iremos além: vamos identificar os pacientes diabéticos de alto risco por meio de estratificação de risco de registros médicos eletrônicos.\nJá estamos vivendo uma “nova medicina” que está sendo “guiada” pelo processamento de um grande volume de informações através de algoritmos poderosos de “machine learning”, uma das áreas da “inteligência artificial”!\nPara isso, vamos treinar e comparar o desempenho de alguns algoritmos de aprendizado de máquina e decidir qual deles usar para prever o risco de readmissão para o paciente.\nUsarei o melhor modelo treinado para estratificar a população em três grupos de risco:\n\nAlto Risco (probabilidade de readmissão > 0,7)\nRisco Médio (0,3 < Probabilidade de readmissão < 0,7)\nBaixo Risco (probabilidade de readmissão < 0,3)\n\nO conjunto de dados, ""Diabetes 130-US hospitals for years 1999-2008"", foi baixado do UCI Machine Learning Repository: Diabetes 130-US hospitals for years 1999-2008 Data Set\nOs dados representam 10 anos (1999-2008) de atendimento clínico em 130 hospitais dos EUA e redes de distribuição integradas com 100.000 observações e 50 recursos (variáveis) que representam os registros eletrônicos com resultados de exames dos pacientes e dados sobre cada hospital. Descrição completa do trabalho:\nImpact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records\nCréditos: Data Science Academy - https://www.datascienceacademy.com.br/\n'], 'url_profile': 'https://github.com/RodrigoLima82'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['5']], 'contributions': '19 contributions\n        in the last year', 'description': [""Diabetes-Forecaster: Foresee Diabetes Risk and Prevention\nDiabetes is one of the most common diseases in the world. There are over 100 million people have (pre) diabetes in the United States. 90% of people don't realize they have prediabetes symptoms. Diabetes-Forecaster aims to help people predict the risk of Type II Diabetes based on demographic and diet behavior. Here is the web app to check out your diabetes risk.\n\n""], 'url_profile': 'https://github.com/honeybird1991'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['5']], 'contributions': '2 contributions\n        in the last year', 'description': [""Diabetes Data Analytics\nIt's a personal data analysis learning project\nData source: Pima Indians Diabetes Database\nResults\n\n\n\nModel\nNormal\nFeacture selection\n\n\n\n\nRandomForest\n0.740\n0.773\n\n\nRandomForest (k-fold)\n0.759\n0.774\n\n\n\n""], 'url_profile': 'https://github.com/andyngo95'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""Purpose\nWe type 1 diabetics struggle daily with the decisions we must make to manage our blood glucose (BG).\nWhat to eat or drink, when and how much insulin to take to compensate for the food we ingest, how much residual effect is there from previous insulin doses or food eaten, when should we test our BG?\nThese are some of the decisions we face and what we decide can effect our health for years to come.\nWouldn't it be nice if there was an app for our mobile phone that made this process easier and allowed us to look back at previous days to see how our past decisions worked out so that we could use those results to help us make better decisions in the future?\nThis BG Compass app provides an evolving tool for use by type 1 (and, perhaps, type 2) diabetics to visualize the effects of the choices made daily in managing their disease.The goal is to make the plots of estimated BG, trends, and estimated HA1c as accurate as is possible using the information that is typically used for this and is readily available.\nThe two major contributors to the curves of estimated blood glucose (BG) are, of course, food and insulin.\nThis app provides a simple means of accessing food nutritional content (carbohydrate) data by extracting that data from internet databases or from historical data previously input by the user.\nThe user is able to select the type of fast acting insulin used to compensate for food or drink consumed and the app plots a typical estimated BG dose response for the dose selected using the patients own insulin sensitivity, adjusted for the timing of that dose.\nLikewise, the app computes a typical dose response curve from the food that is selected or input by the user, including the timing of that food, and combines that food dose response with the insulin dose response.\nThus, the app computes a composite curve that includes all those variables and their timing.\nThis response is first displayed as a tentative curve allowing the user to make adjustments in the timing or dosing of any variable and visualizing how those changes might effect the overall curve.\nThis, therefore allows a user to modify and adjust management and planning as seen fit to optimize results.\nMeasured BG data is also input to the app to make further adjustments as time goes by since estimates are seldom exactly correct.\nThis app allows the user to choose adjustment doses more carefully and efficiently rather than just guessing.\nThe app also includes code for estimating hemoglobin A1c (HA1c) to further help users tune their diet and insulin dosing by visualizing trend curves of estimated HA1c on a daily basis.  This can be useful in longer term management.\nAll recorded data entries can be recalled and used for later adjustments or to use for recuring items.\nFor example, if a person tends to eat the same thing for breakfast often, the nutritional content of that item can be gradually adjusted and saved in memory (as a favoritge) for future use.\nThis makes such future estimates more accurate as they are tuned to the individual.\nOf course, any such estimates can be somewhat different from previous ones due to the many other variables that enter into BG levels.\nTrend data and plots are available to review progress in tuning our management of BG levels.\nThese plots extend back in time as far as the recorded data exists and can be helpful in improving management.\nInfo for Developers\nObjective C and Swift\nInitially the app was written in Objective C. Some newer code uses Swift.\nThe app may use a bridging header such as BGCompass-Bridging-Header.h to expose Objective C to Swift.\nSwift extensions to Objective C classes may not need or allow annotation @objc.\nFor example the app may use an extension such as TrendsAlgorithmModelExtension.swift.\nhttp://ctarda.com/2016/05/swift-extensions-can-be-applied-to-objective-c-types/\nCore Data / Magical Record\nThe app uses Core Data and Magical Record. Most of this is done in Objective C.\nThe current developers have not figured out how to share the database context between Objective C and Swift.\nObjective C writes to Core Data. It may provide helper methods to supply managed objects to Swift.\nReferences\nhttps://en.wikipedia.org/wiki/Glycated_hemoglobin\n""], 'url_profile': 'https://github.com/DiabetesCompass'}","{'location': 'Île-de-France', 'stats_list': [['18', '          followers'], ['60', '          following'], ['236']], 'contributions': '622 contributions\n        in the last year', 'description': ['Diabetes-Analysis\nMain side project of Gustavo Magaña López\nContact me at gmaganna.biomed@gmail.com.\nDisclaimer :\nThis is a personal project. It has two and only two scopes:\n\nHelp me understand better my diabetes, i.e. quench a personal and academic  curiosity.\nExplore different ways of adjusting my therapy, finding patterns through diverse techniques and algorithms.\n\nIf you decide to test it on yourself it is YOUR RESPONSIBILITY. Nothing within this repo is enodorsed by Medtronic or MySugr App. I am merely a patient using his own data and applying algorithms to it.\nBibliography\nThis project departed from my own knowledge of diabetes physiopathology. However, to make of this a valuable state-of-the-art tool I have decided to add also some docs. Publicly available scientific papers. These will be found in Docs/. If you want to consult them, these are the original sources:\n\nreview_of_formulas.pdf\nglycaemic-variability.pdf\n\nIf you have found anything that you consider pertinent/valuable for this project and have the proper copyright/ownership rights to share it, please do so! I\'d be ravished to include it in the project (email it to me, or add it to your fork of this repo and send me a pull request).\nRequirements and dependencies :\nTested Hardware\nThis software has been tested on\n\n\nA 13-inch, Mid 2012 MacBookPro which is considered vintage (a.k.a. pre-obsolete). I\'ve tampered with it, so it has 8 GiB RAM and a Samsung 1TB SSD. Latest (and last) test using macOS Mojave 10.14.6.\n\n\nA System 76 Oryx Pro.\n\n\nVirtual environments using poetry\nGiven the lack of reproducibility that Anaconda\'s virtualenvs have displayed in my personal experience, I\'ve decided to fully migrate to poetry. These virtual environments have proven to be reliable, resisting constant migration between machines and operating systems.\n[DEPRECATED] Create a virtual environment using  conda\nAll of the code has been developed using conda. Using the provided files within the repo ""env.yml"" and ""requirements.txt"" will facilitate running the scripts and notebooks here present. For futher information consult:\n\nAnaconda distribution.\nconda environment\n\nTo create the virtual environment, make sure you have installed the latest version of Anaconda.\nRun the following command replacing ENV_NAME with the name you would like to give to the virtual environment:\n conda env create --name ENV_NAME --file env.yml\n\nYou will be prompted for confirmation, accept typing \'y\' on the interactive session.\nTo activate the newly created environment, type the following command on your terminal:\n conda activate ENV_NAME\n\nSome dependencies (those which could not be installed through conda) were installed using pip. This is not the standard installation found on your machine (if you already had Python installed). Verify that you are using the correct pip by activating the virtual environment that you have designated for this repo (can be done via which pip).\nBefore installing dependencies via pip, make sure you have activated the virtual environment running conda activate ENV_NAME . Afterwards type:\npip install -r requirements.txt \n\nNow you\'re ready to run the scripts and notebooks found on this repo.\n'], 'url_profile': 'https://github.com/gmagannaDevelop'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['[DEPRECATED] refer to https://github.com/tidepool-org/mobile-android\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'India', 'stats_list': [['6', '          followers'], ['1', '          following'], ['0']], 'contributions': '99 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Chaitanyakaul97'}","{'location': 'London', 'stats_list': [['136', '          followers'], ['54', '          following'], ['38']], 'contributions': '9,133 contributions\n        in the last year', 'description': [""\n\n\n\n\n\nDiabetes dashboard\nA Dashing dashboard, driven by my Pancreas API. Right now it shows:\n\nDaily, weekly and 30-day blood-glucose graphs and averages\nWeekly breakfast, lunch, dinner and bedtime medication graphs and averages\nLatest HbA1c\n\nThere'll be a lot more sophisticated stuff here once I've worked out Coffeescript and Rickshaw\nDeployment\nThis is a straight-up Rack app, it should deploy right onto Heroku. The Heroku environment will need to know about\n\nMETRICS_API_USERNAME and\nMETRICS_API_PASSWORD\n\nto access the Pancreas API (you'll have set these here), and\n\nDASHBOARD_USERNAME and\nDASHBOARD_PASSWORD\n\nwhich will allow you into the dashboard\nDashing is awesome\nSee http://shopify.github.com/dashing for more on Dashing\n""], 'url_profile': 'https://github.com/pikesley'}"
"{'location': 'Shanghai', 'stats_list': [['29', '          followers'], ['42', '          following'], ['101']], 'contributions': '67 contributions\n        in the last year', 'description': ['Diabetes-prediction\n天池上糖尿病预测比赛。题目给出一些血常规的样本和对应的血糖结果。然后再给一批血常规样本，叫我们预测结果。虽然有点玄学，但是题目至此，也就将就着做了。采用catboost和xgboost都尝试了一下，大致结果还行。\n'], 'url_profile': 'https://github.com/zhusleep'}","{'location': 'India', 'stats_list': [['5', '          followers'], ['8', '          following'], ['68']], 'contributions': '5,965 contributions\n        in the last year', 'description': ['Diabetes_Prediction\nn this project we used different types of machine learning algorithm, and predicted that a person will be having diabetes in the future or not. And how much is it accurate given the responses that the person has diabetes.\nUsing the Decision Tree, the accuracy obtained is 87.1794% and Average precision-recall score obtained is 0.66\n'], 'url_profile': 'https://github.com/malhotrabhavyajot'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['17', '          following'], ['6']], 'contributions': '50 contributions\n        in the last year', 'description': ['CSE299 Project\nType-2 Diabetes Detector\n'], 'url_profile': 'https://github.com/ZubairAzimMiazi'}","{'location': 'Kochi', 'stats_list': [['16', '          followers'], ['34', '          following'], ['97']], 'contributions': '79 contributions\n        in the last year', 'description': ['Gluco\nOpen Source Diabetes Management\nGluco is a Open -Source Diabetes Management System.\nFeatures:\n\n\nCloud-Based\n\n\nMaterial Design\n\n\nTrack Blood glucose level,Blood Pressure,Body Weight\n\n\nGet a Detailed graph overview of your diabetes.\n\n\nTrack your Activity\n\n\nGet Diet Tips\n\n\nLicense\nCopyright 2018 Patrick Prakash\nLicensed under the Apache License, Version 2.0 (the ""License"");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an ""AS IS"" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'], 'url_profile': 'https://github.com/PatrickPrakash'}","{'location': 'Pune', 'stats_list': [['1', '          follower'], ['3', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['Pima-Indian-Diabetes-Prediction\nContext\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements\nincluded in the dataset. Several constraints were placed on the selection of these instances from a larger database.\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nContent\nThe datasets consists of several medical predictor variables and one target variable, Outcome.\nPredictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\nSource : https://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/akashtalla'}","{'location': 'VIT Vellore', 'stats_list': [['10', '          followers'], ['5', '          following'], ['192']], 'contributions': '101 contributions\n        in the last year', 'description': ['FeCare\nWith an intention of Fekar (care in Hindi) towards the health of Indian women.\nWeb App link\nTo view demo scroll to the end\nResearchers have identified a bunch of districts in India that have a maximum prevalence of diabetes among women. At least 50 of the 640 districts studied have a high prevalence of diabetes — greater than one in every 10 among women.\nAnd hence, FeCare classifier model aims to detect diabetes in Indian women. The clasifier was trained using Pima Indians Diabetes Dataset\nDataset info:\nThe dataset consists of several medical predictor variables and one target variable, Outcome. Predictor variables include:\n\nNumber of times pregnant\nPlasma glucose concentration, 2 hours in an oral glucose tolerance test (not included in training)\nDiastolic blood pressure (mm Hg)\nTriceps skinfold thickness (mm)\n2-Hour serum insulin (mu U/ml) (not included in training)\nBody mass index\nDiabetes pedigree function\nAge (years)\n\nAs you can notice that two variables were not included in the training process, this was due to the reason that the Glucose Tolerance Test (GTG) can give very inaccurate results when conducted at home using a blood sugar measuring device. And same is the case for finding the reading of 2-Hour serum Insulin.\nAs this project aims to provide regular Diabetes check-up for all women(above the age of 20 years) irrespective of their work engagement(house-wives and working women), it is not possible in all cases that user will have the required tools, skills, and experience to execute the required test at home. And hence the above features were eliminated from the training process.\nRequirements:\n\nThe user should know her general information(Age, Height, Weight, and Pregnancies)\nTo know the reading of Diastolic Blood Pressure, the user should have a Blood Pressure monitor like this which costs less than 100$\n\n\n\nTo know the Tricep Skinfold Thickness value, the user should have a Skinfold Caliper and take the reading in the following manner:\n\n\nThe cost of Skinfold Caliper is less than 4$\n\n\nIf the user do not know her Diabetes Pedigree Function, then it can be calculated on the web application using the following:\n\n\n\nReference\nThe user can input relative’s details(as much she knows) in the web-application, and Diabetes Pedigree Function will be calculated.\nNote that the value of the DPF increases as the number of relatives who developed DM increases, as the age at which those relatives developed DM decreases, and as the percentage of genes that they share with the subject increases. Also notice that the value of the DPF decreases as the number of relatives who never developed DM increases, as their ages at their last examinain increase, and as the percent of genes that they share with the subject increases.\nSteps for pre-processing data and training classifier:\n\nThe data has a very less number of 1s in Output(cases with positive diabetes), and hence this can affect the classifier’s accuracy to differentiate with 1s and 0s.\n\nDue to this reason, almost equal amount of data for 1s and 0s were taken in the training set(for which the data was divided into two parts on the same basis and then segregated for training data)\n\n\nNow the two data frames(with 1s and 0s) were concatenated so that they can be accessed easily\n\n\nFixing missing values(zeros in all other variables except ‘Pregnancies’):\n\n\nMissing values in  ‘Glucose’ =5 \nMissing values in  ‘BloodPressure’ =35 \nMissing values in  ‘SkinThickness’ =227 \nMissing values in  ‘Insulin’ =374 \nMissing values in  ‘BMI’ =11 \nMissing values in  ‘DiabetesPedigreeFunction’ =0 \nMissing values in  ‘Age’ =0\nThese values were fixed using the following algorithm:\nLet’s say a data frame has 3 variables as shown below:\n\nThe missing value is 1st value in Var1, now the 1st values of Var2 and Var3 are noted, which are 500 and 0.35 respectively. Now we try to find similar values (500, 0.35) in Var2 and Var3. Which in this case are 3rd value in Var2 and 0th value in Var3. The missing value is then replaced by the average of Var1 values at these positions(3rd and 0th). In this case: (89+81)/2 = 85= Var1(1)\nCode:\n\nThe above algorithm is used to fix missing values in the following way:\n\n\nGlucose values from similar Age and Outcome values (fix_miss_value(data, ""Glucose"", [""Age"", ""Outcome""])\n\n\nBloodPressure values from similar Age and Glucose values\n\n\nBMI values from similar Age, BloodPressure and Glucose values\n\n\nSkinThickness values from similar Age, Outcome, Glucose, BMI values\nThe rest variables used in training(Age and DiabetesPedigreeFunction) had no missing values.\n\n\nScaling us the DiabetesPedigreeFunction values:\nThese values were less than ‘1’ while the other values were greater than 1. And hence these values were multiplied by ‘100’.\n\n\nSplitting data into Training and Testing set:\n\nFor Training data, 300 entries with ‘0’ Outcome and 250 values with ‘1’ Outcome were taken. This collectively was 71% of the total data. Now the training data was ready.\nThe remaining 29% of data was further split into the 13% testing and 13% validation dataset.\n\n\n\nNeural Network Definition(model_architecture.py):\nNetwork(\n(fc1): Linear(in_features=6, out_features=40, bias=True)\n(fc2): Linear(in_features=40, out_features=81, bias=True)\n(fc3): Linear(in_features=81, out_features=36, bias=True)\n(fc4): Linear(in_features=36, out_features=19, bias=True)\n(out): Linear(in_features=19, out_features=2, bias=True)\n)\nThe training data was passed to the above Network and was trained for 1250 epochs. The best Trained Network which had the least validation loss was saved and was further used to made predictions on test data. The training accuracy given by the best model was 96.36% and the test accuracy was 85% (FeCare.ipynb)\nThe pickle file(\'FeCare.pkl\') of this best-trained model was saved and was further used to make predictions in the web-application.\n\n\nWeb-Application(app.py):\n\nGeneral Instructions to user for providing required inputs.\nA “Know” button for user to know how she can measure the Tricep Skinfold Thickness\nTaking the required inputs(except Diabetes Pedigree Function)\nInformation about what Diabetes Pedigree Function and how we can calculate that.\nTaking input of Diaetes Pedigree Function if user already knows, else taking inputs of the relatives information for calculating diabetes pedigree function\nA “Submit Info” button when the user is done inputting all the required information for calculating Diabetes Pedigree Function.\nAnd finally the “Results” button which will display weather the user has diabetes or not. If the user is found diabetic, the user is adviced to do Glucose - Tolerence Test(as next prefrence) at the nearest laboratory to confirm results.\n\n\nDemo(when Diabetes Pedigree Function is unknown)\n\n\n\nDemo(when Diabetes Pedigree Function is known)\n\n'], 'url_profile': 'https://github.com/Rushanksavant'}","{'location': 'Washington, DC', 'stats_list': [['39', '          followers'], ['21', '          following'], ['14']], 'contributions': '12 contributions\n        in the last year', 'description': ['meta-insulaudit\nOE meta layer for hacking diabetes. Related to bewest/insulaudit\nThis layer depends on\nopenembedded-core/meta\nmeta-openembedded/meta-oe\nmeta-openembedded/meta-networking\n'], 'url_profile': 'https://github.com/n-west'}","{'location': 'Vancouver', 'stats_list': [['13', '          followers'], ['11', '          following'], ['57']], 'contributions': '0 contributions\n        in the last year', 'description': ['Medical-Machine-Learning\n\nPredicting hospital readmission for patients with diabetes mellitus\n\nData taken from http://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\nRunning\nFor preprocess.R to work, download the data set from the above link, and place diabetic_data.csv in dataset_diabetes/ folder. The R script has no dependencies. Source the script from the folder where this README is located.\nOnce the data is generated by preprocess.R, run train_randomforest.py to train the model and print importance results. It depends on pandas, numpy, and scikit-learn.\n'], 'url_profile': 'https://github.com/prollynomial'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['13', '          following'], ['8']], 'contributions': '30 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/saheelb'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['5']], 'contributions': '60 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/unhurried'}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['5', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['ELSA\nTrajectories of obesity by spousal diabetes status analisys\nSomething\nThis project aims to record ELSA analysis steps, particluarly model selection.\n'], 'url_profile': 'https://github.com/omarsilverman'}","{'location': 'Melbourne, Australia', 'stats_list': [['94', '          followers'], ['8', '          following'], ['2']], 'contributions': '1,033 contributions\n        in the last year', 'description': ['Bifrost\nA bridge between 2 (diabetes) worlds\n'], 'url_profile': 'https://github.com/pazaan'}","{'location': 'NONE', 'stats_list': [['8', '          followers'], ['36', '          following'], ['18']], 'contributions': '77 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ZetaGH'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': [""Classifying Diabetes with NHANES\nClassifying whether someone is diabetic or nondiabetic with the 2015-2016 NHANES database.\nWhy diabetes?\n\nIt costs a lot:\n\n$327 billion: Total costs of diagnosed diabetes in the United States in 2017\n$237 billion for direct medical costs\n$90 billion in reduced productivity\n\n\n7th leading cause of death\n30.3 million Americans, or 9.4% of the population\n1.5 million Americans are diagnosed with diabetes every year\nIn 2015, 84.1 million Americans age 18 and older had prediabetes\nhttp://www.diabetes.org/diabetes-basics/statistics/\n\n\nAbout NHANES\n\nConducted by the Centers for Disease Control and Prevention every 2 years\n15,327 persons were selected for NHANES from 30 different survey locations\n9,971 people  completed the interview\n9,544 people were examined\nRepresents all age groups\nOver samples minority groupsto produce reliable statistics\n\nThe NHANES dataset has 5 main components:\n\nDemographics\nDietary\nExamination\nQuestionnaire\nLaboratory\n\nDemographics\n\nAge\nGender\nEducation\nIncome\nRace\nCitizenship\nLanguage\nFamily Size\n\nDietary\n\n2 Days\nMacronutrients\nMicronutrients\nWater\nCaffeine\nAlcohol\n\nExamination\n\nBody Measurements\n\nWeight\nHeight\nBMI\nWaist Circumference\n\n\nBlood Pressure\n\nResting Heart Rate\nSystolic\nDiastolic\n\n\n\nQuestionnaire\n\nLifestyles and Habits\nPhysical Activity\nWeight History\nTobacco Use\nHealth Insurance\nOccupations\nSleep Quality\nConsumer Habits\nTransportation\nWhere do you buy your food?\n\nLaboratory\n\nBloodwork Data\nWhy I’m not using this:\n\nThese are the numbers used to determine diabetes\nI would like to be able to predict without it\nIt would feel like cheating to use these\n\n\n\n\nThe Process\n\nThis project can be broken down into the following steps:\n\nObtained the data from the CDC\nExploratory Data Analysis\nCleaned with Pandas\nTrain - Test - Split\nSMOTE of downsample the training set\nPipeline and GridSearchCV to find the best models\nLook into the evaluation metrics\n\n\n\nLibraries Used\n\nPandas\nNumpy\nMatPlotLib\nSeaborn\nSciKit Learn\nSMOTE\nPipeline\nGridSearchCV\n\n\nCurrent Best Model\n\nNo Scaling\nSMOTE\nRandom Forest Classifier\n69.6% Accuracy\n\nNext Steps\n\nFeature Selection and Feature Engineering\nNeed to remove noise and overfitting\nChange my target to heart disease\nChanges I know I want to make:\n\nRemove everyone older than 79\nRemove micronutrients\nRemove head of household columns\nReengineer tv and computer use columns (< 4 hours goes to 0, > 4 hours goes to 1)\n\n\nEvery model has a hard time predicting prediabetes (it's a big gray area), so I'm considering changing them all to diabetic\n\nIt will never be perfect, somethings are just out of your control\n\nThe human body is very complex and everybody is different\nMeasure Bias will always be an issure\nHealthy User Bias\nRecall Bias\n\n""], 'url_profile': 'https://github.com/AdamLiscia'}","{'location': 'Swansea, Wales, United Kingdom', 'stats_list': [['14', '          followers'], ['2', '          following'], ['35']], 'contributions': '1,471 contributions\n        in the last year', 'description': ['webusb-uploader\nUpload diabetes data using just the power of the web\n'], 'url_profile': 'https://github.com/gniezen'}","{'location': 'Amrita Vishwa Vidyapeetham Amritapuri ,Kollam, India', 'stats_list': [['15', '          followers'], ['27', '          following'], ['31']], 'contributions': '191 contributions\n        in the last year', 'description': ['Diabetes-detection-using-Python\n'], 'url_profile': 'https://github.com/devtechnocode'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['![alt text][logo]\n[logo]: https://github.com/WheatonCS/GluGo/blob/master/GluGo.png\nGluGo\nAn integrated system of personalized diabetes management software, tools, and reports for patients wearing continuous glucose monitoring devices.\n#Introduction\nGluGo is a startup comprised of students at Wheaton College in Norton, Massachusetts. We prototype software applications that enable people living with diabetes to better control their glucose levels. We seek to improve how current apps interpret and display glucose data (e.g. interactive graphs), and improve alerts using algorithms that predict highs and lows before they occur. We also want to enable user include other data (e.g. carb intake) to serve the above ends.\n#Current Achievements and Future Goals\nWe currently have a fully integrated database, a web and phone app that both have interactive graphing functionality, a promising glucose prediction algorithm, and a website. Our phone app also enables users to annotate their data.\nOur most promising prediction algorithm requires testing on more datasets. In order to integrate the prediction algorithm we still need to determine a way to transmit sensor data to the database in real time. We also need implement the high/low alert system in our phone app. Finally, we aim to expand the visualization and statistical features of both apps.\n#Contents of This Repository\n\n1_backEnd_Database - Programs for the construction and integration of the database\n2_frontEnd_Mobile - iPhone app programs\n3_frontEnd_Reports - Programs for the visualization and interpretation of glucose data\n4_backEnd_machineLearning - Glucose prediction algorithms\n5_frontEnd_Website - website programs\n\n'], 'url_profile': 'https://github.com/WheatonCS'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Firebright'}","{'location': 'The Netherlands', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['\nWelcome to Rails¶ ↑\nRails is a web-application framework that includes everything needed to create database-backed web applications according to the Model-View-Control pattern.\nThis pattern splits the view (also called the presentation) into “dumb” templates that are primarily responsible for inserting pre-built data in between HTML tags. The model contains the “smart” domain objects (such as Account, Product, Person, Post) that holds all the business logic and knows how to persist themselves to a database. The controller handles the incoming requests (such as Save New Account, Update Product, Show Post) by manipulating the model and directing data to the view.\nIn Rails, the model is handled by what\'s called an object-relational mapping layer entitled Active Record. This layer allows you to present the data from database rows as objects and embellish these data objects with business logic methods. You can read more about Active Record in files/vendor/rails/activerecord/README.html.\nThe controller and view are handled by the Action Pack, which handles both layers by its two parts: Action View and Action Controller. These two layers are bundled in a single package due to their heavy interdependence. This is unlike the relationship between the Active Record and Action Pack that is much more separate. Each of these packages can be used independently outside of Rails. You can read more about Action Pack in files/vendor/rails/actionpack/README.html.\nGetting Started¶ ↑\n\nAt the command prompt, create a new Rails application:\n<tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)\n\nChange directory to myapp and start the web server:\n<tt>cd myapp; rails server</tt> (run with --help for options)\n\nGo to localhost:3000/ and you\'ll see:\n""Welcome aboard: You\'re riding Ruby on Rails!""\n\n\nFollow the guidelines to start developing your application. You can find\n\nthe following resources handy:\n\nThe Getting Started Guide: guides.rubyonrails.org/getting_started.html\n\nRuby on Rails Tutorial Book: www.railstutorial.org/\n\nDebugging Rails¶ ↑\nSometimes your application goes wrong. Fortunately there are a lot of tools that will help you debug it and get it back on the rails.\nFirst area to check is the application log files. Have “tail -f” commands running on the server.log and development.log. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from 127.0.0.1.\nYou can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers. Example:\nclass WeblogController < ActionController::Base\n  def destroy\n    @weblog = Weblog.find(params[:id])\n    @weblog.destroy\n    logger.info(""#{Time.now} Destroyed Weblog ID ##{@weblog.id}!"")\n  end\nend\n\nThe result will be a message in your log file along the lines of:\nMon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!\nMore information on how to use the logger is at www.ruby-doc.org/core/\nAlso, Ruby documentation can be found at www.ruby-lang.org/. There are several books available online as well:\n\nProgramming Ruby: www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)\n\nLearn to Program: pine.fm/LearnToProgram/ (a beginners guide)\n\nThese two books will bring you up to speed on the Ruby language and also on programming in general.\nDebugger¶ ↑\nDebugger support is available through the debugger command when you start your Mongrel or WEBrick server with –debugger. This means that you can break out of execution at any point in the code, investigate and change the model, and then, resume execution! You need to install ruby-debug to run the server in debugging mode. With gems, use sudo gem install ruby-debug. Example:\nclass WeblogController < ActionController::Base\n  def index\n    @posts = Post.all\n    debugger\n  end\nend\n\nSo the controller will accept the action, run the first line, then present you with a IRB prompt in the server window. Here you can do things like:\n>> @posts.inspect\n=> ""[#<Post:0x14a6be8\n        @attributes={""title""=>nil, ""body""=>nil, ""id""=>""1""}>,\n     #<Post:0x14a6620\n        @attributes={""title""=>""Rails"", ""body""=>""Only ten.."", ""id""=>""2""}>]""\n>> @posts.first.title = ""hello from a debugger""\n=> ""hello from a debugger""\n…and even better, you can examine how your runtime objects actually work:\n>> f = @posts.first\n=> #<Post:0x13630c4 @attributes={""title""=>nil, ""body""=>nil, ""id""=>""1""}>\n>> f.\nDisplay all 152 possibilities? (y or n)\nFinally, when you\'re ready to resume execution, you can enter “cont”.\nConsole¶ ↑\nThe console is a Ruby shell, which allows you to interact with your application\'s domain model. Here you\'ll have all parts of the application configured, just like it is when the application is running. You can inspect domain models, change values, and save to the database. Starting the script without arguments will launch it in the development environment.\nTo start the console, run rails console from the application directory.\nOptions:\n\nPassing the -s, --sandbox argument will rollback any modifications made to the database.\n\nPassing an environment name as an argument will load the corresponding environment. Example: rails console production.\n\nTo reload your controllers and models after launching the console run reload!\nMore information about irb can be found at: http://www.rubycentral.org/pickaxe/irb.html\ndbconsole¶ ↑\nYou can go to the command line of your database directly through rails dbconsole. You would be connected to the database with the credentials defined in database.yml. Starting the script without arguments will connect you to the development database. Passing an argument will connect you to a different database, like rails dbconsole production. Currently works for MySQL, PostgreSQL and SQLite 3.\nDescription of Contents¶ ↑\nThe default directory structure of a generated Ruby on Rails application:\n|-- app\n|   |-- assets\n|       |-- images\n|       |-- javascripts\n|       `-- stylesheets\n|   |-- controllers\n|   |-- helpers\n|   |-- mailers\n|   |-- models\n|   `-- views\n|       `-- layouts\n|-- config\n|   |-- environments\n|   |-- initializers\n|   `-- locales\n|-- db\n|-- doc\n|-- lib\n|   `-- tasks\n|-- log\n|-- public\n|-- script\n|-- test\n|   |-- fixtures\n|   |-- functional\n|   |-- integration\n|   |-- performance\n|   `-- unit\n|-- tmp\n|   |-- cache\n|   |-- pids\n|   |-- sessions\n|   `-- sockets\n`-- vendor\n    |-- assets\n        `-- stylesheets\n    `-- plugins\napp\nHolds all the code that\'s specific to this particular application.\napp/assets\nContains subdirectories for images, stylesheets, and JavaScript files.\napp/controllers\nHolds controllers that should be named like weblogs_controller.rb for\nautomated URL mapping. All controllers should descend from\nApplicationController which itself descends from ActionController::Base.\napp/models\nHolds models that should be named like post.rb. Models descend from\nActiveRecord::Base by default.\napp/views\nHolds the template files for the view that should be named like\nweblogs/index.html.erb for the WeblogsController#index action. All views use\neRuby syntax by default.\napp/views/layouts\nHolds the template files for layouts to be used with views. This models the\ncommon header/footer method of wrapping views. In your views, define a layout\nusing the <tt>layout :default</tt> and create a file named default.html.erb.\nInside default.html.erb, call <% yield %> to render the view using this\nlayout.\napp/helpers\nHolds view helpers that should be named like weblogs_helper.rb. These are\ngenerated for you automatically when using generators for controllers.\nHelpers can be used to wrap functionality for your views into methods.\nconfig\nConfiguration files for the Rails environment, the routing map, the database,\nand other dependencies.\ndb\nContains the database schema in schema.rb. db/migrate contains all the\nsequence of Migrations for your schema.\ndoc\nThis directory is where your application documentation will be stored when\ngenerated using <tt>rake doc:app</tt>\nlib\nApplication specific libraries. Basically, any kind of custom code that\ndoesn\'t belong under controllers, models, or helpers. This directory is in\nthe load path.\npublic\nThe directory available for the web server. Also contains the dispatchers and the\ndefault HTML files. This should be set as the DOCUMENT_ROOT of your web\nserver.\nscript\nHelper scripts for automation and generation.\ntest\nUnit and functional tests along with fixtures. When using the rails generate\ncommand, template test files will be generated for you and placed in this\ndirectory.\nvendor\nExternal libraries that the application depends on. Also includes the plugins\nsubdirectory. If the app has frozen rails, those gems also go here, under\nvendor/rails/. This directory is in the load path.\n'], 'url_profile': 'https://github.com/HaKr'}","{'location': 'Wroclaw, Poland', 'stats_list': [['2', '          followers'], ['5', '          following'], ['13']], 'contributions': '127 contributions\n        in the last year', 'description': [""node-js-expert-system-diabetes\nExpert System Diabetes Using Node.js\nThis expert system is develeoped using node.js and module used is Rools.\nRools is a rule engine library that can be used for expert system\nModule used = Rools -> https://www.npmjs.com/package/rools\nSee complete documentation here:\nhttps://docs.google.com/document/d/1S0MOIo2WxfIlw1Bqwukt8xEGVtnWrpmK7xbBnCelRPQ/edit?usp=sharing\nHow to start\n\nnpm install\nnpm start\naccess localhost:1996\n\nThis expert system is built for detecting Diabetes based on these 4 aspects\n\nSymtoms -> there are 10 symptoms and 2 medical tests.\nChecking wheter parents have diabetic history\nMedical Test Fasting  , here we cal it 'FPG'\nMedical fasting  Two Hour After Fasting, here we call it GTHAE\n\nExplanation of each aspects\n\nSymptoms\n\nalways feeling thirsty\nUrination, especially during the night\nOften feeling hunger\nWeight loss with no reason\nLoss of muscle mass\nThere is Keton in urine\nWeak --> lemas(indonesian)\nProblem with sight Pandangan kabur.\nscars take long time to heal\noften get infected. For example in gusi, kulit, vagina, atau saluran kemih.\n\n\n\nAccording to the resource, A person can be identified as having diabetic if has >= 2 symptoms\n\n\nDiabetic parent\nAccording to the reasearch, if a person has parent with diabetic it can give more\nprobability of having diabetic.\n\n\nFasting after 8 hours\n\n\n\n\nThis test is kind of medical test that is done after fasting for 8 hours.\n\n\nThis fasting is only FOR NOT EATING food or drink something containing energy or sugar\n\n\nDrink pure water is allowed\n\n\nAccording this medical test here are the criteria\n\nKadar gula darah normal: di bawah 100 mg/dL\nPradiabetes: 100-125 mg/dL\nDiabetes di atas 125 mg/dL\n\n\n\n\ngtwo hour\n\n\na test that is taken 2 hours after the last eating.\nAccording this medical test here are the critera\n\nKadar gula darah normal: di bawah 140 mg/dL\nPradiabetes: 140-199 mg/dL\nDiabetes: lebih dari 200 mg/ dL\n\n\n\nCalculation\n\nFor calculation purposes (to get the precentage)\nEach aspects has maximum score of 25\n\nThis expert system is created based on these resources :\n\nhttps://www.alodokter.com/diabetes\nhttps://hellosehat.com/pusat-kesehatan/diabetes-kencing-manis/serba-serbi-pemeriksaan-diabetes-di-rumah/\nhttps://www.id.wikihow.com/Mengetahui-Apakah-Anda-Menderita-Diabetes\nhttps://www.webmd.com/diabetes/how-sugar-affects-diabetes#1\nhttps://www.webmd.com/diabetes/diagnosing-type-2-diabetes#1\nhttps://www.cdc.gov/media/presskits/aahd/diabetes.pdf\n\n""], 'url_profile': 'https://github.com/ZenHuzaini'}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['6', '          following'], ['12']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabeteshelper\n本项目旨在完成一款血压及脉搏监测和简单变化趋势预测的手机客户端。\n将血压计（也可以是其他设备）测量到的信息，通过蓝牙传输到移动端。\n移动端的应用程序除了显示这些数据外，还可以对用户的信息做个性化的分析。\n我们将根据检测到的数据，简单预测可能的变化趋势。并提供异常血压值和脉搏提示。\n本人主要负责界面，交互设计与编码，力求界面简洁，交互方便。\n'], 'url_profile': 'https://github.com/randyx'}","{'location': 'Krauschwitz', 'stats_list': [['4', '          followers'], ['8', '          following'], ['24']], 'contributions': '52 contributions\n        in the last year', 'description': ['FPE-Rechner\nThis app is designed, to help diabetics, to calculate the fat protein units.\nFat protein units will additionally to the bread units calculated.\nPlease check with a doctor previously!\nIt is not a officially approved medical application.\nExtra Tools:\n\nFood database\nFactor database by time\nConverter for mg/dl and mmol/l\n\n\nCommunities\nFollow on Google+\nDonations\nDonate with PayPal\nLogo\n\n'], 'url_profile': 'https://github.com/Matze1985'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['in-d-gestion\nLibrary for ingestion of data from various vendor-specific sources into the Tidepool.org platform for diabetes data.\nLooking at the code\nPrimary entry-point is lib/index.js.\nParsing and fetching code is broken down by vendor-specific objects on the thing returned from lib/index.js.\nThat is currently just carelink right now.\nEasiest way to see how to use the parser is to look at test/carelink/testParser.js\nLibraries to be aware of\nThe code leverages the Rx library pretty extensively for stream processing.  There is a lot to this library.  You can read about its philosophy at http://reactive-extensions.github.io/RxJS/ or its documentation at https://github.com/Reactive-Extensions/RxJS/tree/master/doc\nWe implement a few extensions to it in the lib/rx directory.  These extensions are added to the rx.Observable.prototype, so the usage can appear the same as if we are using a native rx method.  If you are trying to figure out what a method does and you are unfamiliar with it/you cannot find the docs for it on the main RxJS page, make sure to check the various extensions under lib/rx.\nCommand Line\nCarelink\nFetch\nYou can fetch raw data from carelink with\n./bin/carelink/mmcsv fetch -u <username> -p <password> -d <num_days> stdout\nParse\nYou can parse raw data fetched from carelink with\nnode bin/carelink/parse.js <csv_file_to_parse>\nDiasend\nFetch\nYou can fetch data from diasend with\nnode bin/diasend/fetch.js -u <username> -p <password> -d <num_days> stdout\nParse\nYou can parse data fetched from diasend with\nnode bin/diasend/parse.js <xls_file_to_parse>\nt:connect\nFetch\nYou can fetch data from t:connect with\nnode bin/tconnect/fetch.js -u <username> -p <password> -d <num_days> stdout\nParse\nYou can parse data fetched from t:connect with\nnode bin/tconnect/parse.js <xml_file_to_parse>\n'], 'url_profile': 'https://github.com/tidepool-org'}","{'location': 'Houston, Texas', 'stats_list': [['77', '          followers'], ['0', '          following'], ['20']], 'contributions': '185 contributions\n        in the last year', 'description': ['Patient Selection for Diabetes Drug Testing\nI built a model that predicts the expected days of hospitalization time, which determines whether the patient is selected for the clinical trial. In clinical trials, the drug is often administered over a few days in the hospital with frequent monitoring/testing. Therefore, the target patients are people that are likely to be in the hospital for this duration of time and will not incur significant additional costs for administering the drug and monitoring after discharge.\nDataset\nI used a modified dataset from UC Irvine.\nDependencies\nUsing Anaconda consists of the following:\n1.Install miniconda on your computer, by selecting the latest Python version for your operating system. If you already have conda or miniconda installed, you should be able to skip this step and move on to step 2.\nDownload the latest version of miniconda that matches your system.\n\n\n\n\nLinux\nMac\nWindows\n\n\n\n\n64-bit\n64-bit (bash installer)\n64-bit (bash installer)\n64-bit (exe installer)\n\n\n32-bit\n32-bit (bash installer)\n\n32-bit (exe installer)\n\n\n\nInstall miniconda on your machine. Detailed instructions:\n\nLinux: http://conda.pydata.org/docs/install/quick.html#linux-miniconda-install\nMac: http://conda.pydata.org/docs/install/quick.html#os-x-miniconda-install\nWindows: http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install\n\n2.Create and activate a new conda environment.\nFor Windows users, these following commands need to be executed from the Anaconda prompt as opposed to a Windows terminal window. For Mac, a normal terminal window will work.\nThese instructions also assume you have git installed for working with Github from a terminal window, but if you do not, you can download that first with the command:\nconda install git\n\n3.Create local environment\n\nClone the repository, and navigate to the downloaded folder. This may take a minute or two to clone due to the included image data.\n\ngit clone https://github.com/iDataist/Patient-Selection-for-Diabetes-Drug-Testing.git\ncd Downloads\n\n\n\nCreate (and activate) a new environment, named ehr-env with Python 3.7. If prompted to proceed with the install (Proceed [y]/n) type y.\n\nLinux or Mac:\n\n conda create -n ehr-env python=3.7\n source activate ehr-env\n\n\nWindows:\n\n conda create --name ehr-env python=3.7\n activate ehr-env\n\nAt this point your command line should look something like: (ehr-env) <User>:USER_DIR <user>$. The (ehr-env) indicates that your environment has been activated, and you can proceed with further package installations.\n\n\nInstall a few required pip packages, which are specified in the requirements text file. Be sure to run the command from the project root directory since the requirements.txt file is there.\n\n\npip install -r requirements.txt\nipython3 kernel install --name ehr-env --user\n\n\n'], 'url_profile': 'https://github.com/iDataist'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['3']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Yuridna'}","{'location': 'Poland, Kraków', 'stats_list': [['38', '          followers'], ['77', '          following'], ['251']], 'contributions': '1,052 contributions\n        in the last year', 'description': [' \n\n\n\n\n \n\n\nDiaBeFriend\nSimple android application that is dedicated to help you handle your diabetes\nDiaBeFriend is not currently available on Google Play Store, but you can download it from the link below:\nhttps://1drv.ms/u/s!AhhUCOE2-Bg2-W_YY03_FiCEAkjb\nFeatures provided by the app:\n\nYou can use offline database with nutritional data like: kilocalories, carbohydrates, fat and proteins.\nJust provide app with product name (you may choose product name from the list of about 7000 products) and its weight\n\n\n\n\n\nI am diabetic myself and for me it is crucial to be reminded about the necessity of measurement after meal.\nTherefore you are welcomed to use the measurement feature. You can enter how many carbohydrates there is in your meal,\nhow many insulin units you gave yourself and sugar level before the meal. You will be reminded about testing sugar level after 2 hours.\nThen your whole measurement will be summarized, which will help you keep your diary.\n\n\n\n\nSummary examples:\n\n\n\n\n\n\nTimer:\n\n\n\nProgress bar can be seen after a little while:\n\n\n\nInformation about dosage:\n\n\n\n'], 'url_profile': 'https://github.com/jakubowiczish'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""DMHT is a Diabetes Mellitus and Hypertension patient management application written in Ruby on Rails\nand is intended as a web front end for OpenMRS.\nOpenMRS® is a community-developed, open-source, enterprise electronic medical\nrecord system framework. We've come together to specifically respond to those\nactively building and managing health systems in the developing world, where\nAIDS, tuberculosis, and malaria afflict the lives of millions. Our mission is\nto foster self-sustaining health information technology implementations in\nthese environments through peer mentorship, proactive collaboration, and a code\nbase that equals or surpasses proprietary equivalents. You are welcome to come\nparticipate in the community, whether by implementing our software, or\ncontributing your efforts to our mission!\nDMHT was built by Baobab Health Trust.It is licensed under the Mozilla Public License.\nGetting Started:\n\nClone the application\nUse your terminal to get into the applications root directory\nMake sure you have bundler installed\nRun bundle install to install all application dependencies\nEdit application.yml.example and database.yml.example to configure application\nand database settings\nRun script/initial_database_setup.sh [environment=development] [site=MPC]\nRun passenger start if you are using passenger as your server or\nscript/server to run your default server.\n\n""], 'url_profile': 'https://github.com/BaobabHealthTrust'}","{'location': 'São Paulo', 'stats_list': [['51', '          followers'], ['4', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['pima-indians-diabetes-ML_.NET\nIn this example using the pima-indians-diabetes dataset, we will perform a classification between people with positive and negative diagnoses, to perform the classification we use:\n#.net core 2.1 ML\n#.NET 0.5 previews\n'], 'url_profile': 'https://github.com/thayssa1186'}","{'location': 'Helsinki, Finland.', 'stats_list': [['1', '          follower'], ['9', '          following'], ['3']], 'contributions': '2 contributions\n        in the last year', 'description': ['Diabetes prediction application using Python\n \nThis application is made using sklearn Machine Learning libraries and pyqt5 for its graphical UI.\nSupport Vector Machine classifies input data with 80% accuracy. PIMA Indians diabetes dataset from the UCI archive is used to train the model.\n\nHow to start\nFirstly install all dependencies via the following commands.\npip3 install -r requirements.txt\nNow train the application in machine as\npython3 diabetes.py\nFinally run the application:\npython3 gui.py\nNow insert all the requires details to see the result.\nBuilt With\n\nPython 3.7.\nPyQt5 - for the GUI.\n\nAuthor\n\nMd Shariful Alam - Shariful\n\nAcknowledgments\n*UCI archive - for providing the datasets.\n'], 'url_profile': 'https://github.com/Shourov1'}","{'location': 'Pune', 'stats_list': [['0', '          followers'], ['7', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Machine-Learning-in-HealthCare\n1.Machine Learning for Diagnosis of Diabetes With Python\n'], 'url_profile': 'https://github.com/BKhairkhar'}"
"{'location': 'Seoul, South Korea', 'stats_list': [['23', '          followers'], ['29', '          following'], ['24']], 'contributions': '584 contributions\n        in the last year', 'description': ['Exploration 5 (Regression)\nRegression 문제\n\n\n당뇨병 예측\n\n\nBike Sharing Demand\nhttps://www.kaggle.com/c/bike-sharing-demand\n\n\n'], 'url_profile': 'https://github.com/ljh415'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['11', '          following'], ['18']], 'contributions': '131 contributions\n        in the last year', 'description': ['End-to-End Diabetes Prediction Application using Machine Learning (MINI Project)\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nBug / Feature Request\nInstallation\nTeam\nCredits\nNote\nLicense\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features suach as\n\nPregnancies\nInsulin Level\nAge\nBMI.\nThe data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not."".\nThis is also sort of fun to work on a project like this which could be beneficial for the society.\nDEMO\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project . If you are looking for all the following points in this repo then i have not covered all in this repo. I\'m working on blog about this mini project and I\'ll update the link of blog about all the points in details later . (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displayed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nBug / Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\nExecute the command: python app.py\n\nTeam\nAnurag Singhania - Ml  Model Evaluation and Deployment\nHemant Kumar - Data Preprocessing & Gathering\nVikram Kumar - HTML & CSS\nManish Kumar Rajak -Presentation\nCredits\n\n\nTook inspiration from Krish Naik Who is a youtuber he makes contents on Data science his youtube channel link\n\n\nDitikrushan Giri\n\n\nNote:\n\nWebapp can handle concurrency upto some extent but can be scaled.\n\nLicense\nDistributed under the MIT License. LICENSE\n'], 'url_profile': 'https://github.com/itzanuragsinghania'}","{'location': 'New York, NY', 'stats_list': [['12', '          followers'], ['80', '          following'], ['330']], 'contributions': '16 contributions\n        in the last year', 'description': ['Diabetes-readmission\nShort project predicting hospital readmission for Diabetes patients using R\n'], 'url_profile': 'https://github.com/juanmanubens'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/munajatucilesmana'}","{'location': 'Boston', 'stats_list': [['18', '          followers'], ['15', '          following'], ['29']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes Manager\nGeneral Assembly Web Development Immersive, Project 2\nOverview and Purpose\nTHe purpose of this project was to demonstrate coding CRUD actions in a full-stack application. I coded this after having been in GA\'s web deveopment program for six weeks. The the back end uses Ruby on Rails with a PostgresSQL database, and the front end uses Javascript and jQery to manipulate the DOM.\nUser Instructions\nSign up with a username and password, then sign in. Can create ""doses"". Each dose is stored in the database with a medicine. Users can create new medicines to assign to a dose from the dose window.\n'], 'url_profile': 'https://github.com/MFBrewster'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Diabetes Stats\nBy Alberto Fustinoni\nDiabetes Stats is a WPF application to help physicians keep track of their diabetic patients. Patient profiles can be created and exam records can be added to them: the program then allows users to answer questions such as ""How many patients had glycemia over 130 in the last 4 months?"" instantly.\nThe program\'s user interface is built using WPF, while data storage and querying is handled by an embedded SQL Server Compact instance and .net\'s Entity Framework.\nSystem requirements\nWindows XP or later, .net framework 4 or later\n'], 'url_profile': 'https://github.com/Aftnet'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes-app\nThis app is a prototype and was created mainly for educational purposes.  It is a required project at the New York Data Science Academy Bootcamp (Cohort 13) and was completed in a span of approximately two weeks.  The data was a subset of the diabetes studies in https://clinicaltrials.gov/ct2/home.\nThe actual app can be found at:\nhttps://johnyap.shinyapps.io/clinicalstudiesApp/\nFor details about how to use the app and some insights about the data summaries and results, see my blog post here:\nhttps://nycdatascience.com/blog/student-works/r-shiny/visualizing-diabetes-clinical-studies-data/\nadditional notes:\nIn the Studies Info feature,\n\nIn Condition Type, the category, Diabetes, includes studies that did not distinguish between the type of diabetes (Type 1 or 2). These may likely be Type 2 diabes because it is the most common type. The Other category includes studies of other less common diabetes types such as gestational diabetes or studies that do not specifically study diabetes but other diseases on diabetes patients.\nIn Phase (Clinical Trial), the phase category N/A (or not applicable) represents trials without FDA-defined phases, including trials of devices or behavioral interventions.\n\nreferences:\nhttp://www.cnn.com/interactive/2014/10/health/epidemics-through-history/\nhttps://clinicaltrials.gov/ct2/home\n'], 'url_profile': 'https://github.com/JohnYap'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['5', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['DIABETES CARE\nProyecto de la especialización de UX. EN este proyecto apliqué todas las herramientas aprendidas en la especialización para hacer un app mobil que ayude a la gente diabética a cuidar su salud.\n\n\nTRACK: ESPECIALIZACIÓN UX-DESIGN\nCURSO: APLICA LO APRENDIDO\n\n\nObjetivo\nDesarrollar una aplicación móvil que ayude a personas que tienen diabetes y a personas que tienen familiares diabéticos a tener control e información sobre esta enfermedad. Esta aplicación estará centrada en público peruano, ya que debido a nuestra gastronomía, es más difícil tener una dieta especial para diabéticos.\nPreguntas a responder\n\n¿Cómo cuidan las personas diabéticas su salud?\n¿Hacen dieta?¿Hacen ejercicios?\n¿Qué tanta información de su enfermedad tienen?\n¿Cómo podrían motivarse?\n¿Qué se les dificulta al momento de hacer dieta?\n¿Cómo sientes que tener información y un diario de control les ayudaría a mejorar su salud?\n¿Cómo una aplicación podrá ayudarlos?\n¿Qué busca el público diabético ( o con familiares diabéticos) para cuidar su salud?\n¿Qué necesidades tendría que tener esta aplicación?\n\n###Alcances y Limitaciones\n\nEl proyecto considera solo diabéticas o familiares de diabéticos realmente interesados en mejorar su calidad de vida\nEl proyecto considera solo personas que utilicen aplicaciones (edad entre 18 y 50 años).\nEl proyecto considera solo personas que residan en Perú.\n\nPresentación del plan de investigación\n\nPuedes verlo con detalle aquí:https://www.preceden.com/timelines/360480-my-time-line\nMetodología\nDiagrama de afinidad:\nEl diagrama de afinidad fue utilizado para poder encontrar los problemas que la aplicación resolverá. En este caso, como podemos ver, los puntos más importantes a tratar son la dieta, información, recordatorios y ejercicios.\n\nDiagrama de Persona\nA través del diagrama de personas podemos analizar cuales son los hechos, molestias, comportamiento y objetivos que marcan a nuestro usuario. Así podemos entenderlo mejor, y saber cómo empezar a abordar sus problemas.\n\nBenchmarking\n\nHaciendo benchmarking con otras aplicaciones pudimos ver cuales son las características que todas tienen en sí, y qué otras características van siendo exclusivas y podrían adaptarse a nuestro público objetivo.\nEn nuestro caso, el proveer de noticias, recetas y tutoriales de ejercicios a nuestros usuarios es escencial, ya que las personas están en busqueda de nueva información para mejorar su calidad de vida\nEncuesta, entevistas y resultados\n\n\n\n\nEn los resultados de las encuestas y entevistas, podemos ver que los usuarios se sentirían motivados con una aplicación\nque les de opciones en recetas, ya que muchos consideran que el sinonimo de una alimentación sana consiste en recetas insipidas.\nA la par, a los usuarios les interesa mantenerse informados sobre la diabetes, saber que medicamentos o tratamientos nuevos pueden ayudarlos a mejorar su salud.\nSketch\nNos basamos en las necesidades que tenía el usuario (recalcado en las entrevistas y encuestas): recetas, problemas para recordar la aplicación de insulina, toma de medicinas y uso de glucómetro, tips de ejercicios y noticias. En los resultados del testeo de prototipo en papel mostraron que los usuarios desean tener la información más segmentada. En la nayoría de testeos les gustan los botones tipo alarma de las medicinas, insulina y glucometro, sin embargo no notaron el boton de ""agregar"", el cual debe hacerse más grande en el prototipo de alta fidelidad.En conclusión no hubieron muchas crticias negativas.\n\n\n\n\n\nConclusiones\nDurante el testeo del prototipo de alta fidelidad los usuarios hicieron hincapié en que la parte de “Glucómetro” debería estar separada de ""medicinas"", y que sería buena que la aplicación emita una alerta en cuanto los niveles de glucosa sobrepasen los normales, para que así ellos tomen conciencia de que deben cuidarse más. Muchos se sintieron cómodos con el color que se usó en la aplicación ya que sentían que le transmitían tranquilidad, a la par sintieron el flujo sencillo y practico, sobre todo para el público que no está acostumbrado a aplicaciones tan complejas. En resumen, en el testeo, el producto fue bien aceptado por la mayor parte de usuarios ya que sintieron que buena parte de los problemas a sus necesidades fueron cubiertos,\n'], 'url_profile': 'https://github.com/romina2911'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['0', '          following'], ['1']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Voxtric'}","{'location': 'Fulda,Germany', 'stats_list': [['2', '          followers'], ['1', '          following'], ['1']], 'contributions': '7 contributions\n        in the last year', 'description': ['\nDiabetes Monitoring is a project based on the Glucosio Project ,essentially for learning and training purposes.\n'], 'url_profile': 'https://github.com/benjaminbamanya'}"
"{'location': 'NONE', 'stats_list': [['6', '          followers'], ['0', '          following'], ['1']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Voxtric'}","{'location': 'Texas', 'stats_list': [['4', '          followers'], ['0', '          following'], ['7']], 'contributions': '38 contributions\n        in the last year', 'description': ['Diabetes-Prediction\nNational Institute of Diabetes and Digestive and Kidney Diseases research creates knowledge about and treatments for the most chronic, costly, and consequential diseases. The dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Build a model to accurately predict whether the patients in the dataset have diabetes or not.\nThe datasets consists of several medical predictor variables and one target variable (Outcome). Predictor variables includes the number of pregnancies the patient has had, Glucose,Blood Pressure, Skin Thickness, Insulin, their BMI, DiabetesPedigreeFunction, Age, Outcome(0,1).\nI have performed the following steps to predict whether or not a patient has diabetes:\n(i) Data Wrangling\n(ii) Exploratory Data Analysis\n(iii) Creation of different classifiers and choosing the best one among these algorithms\n(iv) Model validation to overcome the overfitting problem.\n(v) Evaluation of model\n(vi) Creating a dashboard with charts in Tableau.\n'], 'url_profile': 'https://github.com/disojn'}","{'location': 'Belo Horizonte', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '22 contributions\n        in the last year', 'description': ['Previsão de Diabetes\nEste projeto foi desenvolvido como desafio final do Bootcamp Desenvolvedor Python, do IGTI.\nO objetivo do projeto foi o desenvolvimento de um projeto completo de machine learning: desde o pré-processamento, normalização dos dados, treinamento, teste, persistência do modelo e “deploy” da solução final.\nBase de Dados\nA base de dados utilizada no desenvolvimento (diabetes.csv) provém do famoso Dataset do Kaggle Pima Indians Diabetes Database (https://www.kaggle.com/uciml/pima-indians-diabetes-database) que trata da ocorrência de diabetes em mulheres.\nPor motivos didáticos o Dataset foi fornecido sem cabeçalho, abaixo está o dicionário de dados:\n\nNúmero de vezes em que ficou grávida.\nConcentração de glicose.\nPressão diastólica (mm Hg).\nEspessura da dobra cutânea do tríceps (mm).\nInsulina (mu U/ml).\nÍndice de massa corporal (peso em kg/(altura em m)^2).\nHistórico familiar de diabetes.\nIdade (anos).\nClassificação (0 não diabético | 1 diabético ).\n\nConstrução do Modelo\nAs etapas de pré-processamento dos dados e a construção, treinamento, teste e persistência do modelo foram feitas em um jupyter notebook (construção_modelo.ipynb). Foram testados 3 modelos: KNN (K nearest neighbor), Decision Tree e MLP (Multilayer Perceptron).\nComo o objetivo era o desenvolvimento do projeto como um todo, não foi criado um baseline para comparação com o desempenho dos modelos (etapa altamente necessária em um projeto real) nem mesmo foi realizado tuning do modelo (outra etapa muito importante em um projeto real), sendo utilizado o modelo da forma padrão como foi criado.\nO modelo com melhor nível de acuracidade foi persistido para o arquivo mlp_model.sav e a normalização dos dados foi persistida para o arquivo normalização.sav (para que os dados novos que chegasem via formulário fossem corretamente normalizados e não alterassem o comportamento do modelo).\nAplicação web\nPara colocar o modelo ""em produção"" foi utilizado o micro-framework Flask, o arquivo app.py faz toda a integração através das rotas.\nForam criadas 2 páginas HTML, uma para que o usuário coloque os dados para uma nova predição (formulario.html) e uma segunda onde é mostrado o resultado da predição (resultado.html). Ambas as páginas estão na pasta templates.\nLimitações\nO projeto buscou desenvolver uma solução simples e unicamente com fins educacionais, não sendo, portanto, uma proposta real de solucação do problema.\nComo pontos de melhoría podem ser apontados:\n\nNecessidade de uma base de dados maior, o que traria maior confiabilidade ao modelo.\nNecessidade de uma baseline, de forma a avaliar a efetividade da solucação proposta em relação a uma solução simples e rápida.\nNecessidade de tuning do modelo, a fim de melhorar os resultados.\n\n'], 'url_profile': 'https://github.com/JoseWalterLima'}","{'location': 'Berlin, Germany / Hennigsdorf, Germany', 'stats_list': [['1', '          follower'], ['1', '          following'], ['3']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes-Diary\nA Meteor mobile app to keep track of health data for diabetes patients. [PRE-ALPHA]\n⚠️ DISCLAIMER\nExperimental Pre-Alpha\nThis app is in pre-alpha status. It\'s an experiment and should be treated as such. If you feel like joining the experiment - feel free!\nAbout the Management of Health Data\nHealth data is sensitive and important! As a diabetes patient, you should keep track of your values OUTSIDE OF THIS APP, as neither the data\'s safety nor its integrity can be guaranteed in experimental pre-alpha mode. Neither owner nor any contributors are responsible for any actions anybody takes regarding his or her health.\nExemption from Liability\nThis app is heavily under development. Neither owner nor contributors are responsible for actions an individual chooses to take with the code published. This includes (but is not limited to) any effects the app will have on the device it is installed on, choices based on the data entered into the app or any other action.\nAbout this App\nThis app is an experiment in using the meteor framework to build a mobile app.\nThe app\'s goal is to provide a diabetes patient with the means to keep track of his blood glucose value, the meals he eats, the insuline injected and further comments. We aim to keep as much control over the data as possible with the user.\nPlease refer to the to-do-list for features not yet included in the app.\nDemo\nFind a running demo here: diadia.meteor.com\nThe demo is running in the browser and is also a ""native"" mobile app. For example, the android version can be downloaded here.\nYou need to allow the installation of ""untrusted apps"" on your android device.\nQuickstart\n\nInstall meteor (https://www.meteor.com/install)\nClone the repository git@github.com:boRp/diabetes-diary.git\nOne plugin MUST be installed via mrt before: mrt add clockpicker\nThis plugin is not transferred to the new package style yet, more info can be found here: https://github.com/AndrasPH/meteor-clockpicker\n\nRun the app\nin browser for local development:\nmeteor\nOr on a plugged-in device:\nmeteor run android-device\nmeteor run ios-device\nMore general information regarding meteor can be found here: http://docs.meteor.com/#/basic/\ntechnical details\nFor more specific technical details, please see technical documentation\nbuild\nℹ️ This has only been tested for android!\nTo build the app:\nmeteor build /tmp/diadia/ --server diadia.meteor.com:80 --debug\nThe debug flag seems to be needed to install the apk on the phone without going through the app store\nAfterwards, you\'ll find the compiled apk within /tmp/diadia/<INSERT_PATH>\nMore information on building mobile apps for android and iOS: http://docs.meteor.com/#/basic/buildingmobileapps\nLicense\nMIT\n'], 'url_profile': 'https://github.com/boRp'}","{'location': 'NONE', 'stats_list': [['39', '          followers'], ['9', '          following'], ['22']], 'contributions': '121 contributions\n        in the last year', 'description': ['Diabetes-Detection\n\nGoals:\n\n\nSVM and Logistic regression to predict if a patient has diabetes\nPlot ROC and compute AUC using Scikit Learn\n\n'], 'url_profile': 'https://github.com/Suji04'}","{'location': 'India', 'stats_list': [['10', '          followers'], ['14', '          following'], ['96']], 'contributions': '1,578 contributions\n        in the last year', 'description': ['Diabetes Prediction using Machine Learning.\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features like Number of Pregnancies, Insulin Level, Age, BMI.The data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not.""\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displyed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\n\nRUN\n\nExecute the command: python app.py\n\nBug Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nowner\nSarvesh Kumar Sharma\nLICENSE\n-GNU GENERAL PUBLIC LICENSE Version 3\n'], 'url_profile': 'https://github.com/shsarv'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['OpenDiabetesVault\nThis project dealt with the redesign and further development of parts of the OpenDiabetesVault processing backend. More precisely, logical and structural data set filters were developed, as well as an exporter for the machine learning module.\nTo learn more about the usage of the data filters, slicers and the exporter, please take a look at our Wiki pages.\nFor more information about OpenDiabetesVault visit opendiabetes.de.\n'], 'url_profile': 'https://github.com/tiweGH'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Welcome to GitHub\nWelcome to GitHub—where millions of developers work together on software. Ready to get started? Let’s learn how this all works by building and publishing your first GitHub Pages website!\nRepositories\nRight now, we’re in your first GitHub repository. A repository is like a folder or storage space for your project. Your project\'s repository contains all its files such as code, documentation, images, and more. It also tracks every change that you—or your collaborators—make to each file, so you can always go back to previous versions of your project if you make any mistakes.\nThis repository contains three important files: The HTML code for your first website on GitHub, the CSS stylesheet that decorates your website with colors and fonts, and the README file. It also contains an image folder, with one image file.\nDescribe your project\nYou are currently viewing your project\'s README file. README files are like cover pages or elevator pitches for your project. They are written in plain text or Markdown language, and usually include a paragraph describing the project, directions on how to use it, who authored it, and more.\nLearn more about READMEs\nYour first website\nGitHub Pages is a free and easy way to create a website using the code that lives in your GitHub repositories. You can use GitHub Pages to build a portfolio of your work, create a personal website, or share a fun project that you coded with the world. GitHub Pages is automatically enabled in this repository, but when you create new repositories in the future, the steps to launch a GitHub Pages website will be slightly different.\nLearn more about GitHub Pages\nRename this repository to publish your site\nWe\'ve already set-up a GitHub Pages website for you, based on your personal username. This repository is called hello-world, but you\'ll rename it to: username.github.io, to match your website\'s URL address. If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right.\nLet\'s get started! To update this repository’s name, click the Settings tab on this page. This will take you to your repository’s settings page.\n\nUnder the Repository Name heading, type: username.github.io, where username is your username on GitHub. Then click Rename—and that’s it. When you’re done, click your repository name or browser’s back button to return to this page.\n\nOnce you click Rename, your website will automatically be published at: https://your-username.github.io/. The HTML file—called index.html—is rendered as the home page and you\'ll be making changes to this file in the next step.\nCongratulations! You just launched your first GitHub Pages website. It\'s now live to share with the entire world\nMaking your first edit\nWhen you make any change to any file in your project, you’re making a commit. If you fix a typo, update a filename, or edit your code, you can add it to GitHub as a commit. Your commits represent your project’s entire history—and they’re all saved in your project’s repository.\nWith each commit, you have the opportunity to write a commit message, a short, meaningful comment describing the change you’re making to a file. So you always know exactly what changed, no matter when you return to a commit.\nPractice: Customize your first GitHub website by writing HTML code\nWant to edit the site you just published? Let’s practice commits by introducing yourself in your index.html file. Don’t worry about getting it right the first time—you can always build on your introduction later.\nLet’s start with this template:\n<p>Hello World! I’m [username]. This is my website!</p>\n\nTo add your introduction, copy our template and click the edit pencil icon at the top right hand corner of the index.html file.\n\nDelete this placeholder line:\n<p>Welcome to your first GitHub Pages website!</p>\n\nThen, paste the template to line 15 and fill in the blanks.\n\nWhen you’re done, scroll down to the Commit changes section near the bottom of the edit page. Add a short message explaining your change, like ""Add my introduction"", then click Commit changes.\n\nOnce you click Commit changes, your changes will automatically be published on your GitHub Pages website. Refresh the page to see your new changes live in action.\n🎉 You just made your first commit! 🎉\nExtra Credit: Keep on building!\nChange the placeholder Octocat gif on your GitHub Pages website by creating your own personal Octocat emoji or choose a different Octocat gif from our logo library here. Add that image to line 12 of your index.html file, in place of the <img src= link.\nWant to add even more code and fun styles to your GitHub Pages website? Follow these instructions to build a fully-fledged static website.\n\nEverything you need to know about GitHub\nGetting started is the hardest part. If there’s anything you’d like to know as you get started with GitHub, try searching GitHub Help. Our documentation has tutorials on everything from changing your repository settings to configuring GitHub from your command line.\n'], 'url_profile': 'https://github.com/procesosmaker'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bolt911-bernie'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/delphinemeire'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bolt911-bernie'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Alex914'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/Lakehead-datalab'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['loop\nDiabetes\n'], 'url_profile': 'https://github.com/jennyswede'}","{'location': 'India', 'stats_list': [['0', '          followers'], ['0', '          following'], ['6']], 'contributions': '20 contributions\n        in the last year', 'description': ['pima-indian-diabetes-model-using-keras\nDiabetes Model Implemented in Keras Deep learning library. Here Pima-Indian-Diabetes data set is used.\nI have used Keras Sequential to create the model, https://keras.io/models/sequential/ \nData set CSV file link : https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\nData set Link: https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.names\nThere are eight input variables and one output variable (the last column) in the Dataset CSV file. We will be learning a model to map rows of input variables (X) to an output variable (y), which we often summarize as y = f(X).\n Input Variable (X) \n\n Number of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function \nAge (years)\n\n Output Variables (y)\n\n Class variable (0 or 1)\n\nKeras Diabetes Model Implementation Steps \n\n Load Data.\nDefine Keras Model.\nCompile Keras Model.\nFit Keras Model.\nEvaluate Keras Model.\nMake Predictions\n\n'], 'url_profile': 'https://github.com/erdivyang10'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AHMEDLIGHTO'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\ndiabetes\n'], 'url_profile': 'https://github.com/Tanaya24'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['hello-world\nDiabetes\n'], 'url_profile': 'https://github.com/NicoRank'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zojo1204'}","{'location': 'Sweden ', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/salamatoto'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/CaitlinAitken'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['2']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/xavier211192'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['1']], 'contributions': '6 contributions\n        in the last year', 'description': ['KNn\nDiabetes\n'], 'url_profile': 'https://github.com/Noobie404'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Luzmary199'}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['22', '          following'], ['3']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shyamragcp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['nick-\nDiabetes\n'], 'url_profile': 'https://github.com/nickverhagen'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Happyaby'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pedrocabanas'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""Genomics Advisor (adapted from Diabetes Monograph)\nUsage\n\n\nInstall dependencies\n$ pip install -r requirements.txt\n\n\n\nRun the server locally with\n# WSGI object is web:app\n$ python web.py\n\n\n\nIf you modified one of SNPData.csv and DrugInfo.csv or you wish to update comparison between genotypes in these two files and data from 1000 Genomes, you should use command below to update your changes. Note that this requires you to modify config.py and set GOOGLE_API_KEY to your API key, because load_data.py relies on Google Genomics API for getting data from 1000 Genomes. Currently we only support Goolge Genomics because other implementations of GA4GH's Variant API haven't conformed fully to the GA4GH's documentations yet.\n$ python load_data.py\n\n\n\n""], 'url_profile': 'https://github.com/bcl-lab'}","{'location': 'Brno, Czech Republic', 'stats_list': [['13', '          followers'], ['9', '          following'], ['238']], 'contributions': '84 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Cospel'}"
"{'location': 'Seattle, WA', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rkudrna'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nZorgZaak Diabetes App\n'], 'url_profile': 'https://github.com/Aikje'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yakuzapai'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/husni911'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['10', '          following'], ['185']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yynest'}","{'location': 'Denver, Colorado', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['diabetes\nA test case illustrating the use of Spark on real-time IoT data.\nchallenge\nThe standard of care for Type 2 Diabetes includes monitoring average blood insulin level over three months.  New advances in medicine and data engineering allow for granular monitoring and care recommendations.  Our challenge is to ingest data from personal health monitors, securely transmit that data to the cloud, apply data science analysis, and display current status to the patient and care givers.\nsolution\nThe first prototype uses Python code on a Raspberry Pi to generate mock patient data streams, simulating an OEM diabetes monitor. We ingest JSON data as MQTT packets into Amazon AWS IoT. Subsequent iterations used a direct connection to Kafka running on an EC2 instance which allows us to ingest streams from multiple patients, maintain fault tolerance, and enable multiple consumers to subscribe. Kinesis was also tested as an alternative to Kafka.\nFrom Kafka, Kinesis, or AWS IoT, the next step is to subscribe to topics and ingest the data into longer term storage in S3. A small Spark 2.1 cluster running on EC2 instances is used for this purpose.  We wrote code for Spark in Scala which reads JSON streams from a Kafka topic, transforming and joining the data into normalized formats, then writing out the stream to Parquet files on S3 that are partitioned by time and patientID.\nFor analysis and display of the patient condition, the Parquet files are analyzed in Databricks Notebooks running Spark 2.2. The notebooks use regression and classification algorithms to score the current status of the patient and prioritize patients for home care visits.\n'], 'url_profile': 'https://github.com/brantseibert'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/lgasco'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mahmoodtazari'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '21 contributions\n        in the last year', 'description': ['Glucose Tracker\nClass project for BMI. A very basic glucose tracker. Learning to program in Swift.\n'], 'url_profile': 'https://github.com/ekawaler'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['5', '          following'], ['20']], 'contributions': '0 contributions\n        in the last year', 'description': ['The Pima Indians Diabetes Dataset involves predicting the onset of diabetes within 5 years in Pima Indians given medical details.\nIt is a binary (2-class) classification problem. The number of observations for each class is not balanced. There are 768 observations with 8 input variables and 1 output variable. The variable names are as follows:\n0. Number of times pregnant.\n1. Plasma glucose concentration a 2 hours in an oral glucose tolerance test.\n2. Diastolic blood pressure (mm Hg).\n3. Triceps skinfold thickness (mm).\n4. 2-Hour serum insulin (mu U/ml).\n5. Body mass index (weight in kg/(height in m)^2).\n6. Diabetes pedigree function.\n7. Age (years).\n8. Class variable (0 or 1).\n\nA classification accuracy of approximately 77% is achieved for this dataset.\n'], 'url_profile': 'https://github.com/surabhim'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/leroyecker'}","{'location': 'Tokyo, Japan', 'stats_list': [['1', '          follower'], ['2', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/eryeryery'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '60 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kaustubhchakradeo'}","{'location': 'Panjab University, Chandigarh', 'stats_list': [['3', '          followers'], ['4', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/kundumeenu'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes\ncopy the python notebook file URL into https://nbviewer.jupyter.org/ to view the IPYNB file\n'], 'url_profile': 'https://github.com/raoaliarmaghan'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Davinchi2013'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '90 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/OliverMengich'}","{'location': 'Durham, North Carolina', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '24 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/TrippWhaley'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '2 contributions\n        in the last year', 'description': ['Diabetes\nEducational machine learning work on diabetes\n'], 'url_profile': 'https://github.com/jaxiak'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Kavon360'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '26 contributions\n        in the last year', 'description': ['IRIS_DATA\nIRIS Data set prediction using machine learning and make web app using Flask and deploy into Heroku\nCheck out live demo :- https://irisdata-api.herokuapp.com/\n'], 'url_profile': 'https://github.com/Ashishdeshmukh007'}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['Diabetes\nJut Find the outcomes of the patient\n'], 'url_profile': 'https://github.com/Avudaikrish'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/isaacrael'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/derekjohnson99'}","{'location': 'Budapest, Hungary', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shepyke'}","{'location': 'Tromsø', 'stats_list': [['4', '          followers'], ['3', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/camillavilla1'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '9 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mohankumaru'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/brettkerstein'}","{'location': 'NONE', 'stats_list': [], 'contributions': '24 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/taylorsmith-UKY'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['49', '          following'], ['3']], 'contributions': '8 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/alwayswaime'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/GaddaPrathyusha'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/gautamp114'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/brg50'}","{'location': 'Joypurhat', 'stats_list': [], 'contributions': '28 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/faysalislam'}","{'location': 'Cairo, Egypt', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/YaraShahin'}","{'location': 'NONE', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['diabetes\nthis project is done under the guidance of our mentor offline\n'], 'url_profile': 'https://github.com/ragibrahi'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/adrianquiroga'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Sharath1997'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/CleversonCachoeira'}","{'location': 'NONE', 'stats_list': [], 'contributions': '56 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ranjithpr1984'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['0']], 'contributions': '16 contributions\n        in the last year', 'description': [""Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://predicting-diabetes.herokuapp.com/\n• If you are searching for Code, Algorithms used and Accuracy of the model.. you won't find it here. Click the link mentioned below for the same:\nLink: https://github.com/anujvyas/Machine-Learning-Projects/tree/master/Diabetes%20Prediction\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n""], 'url_profile': 'https://github.com/Teli007'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sahilmangla1901'}","{'location': 'Minneapolis, MN', 'stats_list': [['9', '          followers'], ['23', '          following'], ['106']], 'contributions': '34 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/cubu'}","{'location': 'NONE', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vishhaal'}","{'location': 'Kota', 'stats_list': [['0', '          followers'], ['1', '          following'], ['4']], 'contributions': '18 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/deepu97nagar98'}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Analysis and Machine learning model on Pima Indian sample population.\n'], 'url_profile': 'https://github.com/Nishanth-K-S'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/laurwang'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zinojeng'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['clinical:diabetes\nDiabetes data, rules, etc.\nClone the Example Plugin\ncd webapp/packages\ngit clone https://github.com/clinical-meteor/diabetes\nInstall\n# add your package\nmeteor add clinical:diabetes\nmeteor npm install\n\n# run with a custom settings file\nmeteor --settings packages/diabetes/configs/settings.example.json\n'], 'url_profile': 'https://github.com/clinical-meteor'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/TheScientistBr'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['4', '          following'], ['6']], 'contributions': '14 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/melans'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mswann11'}","{'location': 'Seattle, WA', 'stats_list': [['13', '          followers'], ['14', '          following'], ['1']], 'contributions': '4 contributions\n        in the last year', 'description': ['Keras Transfer Learning\n'], 'url_profile': 'https://github.com/alew104'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes\nAbstract:\n > opportunity (Diabetes)\n > challenge (To predict the relationship between BMI and expected Y value)\n > action (Primarily use linear regression along with cross-validation)\n > resolution (Inconclusive due to high errors and low scores)\n\nDiabetes is on the rise in recent years and the trend shows an increase, especially among youths (aged 10-19), in both diagnosed and undiagnosed cases, serious complications can develop without timely diagnosis and treatments. The risk of developing type 2 diabetes in those who are obese are at four times greater.\nThe dataset provided can be obtained on sklearn here: Dataset, This Diabetes sample consists of 442 diabetes patients having 10 numeric feature measurements including age, sex, bmi, bp, S1, S2, S3, S4, S5, S6 (S* = particular type of Serum) with an expected value of Y, measured over a year period. The study is to find out the likelihood of diabetes in relation to one’s body mass. There are plenty evidence that shows Obesity dramatically increase the chances of becoming diabetic or/and being undiagnosed. The purpose of this study is to find a model that will best predict such occurrences.\nIntroduction:\nA study into whether we could predict the type of diabetes patients would have been a very enlightening project. Based on past studies which have shown that Type I diabetes tend to affect more youth, though new trends are showing that the rate at which youths who are afflicted by Diabetes II are catching up with Type I. Nonetheless, our dataset appears to contain very few data points for patients in that age group (10-19). The focus of our study will be on investigating the relationship between Increase in bmi (body weight) and also increases in Y(Expected value).\nThe diabetes dataset involves supervised learning with continuous output values. Below, we will discuss the various regressors ranging from linear regression, cross-validation (LASSO) clustering are to be employed in an attempt to help answer some interesting questions.\nMethods:\nRegression analysis -\nThe goal of this exercise is to fit a linear regression line to each feature fitted against the expected value Y (a quantitative measure of disease progression one year later). The sklearn data have been mean centered and scaled by the standard deviation times number of samples, in other words, the sum of squares of each columns amount to 1. The scaled data should produce no side effects on the shape of the resulting figures as the data are still proportional. First, we will plot the data on a scatter plot per individual feature and then fit a regression line through the data points. Mean squared error and R2 values will be studied to determine the correlations of each feature.\nCross Validation -\nThe details of the implementation using plotly can be referred to this page. This analysis was taken out of the plot cross-validation with linear models section. The objective is to evaluate the trustworthiness of the selection of alpha.\nLASSO -\nLasso cross-validation is a cross-validation estimator that returns an alphas value. The greater the value the better fit it is for modeling. The pseudocode can be found here. Using internal alpha parameters as well as external ones to make performance comparison.\nResults:\nRegression analysis\n|   |\n |\n\nThe MSE and R2 score are the key criterias in this analysis, in this particular study both the BMI (Body Mass Index) and S5 have the lowest MSE (mean square error) and both have the highest R2 scores. Even though the higher values of R2, we favored the findings on the low MSE figures in selecting the preferred prediction model, in this case, BMI and S5, further minimized the errors by computing the RMSE values. S5 as one of 6 blood serums not very clearly explained in the case summary and therefore difficult to make conjecture about that feature, however we know from common sense that obesity often contributes to a more likely outcome of a diabetic prognosis. Regardless, the R2 score at 47% and 39% for BMI and S5 respectively are still not sufficient for us to draw any substantial conclusions from this model.\nCross Validation\n\n\nThe above figure/table was generated using the Lasso cross-validation object to arrive at the alpha parameters by internal cross-validation, combined with the result deriving from the same procedure from an external set of generated alphas to see how they compare in a 3-fold comparison. Despite the identical alpha results for fold {0} and fold {2}, the score differences are significantly enough to reject the null hypothesis.\nDiscussion:\nIn this study, we have examined the subject with a few different classifiers, using arbitrary train/test split to evaluate model performance. Then, we used cross-validation (LassoCV algorithm) estimators to automate the the computation of our train/test split, though the accuracy of the model was not significantly improved.\nAs discussed in the results above, the BMI and Y correlation is inconclusive. We should, however, take into consideration the fact that the expected value was measured over a year period, there is a lack of comparative data on BMI over the year to allow for a reasonable comparison. There is no way to know the subject has gained or lost weight over the year. We believe that is partially the reason why it has such a high R2 score while having a relatively low MSE value.\nMoreover, it is not to be overlooked the fact that the diabetes sample size is a relatively small, only a total of 420 patients subjects. As a result, the option of the more ‘expensive’ algorithms were foregone due to the low expectation of an improved performance.\n'], 'url_profile': 'https://github.com/fso976'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\nGitHub Pages\n'], 'url_profile': 'https://github.com/MateoPortal'}","{'location': 'Bengaluru', 'stats_list': [['0', '          followers'], ['0', '          following'], ['5']], 'contributions': '46 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/souvik25162'}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['4', '          following'], ['0']], 'contributions': '188 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sadikinisaac'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/59360044'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/nanditha-nans'}","{'location': 'Gurgaon', 'stats_list': [['5', '          followers'], ['1', '          following'], ['0']], 'contributions': '18 contributions\n        in the last year', 'description': ['diabetes\nHere I will introduce you to identification and dealing with outliers.\nThen we will do cluster based modeling to predict if a person will be diabetic or not.\n'], 'url_profile': 'https://github.com/Puneettt'}"
"{'location': 'NONE', 'stats_list': [['38', '          followers'], ['3', '          following'], ['8']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Oliver0047'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kishankalariya19'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/lorron548'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SwatantraManandhar'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '177 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Arjun143aish'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '27 contributions\n        in the last year', 'description': ['Data-Science-Capstone-Healthcare\nData Science Capstone Project Using Python and Tableau 10\nDESCRIPTION\nProblem Statement\nNIDDK (National Institute of Diabetes and Digestive and Kidney Diseases) research creates knowledge about and treatments for the most chronic, costly, and consequential diseases.\nThe dataset used in this project is originally from NIDDK. The objective is to predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset.\nBuild a model to accurately predict whether the patients in the dataset have diabetes or not.\nDataset Description\nThe datasets consists of several medical predictor variables and one target variable (Outcome). Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and more.\nVariables\tDescription\nPregnancies\tNumber of times pregnant\nGlucose\tPlasma glucose concentration in an oral glucose tolerance test\nBloodPressure\tDiastolic blood pressure (mm Hg)\nSkinThickness\tTriceps skinfold thickness (mm)\nInsulin\tTwo hour serum insulin\nBMI\tBody Mass Index\nDiabetesPedigreeFunction\tDiabetes pedigree function\nAge\tAge in years\nOutcome\tClass variable (either 0 or 1). 268 of 768 values are 1, and the others are 0\nProject Task: Week 1\nData Exploration:\n\nPerform descriptive analysis. Understand the variables and their corresponding values. On the columns below, a value of zero does not make sense and thus indicates missing value:\n\n• Glucose\n• BloodPressure\n• SkinThickness\n• Insulin\n• BMI\n\n\nVisually explore these variables using histograms. Treat the missing values accordingly.\n\n\nThere are integer and float data type variables in this dataset. Create a count (frequency) plot describing the data types and the count of variables.\n\n\nProject Task: Week 2\nData Exploration:\n\n\nCheck the balance of the data by plotting the count of outcomes by their value. Describe your findings and plan future course of action.\n\n\nCreate scatter charts between the pair of variables to understand the relationships. Describe your findings.\n\n\nPerform correlation analysis. Visually explore it using a heat map.\n\n\nProject Task: Week 3\nData Modeling:\n\n\nDevise strategies for model building. It is important to decide the right validation framework. Express your thought process.\n\n\nApply an appropriate classification algorithm to build a model. Compare various models with the results from KNN algorithm.\n\n\nProject Task: Week 4\nData Modeling:\n\nCreate a classification report by analyzing sensitivity, specificity, AUC (ROC curve), etc. Please be descriptive to explain what values of these parameter you have used.\n\nData Reporting:\n\nCreate a dashboard in tableau by choosing appropriate chart types and metrics useful for the business. The dashboard must entail the following:\n\na. Pie chart to describe the diabetic or non-diabetic population\nb. Scatter charts between relevant variables to analyze the relationships\nc. Histogram or frequency charts to analyze the distribution of the data\nd. Heatmap of correlation analysis among the relevant variables\ne. Create bins of these age values: 20-25, 25-30, 30-35, etc. Analyze different variables for these age brackets using a bubble chart.\nTableau Screen Shot-\n![Tableau](Tableau dashbord.PNG)\n'], 'url_profile': 'https://github.com/Ramanaolakh'}","{'location': 'Los Angeles, CA', 'stats_list': [['5', '          followers'], ['5', '          following'], ['5']], 'contributions': '417 contributions\n        in the last year', 'description': ['This project was bootstrapped with Create React App.\nAvailable Scripts\nIn the project directory, you can run:\nyarn start\nRuns the app in the development mode.\nOpen http://localhost:3000 to view it in the browser.\nThe page will reload if you make edits.\nYou will also see any lint errors in the console.\nyarn test\nLaunches the test runner in the interactive watch mode.\nSee the section about running tests for more information.\nyarn build\nBuilds the app for production to the build folder.\nIt correctly bundles React in production mode and optimizes the build for the best performance.\nThe build is minified and the filenames include the hashes.\nYour app is ready to be deployed!\nSee the section about deployment for more information.\nyarn eject\nNote: this is a one-way operation. Once you eject, you can’t go back!\nIf you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\nYou don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\nLearn More\nYou can learn more in the Create React App documentation.\nTo learn React, check out the React documentation.\nCode Splitting\nThis section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting\nAnalyzing the Bundle Size\nThis section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\nMaking a Progressive Web App\nThis section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nAdvanced Configuration\nThis section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration\nDeployment\nThis section has moved here: https://facebook.github.io/create-react-app/docs/deployment\nyarn build fails to minify\nThis section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\n'], 'url_profile': 'https://github.com/angelo1104'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['6', '          following'], ['4']], 'contributions': '907 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/spiftire'}","{'location': 'Vellore Institute Of Technology', 'stats_list': [['2', '          followers'], ['2', '          following'], ['1']], 'contributions': '75 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Hariharan671'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/laurwang'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['clinical:diabetes\nDiabetes data, rules, etc.\nClone the Example Plugin\ncd webapp/packages\ngit clone https://github.com/clinical-meteor/diabetes\nInstall\n# add your package\nmeteor add clinical:diabetes\nmeteor npm install\n\n# run with a custom settings file\nmeteor --settings packages/diabetes/configs/settings.example.json\n'], 'url_profile': 'https://github.com/clinical-meteor'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/TheScientistBr'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '18 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/IvanGordiychuk'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['diabetes\nAnalysis on the diabetes readmission dataset found on UCI Machine Learning Repository.\n'], 'url_profile': 'https://github.com/gff130'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '57 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mibdbz'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/sincerelypge'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/ComplexCity'}","{'location': 'Ireland', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '30 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/anthonynolan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '4 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/mohitpachauri'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe objective of the dataset is to diagnostically predict whether or not a patient has diabetes,\nbased on certain diagnostic measurements included in the dataset.\nSeveral constraints were placed on the selection of these instances from a larger database.\nIn particular, all patients here are females at least 21 years old of Pima Indian heritage.\nThe datasets consists of several medical predictor variables and one target variable, Outcome.\nPredictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age.\nWe’ll be using Python and some of its popular data science related packages.\nFirst of all, we will import pandas to read our data from a CSV file and manipulate it for further use.\nWe will also use numpy to convert out data into a format suitable to feed our classification model.\nWe’ll use seaborn and matplotlib for visualizations. We will then import classifier algorithm from keras.\nThis algorithm will help us build our classification model.we will get the predection of outcome,and get the confusion matrix\n'], 'url_profile': 'https://github.com/Rawanosama'}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['8', '          following'], ['6']], 'contributions': '27 contributions\n        in the last year', 'description': ['diabetes\nThis repository is based on analysis of diabetes data.\n'], 'url_profile': 'https://github.com/mukeshRar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '45 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/arabindabarik77'}","{'location': 'Montreal', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': [""Diabetes EDA\nThis small project is an exploratory data analisis of a diabtes dataset from from Kaggle.\nProject structure\nNotebooks\nIn the root folder of the project you will find two notebooks prepended with a number:\n1. Preparation.ipynb\n2. Univariate analysis.ipynb\n3. Multivariate analysis.ipynb\n\nThis files are to be opened in order so that the flow in which the project was developed can be followed.\nData\nThe folder data contains the following paths:\n1_original: Contains the original data as was received. The contents of this folder should never be modified so we always have a backup.\n2_prepared: Data ready for analysis.\n\n## Project setup\n\nIn order to successfully run the project make sure that Anaconda (https://www.anaconda.com/downloads) is installed in your system since it is used as an \nenvironment/package manager. \n\nOnce conda is installed in your system navigate to the project's root in your terminal (where the file transit_env.yml) and run the\nfollowing command:\n\n```conda env create -f transit_env.yml```\n\nThis will create the environment that will be used to run the project. Once all the packages are installed run the command:\n\n```jupyter notebook```\n\n\n\n\n""], 'url_profile': 'https://github.com/lkronecker13'}","{'location': 'NONE', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetes\nTried some ML algo like KNN, Logistic Regression and RandomForrest to compare the accuracy for the simple data-set\n'], 'url_profile': 'https://github.com/MRA11145'}","{'location': 'Hyderabad', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Prediction using Machine Learing Algorithms\n'], 'url_profile': 'https://github.com/Muzammil-A90'}","{'location': 'NONE', 'stats_list': [], 'contributions': '17 contributions\n        in the last year', 'description': ['diabetes_app\nA new Flutter project.\nGetting Started\nThis project is a starting point for a Flutter application.\nA few resources to get you started if this is your first Flutter project:\n\nLab: Write your first Flutter app\nCookbook: Useful Flutter samples\n\nFor help getting started with Flutter, view our\nonline documentation, which offers tutorials,\nsamples, guidance on mobile development, and a full API reference.\n'], 'url_profile': 'https://github.com/sergardli'}","{'location': 'Pune', 'stats_list': [], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/anushka-wp'}","{'location': 'Mumbai, India', 'stats_list': [['0', '          followers'], ['3', '          following'], ['33']], 'contributions': '26 contributions\n        in the last year', 'description': ['Diabetes\nProject to predict whether a person will have diabetes or not\n'], 'url_profile': 'https://github.com/Vishal3041'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['diabetes\nPredict If You Have Diabetes Or Not\n'], 'url_profile': 'https://github.com/isatyabrata'}","{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ShreyaSinha59'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ShreyaSinha59'}","{'location': 'NONE', 'stats_list': [], 'contributions': '34 contributions\n        in the last year', 'description': [""Diabetes Prediction - Deployment\n  \n• This repository consists of files required to deploy a Machine Learning Web App created with Flask on Heroku platform.\n• If you want to view the deployed model, click on the following link:\nDeployed at: https://predicting-diabetes.herokuapp.com/\n• If you are searching for Code, Algorithms used and Accuracy of the model.. you won't find it here. Click the link mentioned below for the same:\nLink: https://github.com/anujvyas/Machine-Learning-Projects/tree/master/Diabetes%20Prediction\n• Please do ⭐ the repository, if it helped you in anyway.\n• A glimpse of the web app:\n\n----- Important Note -----\n• If you encounter this webapp as shown in the picture given below, it is occuring just because free dynos for this particular month provided by Heroku have been completely used. You can access the webpage on 1st of the next month.\n• Sorry for the inconvenience.\n\n""], 'url_profile': 'https://github.com/ukarsh-tripathi'}","{'location': 'NONE', 'stats_list': [], 'contributions': '164 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/mefy-Aruna'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n陈大夫诊所\n'], 'url_profile': 'https://github.com/teamodong'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Laravel PHP Framework\n\n\n\n\n\nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, queueing, and caching.\nLaravel is accessible, yet powerful, providing tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.\nOfficial Documentation\nDocumentation for the framework can be found on the Laravel website.\nContributing\nThank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.\nSecurity Vulnerabilities\nIf you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at taylor@laravel.com. All security vulnerabilities will be promptly addressed.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license.\n'], 'url_profile': 'https://github.com/luisneiva'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/eduardotp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/kvrkp'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['\nDiabetes example project for Software Engineering for Data Scientists.\n'], 'url_profile': 'https://github.com/profbrowe'}","{'location': 'bangalore', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/vikassrm'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/JamesARuggiero'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/NitzanGreen'}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/linuskumar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/YaraHelmy'}","{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hanchumo'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sherwinday'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/1981Maria'}","{'location': 'Lisboa', 'stats_list': [['7', '          followers'], ['17', '          following'], ['4']], 'contributions': '35 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/eduardo2s'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/ruchitapatil987'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '341 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/lanurag150'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/paavanyadav'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '30 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/siva4162'}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['12', '          following'], ['13']], 'contributions': '67 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/muliann'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/lucksor'}","{'location': 'NONE', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/Rumeisa'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/balajimuthai'}","{'location': 'NONE', 'stats_list': [], 'contributions': '27 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/santosh44kumar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/darshitvala'}","{'location': 'Mumbai', 'stats_list': [['0', '          followers'], ['2', '          following'], ['2']], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Predicitons using PIMA India Diabetes Data from Kaggle\n'], 'url_profile': 'https://github.com/mananashah007'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['Diabetes\nChronic conditions associated with disease\n'], 'url_profile': 'https://github.com/jandata2020'}","{'location': 'São Paulo', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '31 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/snhenrique'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '35 contributions\n        in the last year', 'description': [""Early Detection of Diabetes Using Classification\nIntroduction\nThe dataset contains 520 observations of patients' age, gender, signs, symptoms, and diagnosis of diabetes. The aim of this project is to develop a model for early prediction of diabetes using the dataset. I will train the model using a random sample of 80% of observations from the dataset and validate the trained model using the other 20% of observations. I will use two classification methods, logistic regression and random forest, and evaluate both models using the receiver operating characteristic (ROC) curve.\nAttribute Information:\n\nAge: 16-90\nGender: Male, Female\nPolyuria: Yes, No\nPolydipsia: Yes, No\nSudden weight loss: Yes, No\nWeakness: Yes, No\nPolyphagia: Yes, No\nGenital thrush: Yes, No\nVisual blurring: Yes, No\nItching: Yes, No\nIrritability: Yes, No\nDelayed healing: Yes, No\nPartial paresis: Yes, No\nMuscle stiffness: Yes, No\nAlopecia: Yes, No\nObesity: Yes, No\nClass: Positive, Negative\n\nExploratory Data Analysis\n\n\n61.5% of total patients tested positive.\n38.5% of total patients tested negative.\n\n\n\nMost non-diabetic patients between their mid 30's and mid 50's do not have diabetes.\nMost diabetic patients between their late 30's and early 60's have diabetes.\nThe median age of diabetic patients is higher than that of non-diabetic patients.\n\n\n\nFemales have a significantly higher proportion of positive diagoses than that of males.\nThose who experienced polyuria, polydipsia, sudden weight loss, irritability, and partial paresis had a significantly high proportion of positive diagnoses.\nThose who experienced weakness, polyphagia, genital thrush, visual blurring, muscle stiffness, and obesity had a moderately high proportion of positive diagnoses.\n\nLogistic Regression\nThe logistic regression model will predict the probability of a patient developing diabetes, where Positive = 1, Negative = 0.\nThe dependent variable is denoted by y, and the independent variables are denoted by x.\nLogisic Response Function:\n\nThen,\n\nWe can also use the odds to rewrite the equation:\n\n\nThen the log odds or Logit function is:\n\nModel Summary:\n\n\n\n\nObservations\n\n\n423\n\n\n\n\nDependent variable\n\n\nclass\n\n\n\n\nType\n\n\nGeneralized linear model\n\n\n\n\nFamily\n\n\nbinomial\n\n\n\n\nLink\n\n\nlogit\n\n\n\n\n\n\n\n\nX²(5)\n\n\n415.94\n\n\n\n\nPseudo-R² (Cragg-Uhler)\n\n\n0.85\n\n\n\n\nPseudo-R² (McFadden)\n\n\n0.74\n\n\n\n\nAIC\n\n\n159.08\n\n\n\n\nBIC\n\n\n183.36\n\n\n\n\n\n\n\n\n\n\nEst.\n\n\nS.E.\n\n\nz val.\n\n\np\n\n\n\n\n\n\n(Intercept)\n\n\n2.12\n\n\n0.57\n\n\n3.72\n\n\n0.00\n\n\n\n\nGenderMale\n\n\n-4.76\n\n\n0.68\n\n\n-6.99\n\n\n0.00\n\n\n\n\nPolyuriaYes\n\n\n5.17\n\n\n0.73\n\n\n7.12\n\n\n0.00\n\n\n\n\nPolydipsiaYes\n\n\n5.32\n\n\n0.82\n\n\n6.51\n\n\n0.00\n\n\n\n\nItchingYes\n\n\n-3.15\n\n\n0.63\n\n\n-5.01\n\n\n0.00\n\n\n\n\nIrritabilityYes\n\n\n2.01\n\n\n0.55\n\n\n3.66\n\n\n0.00\n\n\n\n\n\n\n Standard errors: MLE\n\n\n\n\n\nGender, Polyuria, Polydipsia, Itching, and Irritability are very significant.\nPolydipsia, Polyruia, and Gender are important variables in predicting diabetes.\n\nOdds Ratio Plot With 95% Confidence Interval\n\n\nThose who experienced polyuria or polydipsia were much more likely to have diabetes than those who did not experience these symptoms.\xa0\n\nConfusion Matrix\nWe visualize the performance of our model using a confusion matrix. The selected threshold is 0.5.\xa0\n\nIf Prediction <= 0.5, then it will be Class 0 (Negative).\nIf Prediction > 0.5, then it will be Class 1 (Positive).\n\n\n\nAccuracy = 87.6%\nMisclassification rate = 12.4%\n92.1% of all non-diabetic patients were correctly classified.\n84.7% of all diabetic patients were correctly classified.\n\nROC Curve\nNext, we look at the ROC curve, which summarizes the confusion matrices that each threshold produces. The y-axis shows the True Positive Rate (Sensitivity) and the x-axis shows the False Positive Rate (1-Specificity).\n\n\nThe area under the ROC curve measures the performance across all thresholds. A high AUC indicates that the model accurately distinguishes between diabetic and non-diabetic patients.\n\n\nThe area under the curve is high (0.946), indicating high accuracy.\nThere is a trade-off for changing the threshold:\n\nIncreasing the threshold would decrease the true positive rate and decrease the false positive rate.\nDecreasing the threshold would increase the true positive rate and increase the false positive rate.\n\n\n\nRandom Forest\nThe random forest algorithm creates a forest with a collection of decision trees, where in each decision tree a random subset of features is chosen at each split and a random sample of training data is used. Then, each tree casts a vote for a prediction, and the algorithm chooses the classification with the most votes.\nBelow is a plot of one tree:\n\nIt works like this:\nStarting at node 1, if a patient has polyuria, we go to node 2. Next, if a patient has polydipsia, we go to node 8, the decision node, which shows the probabilities of the response variable.\nIn the decision node, a decision is made based on a sample of 164 patients who have been in that situation. The dark rectangle shows the probability of the patient having a positive diagnosis. We see that the probability is about 1, or about 100% chance that the patient has diabetes, so this tree predicts that the patient has diabetes.\nModel Summary\nHere are the results of 500 trees and 4 variables at each split:\n## Type of random forest: classification\n## Number of trees: 500\n## No. of variables tried at each split: 4\n## \n##         OOB estimate of  error rate: 2.6%\n## Confusion matrix:\n##          Negative Positive class.error\n## Negative      156        6  0.03703704\n## Positive        5      256  0.01915709\n\n\nOut of bag error rate is 2.6%, which is low (about 97.4% accuracy).\nPredictions for Negative and Positive are both good.\nErrors for positive predictions are slightly lower than that of negative predictions.\n\n3.7% of the true negative cases were falsely classified as positives.\n1.9% of the true positive cases were falsely classified as negatives.\n\n\n\nHyperparameter Tuning\nThe training data with 500 trees gives the following error plot of Out of Bag (black), Negative (red), and Positive (green):\n\n\nThe error rates decrease as the number of trees increase and stabilizes at around 200 trees.\n\nOOB Error vs mtry\n\n\nOOB error is lowest at mtry = 4, or 4 variables at each split.\n\nHere are the results of 200 trees and 4 variables at each split:\n## Type of random forest: classification\n## Number of trees: 200\n## No. of variables tried at each split: 4\n## \n##         OOB estimate of  error rate: 2.36%\n## Confusion matrix:\n##          Negative Positive class.error\n## Negative      156        6  0.03703704\n## Positive        4      257  0.01532567\n\n\nThe OOB error rate decreased from 2.6% to 2.36%.\nThe error of positive class decreased slightly.\n\nConfusion Matrix\n\n\nAccuracy = 96.9%\nMisclassification rate = 3.1%\n97.4% of all non-diabetic patients were correctly classified.\n96.6% of all diabetic patients were correctly classified.\n\nVariable Importance\nWe use the variable importance plot to see which variables are important. The plots show the average decrease in accuracy and gini impurity (the probability of misclassification) if the variable was removed from the model. A higher mean decrease in accuracy and Gini impurity suggests that the variable is more important.\n\n\nPolyuria, gender, and polydipsia have high contributions to accuracy.\nPolyuria and polydipsia have high contributions to Gini impurity\nMuscle stiffness, genital thrush, obesity, and weakness have very little contributions to accuracy and Gini impurity.\n\nROC Curve\nThe ROC of random forest with 200 trees and 4 variables at each split is plotted:\n\n\nThe area under the ROC curve is very high (0.997), indicating almost perfect accuracy.\n\nDiscussion\nA brief summary of both models:\nLogistic Regression\n\nAccuracy: 87.6%\nSensitivity: 84.7%\nSpecificity: 92.1%\nAUC: 0.946\n\nRandom Forest\n\nAccuracy: 96.9%\nSensitivity: 96.6%\nSpecificity: 97.4%\nAUC: 0.9973\n\nIn the end, I was able to predict both positive and negative cases with good accuracy using logistic regression and random forest. In addition, both models identified polyuria, polydipsia, and gender as powerful predictors. However, the random forest model has higher accuracy, sensitivity, specificity, and area under the ROC curve than those of the logisitic regression model. Thus, the random forest model appears to outperform the logistic regression model.\nSome advantages of logistic regression is that it is computationally efficient, easy to train, and results are easy to interpret. Disadvantages are that it requires the assumption of linearity between the predictors and the log odds of the response variable, and there are more steps to data preparation, such as handling missing values.\nSome advantages of random forest are that it can solve both regression and classification problems, and can detect linear and nonlinear relationships. In addition, it can handle missing values well and parameters can be tuned to alter model performance. Disadvantages of random forest are that it is difficult to interpret, and it is memory-intensive for very large data, which can take the model longer to train and make predictions.\n""], 'url_profile': 'https://github.com/hucindy'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andresvm999'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n陈大夫诊所\n'], 'url_profile': 'https://github.com/teamodong'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Laravel PHP Framework\n\n\n\n\n\nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, queueing, and caching.\nLaravel is accessible, yet powerful, providing tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.\nOfficial Documentation\nDocumentation for the framework can be found on the Laravel website.\nContributing\nThank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.\nSecurity Vulnerabilities\nIf you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at taylor@laravel.com. All security vulnerabilities will be promptly addressed.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license.\n'], 'url_profile': 'https://github.com/luisneiva'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/eduardotp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/kvrkp'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['\nDiabetes example project for Software Engineering for Data Scientists.\n'], 'url_profile': 'https://github.com/profbrowe'}","{'location': 'bangalore', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/vikassrm'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/JamesARuggiero'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/hchammun'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/de11235'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['32']], 'contributions': '0 contributions\n        in the last year', 'description': [""Diabetes\nBrief Background:\nDiabetes affects more than 30 million people, and that is within the United States alone. Think of 10 people - at least one person has diabetes according to this statistic.\nBillions of money every year are spent to treating diabetes. It is a non-curable disease requiring daily administrations of insulin, constant tracking of blood glucose levels, and sometimes even hospitalization. If we could help patients suffering from diabetes somehow, what are the areas we should target?\n\nWhat requires the most money?\nHow can we make tracking glucose levels easier?\n\nHospitalization requires a lot of money, especially if one does not have health insurance. What if we could build a predictive model that could tell us, based on certain factors, whether a hospitalized patient was likely to be readmitted? And what are some actions we could take to lower patient re-admittance? With these two pieces of information, we can preemptively target those most susceptible to going back to the hospital, funneling our time, personnel, and resources to those that truly need it.\nCurrent Progress\n[X] Obtain data resources\n[X] Clean data\n[X] Initial brute machine learning model\n[ ] Feature Selection - visualize correlations and choose most relevant features (reduce noise and overfitting)\n[ ] Feature Engineering - create new features from existing data\n[ ] Model Selection - try to fit a variety of models to improve performance\n[ ] Hyperparameter Optimization - Optimize the settings within each particular machine learning model\nPlease read the following articles to follow my reasoning and see the outcomes of my analysis:\n\n\nhttps://medium.com/@charleswang_3310/learn-azure-diabetes-hospital-re-admittance-part-1-f4ebc6e3d279\n\n\nhttps://medium.com/@charleswang_3310/python-diabetes-hospitalization-readmittance-part-2-8eac113b06a1\n\n\n\nAbout Me:\nI am a Computer Science teacher interested in the healthcare, social justice, financial, and technology fields.\nMy interest in healthcare and social justice stem from the same reason I am a teacher: I am committed to bringing about positive change to this world. My goal is to not only teach students how to program, but also how they can apply their programming skills for good causes. The healthcare field is a huge opportunity for change; the healthcare industry has enormous amounts of data to train machine learning models to not only better treat diseases but also to predict and prevent diseases. Social justice is another huge, overarching section for the advancement of humankind: why do we have the policies we currently do; are policies inherently discriminatory; why has our prison population burgeoned; why are prisoners counted as 'population' for where their prison is (for representative purposes) but they are not given a vote? There are so many things that are concerning that I wish to apply an analytical perspective towards.\n""], 'url_profile': 'https://github.com/pearteachar'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/abuthoppan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Chwanpang'}","{'location': 'Bangalore, India', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/meenakshi-b18'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/robert6187'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MayaCui'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['6', '          following'], ['1']], 'contributions': '50 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/akpalumax'}","{'location': 'NONE', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Procesos033'}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/jashwanth3579'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '19 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/durott01'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/muim1'}","{'location': 'NONE', 'stats_list': [], 'contributions': '17 contributions\n        in the last year', 'description': ['Diabetes\npredicting the risk of diabetes using diabetes dataset from UCI\n'], 'url_profile': 'https://github.com/kenkaycee'}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Anurakti85'}","{'location': 'Bogota', 'stats_list': [['0', '          followers'], ['0', '          following'], ['8']], 'contributions': '29 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/wilberj88'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['8', '          following'], ['1']], 'contributions': '103 contributions\n        in the last year', 'description': [""Diabetes Prediction\n\nTable of Content\nOverview-\nGoals -\nMotivation and Background -\nData -\nProject Info\nOverview\nThis project is to see if we can predict diabetes based on 8 different factors by using Logistic Regression model and Decision Tree model, and finding out which factor affects the outcome the most.\nExecutive Code  : Executive Notebook  \n\nPresentation    : Presentation Preview \n\nYouTube Presentation: Video Link  \n\nGoals\n\nData Preparation     : Cleaning data, and creating visualizations for deeper understanding of the dataset.\nClassification Model : Logistic regression model and Decision Tree model used and evaluated to find the highest accuracy in predicting diabetes.\n\nMotivation and Background\n\nAccording to CDC's National Diabetes Statistics Report, 10.5% (34.2 million people) of USA's total population had diabetes in 2018's records. When looking at the reports over the years, it is clear that the rate is increasing yearly. In 2000, the percentage of people with diabetes was 4.4%, which means that is has more than doubled over 18 years. This caught my attention and encouraged me to look into data about diabetes. I will be looking at the different health factors and see which influences a patient to have diabetes, along with predicting diabetes with the different factors.\nData\nThe dataset is obtained from Kaggle (diabetes dataset), originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient (female, over age 20) has diabetes, based on certain diagnostic measurements included in the dataset. It includes 2000 observations, each representing an individual.\nThere are 9 Columns:\n\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)^2)\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutcome: Class variable (0 or 1)\n\nProject Info\nSoftware Requirements\nLanguage/Tool: Python (Anaconda)\nLibraries: pandas, seaborn, numpy, matplotlib, sklearn, scipy\n\nRelated Studies\n\n1. Center of Disease Control and Prevention (CDC). (2020). National Diabetes Statistics Report, 2020 . \nRetrieved from US department of Health and Human Services website:\nhttps://www.cdc.gov/diabetes/pdfs/data/statistics/national-diabetes-statistics-report.pdf Link\n\n\n2. Sisodia, D., & Sisodia, D. S. (2018). Prediction of diabetes using classification algorithms. \nProcedia Computer Science, 132, 1578-1585. doi:10.1016/j.procs.2018.05.122 Link\n\n3. Smith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). \nUsing the ADAP learning algorithm to forecast the onset of diabetes mellitus. \nIn Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). \nIEEE Computer Society Press. Link\n\n\nContributors : Sooyeon Choi\n\nDuration     : October 2020\nLast Update  : 10.13.2020\n\n""], 'url_profile': 'https://github.com/schoi15-umbc'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Dhruvnarula1'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/avishaitsur'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/JorgeOliveiraFisico'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/project-scaffolding'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Newzealand11'}","{'location': 'Greensboro, NC', 'stats_list': [['22', '          followers'], ['1', '          following'], ['23']], 'contributions': '21 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/somyamohanty'}","{'location': 'Bangalore, India', 'stats_list': [['16', '          followers'], ['8', '          following'], ['6']], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/keerthanasriranga'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/seed90117'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nllevar el control de azúcar insulina y carbohidratos de un paciente\n'], 'url_profile': 'https://github.com/luimad'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nHere we include a description of each file in this repository.\nclean_data.py -\nRefines and extracts the necessary features based on the paper ""Impact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records"". Input: diabetic_data.csv. Output: diabetic_data_cleaned.csv\ndt_roc.py -\nSaves an ROC plot for the Decision Tree model.\ntree_utils.py -\nUtility functions for building and constructing trees.\noutput_utils.py -\nUtility functions for visualizing the trees we create.\ndiabetic_data.csv -\nRaw data file from the UCI Machine Learning Repository of all samples and all features.\ndiabetic_data_cleaned.csv -\nData file after being cleaned by clean_data.py.  Output of clean_data.py.\nIDs_mapping.csv -\nTable of ID numbers and their meaning.  ID numbers correspond to various entries in diabetic_data.csv.\n'], 'url_profile': 'https://github.com/vmahadeo'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/punchup28'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rishabh420'}","{'location': 'Ireland', 'stats_list': [['1', '          follower'], ['4', '          following'], ['0']], 'contributions': '27 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes patient records https://archive.ics.uci.edu/ml/datasets/diabetes\n'], 'url_profile': 'https://github.com/annye'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ANGELYCARMEN'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '17 contributions\n        in the last year', 'description': ['Diabetes\npredicting the risk of diabetes using diabetes dataset from UCI\n'], 'url_profile': 'https://github.com/kenkaycee'}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Anurakti85'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['8', '          following'], ['1']], 'contributions': '103 contributions\n        in the last year', 'description': [""Diabetes Prediction\n\nTable of Content\nOverview-\nGoals -\nMotivation and Background -\nData -\nProject Info\nOverview\nThis project is to see if we can predict diabetes based on 8 different factors by using Logistic Regression model and Decision Tree model, and finding out which factor affects the outcome the most.\nExecutive Code  : Executive Notebook  \n\nPresentation    : Presentation Preview \n\nYouTube Presentation: Video Link  \n\nGoals\n\nData Preparation     : Cleaning data, and creating visualizations for deeper understanding of the dataset.\nClassification Model : Logistic regression model and Decision Tree model used and evaluated to find the highest accuracy in predicting diabetes.\n\nMotivation and Background\n\nAccording to CDC's National Diabetes Statistics Report, 10.5% (34.2 million people) of USA's total population had diabetes in 2018's records. When looking at the reports over the years, it is clear that the rate is increasing yearly. In 2000, the percentage of people with diabetes was 4.4%, which means that is has more than doubled over 18 years. This caught my attention and encouraged me to look into data about diabetes. I will be looking at the different health factors and see which influences a patient to have diabetes, along with predicting diabetes with the different factors.\nData\nThe dataset is obtained from Kaggle (diabetes dataset), originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient (female, over age 20) has diabetes, based on certain diagnostic measurements included in the dataset. It includes 2000 observations, each representing an individual.\nThere are 9 Columns:\n\nPregnancies: Number of times pregnant\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\nBloodPressure: Diastolic blood pressure (mm Hg)\nSkinThickness: Triceps skin fold thickness (mm)\nInsulin: 2-Hour serum insulin (mu U/ml)\nBMI: Body mass index (weight in kg/(height in m)^2)\nDiabetesPedigreeFunction: Diabetes pedigree function\nAge: Age (years)\nOutcome: Class variable (0 or 1)\n\nProject Info\nSoftware Requirements\nLanguage/Tool: Python (Anaconda)\nLibraries: pandas, seaborn, numpy, matplotlib, sklearn, scipy\n\nRelated Studies\n\n1. Center of Disease Control and Prevention (CDC). (2020). National Diabetes Statistics Report, 2020 . \nRetrieved from US department of Health and Human Services website:\nhttps://www.cdc.gov/diabetes/pdfs/data/statistics/national-diabetes-statistics-report.pdf Link\n\n\n2. Sisodia, D., & Sisodia, D. S. (2018). Prediction of diabetes using classification algorithms. \nProcedia Computer Science, 132, 1578-1585. doi:10.1016/j.procs.2018.05.122 Link\n\n3. Smith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). \nUsing the ADAP learning algorithm to forecast the onset of diabetes mellitus. \nIn Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). \nIEEE Computer Society Press. Link\n\n\nContributors : Sooyeon Choi\n\nDuration     : October 2020\nLast Update  : 10.13.2020\n\n""], 'url_profile': 'https://github.com/schoi15-umbc'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Dhruvnarula1'}","{'location': 'Bogota', 'stats_list': [['0', '          followers'], ['0', '          following'], ['8']], 'contributions': '29 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/wilberj88'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/avishaitsur'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/JorgeOliveiraFisico'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\nNightscout server & client\n\n\n\n\n\nTests:: \nDisclaimer\n(translation from here)\n!> Never use the information from Nightscout, ioBroker or program code to make medical decisions.\n!> This is a project that is created and supported exclusively by volunteers.\nThere is no warranty or guaranteed support of any kind in this project.\nIf you decide to use it, the quality and performance of this project depends on you.\n!> All information and thoughts of the program codes described here are for informational and educational purposes only.\nThe use of program codes of the homepage www.github.com is without any guarantee or support of any kind.\nAny element of this system can fail at any time, making the system unusable!\nThere is no password protected privacy or any security of the tools provided here.\nAny data that you upload will be readable by anyone on the Internet when you share or submit the specific URL (Internet address).\nThis is not a project of the Dexcom company. Nightscout has no affiliation with Dexcom or other companies,\nservices or products mentioned on this website.\nAll product and company names mentioned herein are trademarks of their respective owners or manufacturers.\n!> The translators / authors accept no responsibility for the topicality, correctness and completeness of the information provided in this documentation\nand those of the listed links. Liability claims against the translators / authors,\nwhich relate in particular to physical, material or immaterial damages caused by the\nuse or non-use of the information provided or by the use of incorrect and incomplete information,\nare excluded in principle, provided that the translator / The authors are not proven to be intentionally or grossly negligent.\nAll offers are non-binding. The translators / authors expressly reserve the right to change,\nsupplement or delete parts of the pages or the entire offer without prior notice, or to discontinue publication temporarily or permanently.\n!> Do-It-Yourself.\nDIY project means in our case, that there is no company from which one can buy a finished, functioning system.\nElements of the system are developed and put together by participants of the project.\nThey will be provided to you free of charge.\nDIY means to you that you have to do your part to make the system work for you.\nWe hope that DIY will inspire you as much as we do - so at some point you can make a small contribution to making the system better for everyone.\nDescription\nThis adapter starts the nightscout server from this repository: https://github.com/nightscout/cgm-remote-monitor or uses such a server remotely.\nFor the detailed information read Nightscout documentation here.\nSee requirements.\nIn case you are using local mongoDB the connection string looks like mongodb://localhost:27017/iobroker\nRequirements\nIn server mode\nInstalled and running mongo DB.\nIt could be cloud DB or local DB, that could be installed from here: https://www.mongodb.com/download-center/community.\nUnder Debian the MongoDB could be installed as: apt-get install mongodb or sudo apt-get install mongodb if the user is not root.\nFollowing commands could work for Debian if apt-get install mongodb could not find a package:\nwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -\necho ""deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main"" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org\nsudo systemctl daemon-reload\nsudo systemctl start mongod\n\nioBroker.iot\nIf you want to write the sugar monitoring values on the way, you need the running and configured IoT adapter.\nYou can write the values into https://nightscout.iobroker.in and the secret from iobroker.iot configuration.\n\nTo push the values into local nightscout with xDrip+ you must enter in Basis URL https://<SEE IoT CONFIG API-secret>@nightscout.iobroker.in/api/v1/.\nLike here:\n\nYou can access your local nightscout server via iot cloud. For that you must open in browser https://nightscout.iobroker.in/ and enter your secret from\nRemember that cloud access and local access require different API secrets!\nIn client mode\nYou need a running nightscout server instance and it\'s api accessible via http or https.\nUse cases\nMonitor value and report via telegram\nCreate a script in javascript adapter:\nfunction report(alarm, val) {    \n    sendTo(\'telegram.0\', {\n        text:                   `Blood glucose ${alarm ? \'alarm\' : \'OK\'}: ${val}mg/ml`,\n        caption:                \'Nightscout\'\n    });  \n}\n\nlet alarm = false;\non(\'nightscout.0.data.mgdl\', obj => {\n    if (obj.state.val > 170 || obj.state.val < 75) {\n        if (!alarm) {\n            alarm = true;\n            report(alarm, obj.state.val);\n        }   \n    } else if (alarm) {\n        alarm = false;\n        report(alarm, obj.state.val);\n    }    \n});\n\nNotice: to get the chart as an image the phantomjs adapter must be installed and running\nSend charts via telegram or email\nYou can write a script:\nsendTo(\'nightscout.0\', \'chart\', {\n    format: \'png\', // optional. Default value \'png\n    max: 180, // optional upper alarm limit. Default value 180 \n    min: 80, // optional lower alarm limit. Default value 80\n    width: 720, // optional image width. Default value 720\n    height: 480, // optional image height. Default value 480\n    start: Date.now() - 3 * 3600000, // optional time start = (now - 3 hours)\n    end: Date.now(), // optional time end\n    title: \'Blood glucose\', // optional\n}, result => {\n    const data = result.result.split(\',\')[1];\n    require(\'fs\').writeFileSync(\'/tmp/chart.png\', Buffer.from(data, \'base64\'));\n    sendTo(\'telegram.0\', {text: \'/tmp/chart.png\', caption: \'Chart\'});\n});\n\nTodo\n\nAllow to configure api-secret for foreign nightscout server\n\nChangelog\n0.11.3 (2020-07-14)\n\n(Volker Richert) update ages even if no treatments available\n\n0.11.2 (2020-04-04)\n\n(bluefox) Added the possibility of the getting the chart of sugar\n\n0.10.4 (2020-03-30)\n\n(bluefox) Allowed node.js 12\n\n0.10.2 (2020-03-06)\n\n(Volker Richert) Change unit of reservoir level from % to absolute value\n\n0.10.1 (2020-03-05)\n\n(Volker Richert) small fix for treatment has no eventType\n\n0.10.0 (2020-02-27)\n\n(Volker Richert) add client only mode again to allow the usage on an external nightscout server\n(Volker Richert) add sage and cage\n\n0.9.10 (2020-02-14)\n\n(Volker Richert) Fixed last Updated value\n\n0.9.6 (2019-09-14)\n\n(bluefox) used newer version of nightscout\n\n0.9.4 (2019-08-10)\n\n(bluefox) initial release\n\nLicense\n                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n                        Preamble\n\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\nA secondary benefit of defending all users\' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\n\n\nDefinitions.\n\n""This License"" refers to version 3 of the GNU Affero General Public License.\n""Copyright"" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n""The Program"" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as ""you"".  ""Licensees"" and\n""recipients"" may be individuals or organizations.\nTo ""modify"" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a ""modified version"" of the\nearlier work or a work ""based on"" the earlier work.\nA ""covered work"" means either the unmodified Program or a work based\non the Program.\nTo ""propagate"" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\nTo ""convey"" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays ""Appropriate Legal Notices""\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\nThe ""source code"" for a work means the preferred form of the work\nfor making modifications to it.  ""Object code"" means any non-source\nform of a work.\nA ""Standard Interface"" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\nThe ""System Libraries"" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n""Major Component"", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\nThe ""Corresponding Source"" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work\'s\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\nThe Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users\' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work\'s\nusers, your or third parties\' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program\'s source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n""keep intact all notices"".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n""aggregate"" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation\'s users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\nA ""User Product"" is either (1) a ""consumer product"", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, ""normally used"" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n""Installation Information"" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n""Additional permissions"" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\nAll other non-permissive additional terms are considered ""further\nrestrictions"" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\nAn ""entity transaction"" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party\'s predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\nA ""contributor"" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor\'s ""contributor version"".\nA contributor\'s ""essential patent claims"" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, ""control"" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor\'s essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\nIn the following three paragraphs, a ""patent license"" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To ""grant"" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  ""Knowingly relying"" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient\'s use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\nA patent license is ""discriminatory"" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others\' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License ""or any later version"" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy\'s\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe ""copyright"" line and a pointer to where the full notice is found.\n<one line to give the program\'s name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\nIf your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a ""Source"" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a ""copyright disclaimer"" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n'], 'url_profile': 'https://github.com/ioBroker'}","{'location': 'kathmandu,Nepal', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '3 contributions\n        in the last year', 'description': ['Diabetes-prediction\nDiabetes prediction from pima indian diabetes database\n'], 'url_profile': 'https://github.com/Basantakatuwal'}","{'location': 'Chittagong, Bangladesh', 'stats_list': [['14', '          followers'], ['110', '          following'], ['19']], 'contributions': '192 contributions\n        in the last year', 'description': [""Diabetes-Dataset-Analysis-using-Machine-Learning\nDiabetes Dateset Analysis using Machine Learning Classification Algorithm\nReferences:\n\nhttps://www.who.int/news-room/fact-sheets/detail/diabetes [About Diabetes and it's symptoms]\nhttps://www.kaggle.com/uciml/pima-indians-diabetes-database [About Data-Set]\n\n""], 'url_profile': 'https://github.com/sayanta28'}"
"{'location': 'Portland, Oregon', 'stats_list': [['4', '          followers'], ['34', '          following'], ['1']], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/abdalah'}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['diabetes\n\nA tool for helping medical workers with diabetic patients\n'], 'url_profile': 'https://github.com/paulmdavies'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Diabetes project of Ioannina unit of excelence.\n'], 'url_profile': 'https://github.com/ioa-maellak'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['5', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['<<<<<<< HEAD\nBloc Reddit\nTutorial app to teach the core concepts of Rails.\nSetup\nCopy the ""config/application.example.yml"" file and take out ""example"". Fill out the credentials.\ndiabetes\n\n\n\n\n\n\n\nf812c60048374c2bd570d217214afa151bd14e6c\n\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/jvdavidow'}","{'location': 'United Kingdom', 'stats_list': [['39', '          followers'], ['13', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': [""Express prototyping tool\nPrototyping tool built in Express.\nIt will give you a basic Express app, with templates, css and images from the GOV.UK front-end toolkit.\nRequirements\n\nNode\n\nYou may already have it, try:\nnode --version\n\nGetting started\n\n\nClone this repo.\n\n\nIf you don't have Node, download it here: http://nodejs.org/.\n\n\nRun the app:\n\n\nnode start.js\n\n\nGo to localhost:3000 in your browser.\n\nHot reload\nAny code changes should update in the browser without you restarting the app.\nThe app recompiles app/assets/stylesheets/application.scss everytime changes are observed.\n""], 'url_profile': 'https://github.com/amosie'}","{'location': 'Plainsboro, New Jersey', 'stats_list': [['8', '          followers'], ['8', '          following'], ['2']], 'contributions': '362 contributions\n        in the last year', 'description': ['Diabetes\nAn application to measure how much pizza you have eaten...\n'], 'url_profile': 'https://github.com/VirajShah21'}","{'location': 'Chicago, IL', 'stats_list': [['203', '          followers'], ['146', '          following'], ['220']], 'contributions': '555 contributions\n        in the last year', 'description': ['diabetes\nResearch Files for NSHAP Diabetes Project\n'], 'url_profile': 'https://github.com/fgregg'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetespima\n'], 'url_profile': 'https://github.com/sethu1995'}","{'location': 'Pittsburg CA', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '7 contributions\n        in the last year', 'description': ['ETL of 2012 and 2014 data on adult diabetes and childhood obesity from the Centres for Disease Control and Prevention\nIntroduction\nDiabetes is a group of diseases which is marked by the body\'s inability to produce sufficient amounts, or to respond appropriately to insulin. It is not curable but it is highly treatable. Diabetes types 1 and 2 are the most common types of diabetes. Type 1 patients need insulin for survival because their immune systems are are destroying their pancreas beta cells (those that produce insulin). Type 2 patients exhibit ""insulin resistance"" or ""relative insulin deficiency"". Obesity in children, on the other hand, is defined by the Centres for Disease Control and Prevention (CDC) as the 95th percentile or greater of the body mass index (BMI) distribution of children of the same age and sex. Hillier et al. (2007) reported that the risk of childhood obesity and gestational hyperglycaemia (diabetes) are positively correlated. Hence, these two diseases are of high concern. Moreover, the CDC reported that more than 100 million adults are living with diabetes in the U.S.A.  and Cheung et al. 2016 reported that childhood obesity is a public health concern in the country. A possible first step in alleviating the effects of these diseases is to determine their prevalence in the 54 the states or territories of the U.S.A.\nThis project aimed to extract data from publicly available CDC information about adult diabetes and childhood obesity, transform the data, and load the data into a database. It also aimed to create a Flask app which would render the transformed data into HTML.\nMethodology\nThree Jupyter notebooks were used for extracting, transforming, and loading the diabetes and obesity data:\n\nClean_Chronic_Disease_indicators.ipynb\nClean_Nutrition_Data.ipynb\nJoin_obesity_diabetes_tables.ipynb\n\nIn addition, the MySQL database diabetes_db was created using the Diabetes.sql script. On the other hand, a Flask app (diabetes_app.py) was developed to display the table and plots generated from the data onto html. This app is not yet online and currently lives on the localhost upon download. The code for these plots are found in  Join_obesity_diabetes_tables.ipynb.\nExtraction\nData was extracted from two datasets provided by the CDC: (1) on chronic disease indicators in the U.S.A. and (2) on nutrition, physical activity, and obesity in women, infants, and children.\nBoth datasets were downloaded as csv files and extracted using Python (version 3.6) Pandas module in separate Jupyter Notebooks.\n# Dependencies\nimport pandas as pd\nThe chronic diseases indicators file contains the statistics for diabetes prevalence in adults 18+ years old. On the other hand, the data for occurrence of obesity in children 2–4 years old are found in the nutrition, physical activity, and obesity file.\n# Load CSV file as dataframe\n    # The csv files are stored locally in a Resources folder. But because they exceed GitHub\'s file size requirement, \n    # links to the Google Drive copy of the files are provided.\ndiseasedata = pd.read_csv(""Resources/U.S._Chronic_Disease_Indicators__CDI_.csv"")\n\nnutr_df = pd.read_csv(""Resources/Nutrition__Physical_Activity__and_Obesity_-_Women__Infant__and_Child.csv"")\nTransformation\nFiltering the dataframe for the most relevant columns\nThe columns of interest in diseasedata were those that provided information about the crude prevalence of adult diabetes in 2012 and in 2014. Hence, the dataframe chronic_df was generated as follows:\nchronic_df = diseasedata[[""YearEnd"", ""LocationDesc"", ""Topic"", ""Question"", ""DataValueUnit"", ""DataValueType"", \n""DataValue"", ""Stratification1""]]\nThe columns of interest in nutr_df provided information about obesity in children 2–4 years old in 2012 and in 2014. Therefore, the next iteration of the dataframe was generated with the following code.\nnutr_df2 = nutr_df[[""YearEnd"", ""LocationDesc"", ""Question"", ""Data_Value"", ""StratificationID1""]]\nSelect the values for 2010, 2012, and 2014\nOriginally, this project intended to extract data for three years (2010, 2012, and 2014). Hence, the codes used to subset the dataframes for the identified years were:\nYears = [2010, 2012, 2014]\nchronic_df2 = chronic_df[chronic_df[""YearEnd""].isin(Years)]\nnutr_df3 = nutr_df2[nutr_df2[""YearEnd""].isin(Years)]\nSelect diabetes as the chronic disease of interest\nThere were numerous chronic diseases in the chronic_df dataframe. Because diabetes in adults was of interest, rows pertaining for this disease were selected:\nchronic_df3 = chronic_df2[chronic_df2[""Topic""] == ""Diabetes""]\nObesity was not selected in the nutr_df dataframe because all rows were associated with obesity and weight status.\nSelect rows on US states and territories\nThe chronic diseases dataframe featured data for each U.S. state and territory and country-wide data. The country-wide data was removed from the dataframe since this project was focused only on data from the different states and territories.\nchronic_df4 = chronic_df3[chronic_df3[""LocationDesc""]!=""United States""]\nThis step was not performed in the nutrition dataframe because it did not contain country-wide data; just for each state and territory.\nSelect rows with no stratification (value = ""Overall"")\nThe values to be presented were for overall prevalence. Hence, the other stratification (e.g., age, gender, ethnicity) were filtered out. For the latest iteration of nutr_df, the dataframe was also filtered for the target question (obesity in 2–4 year-old children). For the latest iteration of chronic_df, rows pertaining to crude prevalence were retained.\nnutr_df4 = nutr_df3.query(""StratificationID1 == \'OVERALL\'& \\\n                          Question == \'Percent of WIC children aged 2 to 4 years who have obesity\'"")\n\nchronic_df5 = chronic_df4.query(""DataValueType == \'Crude Prevalence\' & Stratification1 == \'Overall\'"")\nThe filtering of chronic_df was refined by selecting the prevalence of diabetes in adults 18+ years.\nchronic_df6 = chronic_df5[chronic_df5[""Question""] == ""Prevalence of diagnosed diabetes \\\namong adults aged >= 18 years""]\nRemoval of columns that showed the same information\nAfter all the filtering, the latest iteration of the dataframes, nutr_df4 and chronic_df6, contained category columns that contained the same values in their rows. Hence, these columns had to be removed and their values were used as names of the data columns.\n# Rename columns for clarity\nchronic_df6 = chronic_df6.rename(columns = {""YearEnd"": ""Year"",\n                                            ""LocationDesc"": ""US_State"",\n                                            ""DataValue"": ""Adult_Diabetics_Percent""})\n\nnutr_df4 = nutr_df4.rename(columns = {""YearEnd"": ""Year"",\n                                      ""LocationDesc"": ""US_State"",\n                                      ""Data_Value"": ""Obese_Children_Percent""})\n\n# Further clean the dataset\nchronic_df7 = chronic_df6[[""Year"", ""US_State"", ""Adult_Diabetics_Percent""]]\nnutr_df4 = nutr_df4[[""YearEnd"", ""LocationDesc"", ""Data_Value""]]\nCreating a database\nThe nutrition and the chronic dataframes could now loaded into the diabetes_db which has been written in MySQL. Two tables were created in this database: (1) obesity; and (2) diabetes.\nLoading into the database\nThe obesity data (from nutr_df4) was loaded into the obesity table while the diabetes data (from chronic_df) was loaded into the diabetes table through SQLAlchemy.\n# Dependencies\nfrom sqlalchemy import create_engine\nfrom config import password\nThe config.py file containing the password to MySQL was not included in the GitHub repository for security purposes.\nA connection to diabetes_db was created as follows:\nconn = ""root:{0}@localhost:3306/diabetes_db"".format(password) # Password is in a separate file\nengine = create_engine(f""mysql://{conn}"")\nThe presence of the two tables in diabetes_db was first confirmed before loading data.\nengine.table_names()\nThe data was then loaded using the following script. if_exists is set to ""replace"" so that if the code were to be run again, the data wouldn\'t be appended as duplicates. index was set to ""False"" so that the index assigned to the data in the dataframes would not be saved in the database.\nchronic_df7.to_sql(name = ""diabetes"", con = engine, if_exists = ""replace"", index = False)\nnutr_df4.to_sql(name = ""obesity"", con = engine, if_exists = ""replace"", index = False)\nJoining tables and a second ETL\nA third table was created in diabetes_db, called \'merged\'. This would contain the resulting data from joining the data from the \'obesity\' and the \'diabetes\' tables. SQLAlchemy was used to create a connection to the updated database and the presence of the three tables was confirmed using the code above.\nTo extract the data from the \'obesity\' and the \'diabetes\' table, Pandas was used:\n# Read the table contents (for diabetes)\ndiabetes = pd.read_sql(""select * from diabetes"", con = engine)\ndiabetes = diabetes.sort_values(by = ""US_State"")\n\n# Read the table contents (for obesity)\nobesity = pd.read_sql(""select * from obesity"", con = engine)\nobesity = obesity.sort_values(by = ""US_State"")\nThe data was sorted in alphabetical order of the U.S. state or territory. Then, the data was transformed by merging the two dataframes, diabetes and obesity based on year and U.S. state.\n# Merge diabetes and obesity dataframes\nmerged = pd.merge(diabetes, obesity, on=[\'Year\',\'US_State\'], how=\'inner\')\nUsing ""inner"" to merge the two dataframes caused rows pertaining to 2010 data to be removed. Hence, only data for two years, 2012 and 2014, were retained. The resulting dataframe was loaded into the \'merged\' table of diabetes_db:\nmerged.to_sql(name = ""merged"", con = engine, if_exists = ""replace"", index = False)\nThe newly loaded data could be read either using MySQL or pandas.\nIn Jupyter notebook:\npd.read_sql_query(""select * from merged"", con = engine).head()\n\nOR \n\nIn MySQL Workbench:\nSELECT * FROM merged;\nExtras: Creating a Flask app that renders static HTML files\nVisualising diabetes and obesity trends per statefor 2012 and 2014\nIn the third Jupyter notebook, the merged dataframe was further cleaned to replace \'None\' with NaN and to convert numerical values from string to float.\n# Convert None values to NAN\nmerged.fillna(value = pd.np.nan, inplace = True)\n\nmerged[""Adult_Diabetics_Percent""] = merged[""Adult_Diabetics_Percent""].astype(float)\nThe dataframe was then split into two based on the year:\nmerged_2012 = merged[merged[""Year""] == 2012]\nmerged_2014 = merged[merged[""Year""] == 2014]\nTo create a bar chart for diabetes for 2012, the following code was used:\nx_pos = np.arange(len(merged_2012[""US_State""]))\ndiabetics_2012 = list(merged_2012[""Adult_Diabetics_Percent""])\n\nplt.figure(figsize = (16,8))\nplt.bar(x_pos, diabetics_2012)\nplt.xticks(x_pos, merged_2012[""US_State""], rotation = 90, fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel(""U.S. State or Territory"", fontsize = 16)\nplt.ylabel(""Prevalence of Adult Diabetics (%)"", fontsize = 16)\nplt.tight_layout()\nThis code was used to pattern other code to generate data for diabetes in 2014, and obesity for 2012 and for 2014.\nTo create plots that compared data between years per disease, merged was spliced to create new dataframe based on diseases:\nmerged_diabetics = merged[[""Year"", ""US_State"", ""Adult_Diabetics_Percent""]]\nmerged_obesity = merged[[""Year"", ""US_State"", ""Obese_Children_Percent""]]\nTo create a grouped bar chart, the dataframes had to be pivoted such that the datapoints were placed into two columns based on the year.\nmerged_diabetics = merged_diabetics.pivot(index = ""US_State"", columns = ""Year"")\nmerged_obesity = merged_obesity.pivot(index = ""US_State"", columns = ""Year"")\nThe grouped bar plot for diabetes prevalence, comparing 2012 and 2014, was generated with the following script:\nax = merged_diabetics.plot(kind = ""bar"", figsize = (16,8))\nax.set_xlabel(""U.S. State or Territory"", fontsize = 16)\nax.set_ylabel(""Prevalence of Adult Diabetes (%)"", fontsize = 16)\nax.legend([""2012"",""2014""], fontsize = 12)\nplt.tight_layout()\nA similar bar plot for obesity prevalence was also generated, adopting the code above.\nAll plots were saved into the Images folder. For example:\nplt.savefig(""Images/diabetics_2012_2014.png"")\nFlask app development\nThe diabetes_app.py needed PyMySQL to connect to the diabetes_db database and several Flask features:\nfrom flask import Flask, request, render_template, jsonify\nimport pymysql\nfrom config import password\nThe connection to the database was created.\ndb = pymysql.connect(""localhost"", ""root"", f""{password}"", ""diabetes_db"")\nSeveral static html pages were rendered by some of the routes. For example:\n@app.route(\'/\')\ndef intro():\n    return render_template(""index.html"")\nThese static pages have been pre-loaded with the plots saved in the Images folder. One html page, however, contains the data extracted from the connected database:\n@app.route(\'/data\')\ndef index():\n    cursor = db.cursor()\n    sql = ""SELECT * FROM merged""\n    cursor.execute(sql)\n    columns = [col[0] for col in cursor.description] # gets the column headers in the merged table\n    results = [dict(zip(columns, row)) for row in cursor.fetchall()] # output is a list of dictionaries\n    return render_template(""data.html"", results = results)\nUsing cursor.fetchall() would lead to a list of tuples containing values.\n#Output example (tuple) in HTML\n(2012, ""Alabama"", ""12.2"", 15.6)\nTo be able to render the data onto a HTML table, the output needed to be a list of dictionaries. Hence, the column names were extracted from the \'merged\' table as well (the first element in a list outputted by cursor.description). For each row (effectively, each tuple in the list), the column names and the rows were zipped and converted to a dictionary.\n# Output example (dictionary) in HTML\n{""Year"": 2012, ""US_State"": ""Alabama"", ""Adult_Diabetics_Percent"": ""12.2"", ""Obese_Children_Percent"": 15.6}\nThe dictionary was rendered onto the table in data.html.\n...\n<table>\n    ...\n    <!-- Loop through rows in results -->\n    <!-- Each row contains year, state, diabetics, obese values -->\n    {% for row in results %}\n    <tr>\n        <td>{{ row.Year }}</td>\n        <td>{{ row.US_State }}</td>\n        <td>{{ row.Adult_Diabetics_Percent }}</td>\n        <td>{{ row.Obese_Children_Percent }}</td>\n    </tr>\n    {% endfor %}\n    ...\n</table>    \n...\n'], 'url_profile': 'https://github.com/rochiecuevas'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nThis is an exploratory spatial analysis of the diabetes rates for 2014\nthe objective is to visualize the data and see if there is any spatial autocorrelation\n'], 'url_profile': 'https://github.com/alexsuchar'}"
"{'location': 'NONE', 'stats_list': [['8', '          followers'], ['2', '          following'], ['21']], 'contributions': '73 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/Usama3059'}","{'location': 'NONE', 'stats_list': [['13', '          followers'], ['1', '          following'], ['1']], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/alanaecp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sarii896'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/klujber'}","{'location': 'NONE', 'stats_list': [], 'contributions': '43 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Kadrik87'}","{'location': 'Hyderabad', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '26 contributions\n        in the last year', 'description': ['diabetes\nUsing various machine learning algorithms to get the best prediction accuracy if possible for the Pima Indians dataset.\nThe best result was found with Random Forest with an accuracy of 83%.\nINSTALL\nPython version used in this project: 3.6.6\nLIBARIES USED:\nPandas 0.23.4\nNumpy 1.15.3\nMatplotlib 2.2.2\nScikit-learn 0.20.0\n'], 'url_profile': 'https://github.com/nishithagampa'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['0']], 'contributions': '165 contributions\n        in the last year', 'description': ['Diabetes\nThis predicts the person having the diabetes or not\n'], 'url_profile': 'https://github.com/Ravi-shankar100'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Sateriwi'}","{'location': 'dhaka', 'stats_list': [['0', '          followers'], ['0', '          following'], ['15']], 'contributions': '264 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/jeweldhali'}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AshishBadgujar'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AshishBadgujar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Belkatux'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '15 contributions\n        in the last year', 'description': ['Projeto Desenvolvido com intuito educativo por Victor, Marcelo e Acacio, estudantes da Universidade Presbiteriana Mackenzie, no curso da Apple Developer Academy.\n'], 'url_profile': 'https://github.com/marceloyz'}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MigoJJ'}","{'location': 'NONE', 'stats_list': [], 'contributions': '18 contributions\n        in the last year', 'description': ['The Demographics of Diabetes\nNovember 14, 2020\nAbstract\nThe Pima Indians of Arizona are a tight knit community that is genetically isolated. They also have the highest diagnosed cases of type 2 diabetes than any other population group in the world (Baier, 2004). I use a dataset of medical information about the Pima Indians to determine if demographics and health statistics can identify people at higher risk of diabetes. This algorithm can help medical professionals identify at-risk individuals for early intervention and prevent possible development into type 2 diabetes.\n'], 'url_profile': 'https://github.com/jeverett74'}","{'location': 'Chittagong, Bangladesh', 'stats_list': [['14', '          followers'], ['110', '          following'], ['19']], 'contributions': '192 contributions\n        in the last year', 'description': [""Diabetes-Dataset-Analysis-using-Machine-Learning\nDiabetes Dateset Analysis using Machine Learning Classification Algorithm\nReferences:\n\nhttps://www.who.int/news-room/fact-sheets/detail/diabetes [About Diabetes and it's symptoms]\nhttps://www.kaggle.com/uciml/pima-indians-diabetes-database [About Data-Set]\n\n""], 'url_profile': 'https://github.com/sayanta28'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['\nNightscout server & client\n\n\n\n\n\nTests:: \nDisclaimer\n(translation from here)\n!> Never use the information from Nightscout, ioBroker or program code to make medical decisions.\n!> This is a project that is created and supported exclusively by volunteers.\nThere is no warranty or guaranteed support of any kind in this project.\nIf you decide to use it, the quality and performance of this project depends on you.\n!> All information and thoughts of the program codes described here are for informational and educational purposes only.\nThe use of program codes of the homepage www.github.com is without any guarantee or support of any kind.\nAny element of this system can fail at any time, making the system unusable!\nThere is no password protected privacy or any security of the tools provided here.\nAny data that you upload will be readable by anyone on the Internet when you share or submit the specific URL (Internet address).\nThis is not a project of the Dexcom company. Nightscout has no affiliation with Dexcom or other companies,\nservices or products mentioned on this website.\nAll product and company names mentioned herein are trademarks of their respective owners or manufacturers.\n!> The translators / authors accept no responsibility for the topicality, correctness and completeness of the information provided in this documentation\nand those of the listed links. Liability claims against the translators / authors,\nwhich relate in particular to physical, material or immaterial damages caused by the\nuse or non-use of the information provided or by the use of incorrect and incomplete information,\nare excluded in principle, provided that the translator / The authors are not proven to be intentionally or grossly negligent.\nAll offers are non-binding. The translators / authors expressly reserve the right to change,\nsupplement or delete parts of the pages or the entire offer without prior notice, or to discontinue publication temporarily or permanently.\n!> Do-It-Yourself.\nDIY project means in our case, that there is no company from which one can buy a finished, functioning system.\nElements of the system are developed and put together by participants of the project.\nThey will be provided to you free of charge.\nDIY means to you that you have to do your part to make the system work for you.\nWe hope that DIY will inspire you as much as we do - so at some point you can make a small contribution to making the system better for everyone.\nDescription\nThis adapter starts the nightscout server from this repository: https://github.com/nightscout/cgm-remote-monitor or uses such a server remotely.\nFor the detailed information read Nightscout documentation here.\nSee requirements.\nIn case you are using local mongoDB the connection string looks like mongodb://localhost:27017/iobroker\nRequirements\nIn server mode\nInstalled and running mongo DB.\nIt could be cloud DB or local DB, that could be installed from here: https://www.mongodb.com/download-center/community.\nUnder Debian the MongoDB could be installed as: apt-get install mongodb or sudo apt-get install mongodb if the user is not root.\nFollowing commands could work for Debian if apt-get install mongodb could not find a package:\nwget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -\necho ""deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main"" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org\nsudo systemctl daemon-reload\nsudo systemctl start mongod\n\nioBroker.iot\nIf you want to write the sugar monitoring values on the way, you need the running and configured IoT adapter.\nYou can write the values into https://nightscout.iobroker.in and the secret from iobroker.iot configuration.\n\nTo push the values into local nightscout with xDrip+ you must enter in Basis URL https://<SEE IoT CONFIG API-secret>@nightscout.iobroker.in/api/v1/.\nLike here:\n\nYou can access your local nightscout server via iot cloud. For that you must open in browser https://nightscout.iobroker.in/ and enter your secret from\nRemember that cloud access and local access require different API secrets!\nIn client mode\nYou need a running nightscout server instance and it\'s api accessible via http or https.\nUse cases\nMonitor value and report via telegram\nCreate a script in javascript adapter:\nfunction report(alarm, val) {    \n    sendTo(\'telegram.0\', {\n        text:                   `Blood glucose ${alarm ? \'alarm\' : \'OK\'}: ${val}mg/ml`,\n        caption:                \'Nightscout\'\n    });  \n}\n\nlet alarm = false;\non(\'nightscout.0.data.mgdl\', obj => {\n    if (obj.state.val > 170 || obj.state.val < 75) {\n        if (!alarm) {\n            alarm = true;\n            report(alarm, obj.state.val);\n        }   \n    } else if (alarm) {\n        alarm = false;\n        report(alarm, obj.state.val);\n    }    \n});\n\nNotice: to get the chart as an image the phantomjs adapter must be installed and running\nSend charts via telegram or email\nYou can write a script:\nsendTo(\'nightscout.0\', \'chart\', {\n    format: \'png\', // optional. Default value \'png\n    max: 180, // optional upper alarm limit. Default value 180 \n    min: 80, // optional lower alarm limit. Default value 80\n    width: 720, // optional image width. Default value 720\n    height: 480, // optional image height. Default value 480\n    start: Date.now() - 3 * 3600000, // optional time start = (now - 3 hours)\n    end: Date.now(), // optional time end\n    title: \'Blood glucose\', // optional\n}, result => {\n    const data = result.result.split(\',\')[1];\n    require(\'fs\').writeFileSync(\'/tmp/chart.png\', Buffer.from(data, \'base64\'));\n    sendTo(\'telegram.0\', {text: \'/tmp/chart.png\', caption: \'Chart\'});\n});\n\nTodo\n\nAllow to configure api-secret for foreign nightscout server\n\nChangelog\n0.11.3 (2020-07-14)\n\n(Volker Richert) update ages even if no treatments available\n\n0.11.2 (2020-04-04)\n\n(bluefox) Added the possibility of the getting the chart of sugar\n\n0.10.4 (2020-03-30)\n\n(bluefox) Allowed node.js 12\n\n0.10.2 (2020-03-06)\n\n(Volker Richert) Change unit of reservoir level from % to absolute value\n\n0.10.1 (2020-03-05)\n\n(Volker Richert) small fix for treatment has no eventType\n\n0.10.0 (2020-02-27)\n\n(Volker Richert) add client only mode again to allow the usage on an external nightscout server\n(Volker Richert) add sage and cage\n\n0.9.10 (2020-02-14)\n\n(Volker Richert) Fixed last Updated value\n\n0.9.6 (2019-09-14)\n\n(bluefox) used newer version of nightscout\n\n0.9.4 (2019-08-10)\n\n(bluefox) initial release\n\nLicense\n                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n                        Preamble\n\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\nA secondary benefit of defending all users\' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n                   TERMS AND CONDITIONS\n\n\nDefinitions.\n\n""This License"" refers to version 3 of the GNU Affero General Public License.\n""Copyright"" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n""The Program"" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as ""you"".  ""Licensees"" and\n""recipients"" may be individuals or organizations.\nTo ""modify"" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a ""modified version"" of the\nearlier work or a work ""based on"" the earlier work.\nA ""covered work"" means either the unmodified Program or a work based\non the Program.\nTo ""propagate"" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\nTo ""convey"" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays ""Appropriate Legal Notices""\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\nThe ""source code"" for a work means the preferred form of the work\nfor making modifications to it.  ""Object code"" means any non-source\nform of a work.\nA ""Standard Interface"" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\nThe ""System Libraries"" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n""Major Component"", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\nThe ""Corresponding Source"" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work\'s\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\nThe Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users\' Legal Rights From Anti-Circumvention Law.\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work\'s\nusers, your or third parties\' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\nYou may convey verbatim copies of the Program\'s source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n""keep intact all notices"".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n""aggregate"" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation\'s users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\nA ""User Product"" is either (1) a ""consumer product"", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, ""normally used"" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n""Installation Information"" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n""Additional permissions"" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\nAll other non-permissive additional terms are considered ""further\nrestrictions"" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\nAn ""entity transaction"" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party\'s predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\nA ""contributor"" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor\'s ""contributor version"".\nA contributor\'s ""essential patent claims"" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, ""control"" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor\'s essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\nIn the following three paragraphs, a ""patent license"" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To ""grant"" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  ""Knowingly relying"" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient\'s use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\nA patent license is ""discriminatory"" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others\' Freedom.\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License ""or any later version"" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy\'s\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe ""copyright"" line and a pointer to where the full notice is found.\n<one line to give the program\'s name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\nIf your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a ""Source"" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a ""copyright disclaimer"" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n'], 'url_profile': 'https://github.com/ioBroker'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MargaridaWeber'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rianag'}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['diabetes\nDiabetes Challenge Website\n'], 'url_profile': 'https://github.com/jwmasters'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['diabetes\nDiabetes Challenge Website\n'], 'url_profile': 'https://github.com/jwmasters'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['70']], 'contributions': '16 contributions\n        in the last year', 'description': ['Hospital Readmission Rates: Analysis of Diabetic Patient Records\nDatabases of clinical data contain valuable but heterogeneous and difficult data in terms of missing values,\nincomplete or inconsistent records, and high dimensionality understood not only by number of features but also\ntheir complexity. Nonetheless, it is important to utilize these huge amounts of data to find new\ninformation/knowledge that is possibly not available anywhere.\nResults\nModel is able to predict readmission rates with 63% test accuracy among age 0-30. Prediction becomes less accurate when model runs across all ages.\nMost misclassifications in emergency cases (<30 days). There are probably various factors contributing to emergency readmission.\n'], 'url_profile': 'https://github.com/joek47'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/collabhealth'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/siddharth0305'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Diabetes\nThis repository contains data on 1999-2008 diabetic patient information for 130+ hospitals across the US.\nPotential outcomes of interest:\n\nDischarge disposition\nReadmission\nEffective Medication\n\n'], 'url_profile': 'https://github.com/chip-ml-wg'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['1']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kevinlucas17'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mariadelapuebla'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['2']], 'contributions': '17 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/mishradeva96'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/jarrahcooke'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Parichatl59363281'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/opendata-2020'}","{'location': 'India', 'stats_list': [], 'contributions': '171 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Abhishek768'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '24 contributions\n        in the last year', 'description': ['By taking intital parameters like blood pressure etc my model can predict whether the person is suffering from diabetes or not.\n'], 'url_profile': 'https://github.com/akshat-01'}","{'location': 'delhi', 'stats_list': [['3', '          followers'], ['4', '          following'], ['0']], 'contributions': '20 contributions\n        in the last year', 'description': ['diabetes\nlogistic reg model\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\ndata = pd.read_csv(\'diabetes2.csv\', header = 0)\nprint(data.head(5))\nprint(data.tail(5))\ndata.info()\ndata.corr()\nY=data[\'Outcome\']\nX=data.drop(\'Outcome\',axis=1)\nX = pd.get_dummies(X, drop_first = True)\nX.head()\nsns.pairplot(data,kind=\'reg\')\nplt.show()\nsns.heatmap(data.corr())\nplt.show()\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7 , test_size=0.3, random_state=10)\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(solver = \'liblinear\', class_weight=""balanced"")\nlog_reg.fit(X_train,y_train)\ny_pred = log_reg.predict(X_test)\nprint(y_pred)\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score, roc_curve, auc, roc_auc_score,confusion_matrix,classification_report\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\nprint(\'Accuracy is  :\' ,accuracy)\nprint(\'Precision is  :\',precision)\nprint(\'Recall is  :\',recall)\nprint(\'Roc Auc is  :\',roc_auc)\nprint(\'Confusion Matrix is  :\\n\',cm)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nplt.plot(false_positive_rate, true_positive_rate)\nplt.plot([0,1],[0,1],\'y--\')\n#plt.xlim([0,1])\n#plt.ylim([0,1])\nplt.title(\'Receiver Operating Characteristic\')\nplt.ylabel(\'True Positive Rate(Sensitivity)\')\nplt.xlabel(\'False Positive Rate(1-Specificity)\')\nplt.show()\nprint(""Area under the curve: "",round(auc(false_positive_rate, true_positive_rate),3))\n'], 'url_profile': 'https://github.com/Pallavi7597'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/thiruvil75'}","{'location': 'NONE', 'stats_list': [], 'contributions': '180 contributions\n        in the last year', 'description': ['Diabetes\nThis project was generated with Angular CLI version 7.2.1.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n'], 'url_profile': 'https://github.com/werlkaw'}","{'location': 'Bengaluru', 'stats_list': [['0', '          followers'], ['3', '          following'], ['0']], 'contributions': '46 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ManjiriMudvedkar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/muhumuza1'}","{'location': 'Milan,Italy', 'stats_list': [['14', '          followers'], ['4', '          following'], ['28']], 'contributions': '95 contributions\n        in the last year', 'description': ['This repo detecated to the analysis at the Pima-Indians diabetes which 768 row and 9 columns at the columns are :\n0- preg = Number of times pregnant\n1- plas = Plasma glucose concentration in an oral glucose tolerance test\n2- pres = Diastolic blood pressure (mm Hg)\n3- skin = Triceps skin fold thickness (mm)\n4- test = 2-Hour serum insulin (mu U/ml)\n5- mass = Body mass index (weight in kg/ (height in m) ^2)\n6- pedi = Diabetes pedigree function\n7- age = Age (years)\n8- class = Class variable (1: tested positive for diabetes, 0: tested negative for diabetes)\nThe implementation done by using Keras and the accuracy and loss results are:\n\n\nAs we could see from this model(the photo of the model is attached bellow) we got 80.95% accuracy which is higher than any results which exists over the Internet:\n\nAfter the definition of the inital model I retrain the last model and I got the improvment at the accuracy which is 81.39% and the loss accuracy is also improved compare to the previous model:\n\n\n\n'], 'url_profile': 'https://github.com/eddieir'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '7 contributions\n        in the last year', 'description': ['ML-diabetes-test\nUsing ML workflow to process and transform data to create a prediction model. This model must predict which people are likely to develop diabetes with 70% or great accuracy,\nThis work is actually a course on Plurarsight to understanding better the machine learning workflow\nI recreated the code on my own to practice and enhance my learning. Here is the link to the original repository: https://github.com/JerryKurata/MachineLearningWithPython\n'], 'url_profile': 'https://github.com/SalahMouslih'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '7 contributions\n        in the last year', 'description': ['ML-diabetes-test\nUsing ML workflow to process and transform data to create a prediction model. This model must predict which people are likely to develop diabetes with 70% or great accuracy,\nThis work is actually a course on Plurarsight to understanding better the machine learning workflow\nI recreated the code on my own to practice and enhance my learning. Here is the link to the original repository: https://github.com/JerryKurata/MachineLearningWithPython\n'], 'url_profile': 'https://github.com/SalahMouslih'}","{'location': 'Mumbai', 'stats_list': [['46', '          followers'], ['6', '          following'], ['21']], 'contributions': '209 contributions\n        in the last year', 'description': ['PIMA-Diabetes-DNN\n'], 'url_profile': 'https://github.com/vidit0210'}","{'location': 'jaipur', 'stats_list': [['0', '          followers'], ['0', '          following'], ['5']], 'contributions': '20 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pushkarjat'}","{'location': 'Wrocław, Poland', 'stats_list': [['10', '          followers'], ['3', '          following'], ['3']], 'contributions': '606 contributions\n        in the last year', 'description': ['BetterMemorySugarBot\n \n\n\n\nNow you will not forget about next infusion set or CGM sensor change! This app remembers for you!\ndo it yourself project\nTable of contents\n\nHow does it work?\nBugs, new features and questions\nInstalation\n\nFork project on Github\nDeploy app to heroku\n\n\nConfiguration\n\nConfigurate atrigger\nConfigurate your notifications\n\nFilling in configuration form\n\n\n\n\nNotifications\nIFTTT Applets tutorials\n\nFacebook Messenger notifications\npush notifications from IFTTT mobile app\nemail\n\n\nLogging in to your website\nTurn your app on\nUpdate my site\n\nHow does it work?\n\nevery day at given time - atrigger.com automatically triggers your website\nBetterMemorySugarBot automatically reads last change data from your nightscout website\nBetterMemorySugarBot calculates your next change date\nBetterMemorySugarBot notifies you via IFTTT or SMS about remaing hours to approaching change. Read more about notifications here\n\nBugs new features or questions\nYou discovered some bug ?? Need some new feature? Have a question? Or maybe, you just need little help during instalation process or further usage ? Feel free to create a new issue\nInstalation\n\nFork project on Github\nDeploy app to heroku\nConfigurate\n\nFork project on Github\n\nCreate Github account or log in if you had already one.\nGo to this project page. (you are probably already here)\nClick Fork button. (picture below)\n\nClick F5 on your keyboard to refresh website.\nYou have your own fork of repository now. Since now, do all instructions there.\n\nCreating Github account\n\nGo to this link\nFill in the form and verify your humanity. Click Create an account button. (example picture below)\n\nChoose free plan (default) and click Continue button. (picture below)\n\nClick skip this step button. (picture below)\n\nVerify your email addres (example picture below)\n\n\nDeploy app to Heroku\n\n\nMake sure you are in YOUR forked repositorium (not in original one). Read about forking here\n\n\nClick\n\n\n\nCreate Heroku account.  New account is highly recomended by me, because of heroku`s free dynos(read more here).\n\nFill in registration form (example picture below)\n\nConfirm your email addres. (example picture below)\n\nSet your password and click SET PASSWORD AND LOG IN button.\nClick CLICK HERE TO PROCEED button.\n\n\n\nFill in configuration form\n\n\nClick Deploy app button.\n\n\nWatch building logs\n\n\nNow you should see view like this:\n\n\n\nYour app is properly deployed. Instalation process is over. Now time for configuration.\n\n\nFilling in configuration form on Heroku\nexample picture on bottom of this tab\nFIELDS:\n\nrequired:\n\nApp name and app_name - first of all, I apologize for duplication, but it is necessary. It`s unique name of your app. It will be used in website URL (https://<app_name>.herokuapp.com). Please make sure, that this two fields are equal.\nheroku_token - your unique token on heroku. Go to this intructions in order to find out how to get it.\nLANGUAGE_CODE - language of your app. Only accepted vaues are en (english)(default) or pl (polish).\nSECRET_KEY - secret password for your app. Keep it in secret!! It will be used for authorization.\n\n\n\nsettable later:\n\nATRIGGER_KEY and ATRIGGER_SECRET - read more in atrigger section\nINFUSION_SET_ALERT_FREQUENCY - amount of time beetwen infusion set changes. [in hours]\nNIGHTSCOUT_LINK - http link to your nightscout website\nSENSOR_ALERT_FREQUENCY - amount of time beetwen CGM sensor changes. [in hours]\n\n\n\n\n\nheroku token\nheroku token is your unique API key.\ngetting instructions:\n\nGo to this link\nScroll down to API Key section (picture below)\nClick Reveal button\nNow you know your heroku token. COPY it and PASTE it to heroku_token field\n\n\nConfiguration\n\nConfigurate atrigger\nConfigurate your notifications\n\natrigger configuration\n\ngo to this link\nFill in registration form and click Create My Account button (if had not already done this). (example picture below)\n\nNow you should see page like below. (if you are not just go to this link)\n\nOn the picture above, I have marked API Key and API Secret. You can copy and paste them into configuration form in instalation process or set it when your app had been already deployed. (see this instructions)\nVerify atrigger with ATriggerVerify.txt\nNow you can go back to configuration instructions.\n\nATRIGGER_KEY and ATRIGGER_SECRET setting\n\nIn order to find out how to get them, go here\nIf you already had them, time for logging in to your website\nNow you should see a page like below. Now you can paste your ATRIGGER_KEY in right field and click CHANGE button.\n\nYou should see a green confirmation like below\n\nNow you can paste your ATRIGGER_SECRET in right field and click CHANGE button. You should see similar green message. (example picture below)\n\nNow your ATRIGGER_KEY and ATRIGGER_SECRET are set. Go back to atrigger configuration.\n\nATriggerVerify.txt\n\nGo to atrigger setup website and download verification file. (picture below)\n\nNow log in to your website\nYou should see page like below. Click gray Upload verification file button.\n\nClick Choose file button and choose your ATriggerVerify.txt from your computer. (picture below)\n\nClick UPLOAD button. (picture below)\n\nYou should see green sucess message like below.\n\n\nLogging in to your website\n\n\nGo to your website (https://<app_name>.herokuapp.com). You should see page like below. Now click IT IS MYWEBSITE buttton.\n\n\n\nNow type your SECRET_KEY (it has been set during instalation process) and click LOG IN button. (example picture below)\n\n\n\nYou are logged in !\n\n\nNotifications\nBetterMemorySugarBot has two ways of notifying. I recomend notifying via IFTTT. It`s completly free, easier to set up and it is flexible. You can choose notifying via facebook messenger, push notifications from mobile app or email. Of course, you can explore this platform and combine BetterMemorySugarBot with other services on your own.Second options is SMS via Twilio API. I have to warn you, that when free credits are run out, you will have to pay for text messages. To use your free credits you do not have to give them any credit card or any other billing info. It is also a little more complicated to configurate than IFTTT. If you had decided, you can go to notifications configuration instruction\nNotifications configuration instruction\n\nLog in to your website and go to menu view.\nChoose your notification time (custom time when notification occures). PLEASE TYPE UTC TIME. Click CHANGE. Default value is 16 (UTC).\n\nGo to notifications center.\n\nChoose your notifications way (you can choose both) and click CHANGE button. (picture below)\n\nNow go to IFTTT configuration or to SMS configuration\n\nIFTTT configuration\n\n\nIf you are here, I assume you had already followed notifications configuration instruction\n\n\nCreate account on IFTTT or if you already done this, you can log in\n\nGo to this link\nYou can sign up with your social media account or just type your email and click Get started button.\nIf you had choose email registration, now type your password and click Sign up button.\n\n\n\nNow go to this link\n\n\nClick Connect button (picture below)\n\n\n\nClick Documentation button (picture below)\n\n\n\nCopy your key. (picture below)\n\n\n\nNow log in to your website and go to notifications center. You should see page like below.\n\n\n\nClick MANAGE IFTTT MAKERS button (picture above)\n\n\nNow paste your IFTTT key and click ADD button. (picture below)\n\n\n\nNow you should see green message. (picture below)\n\n\n\nOf course, you can add more IFTTT accounts and BetterMemorySugarBot will trigger all of them.\n\n\nFinally, time for creating your own notifying applet:\n\nFacebook Messenger notifications\npush notifications from IFTTT mobile app\nemail\nexplore IFTTT and create some other custom applet\n\n\n\nIFTTT Applets tutorials\nFacebook Messenger\n\n\nGo to this link\n\n\nClick +this button. (picture below)\n\n\n\nSearch for webhooks and click it. (picture below)\n\n\n\nClick Receive web request (picture below)\n\n\n\nType\n\nsugarbot-notification\n\nand click Create trigger button. (picture below)\n\n\n\nClick +that button. (picture below)\n\n\n\nSearch for\n\nmessenger\n\nand click Facebook Messenger button. (picture below)\n\n\n\nClick connect button. (picture below)\n\n\n\nLog in to your Facebook account\n\n\n\n\n\nClick Get Started button. (picture below)\n\n\n\nYou should see something like below\n\n\n\n\nConfirm your connection via link in your email box.(example picture below)\n\nNow get back to your applet creation site.\nClick Send message button.  (picture below)\n\nif do not see the same, just click back and repeat 7th step from this instruction\n\n\n\nIn Message text field paste:\n\n{{Value1}}\n\n\nClick Create action button. (picture below)\n\nClick Finish button and now your applet is ready.\nIf you had done all the steps from instalation and configuration instructions, you are ready to turn this app on !!!\n\nPush Notifications\n\n\nGo to this link\n\n\nClick +this button. (picture below)\n\n\n\nSearch for webhooks and click it. (picture below)\n\n\n\nClick Receive web request (picture below)\n\n\n\nType\n\nsugarbot-notification\n\n\n\nclick Create trigger button. (picture below)\n\n\n\nClick +that button. (picture below)\n\n\n\nSearch for\n\nnotifications\n\nand click Notifications button. (picture below)\n\n\n\nClick connect button. (picture below)\n\n\n\nClick Send notifications from the IFTTT app button.  (picture below)\n\n\n\nIn Message field paste:\n\n{{Value1}}\n\n\n\nClick `Create action`` button. (picture below)\n\n\n\nClick Finish button and now your applet is ready.\n\n\nNow you just have to download IFTTT app and log in to your account. IFTTT asks you for your number. You can give it them and they will send you a link or just download it from Google Play or App Store\n\n\nIf you had done all the steps from instalation and configuration instructions, you are ready to turn this app on !!!\n\n\nEmail notifications\n\n\nGo to this link\n\n\nClick +this button. (picture below)\n\n\n\nSearch for webhooks and click it. (picture below)\n\n\n\nClick Receive web request (picture below)\n\n\n\nType\n\nsugarbot-notification\n\n\n\nclick Create trigger button. (picture below)\n\n\n\nClick +that button. (picture below)\n\n\n\nSearch for\n\nemail\n\nand click email button. (picture below)\n\n\n\nClick connect button. (picture below)\n\n\n\nType your email and click Send PIN button.  (picture below)\n\n\n\nGo to your email box and copy your PIN. Paste it in PIN field. (picture below)\n\n\n\nClick Connect button.\n\n\nNow get back to your applet creation site.\n\n\nClick Send me an email button.  (picture below)\n\n\n\nIn Subject field, type your custom message subject e.g. ""BetterMemorySugarBot Notification""\n\n\nIn Body field paste:\n\n{{Value1}}\n\n\n\nClick Create action button. (picture below)\n\n\n\nClick Finish button and now your applet is ready.\n\n\nIf you had done all the steps from instalation and configuration instructions, you are ready to turn this app on !!!\n\n\nSMS configuration\nThis tutorial will be avaible soon. Do you really need it?? Let me know!\nTurn it on\nIf you had done all the steps from instalation and configuration instructions, your app is fully prepared for this final step.\n\nLog in to your website\nClick SEND NOTIFICATION NOW green button. (picture below)\n\nYou should see page similar to below one\n\nCongratulations !!! Your app is working. Your first notifications has been sended ! Now every day at give time, BetterMemorySugarBot will send you a notification with remaing time. If you wants to check remaing time without notification, just click QUIET CHECKUP button in menu.\n\nUpdate my site\nTo check, if your site is up-to-date or not you should go to your forked repo.\n\nNow look for message\n\nThis branch is <some number> commits behind Simon-the-Shark:master.\n(picture below)\n\n\n\nIf there is no message like this, your website is up-to-date\nIf you can see the message, your website needs to be updated. Follow the instructions below.\nClick Compare button\n\nClick switching the base if you see that link. Otherwise, manually set the base fork drop down to your fork, and the head fork to the upstream.\n\nYou should see page similar to below. Click Create new pull request button\n\nType short description and click Create pull request (example picture below)\n\nClick Merge pull request\n\nClick Confirm merge\n\nNow message in your repository should contain ahead word\n\n\n'], 'url_profile': 'https://github.com/simon-the-shark'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['12', '          following'], ['18']], 'contributions': '0 contributions\n        in the last year', 'description': ['Maternal-Diabetes-Analysis\n\nCalculating accuracy with different classification algorithms and classifying the further new input\n\n\nContributor: Sanjay Gupta\n\n'], 'url_profile': 'https://github.com/shubhamgarg9'}","{'location': 'Göteborg', 'stats_list': [['4', '          followers'], ['4', '          following'], ['6']], 'contributions': '9 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/gozmo'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': [""Foundation Compass Template\nThe easiest way to get started with Foundation + Compass.\nRequirements\n\nRuby 1.9+\nNode.js\ncompass: gem install compass\nbower: npm install bower -g\n\nQuickstart\n\nDownload this starter compass project and unzip it\nRun bower install to install the latest version of Foundation\n\nThen when you're working on your project, just run the following command:\nbundle exec compass watch\nUpgrading\nIf you'd like to upgrade to a newer version of Foundation down the road just run:\nbower update\n""], 'url_profile': 'https://github.com/mkatica'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zhangpp2015'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['2']], 'contributions': '9 contributions\n        in the last year', 'description': ['Rails Basic Template\nReference: https://github.com/HK-WDI-November-2014/student-course-everything/blob/master/simple-rails-app.md\nRuby on Rails\n\nGemfile: A file that defines libraries the app is using\nbundle install: Based on the Gemfile, install all the libraries\nYou should run bundle install every time you modify your Gemfile\nA gem is a library for Ruby\nRubyGems.org is a place to find and download Ruby gems\n\nNew Rails App\n\n\nrails new  -GBT\n\n\nbundle install\n\n\nChange the following in the Gemfile\n\n\n\t# use \'4.1.6\' for heroku\ngem \'rails\', \'4.1.6\'\n\t# Use postgresql as the database for Production\ngem \'pg\', group: :production\n\t# Use sqlite3 as the database for Development\ngem \'sqlite3\', group: :development\n\t# Bootstrap\ngem \'bootstrap-sass\', \'~> 3.3.0\'\n\n\nRun bundle install\n\n\nUncomment and change in routes.rb\n\n\n  root \'static_pages#index\'\n\n\nGenerate a controller called static_pages\n\nrails generate controller static_pages\n\n\n\nAdd a view called index.html under static_pages view folder\n\n\nChange application.css to application.css.scss\n\n\nAdd the following line to the end of application.css.scss\n\n\n@import ""bootstrap-sprockets"";\n@import ""bootstrap"";\n\n\nAdd .gitignore File\n\nDeploy to Heroku\n\nIn config/production.rb, change the following\n\nconfig.serve_static_assets = false\n\nto\nconfig.serve_static_assets = true\n\n\nheroku create\nCommit your changes\ngit push heroic master\n\n'], 'url_profile': 'https://github.com/vivientam'}","{'location': 'Berkeley, CA', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '10 contributions\n        in the last year', 'description': ['To see what this project is about and follow its analysis, visit my portfolio.\nA special thanks to Temi Lal and Charles Thorson for their help. This project would not have been possible without them!\n'], 'url_profile': 'https://github.com/Zubair-Marediya'}"
"{'location': 'NONE', 'stats_list': [['13', '          followers'], ['10', '          following'], ['113']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kn45'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/ScienceRevision'}","{'location': 'São Paulo', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/19872909'}","{'location': 'Delhi', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Babloo98'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hhinz'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sammyksam'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/acnofsinger'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/saitejaswinannapaneni'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/harleybomb'}","{'location': 'Netherlands, Lichtenvoorde', 'stats_list': [['2', '          followers'], ['2', '          following'], ['1']], 'contributions': '23 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/JowJoris'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '35 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/payutech'}","{'location': 'Berlin', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '5 contributions\n        in the last year', 'description': ['Diabetes\n\nAbout 422 million people worldwide have diabetes, particularly in low-and middle-income countries. Diabetes is a chronic, metabolic disease characterized by elevated levels of blood glucose (or blood sugar), which leads over time to serious damage to the heart, blood vessels, eyes, kidneys, and nerves. The most common is type 2 diabetes, usually in adults, which occurs when the body becomes resistant to insulin or doesn\'t make enough insulin. In the past three decades the prevalence of type 2 diabetes has risen dramatically [1]\n\nGoals of the exercise\n1- Take the original Diabetes dataset and preprocess it to get the toy dataset that comes with scikit-learn.\n2- Given features like age, sex and blood sugar and lipid levels predict the disease progression of diabetes patients after one year.\nDiabetes dataset\n\nDatabase obtained from Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004): ""Least Angle Regression"", Annals of Statistics (with discussion), 407-499.\nThere are ten baseline variables and six blood serum measurements obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline. Each row corresponds to the values of one patient [2]\n\nVariables:\nage\nsex: 1 (male), 2 (female) \nbmi: body mass index (kg/m2) \nbp: average blood pressure (mm Hg)\nBlood Serum Measurements:\ns1: tc, total cholesterol (mg/dl)\ns2: ldl, Low Density Lipoprotein (LDL) (mg/dl), ""bad cholesterol""\ns3: hdl, High Density Lipoprotein (HDL) (mg/dl), ""good cholesterol""\ns4: tch, ratio total cholesterol / HDL\ns5: ltg, triglycerides (mmol/l)\ns6: glu, glucose (mg/dl)\nResponse:\ny: a quantitative measure of disease progression one year after baseline\n'], 'url_profile': 'https://github.com/macabeigier'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '82 contributions\n        in the last year', 'description': ['Diabetes\nAutomated diagnosis of diabetes.\nReference:\nLoy, James. ""Neural Network Projects with Python"". Packt. Feb, 2019.\n'], 'url_profile': 'https://github.com/Ireneyou33'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '22 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/satya1225'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rick28a'}","{'location': 'Jodhpur', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['Diabetes-prediction\n'], 'url_profile': 'https://github.com/pankaj-iitj'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Hrishikesh11'}","{'location': 'NONE', 'stats_list': [], 'contributions': '22 contributions\n        in the last year', 'description': ['This project was bootstrapped with Create React App.\nAvailable Scripts\nIn the project directory, you can run:\nnpm start\nRuns the app in the development mode.\nOpen http://localhost:3000 to view it in the browser.\nThe page will reload if you make edits.\nYou will also see any lint errors in the console.\nnpm test\nLaunches the test runner in the interactive watch mode.\nSee the section about running tests for more information.\nnpm run build\nBuilds the app for production to the build folder.\nIt correctly bundles React in production mode and optimizes the build for the best performance.\nThe build is minified and the filenames include the hashes.\nYour app is ready to be deployed!\nSee the section about deployment for more information.\nnpm run eject\nNote: this is a one-way operation. Once you eject, you can’t go back!\nIf you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\nYou don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\nLearn More\nYou can learn more in the Create React App documentation.\nTo learn React, check out the React documentation.\nCode Splitting\nThis section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting\nAnalyzing the Bundle Size\nThis section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\nMaking a Progressive Web App\nThis section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nAdvanced Configuration\nThis section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration\nDeployment\nThis section has moved here: https://facebook.github.io/create-react-app/docs/deployment\nnpm run build fails to minify\nThis section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\n'], 'url_profile': 'https://github.com/ShaHist369'}","{'location': 'Nigeria', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '20 contributions\n        in the last year', 'description': ['diabetes\nPrediction\n'], 'url_profile': 'https://github.com/Dandignity'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shenyanpu'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shenyanpu'}","{'location': 'NONE', 'stats_list': [], 'contributions': '18 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/cidi12'}","{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/martinsincu'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '58 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/chaithanyasubramanyam'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['TianChi_Diabetes_prediction\n包含两个赛季的比赛代码\n第一赛季：110/2522；第二赛季：54/110\n'], 'url_profile': 'https://github.com/lemmmon'}","{'location': 'Hyderabad', 'stats_list': [['3', '          followers'], ['1', '          following'], ['13']], 'contributions': '53 contributions\n        in the last year', 'description': [""Health Care-Diabetes\n\nAccurately predict whether or not the patients in the dataset have diabetes.\n\nAbstract:\nNeural networks or connectionist models for parallel processing are not new. However, a resurgence of interest in the past half decade has occurred. In part, this is related to a better understanding of what are now referred to as hidden nodes. These algorithms are considered to be of marked value in pattern recognition problems. Because of that, we tested the ability of an early neural network model, ADAP, to forecast the onset of diabetes mellitus in a high risk population of Pima Indians. The algorithm's performance was analyzed using standard measures for clinical tests: sensitivity, specificity, and a receiver operating characteristic curve. The crossover point for sensitivity and specificity is 0.76. We are currently further examining these methods by comparing the ADAP results with those obtained from logistic regression and linear perceptron models using precisely the same training and forecasting sets. A description of the algorithm is included.\nAttribute Information:\n\nPregnancies (Number of times pregnant)\nGlucose (Plasma glucose concentration a 2 hour in an oral glucose tolerance test)\nBloodPressure (Diastolic blood pressure (mm Hg))\nSkinThickness (Triceps skin fold thickness (mm))\nInsulin (2-Hour serum insulin (mu U/ml))\nBMI (Body mass index (weight in kg/ (height in m) ^2))\nDiabetesPedigreeFunction (Diabetes pedigree function)\nAge (Age (years))\n\n""], 'url_profile': 'https://github.com/kysgattu'}","{'location': 'beijing', 'stats_list': [['4', '          followers'], ['31', '          following'], ['26']], 'contributions': '6 contributions\n        in the last year', 'description': ['<<<<<<< HEAD\n#diabetes_manage\ndiabetes_manage_server\n糖尿病管理系统服务端\n\n\n\n\n\n\n\nc1884651ed7e3cb4d246f51426e026ec3c9c8cce\n\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/ZhouBey'}","{'location': 'Oslo Norway', 'stats_list': [['55', '          followers'], ['7', '          following'], ['25']], 'contributions': '3,363 contributions\n        in the last year', 'description': ['diabetes\nAn Android app to record and display blood sugar measurements and store them in the cloud.\n'], 'url_profile': 'https://github.com/donv'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/jljordan'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/GtheSheep'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/girishrider'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['145']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yahcong'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/jahmunah'}","{'location': '127.0.0.1', 'stats_list': [['29', '          followers'], ['297', '          following'], ['2k']], 'contributions': '441 contributions\n        in the last year', 'description': ['Diabetes\n🍭 Data Mining in Python, R and Weka\n\nAttributes\n\n\nNumber of times pregnant\n\n\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\n\n\nDiastolic blood pressure ( Mm Hg )\n\n\nTriceps skin fold thickness ( Mm )\n\n\n2-Hour serum insulin ( Mu U / Ml )\n\n\nBody mass index ( Weight in kg / ( Height in m ) ^ 2 )\n\n\nDiabetes pedigree function\n\n\nAge ( Years )\n\n\n'], 'url_profile': 'https://github.com/Sphinxs'}","{'location': 'Spain', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '1 contribution\n        in the last year', 'description': ['diabetes\nApp de ayuda en tratamiento de Diabetes Mellitus tipo I, dosificación de insulina y predicción de hipoglucemias.\nEl trabajo se va a realizar sobre las siguientes fases:\n1.- creación en java del sistema de dosificación de insulina.\nActualmente resuelto y probado con Junit para todas las situaciones posibles.\n2.- app de android, para gestionar el histórico de glucosas e insulina.\nFinalizada.\n3.- machine learning para predecir y evitar hipoglucemias.\nFinalizado.\n'], 'url_profile': 'https://github.com/efervescencia'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/vasundhra2002'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Brenes08'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['diabetes\ndiabetes analisis\n'], 'url_profile': 'https://github.com/pucpsophia'}","{'location': 'Travelling across the USA', 'stats_list': [['1', '          follower'], ['2', '          following'], ['11']], 'contributions': '56 contributions\n        in the last year', 'description': ['Notes\n\nInitialize Git repo (yay, we did it)\nXamarin-based data collection app for initial data set, prototype to future user interface\nStoring initial data set: easy way to start is to use a text file (CSV) on server instance, eventually use database instance (need server instance eventually anyway)\nCloud-based app service with Python code (AWS or Azure -- AWS is freer, Azure is better integrated for Xamarin)\n\n'], 'url_profile': 'https://github.com/Spencer-Weston'}","{'location': 'Berkhamsted, United Kingdom', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andydhale'}"
"{'location': 'Berkhamsted, United Kingdom', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andydhale'}","{'location': 'Cairo,Alexandria', 'stats_list': [['9', '          followers'], ['91', '          following'], ['42']], 'contributions': '1 contribution\n        in the last year', 'description': ['Diabetes\nImplementing a model to classify is the patient has a diabetes or now.\n'], 'url_profile': 'https://github.com/MohamedElrefai'}","{'location': 'São Paulo/SP', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/marrsantos'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetescare\n'], 'url_profile': 'https://github.com/galihaji260'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['13', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/acacioow'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Procesos-03'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nunorrei81'}","{'location': 'NONE', 'stats_list': [], 'contributions': '18 contributions\n        in the last year', 'description': ['Diabetes\nMachine learning project on Diabetes\n'], 'url_profile': 'https://github.com/vinay-jadhav'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/lizlix119'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['2']], 'contributions': '8 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/yjianpen'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['2']], 'contributions': '8 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/yjianpen'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['3', '          following'], ['1']], 'contributions': '135 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/selensm'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '64 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/devadarshinim'}","{'location': 'NONE', 'stats_list': [], 'contributions': '37 contributions\n        in the last year', 'description': ['Diabetes\nThe project is to check and verify diabetes and other related signs and its potential for occurrence.the Diabetes is considered one of the diseases and disorders that represent a deficiency in the levels of glucose in the blood In the first step, data was collected from Indian people who may have diabetes or are not\n'], 'url_profile': 'https://github.com/aaaalhajoo1'}","{'location': 'İzmir/Türkiye', 'stats_list': [['1', '          follower'], ['4', '          following'], ['5']], 'contributions': '23 contributions\n        in the last year', 'description': ['diabetes\ndiabetes_modelling\n'], 'url_profile': 'https://github.com/sefakocakalay'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/takeoff20'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['11', '          following'], ['5']], 'contributions': '40 contributions\n        in the last year', 'description': ['Diabetes\nDecisionTreeClassifier\n'], 'url_profile': 'https://github.com/shb8086'}","{'location': 'Syracuse, New York', 'stats_list': [['8', '          followers'], ['25', '          following'], ['44']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rohit13'}","{'location': 'Fran Sancisco', 'stats_list': [['55', '          followers'], ['4', '          following'], ['30']], 'contributions': '12 contributions\n        in the last year', 'description': ['In 2010 I raised $3500 for the Juvenile Diabetes Research Foundation (my sister is sufferer). This is the website I used to help raise funds, see it here: ride.jimwhimpey.com/.\n'], 'url_profile': 'https://github.com/jimwhimpey'}","{'location': 'Seattle, WA', 'stats_list': [['96', '          followers'], ['7', '          following'], ['73']], 'contributions': '211 contributions\n        in the last year', 'description': ['Example MLflow Diabetes project\nMLflow model using ElasticNet (sklearn) and Plots Lasso vs. ElasticNet Descent Paths\nUsage:\n# Via Python\npython train_diabetes.py {alpha} {l1_ratio}\n\n# Execute a MLproject published on GitHub  (ensure you have installed conda)\nmlflow run https://github.com/dennyglee/mlflow-diabetes-example.git -P alpha=0.02 -P l1_ratio=0.05\n\n# Remote execution on Databricks \nmlflow run -m databricks --cluster-spec cluster.json <uri>\n\nUsage Notes:\n\nRemote Execution on Databricks\n\nRefer to Databricks Jobs New Cluster on how to configure cluster.json.\nCurrently this feature requires a new cluster creation\n\n\n\nAttributions:\n\nThis project uses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet\nThe predicted ""progression"" column is a quantitative measure of disease progression one year after baseline\nThis proeject combines the above with the Lasso Descent Path Plot\nOriginal author: Alexandre Gramfort alexandre.gramfort@inria.fr; License: BSD 3 clause\n\n'], 'url_profile': 'https://github.com/dennyglee'}"
"{'location': 'Seattle, WA', 'stats_list': [['96', '          followers'], ['7', '          following'], ['73']], 'contributions': '211 contributions\n        in the last year', 'description': ['Example MLflow Diabetes project\nMLflow model using ElasticNet (sklearn) and Plots Lasso vs. ElasticNet Descent Paths\nUsage:\n# Via Python\npython train_diabetes.py {alpha} {l1_ratio}\n\n# Execute a MLproject published on GitHub  (ensure you have installed conda)\nmlflow run https://github.com/dennyglee/mlflow-diabetes-example.git -P alpha=0.02 -P l1_ratio=0.05\n\n# Remote execution on Databricks \nmlflow run -m databricks --cluster-spec cluster.json <uri>\n\nUsage Notes:\n\nRemote Execution on Databricks\n\nRefer to Databricks Jobs New Cluster on how to configure cluster.json.\nCurrently this feature requires a new cluster creation\n\n\n\nAttributions:\n\nThis project uses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet\nThe predicted ""progression"" column is a quantitative measure of disease progression one year after baseline\nThis proeject combines the above with the Lasso Descent Path Plot\nOriginal author: Alexandre Gramfort alexandre.gramfort@inria.fr; License: BSD 3 clause\n\n'], 'url_profile': 'https://github.com/dennyglee'}","{'location': 'NONE', 'stats_list': [['12', '          followers'], ['35', '          following'], ['21']], 'contributions': '127 contributions\n        in the last year', 'description': ['""# Pima-Indian-Diabetes""\n'], 'url_profile': 'https://github.com/Abhi-Gautam'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['TianChi_Diabetes_prediction\n包含两个赛季的比赛代码\n第一赛季：110/2522；第二赛季：54/110\n'], 'url_profile': 'https://github.com/lemmmon'}","{'location': 'Hyderabad', 'stats_list': [['3', '          followers'], ['1', '          following'], ['13']], 'contributions': '53 contributions\n        in the last year', 'description': [""Health Care-Diabetes\n\nAccurately predict whether or not the patients in the dataset have diabetes.\n\nAbstract:\nNeural networks or connectionist models for parallel processing are not new. However, a resurgence of interest in the past half decade has occurred. In part, this is related to a better understanding of what are now referred to as hidden nodes. These algorithms are considered to be of marked value in pattern recognition problems. Because of that, we tested the ability of an early neural network model, ADAP, to forecast the onset of diabetes mellitus in a high risk population of Pima Indians. The algorithm's performance was analyzed using standard measures for clinical tests: sensitivity, specificity, and a receiver operating characteristic curve. The crossover point for sensitivity and specificity is 0.76. We are currently further examining these methods by comparing the ADAP results with those obtained from logistic regression and linear perceptron models using precisely the same training and forecasting sets. A description of the algorithm is included.\nAttribute Information:\n\nPregnancies (Number of times pregnant)\nGlucose (Plasma glucose concentration a 2 hour in an oral glucose tolerance test)\nBloodPressure (Diastolic blood pressure (mm Hg))\nSkinThickness (Triceps skin fold thickness (mm))\nInsulin (2-Hour serum insulin (mu U/ml))\nBMI (Body mass index (weight in kg/ (height in m) ^2))\nDiabetesPedigreeFunction (Diabetes pedigree function)\nAge (Age (years))\n\n""], 'url_profile': 'https://github.com/kysgattu'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/anandosen'}","{'location': 'Kraków', 'stats_list': [['6', '          followers'], ['0', '          following'], ['9']], 'contributions': '163 contributions\n        in the last year', 'description': ['SimpleDiabetes\nMake sure you initially have\n\n""sugar"" with ID 1\n""insulin"" with ID 2\n""food"" with ID 3\n\nin database to let app work properly.\n'], 'url_profile': 'https://github.com/kocasp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\nAndroid Diabetes app\nThis is a school assignment. Please do not plagiarize or attempt to modify.\n'], 'url_profile': 'https://github.com/coldheart042'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kyleclarsen'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/oliveira0011'}","{'location': 'Madrid', 'stats_list': [['19', '          followers'], ['45', '          following'], ['889']], 'contributions': '15 contributions\n        in the last year', 'description': ['Diabetes\nA Symfony project created on January 11, 2016, 4:21 pm.\n'], 'url_profile': 'https://github.com/izquierdogalan'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/what0919'}","{'location': 'Mumbai', 'stats_list': [['4', '          followers'], ['14', '          following'], ['200']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/saurabh9969'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/HJR1225'}","{'location': 'India', 'stats_list': [['7', '          followers'], ['8', '          following'], ['21']], 'contributions': '93 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/mphirke'}","{'location': 'Leeds, West Riding, UK', 'stats_list': [['29', '          followers'], ['0', '          following'], ['4']], 'contributions': '1,079 contributions\n        in the last year', 'description': ['Diabetes\nThis project was generated with Angular CLI version 6.0.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\ndiabetes\n'], 'url_profile': 'https://github.com/KevinMayfield'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Defame69'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/erikajaskolski'}","{'location': 'Mumbai | India', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/karaningle'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/egilwan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Deadbeat116'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/LeFebvre-Family'}","{'location': 'NONE', 'stats_list': [['9', '          followers'], ['7', '          following'], ['6']], 'contributions': '54 contributions\n        in the last year', 'description': ['DiaTrack\nThis application is for diabetics as they can record their condition every day such as blood pressure, glucose ... etc\nAnd displays all his condition for all days and based on a certain value is displayed in a different color\nIt can also activate the alarm for each drug specific to it and determine the duration of the repetition\nBased on his condition, he is guided by specific advice\nHe can also press a button in the event of an emergency, and a text message will be automatically sent and the call will be sent to a number that will be specified when creating an account the first time\nFeatures\n1- Responsive design.\n2-Room Database\n3- Firebase Auth\n4-AlarmManger&BroadcastReciver\nDependencies:\n     implementation \'com.makeramen:roundedimageview:2.3.0\'\n    implementation \'com.google.android.material:material:1.0.0\'\n    implementation \'com.google.firebase:firebase-analytics:17.2.0\'\n    implementation \'com.google.firebase:firebase-auth:19.0.0\'\n    implementation \'com.google.firebase:firebase-database:19.0.0\'\n    def room_version = ""2.2.0-rc01""\n    implementation ""androidx.room:room-runtime:$room_version""\n    annotationProcessor ""androidx.room:room-compiler:$room_version""\n    implementation \'de.hdodenhof:circleimageview:3.0.1\'\n    implementation \'com.squareup.picasso:picasso:2.71828\'\n    implementation \'com.theartofdev.edmodo:android-image-cropper:2.8.+\'\n\n\n\n\n\n\n\n\n\n\n\n'], 'url_profile': 'https://github.com/amirbahrawy'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['1']], 'contributions': '41 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pj35134'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/charan4551'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '40 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/souravBhandari'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '23 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ch0004wa'}","{'location': 'Chicago, IL', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '16 contributions\n        in the last year', 'description': ['diabetes\nDSC 540 Project\n'], 'url_profile': 'https://github.com/salikhussaini'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['5']], 'contributions': '54 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/aviralgupta25'}","{'location': 'Razole ,East Godavari, Andhra Pradesh', 'stats_list': [], 'contributions': '301 contributions\n        in the last year', 'description': [""Diabetes\nImplementation : Our implementation is mainly divided into five steps:\n\nExploring the Data:\nExploring the Data using jupyter notebook and verify we need to data preprocessing or not.For this dataset there is no need to data preprocessing. Before split into train and test data check outcome balanced or in balance.whether it is in balanced then we used f1_score.\nSplit into train and test:\nIn this we will use train_test_split which is available in `sklearn.model selection'. Where we will be dividing the data into train 80% and test splits of 20%.\nBenchmark model vs other models:\nWe can choose our benchmark model as LogisticRegression. Because it is simple and easy to implement.We will apply a series of classification algorithms like Logistic\nRegression, Decision Trees, Random forests etc.The next step is to find and compare f1_scores of all the models\nagainst the benchmark model.\nApply Grid Search Optimization:\nSince we can observe that the model with f1_score is Random Forests with an f1_score of 97.65%.We can select Random forest for further optimizing it by applying the\nsame algorithm on a different set of parameters to find the one with the best f1_score.\nDisplay results\nHere we will apply many supervised learning algorithms and decide which algorithm is best suited for our dataset. We can apply the grid search on some chosen algorithms to decide the best parameters among many.Finding gridsearchcv optimal f1_score changing parameters to get best optimal f1_score.gridsearchcv (parameters like n_estimator,max_depth..etc)\nto get best f1_score for this best classification model using gridsearchcv. I faced some more extra time taken to find best f1_score to change parameters to this diabetes machine learning project.\n\n\nExternal Libraries used:\n\n\nSciKit Learn\n2.Numpy\n3.Matplotlib\n4.Pandas\n\n\nData:\n1.Diabetes Dataset available from Kaggle here https://www.kaggle.com/johndasilva/diabetes\n2.Also included in directory of repository in original form\n\n""], 'url_profile': 'https://github.com/tejaanuchuri'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bqhien'}"
"{'location': 'Mumbai', 'stats_list': [['1', '          follower'], ['2', '          following'], ['0']], 'contributions': '110 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/tejas198606'}","{'location': 'Satara, Maharashtra', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shritech1404'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['2', '          following'], ['16']], 'contributions': '21 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/saumya18csu194'}","{'location': 'Kathmandu, Nepal', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SaraTuladhar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/mail2rajc'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/Meghanacn2'}","{'location': 'Kraków', 'stats_list': [['6', '          followers'], ['0', '          following'], ['9']], 'contributions': '163 contributions\n        in the last year', 'description': ['SimpleDiabetes\nMake sure you initially have\n\n""sugar"" with ID 1\n""insulin"" with ID 2\n""food"" with ID 3\n\nin database to let app work properly.\n'], 'url_profile': 'https://github.com/kocasp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\nAndroid Diabetes app\nThis is a school assignment. Please do not plagiarize or attempt to modify.\n'], 'url_profile': 'https://github.com/coldheart042'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kyleclarsen'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/oliveira0011'}"
"{'location': 'Texas', 'stats_list': [['3', '          followers'], ['0', '          following'], ['25']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kmoormann'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['3']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Yuridna'}","{'location': 'Bangalore', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['Diabetes_Predictor-Web_App\nThis repository consists of files required to run Diabetes Predictor Machine Learning Web App created with Flask\n'], 'url_profile': 'https://github.com/Saeed-Khan46'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': [""Healthcare utilisation by patients with type 1 and type 2 diabetes\nProject Status: In progress\nProject Description\nDiabetes is a common chronic health condition. Care for patients with diabetes accounts for almost 9% of the NHS budget: £8.8 billion a year. The number of cases of diabetes is rising, due an ageing population. Other risk factors, such as diet and physical activity, also contribute to increased demand for diabetes-related primary and secondary care.\nThere is little evidence on the variation of health care utilisation by patients with diabetes. It is also unclear what  effect this variation might have on health outcomes. This study aims to describe health care utilisation patterns of diabetes patients in England, across primary care and secondary care.\nThe code in this repository is used for data cleaning, to define and describe the study cohort (eg demographic details, clinical characteristics) and to quantify health care utilisation and health outcomes.\nData source\nWe used data from the Clinical Practice Research Datalink (CPRD) linked to Hospital Episode Statistics (HES), ISAC protocol number 19_138.\nData used for this analysis were anonymised in line with the ICO's Anonymisation Code of Practice. The data were accessed in The Health Foundation's Secure Data Environment, which is a secure data analysis facility (accredited for the ISO27001 information security standard, and recognised for the NHS Digital Data Security and Protection Toolkit). No information that could directly identify a patient or other individual was used. Variables labelled 'patid' do not refer to NHS IDs or other identifiable patient data.\nRead code lists used in this analyis can be found in the 'code_lists' folder. The code list used for ethnicity was from Wright et al., 2017, and can be downloaded from the Clinical Codes repository.\nDefinitions and code lists to generate the  Cambridge multimorbidity score v1.0 can be found in the folder 'SAS/CPRDCAM'.\nHow does it work?\nAs the data used for this analysis is not publically available, the code cannot be used to replicate the analysis on this dataset. However, with modifications the code will be able to be used on other patient-level CPRD extracts.\nRequirements\nThese scripts were written in R version (to be added) and RStudio Version 1.1.383.\nThe following R packages (available on CRAN) are needed:\n\ntidyverse\ntidylog\njanitor\nlubridate\ntableone\nggrepel\nMASS\nbbmle\nsurvival\nsurvminer\n\nGetting started\nThe 'R' folder contains:\n\n\nsourced files: 'study_params.R' contains study parameters used by all scripts\n\n\nfile import scripts:\n\n\n\n'00_import_data.R' - imports and combines CPRD and linked data, needs to be run first\n\n\nanalysis scripts (study population, demographic and clinical charateristics, to be used in this order):\n\n\n'01_define_study_population.R' - defines study cohort based on inclusion and exclusion criteria, all other scripts depend on the outputs of it\n'02_diabetes_medication.R' - extracts data on diabetes medication and defines drug types\n'03_diabetes_type.R' - extracts diabetes diagnoses and defines diabetes type, additionally depends on script 02\n'04_BMI.R' - extracts height and weight data, calculates numerical and categorical BMI\n'05_HbA1C.R' - extracts HbA1C measurements and defines HbA1C control\n'06_smoking_status.R' - extracts data on smoking status and defines smoking status\n'07_multimorbidity.R' - calculated Cambridge multimorbidity score, based on the output of the SAS scripts\n'08_recentlydiagnosed.R' - creates binary flag if first diagnosis was within last x years before study start\n'09_descriptives_clinical.R' - creates table with baseline study population descriptives (table 1), based on\nscripts 2-8\n\n\nanalysis and modelling scripts (healthcare utilisation, to be used in this order):\n\n\n'10_GPappointments.R' - cleans and counts GP appointments per patient\n'11_Outpatient.R' - cleans and counts outpatient appointments\n'12_hospital_admissions.R' - cleans and counts emergency hospital admissions\n'13_prescriptions.R'- cleans and counts prescriptions\n'14_AEattendances.R' - cleans and counts unplanned A&E attendances\n'15_descriptives_utilisation.R' -  creates descriptives analyses of healthcare utilisation, based on scripts 10-14\n'16_utilisation_modelling_prep.R' - tests fit of negative binomial distribution, prepares data for negative binomial models, tests different modelling packages\n'17_utilisation_modelling.R' - creates models for primary care consultations, outpatient attendances and A&E attendances for people with T2DM and saves the output\n\n\nanalysis and modelling scripts (health outcomes):\n\n\n'18_outcome_modelling.R' -creates Cox proportional hazard models for the risk of emergency hospital admissions and all-cause mortality for people with T2DM and saves the output\n\nThe 'SAS' folder contains scripts that generates flags for each of the conditions in the Cambridge multimorbidity\nscore v1.0 (to be converted to R in the future):\n\n'01-libnames.sas'- set libnames, file paths and variables\n'02_import.sas' - import raw C{RD data and save as sas files\n'03_CPRDCAM_prep.sas' - import reference data (to be added to repo)\n'04_CPRDCAM_processing.sas' - identify each of the 36 conditions\n'05_CPRDCAM_save.sas' - save output as csv file\n\nUseful references\n\nKhalid JM, Raluy-Callado M, Curtis BH, Boye KS, Maguire A, Reaney M. Rates and risk of hospitalisation among patients with type 2 diabetes: Retrospective cohort study using the UK General Practice Research Database linked to English Hospital Episode Statistics. Int J Clin Pract. 2014;68(1):40–8.\nKontopantelis E, Springate DA, Reeves D, Ashcroft DM, Rutter M, Buchan I, et al. Glucose, blood pressure and cholesterol levels and their relationships to clinical outcomes in type 2 diabetes: a retrospective cohort study. Diabetologia. 2015;58(3):505–18.\nWright AK, Kontopantelis E, Emsley R, Buchan IE, Mamas MA, Sattar N, et al. Cardiovascular Risk and Risk Factor Management in Type 2 Diabetes: A Population-Based Cohort Study Assessing Sex Disparities. Circulation. 2019;44(0):CIRCULATIONAHA.118.039100.\nCassell A, Edwards D, Harshfield A, et al. The epidemiology of multimorbidity in primary care: a retrospective cohort study. Br J Gen Pract. 2018;68(669):e245-e251. doi:10.3399/bjgp18X695465\n\nAuthors\n\nFiona Grimm - @fiona_grimm - fiona-grimm\nMeetali Kakad  -@tali_md\nWill Parry - @DrWillParry - Dr Will Parry\nKathryn Dreyer - @kathrynadreyer - kathdreyer\n\nLicense\nThis project is licensed under the MIT License.\n""], 'url_profile': 'https://github.com/HFAnalyticsLab'}","{'location': 'NONE', 'stats_list': [['45', '          followers'], ['39', '          following'], ['453']], 'contributions': '583 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bpowell'}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['17', '          following'], ['10']], 'contributions': '51 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/neuralfilter'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['5']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes sample\n'], 'url_profile': 'https://github.com/mao377542770'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nAll about diabetes knowledge\n'], 'url_profile': 'https://github.com/Irisdang171'}","{'location': 'Bengaluru', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ravigurram'}","{'location': 'Ukraine', 'stats_list': [['13', '          followers'], ['4', '          following'], ['17']], 'contributions': '6 contributions\n        in the last year', 'description': ['j\ne\n'], 'url_profile': 'https://github.com/aserputko'}"
"{'location': 'Moscow', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/snp600'}","{'location': 'london UK', 'stats_list': [['0', '          followers'], ['4', '          following'], ['13']], 'contributions': '93 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/isamelb'}","{'location': 'Toronto', 'stats_list': [['2', '          followers'], ['8', '          following'], ['1']], 'contributions': '12 contributions\n        in the last year', 'description': ['Diabetes tracking\nI realized that I need to keep track of where things are currently at, but also to be able to look back in time. So here we are.\n'], 'url_profile': 'https://github.com/dafydd61'}","{'location': 'NONE', 'stats_list': [], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/peter-ni'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/baz1080'}","{'location': 'NONE', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/hansley555'}","{'location': 'NONE', 'stats_list': [['17', '          followers'], ['21', '          following'], ['2']], 'contributions': '66 contributions\n        in the last year', 'description': ['Diabetes\nThis project predicts which patients have diabetes based on ten baseline variables:\n\nage\nsex\nbody mass index\naverage blood pressure\nand six blood serum measurements\n\nThe data is from 442 diabetes patients.\nThe target variable is the response of interest, a quantitative measure of disease progression one year after the baseline.\nAuthor:\nSandy Graham\nAcknowledgements\nNote: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times n_samples (i.e. the sum of squares of each column totals 1).\nSource URL: https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\nFor more information see: Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) “Least Angle Regression,” Annals of Statistics (with discussion), 407-499. (https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n'], 'url_profile': 'https://github.com/SandyGavlickGraham'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Poornah'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '22 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/mr-slayer'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/dnolan843'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bqhien'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['2']], 'contributions': '145 contributions\n        in the last year', 'description': ['Diabetes\nThis project was generated with Angular CLI version 8.0.3.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n'], 'url_profile': 'https://github.com/lavransg'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/dsketron'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['0', '          following'], ['0']], 'contributions': '90 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/dinesh-krishnamoorthy'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '7 contributions\n        in the last year', 'description': ['This repo contains python code to analyze the pima indians diabetes data.\nThe datasets can be accesed here [https://www.kaggle.com/kumargh/pimaindiansdiabetescsv] (kaggle.com).\nAt the same location there is also a description of the data.\nThis repo is mainly focussed on feature selection.\n'], 'url_profile': 'https://github.com/foukonana'}","{'location': 'NONE', 'stats_list': [['10', '          followers'], ['96', '          following'], ['9']], 'contributions': '7 contributions\n        in the last year', 'description': ['Diabete\n'], 'url_profile': 'https://github.com/Purple-Manue'}","{'location': 'St charles, MO', 'stats_list': [], 'contributions': '28 contributions\n        in the last year', 'description': ['diabetes\nBuild models and compared different models accuracy\n'], 'url_profile': 'https://github.com/tle1000'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/alisamao09'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Done with Diabetes\nOverview\nPeople who have Type 1 diabetes are born with it. Usually diagnosed at a young age, Type 1 diabetes is a serious issue that requires a lot of oversight (oversight many young patients aren’t willing to give it). An individual with Type 1 diabetes has a pancreas that is no longer producing insulin and therefore the individual must undergo daily injections of insulin. They must also self-monitor their blood glucose levels, their nutrition and exercise. As a result, it can often feel like their disease defines their lives. This app is going to help them develop the habits that are necessary to develop as an individual with Type 1 diabetes as well as remind them that their disease doesn’t define them.\nFor more information.\nMinimum Viable Product\nA 2D ""pet"" game with a carb counter.\nGeneral Features\n\n\nreminding of taking insulin\n\nas part of setting up app have user input when they are expected to take injection\n\n\n\ncarb count\n\nProvide basic carb count examples (or dump the database for them)\nCarb count calculator tool\n\n\n\nblood glucose checking\n\nalso have user input when they should be taking injections as part of setting up app\n\n\n\nreward/incentivise treatment\n\nIn-game “friend” (pet/partner) to help\nGeneral game points, exp, items, gifts, surprises\n\n\n\nreminder to exercise\n\n\nteaching them about diabetes, in general\n\nloading screen = random facts about it\n\nmaybe also have it have inspiration/motivational quotes?\nmaybe famous individuals with the disease?\n\n\n\n\n\nparent kid interaction\n\npossible end purpose: Allow parents to directly support their kids while getting them to interact and understand one another\ncompanion app/alternate access for parents to verify kids’ data\nrewards for successfully taking insulin/etc\nmini-game to compete against each other\n\n\n\nactual game\n\nrpg mechanics?\n\ngold/items/levels\nquests/challenges (include quests involving real live)\n\nexample “injected every day for 50 days” quest for 50xp\n\n\nactual gameplay\n\neither some kind of “fake” combat/movement system where it’s just tapping and random rolls based on stats\nor some kind of real interactive gameplay/minigame\n\npuzzle game\nDots and Boxes\nSnake\ntwin stick (non-violent) shooter\nBasic racing game\ncooking game? (Like poffin thing from pokemon)\n\n\n\n\n\n\n\n\n\nonline community\n\nno chat between the kids (?)\n\ncan use predefined messages, like many kid-friendly games\n\n\n\n\n\nhelp each other - if one is suffering then someone else can reward\n\n\nTrue Reach/After-Having-Everything-Done Features\n\nincluding some way to have kids without diabetes to be involved\n\nto create an inclusive, welcoming atmosphere (and help teach others who don’t have Diabetes what it really is)\n\n\nweb game\n\nArchitecture\nBackend\n\nData to Track\nCarbs\n\nCarbs per meal, per day\nAccess to carb database (as examples)\nInjections (times)\n\n\nBlood samples\n\nExercise\n\nreminder (times and/or what)\n\n\nIndividual information (i.e. rewards won, etc)\n\n\nHow to Track\n\nUser input\nParental authorization\n\n\nReminders/notifications for both platforms\nServer for kid/parent pairing and data transmission/storage\n\nstore calorie data\n\n\n\nLanguages\n\nC#\n\nFrameworks\n\nUnity3D Engine\nDatabase\n\nAPIs/Resources\n\nUSDA National Nutrient Database\nAnalyze how Kids Health handles teaching Diabetes (as well as other sources)\nCloud services\n\nCreative Assets\n\nEnvironment\n\nCharacters\n\n\nGame icons + logos (+ tshirts + PR material, etc)\n\nHardware\n\niOS and Android\nServer for communication and other interactions\nReach goal: web\n\nTentative Timeline\n\n2/23: Spec\n3/23: MVP\n5/23: Beta\n...\n\nRemaining Questions / Tasks\n\nWhat do these kids currently face that is especially difficult? What’s relatively easy for them?\nHow are kids taught currently about all of these important things? (What’s been proven successful and what hasn’t?)\nHow to attract a community of people that will benefit?\n\n'], 'url_profile': 'https://github.com/michiganhackers'}","{'location': 'Nairobi, Kenya', 'stats_list': [['36', '          followers'], ['27', '          following'], ['71']], 'contributions': '344 contributions\n        in the last year', 'description': ['NTW_Diabetes_Model\nDiabetes prediction model using retina images\nMore Documentation to come, Sorry!!\nTest the model by passing it together with an image to the model_test.py file.\nAdditional Model documentation will be doen in a ((2)) weeks.\n'], 'url_profile': 'https://github.com/anthonymiyoro'}"
"{'location': 'Satara, Maharashtra', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shritech1404'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['2', '          following'], ['16']], 'contributions': '21 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/saumya18csu194'}","{'location': 'Kathmandu, Nepal', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SaraTuladhar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/mail2rajc'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/Meghanacn2'}","{'location': 'Uppsala', 'stats_list': [['75', '          followers'], ['13', '          following'], ['125']], 'contributions': '241 contributions\n        in the last year', 'description': [""open-source-diabetes\nAn experiment in making my diabetes open source.\nThis repo acts as the first step in making my diabetes open source. It's very early in it's tracks, and the project scope is still being decided in issue #2.\nBackground\nI'm a developer, designer and tinkerer. In my first year of high school I designed a concept for a blood glucose meter that measured your BG contionusley, a couple of years later (unrelated to my concept) that concept existed (it's called CGM, Contionous Glucose Monitoring). After using a CGM I starting playing with the concept of an open platform where this data could be collected, visualized and made available to researchers/diabetics/doctors etc. Before developing the software I did some research and found the Tidepool project, which is the exact same thing (but further developed) that i envisioned. Hurray!\nThis repo acts as a playground for how to make my personal diabetes data more valuable, by open sourcing it and making it available for visualization/analysis.\nCurrent equipment\n\n✓ FreeStyle Libre blood glucose sensor\n✓ Medtronic Minimed, Paradigm 754 Insulin pump\nMicrosoft Band 2 for general telemtry (See issue #3)\n\nOther projects for reference\n\nhttps://github.com/bewest/insulaudit\nThe Tidepool Project\nFjord Fido Concept\n\n\n""], 'url_profile': 'https://github.com/abergs'}","{'location': 'Pakistan', 'stats_list': [['30', '          followers'], ['5', '          following'], ['0']], 'contributions': '93 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MesumRaza'}","{'location': 'Castle Rock, CO', 'stats_list': [['5', '          followers'], ['6', '          following'], ['14']], 'contributions': '625 contributions\n        in the last year', 'description': ['diabetes\nThis script was written to track measurements collected by diabetics.\nd_monitor.py\n-> Prompts the user to update data files.\n-> Reads information from files and creates graphical representations of the data.\n-> Prompts the user to create a back up of the data files.\nd_update.py\n-> Accelerates the input of routine entries into the data files.\n'], 'url_profile': 'https://github.com/TimothyHelton'}","{'location': 'NONE', 'stats_list': [['38', '          followers'], ['0', '          following'], ['92']], 'contributions': '82 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/iamtodor'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['9', '          following'], ['18']], 'contributions': '933 contributions\n        in the last year', 'description': ['Diabetes\nAplicativo para marcar as Glicemias\n'], 'url_profile': 'https://github.com/lorexp'}"
"{'location': 'Jakarta, Indonesia', 'stats_list': [['26', '          followers'], ['42', '          following'], ['103']], 'contributions': '2 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/eriirawan'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['20', '          following'], ['12']], 'contributions': '6 contributions\n        in the last year', 'description': [""diabetes\n竞赛题目\n中国是世界上糖尿病患者最多的国家，病人达到1.1亿，每年有130万人死于糖尿病及其相关疾病。每年用于糖尿病的医疗费用占中国公共医疗卫生支出的比例超过13%，超过3000亿元。本次大赛旨在通过糖尿病人的临床数据和体检指标来预测人群的糖尿病程度，以血糖浓度为指标。参赛选手需要设计高精度，高效，且解释性强的算法来挑战糖尿病精准预测这一科学难题。\n竞赛数据\n大赛初赛数据共包含两个文件，训练文件d_train.csv和测试文件d_test.csv，每个文件第一行是字段名，之后每一行代表一个个体。文件共包含42个字段，包含数值型、字符型、日期型等众多数据类型，部分字段内容在部分人群中有缺失，其中第一列为个体ID号。训练文件的最后一列为标签列，既需要预测的目标血糖值。\n大赛复赛数据共包含两个文件，训练文件g_train.csv和测试文件g_test.csv，每个文件第一行是字段名，之后每一行代表一个个体，部分字段名已经做脱敏处理。文件共包含85个字段，部分字段内容在部分人群中有缺失，其中第一列为个体ID号。训练文件的最后一列为标签列，既需要预测的是否有糖尿病的类别。\n提交说明\n参赛选手提交一个csv文件，文件共一列，内容为预测的血糖值。\n评估指标\n初赛期间，参赛选手需要提交对每个人的糖尿病血糖预测结果，以小数形式表示，保留小数点后三位。该结果将与个体实际检测到的血糖结果进行对比，以均方误差为评价指标，结果越小越好，均方误差计算公式如下：\n其中m为总人数，y'i 为选手预测的第i个人的血糖值，yi 为第i个人的实际血糖检测值。\n复赛期间，参赛选手需要提交对每个人是否患糖尿病的预测结果，以整数形式表示类别，取值范围0或者1。该结果将与个体实际检测到的糖尿病患病情况进行对比，以错误区分类别的总数为评价指标，结果越小越好。\n决赛期间，选手要求提供特征因子的重要性排序，并提供分析思路与判断依据。该项内容将被用于评定最终名次的因素之一。\n参考文献\nMeta-analysis of the relationship between common type 2 diabetes risk gene variants with gestational diabetes mellitus. Mao H et al. PLoS One.\n2012;7(9):e45882. doi: 10.1371/journal.pone.0045882.\nMeta-analysisof the relationship between common type 2 diabetes risk gene variants withgestational diabetes mellitus. Mao H et al. PLoS One. 2012;7(9):e45882.doi: 10.1371/journal.pone.0045882.\nInherited destiny? Genetics and gestational diabetes mellitus.Watanabe RM.Genome Med. 2011 Mar 25;3(3):18. doi: 10.1186/gm232.\nIdentification of HKDC1 and BACE2as Genes Inf luencing Glycemic Traits During Pregnancy Through Genome-WideAssociation Studies. M. Geoffrey Hayes et al. Diabetes. 62:3282–3291, 2013.\nGenetics, genomics and metabolomics: new insights into maternal metabolism during pregnancy.Lowe WL Jret al. Diabet Med. 2014Mar;31(3):254-62. doi: 10.1111/dme.12352.\nGenetics of GestationalDiabetes Mellitus and Maternal Metabolism. Lowe WL Jret al. Curr Diab Rep. 2016 Feb;16(2):15. doi: 10.1007/s11892-015-0709-z.\nGenetic variants andthe risk of gestational diabetes mellitus: a systematic review. Zhang Cet al. Hum ReprodUpdate. 2013 Jul-Aug;19(4):376-90.doi: 10.1093/humupd/dmt013. Epub 2013 May 19.\nFinding genetic riskfactors of gestational diabetes. Kwak SHet al. GenomicsInform. 2012 Dec;10(4):239-43. doi:10.5808/GI.2012.10.4.239. Epub 2012 Dec 31.\nA genome-wide associationstudy of gestational diabetesmellitus in Korean women. Kwak SHet al. Diabetes. 2012Feb;61(2):531-41. doi: 10.2337/db11-1034. Epub 2012 Jan 10.\n""], 'url_profile': 'https://github.com/yiyixhjiang'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AlejandraMartinezMas'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['2', '          following'], ['1']], 'contributions': '1 contribution\n        in the last year', 'description': ['DIabetes\n'], 'url_profile': 'https://github.com/sheetalgolecha15'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['0', '          following'], ['0']], 'contributions': '25 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/greatsman'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['9']], 'contributions': '12 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AashishMehtoliya'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mikuchar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/paragDC'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '0 contributions\n        in the last year', 'description': [""\nSherpa - A Boilerplate WordPress Theme\nA SCSS-flavored, Twitter Bootstrap-based boilerplate for developing WordPress themes.\nCurrent Version\n3.7.2 - Annapurna\nIntroduction\nWhen I think of a Sherpa, I think of the locals that help visitors get to the top of Mount Everest.  They carry the gear up most of the way, helping the expedition out tremendously.\nThis is the concept of Sherpa.  It's a boilerplate theme that is built to help you get to the top faster.  Its origins are from the work of building many websites, realizing that the same pieces were being used over and over, and starting to collect the pieces into one boilerplate theme.\nDescription\nSherpa is based on Twitter Bootstrap with some FontAwesome thrown in.  It's also set up to use Typekit and Google Fonts, though we can use other font services if requested.\nSherpa was originally intended to be used with Codekit, an excellent compiler for SCSS as well as Javascript, among other things.  If you are not going to be using Codekit, you will need to adjust inc/scripts.php to reflect the fact that you are not using /js/min/main-min.js.\nWe are now including a gulp file but it's not perfect.  Please use at your own risk.  If you know how to make it better, please send a pull request!\nSherpa is not meant to be an end-all; it is meant to be a start-all.\nComing Up\nWe are working on adding maps to Sherpa in a big way for our 4.0 release.  If you want to see how it's working then check out the dev-map branch.\nIncluded Frameworks, Libraries, and Dependencies\n\nTwitter Bootstrap (SCSS) - v3.3.7\nWP Bootstrap Navwalker v2.0.4\nFontAwesome - v4.7.0\njQuery - v2.2.4\nColorbox - v1.6.4\nbxSlider - v4.1.12\nMobileDetect.js - v1.3.3\nTGM Plugin Activation - 2.6.1\nAdvanced Custom Fields - v4.4.11\n\nDocumentation\nWe have started working on documentation in the wiki area, though it is very much still under construction.\nChangelog\nSee what we've been doing - it's listed in the changelog\n""], 'url_profile': 'https://github.com/jarrodagims'}","{'location': 'Singapore ', 'stats_list': [['12', '          followers'], ['54', '          following'], ['69']], 'contributions': '54 contributions\n        in the last year', 'description': ['Diabetes data analysis \nData source is from kaggle.\nSetup and Run\nThis project is based on python 3.6.6, run the following command and set up the environment\npip3 install -r requirements.txt\npython main.go\n'], 'url_profile': 'https://github.com/andyafter'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '0 contributions\n        in the last year', 'description': [""\nSherpa - A Boilerplate WordPress Theme\nA SCSS-flavored, Twitter Bootstrap-based boilerplate for developing WordPress themes.\nCurrent Version\n3.7.2 - Annapurna\nIntroduction\nWhen I think of a Sherpa, I think of the locals that help visitors get to the top of Mount Everest.  They carry the gear up most of the way, helping the expedition out tremendously.\nThis is the concept of Sherpa.  It's a boilerplate theme that is built to help you get to the top faster.  Its origins are from the work of building many websites, realizing that the same pieces were being used over and over, and starting to collect the pieces into one boilerplate theme.\nDescription\nSherpa is based on Twitter Bootstrap with some FontAwesome thrown in.  It's also set up to use Typekit and Google Fonts, though we can use other font services if requested.\nSherpa was originally intended to be used with Codekit, an excellent compiler for SCSS as well as Javascript, among other things.  If you are not going to be using Codekit, you will need to adjust inc/scripts.php to reflect the fact that you are not using /js/min/main-min.js.\nWe are now including a gulp file but it's not perfect.  Please use at your own risk.  If you know how to make it better, please send a pull request!\nSherpa is not meant to be an end-all; it is meant to be a start-all.\nComing Up\nWe are working on adding maps to Sherpa in a big way for our 4.0 release.  If you want to see how it's working then check out the dev-map branch.\nIncluded Frameworks, Libraries, and Dependencies\n\nTwitter Bootstrap (SCSS) - v3.3.7\nWP Bootstrap Navwalker v2.0.4\nFontAwesome - v4.7.0\njQuery - v2.2.4\nColorbox - v1.6.4\nbxSlider - v4.1.12\nMobileDetect.js - v1.3.3\nTGM Plugin Activation - 2.6.1\nAdvanced Custom Fields - v4.4.11\n\nDocumentation\nWe have started working on documentation in the wiki area, though it is very much still under construction.\nChangelog\nSee what we've been doing - it's listed in the changelog\n""], 'url_profile': 'https://github.com/jarrodagims'}","{'location': 'Singapore ', 'stats_list': [['12', '          followers'], ['54', '          following'], ['69']], 'contributions': '54 contributions\n        in the last year', 'description': ['Diabetes data analysis \nData source is from kaggle.\nSetup and Run\nThis project is based on python 3.6.6, run the following command and set up the environment\npip3 install -r requirements.txt\npython main.go\n'], 'url_profile': 'https://github.com/andyafter'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AudiS51980dodd1980'}","{'location': 'NONE', 'stats_list': [], 'contributions': '11 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/drsdkketyk'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['3', '          following'], ['1']], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yc-98'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/thendiandri'}","{'location': 'NONE', 'stats_list': [], 'contributions': '26 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Sizzlo'}","{'location': 'HYDERABAD', 'stats_list': [], 'contributions': '14 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ranaayush455'}","{'location': 'NONE', 'stats_list': [], 'contributions': '44 contributions\n        in the last year', 'description': [""Diabetes\nInternational Diabetes Federation refers that 463 million people living with diabetes. There are couple of questions coming up to my mind. First of all how serious is this disease? What symptoms should pay my attention? Finally, the most important question -  what is the probability that I can suffer from diabetes?\nI decided to do some research on this and present key figures which I found on International Diabetes Federation site:\n\nTo answer to those questions we should explain what diabetes is. The situation when the pancreas is no longer able to make insulin leads to chronic disease which is called diabetes.\nThere is another question what is the insulin and why it is so important for us? We know that to do some stuff we need energy, which is produce by our cells. How does it work? The cells need our help, they need some ‘fuel’. Ok, so let’s do this, we can eat some glucose-rich food. What is next? How our cells absorb it from food which we ate? This is the role for insulin, a hormone made by the pancreas, letting glucose from the food we eat pass from the bloodstream into the cells in the body. If we are not able to produce insulin, the glucose levels in the blood raised leading to hyperglycaemia. In the long term high glucose levels can lead to irreparable damage to our body.\nThere are three types of diabetes:\n\nType 1 - body produces very little or no insulin, occurs most frequently in children and adolescents\nType 2 - body does not make good use of the insulin that it produces, more common in adults\nGestational diabetes (GDM) - consists of high blood glucose during pregnancy and is associated with complications to both mother and child.\n\nSome of the signs and symptoms of type 1 and type 2 diabetes are:\n\nIncreased thirst.\nFrequent urination.\nExtreme hunger.\nUnexplained weight loss.\nPresence of ketones in the urine (ketones are a byproduct of the breakdown of muscle and fat that happens when there's not enough      available insulin)\nFatigue.\nIrritability.\n\nTo answer the last question and calculate  the probability that I can suffer from diabetes, I decided to use Machine Learning to help me predict Diabetes.\nThe goal of the project is to choose the ML model with the best accuracy in predicting diabetes disease and use it in user application which help people decide if they are in risk group.\nIt is Machine Learning classification problem with two clasess: diabetes and non-diabetes. To summarize the performance of a classification algorithm I will be using accuracy, confusion matrix, recall, precision, F-measure.\n""], 'url_profile': 'https://github.com/zuz201'}","{'location': 'Banglore,India', 'stats_list': [['0', '          followers'], ['11', '          following'], ['17']], 'contributions': '193 contributions\n        in the last year', 'description': ['Diabetes\npredicting if a patient has diabetes or not using the dataset from kaggle called ""Pima Indians Diabetes Database"".\n'], 'url_profile': 'https://github.com/Siddhesh19991'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/suhaibmuneeb'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['diabetes\nGlucose readings\n'], 'url_profile': 'https://github.com/lg1954'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['6']], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\nThis is a supervised trained model written in pyhton which can be used to predict about the diabetes in a person by using his body parametes.\nParameters being used for prediction\n1.Num_preg\n2.Glucose_conc\n3.Diastolic_bp\n4.Thickness\n5.Insulin\tbmi\n6.Diab_pred\n7.Age\n8.Skin\nAccuracy\n71% (varies as per trained data and test data)\nData Set\nPima Indians Diabetes Database\n( 70% used for training\n30% used for testing )\nAlgorithm used:-\nNaive Bayes Classifier\nMethods used for improving Algorithm\n1.Random Forest\n2.Logistic Regression\nAcknowledgments\n\nThis project was made by following Pluralsight course on Understanding Machine Learning with python by Jeery Kurata.\n\n'], 'url_profile': 'https://github.com/Asgardian8740'}","{'location': 'Medellin, Colombia', 'stats_list': [['9', '          followers'], ['7', '          following'], ['0']], 'contributions': '1,030 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/juanscr'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/rogerioBSB2020'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Nitesh-the-genius'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['NONE'], 'url_profile': 'https://github.com/100GirlsOfCodeNRV'}","{'location': 'Montréal, Canada', 'stats_list': [['8', '          followers'], ['24', '          following'], ['8']], 'contributions': '192 contributions\n        in the last year', 'description': ['\nREADME¶ ↑\nThis README would normally document whatever steps are necessary to get the application up and running.\nThings you may want to cover:\n\nRuby version\n\nSystem dependencies\n\nConfiguration\n\nDatabase creation\n\nDatabase initialization\n\nHow to run the test suite\n\nServices (job queues, cache servers, search engines, etc.)\n\nDeployment instructions\n\n…\n\nPlease feel free to use a different markup language if you do not plan to run rake doc:app.\n'], 'url_profile': 'https://github.com/amronrails'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Diabetes: LSE DV\n\n\n draft basic scatter chart\n\n\n body weight entry box\n\n\n blood sugar entry box\n\n\n hypoglycaemia bars\n\n\n axes should be centered at base, not metformin\n\n\n check stats calc\n\n\n initial screen needs labels\n\n\n mouseovers in single-axis modes\n\n\n axis labels in x-only overlaps  ALTERNATING SIDES WILL HANDLE THIS\n\n\n show opposite axis while dragging?  NOT DO TO\n\n\n order circle alphabetically\n\n\n put metformin in center of circle\n\n\n match circle to screen size\n\n\n sliders for stat entry\n\n\n axis animates out?\n\n\n move axis to current? or move dots?\n\n\n push extent out 10% both axes\n\n\n hide collapsed labels\n\n\n move metformin & others in 2 stages, temporary signpost labels?\n\n\n rule lines for each drug\n\n\n move rule lines for each mouseover?\n\n\n put axis labels on alternating sides, per tick\n\n\n duplicate axis labels in small black\n\n\n weight only config needs to rotate other labels too\n\n\n selected drugs should be in a javascript variable, not a CSS class\n\n\n visualise risk of hypoglycaemia:  as spill of days across screen, some of\nwhich get caught in the drug circles?\n\n\n circle of drugs in non-focus mode?\n\n\n make selected drug pulse?\n\n\n shoot rule text in from side  NOT TO DO\n\n\nDeploy on github pages\n\nThe github pages branch contains two commits.  The first contains changes to\n.gitignore and index.html to load from a bundled build.js file.  The second\nholds the actual build.js file, and is recreated at each deploy.\n\nDeploy recipe (rebases the last commit on gh-pages):\ngit checkout gh-pages\ngit rebase master\njspm bundle-sfx index.js --minify\ngit add build.js*\ngit commit --amend --no-edit\ngit push github gh-pages --force\n'], 'url_profile': 'https://github.com/dv-lse'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['90']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\nAnalysis of diabetes propensity on Pima Indians\n'], 'url_profile': 'https://github.com/sdonoso23'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hari-chandra'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '37 contributions\n        in the last year', 'description': ['yuting\n'], 'url_profile': 'https://github.com/3unyt'}","{'location': 'KITALE', 'stats_list': [['2', '          followers'], ['7', '          following'], ['38']], 'contributions': '37 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Android Mangement System\n'], 'url_profile': 'https://github.com/obadiahkorir'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nylesley'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/MaoLi2018'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/richarddevis047'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['6', '          following'], ['4']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/salwashaker'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/fahimtaibahmed'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Adithya-ScriptKindle'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['Diabetesasdsaddsfa\n'], 'url_profile': 'https://github.com/GrupoIV'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['Diabetes Prediction using Machine Learning.\nTable of Content\n\nOverview\nMotivation\nDemo\nLearning Objective\nTechnical Aspect\nTechnologies Used\nTo Do\nInstallation\nRun\nBug / Feature Request\nTeam\nLicense\nCredits\n\nOverview\nIn this project, the objective is to predict whether the person has Diabetes or not based on various features like Number of Pregnancies, Insulin Level, Age, BMI.The data set that has used in this project has taken from the kaggle . ""This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage."" and used a simple random forest classifier.\n\nMotivation\nThe motivation was to experiment  with end to end machine learning project and get some idea about deployment platform like Heroku and offcourse this ""\nDiabetes is an increasingly growing health issue due to our inactive lifestyle. If it is detected in time then through proper medical treatment, adverse effects can be prevented. To help in early detection, technology can be used very reliably and efficiently. Using machine learning we have built a predictive model that can predict whether the patient is diabetes positive or not.""\nDemo\nVisit this link for live demo\nLearning Objective\nThe following points were the objective of the project . If you are looking for all the following points in this repo then i have not covered all in this repo. I\'m working on blog about this mini project and I\'ll update the link of blog about all the points in details later . (The main intention was to create an end-to-end ML project.)\n\nData gathering\nDescriptive Analysis\nData Visualizations\nData Preprocessing\nData Modelling\nModel Evaluation\nModel Deployment\n\nTechnical Aspect\n\nTraining a machine learning model using scikit-learn.\nBuilding and hosting a Flask web app on Heroku.\nA user has to put details like Number of Pregnancies, Insulin Level, Age, BMI etc .\nOnce it get all the fields information , the prediction is displyed on a new page .\n\nTechnologies Used\n\n\n\n\n\n\nInstallation\n\nClone this repository and unzip it.\nAfter downloading, cd into the flask directory.\nBegin a new virtual environment with Python 3 and activate it.\nInstall the required packages using pip install -r requirements.txt\n\nRUN\n\nExecute the command: python app.py\n\nBug Feature Request\nIf you find a bug (the website couldn\'t handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result.\nIf you\'d like to request a new function, feel free to do so by opening an issue here. Please include sample queries and their corresponding results.\nTeam\nSarvesh Kumar Sharma\nLICENSE\n-GNU GENERAL PUBLIC LICENSE Version 3\n'], 'url_profile': 'https://github.com/rampraveenreddy1'}","{'location': 'NONE', 'stats_list': [], 'contributions': '75 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/phanindhargolla'}","{'location': 'NONE', 'stats_list': [['67', '          followers'], ['4', '          following'], ['27']], 'contributions': '14 contributions\n        in the last year', 'description': ['Diabetes\nTeam work of Data Mining Course 2018\nProcess data\nmkdir data\n(download data and unzip it into ""./data"")\npython Diabetes/dataprocess/process.py\nThe result file(.pkl) will be saved to ""./data/filename.pkl"".\nThe result is feature embedding with numpy type and shape (data_num, feature_size).\n'], 'url_profile': 'https://github.com/heyLinsir'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '100 contributions\n        in the last year', 'description': ['reactstrap-basic-sidebar\nStatic collapsible Bootstrap sidebar menu\nInstalation\nnpm install\n\nrun\nnpm start\n\nPreview\n\nOriginal HTML/Bootstrap template\nbootstrapious.com\n'], 'url_profile': 'https://github.com/svaghari'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andrericsouza'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '26 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kushalkushi96'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/suhaibmuneeb'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['diabetes\nGlucose readings\n'], 'url_profile': 'https://github.com/lg1954'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['6']], 'contributions': '6 contributions\n        in the last year', 'description': ['Diabetes\nThis is a supervised trained model written in pyhton which can be used to predict about the diabetes in a person by using his body parametes.\nParameters being used for prediction\n1.Num_preg\n2.Glucose_conc\n3.Diastolic_bp\n4.Thickness\n5.Insulin\tbmi\n6.Diab_pred\n7.Age\n8.Skin\nAccuracy\n71% (varies as per trained data and test data)\nData Set\nPima Indians Diabetes Database\n( 70% used for training\n30% used for testing )\nAlgorithm used:-\nNaive Bayes Classifier\nMethods used for improving Algorithm\n1.Random Forest\n2.Logistic Regression\nAcknowledgments\n\nThis project was made by following Pluralsight course on Understanding Machine Learning with python by Jeery Kurata.\n\n'], 'url_profile': 'https://github.com/Asgardian8740'}","{'location': 'Medellin, Colombia', 'stats_list': [['9', '          followers'], ['7', '          following'], ['0']], 'contributions': '1,030 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/juanscr'}"
"{'location': 'Arinos', 'stats_list': [['4', '          followers'], ['13', '          following'], ['0']], 'contributions': '218 contributions\n        in the last year', 'description': [""Python: Getting Started\nA barebones Django app, which can easily be deployed to Heroku.\nThis application supports the Getting Started with Python on Heroku article - check it out.\nRunning Locally\nMake sure you have Python 3.7 installed locally. To push to Heroku, you'll need to install the Heroku CLI, as well as Postgres.\n$ git clone https://github.com/heroku/python-getting-started.git\n$ cd python-getting-started\n\n$ python3 -m venv getting-started\n$ pip install -r requirements.txt\n\n$ createdb python_getting_started\n\n$ python manage.py migrate\n$ python manage.py collectstatic\n\n$ heroku local\nYour app should now be running on localhost:5000.\nDeploying to Heroku\n$ heroku create\n$ git push heroku main\n\n$ heroku run python manage.py migrate\n$ heroku open\nor\n\nDocumentation\nFor more information about using Python on Heroku, see these Dev Center articles:\n\nPython on Heroku\n\n""], 'url_profile': 'https://github.com/ademirrocha'}","{'location': 'glasgow', 'stats_list': [['10', '          followers'], ['16', '          following'], ['11']], 'contributions': '60 contributions\n        in the last year', 'description': [""interest areas\n\n\nmyDiabetesIQ\n\n\nuse of Recurrent Neural Networks / Convolutional Neural Networks to extract information from time-series data in diabetes to allow regression / classification analysis. Applications include prediction of mortality from HbA1c time series analysis, prediction of inpatient outcomes from pre-admission data and individualised virtual n=1 drug trials to allow optimum drug selection\n\n\nuse of unsupervised ML algorithms to identify incorrected entered data within large scale diabetes datasets\n\n\ncontinuous risk stratification of inpatients with diabetes\n\n\nassociation of inpatient glucose metrics and long term outcomes\n\n\nmechanisms linking glucose and CV risk in diabetes\n\n\nproblem drug use and diabetes\n\n\ncystic fibrosis related diabetes\n\n\nmultiscale variability in glucose metrics and association with outcome\n\n\nefficacy of structured intervention on glycaemic endpoints\n\n\npeople\nCurrent\n\nDr Chris Sainsbury Consultant Diabetes & Endocrinology. @csainsbury. x@y where x=c.sainsbury & y=nhs.net\nDr Greg Jones Consultant Diabetes & Endocrinology. Honorary Associate Professor, @gregcjones. x@y where x=g.jones3 & y=nhs.net\nDr Debbie Morrison GPSI Diabetes. Honorary Clinical Lecturer\n\nPrevious\n\nDr Sean Harbison Clinical Development Fellow\n\noutput\n2020\nNon‐steroidal anti‐inflammatory drugs and susceptibility to COVID‐19. Joht Singh Chandan, Dawit Tefra Zemedikun, Rasiah Thayakaran, Nathan Byne, Samir Dhalla, Dionisio Acosta‐Mena, Krishna M Gokhale, Tom Thomas, Christopher Sainsbury, Anuradhaa Subramanian, Jennifer Cooper, Astha Anand, Kelvin O Okoth, Jingya Wang, Nicola J Adderley, Thomas Taverner, Alastair K Denniston, Janet Lord, G. Neil Thomas, Christopher D Buckley, Karim Raza, Neeraj Bhala, Krishnarajah Nirantharakumar, Shamil Haroon. Arthritis and Rheumatology. 2020. https://doi.org/10.1002/art.41593\n2020\nSodium‐glucose‐co‐transporter‐2 inhibitors and susceptibility to COVID‐19: a population‐based retrospective cohort study. C Sainsbury, J Wang, K Gokhale, D Acosta‐Mena, S Dhalla, N Byne, J Singh Chandan, A Anand, J Cooper, K Okoth, A Subramanian, M Bangash, T Taverner, W Hanif, S Ghosh, P Narendran, KK Cheng, Tom Marshall, G Gkoutos, K Toulis PhD, GN Thomas PhD, A Tahrani, N Adderley, S Haroon, K Nirantharakumar. Diabetes Obesity and Metabolism 2020.  https://doi.org/10.1111/dom.14203\nweb\n2020\nRenin-angiotensin system inhibitors and susceptibility to COVID-19 in patients with hypertension: a propensity score-matched cohort study in primary care. S Haroon,A Subramanian,J Cooper, A Anand, K Gokhale, N Byne, S Dhalla, D Acosta-Mena, T Taverner, K Okoth, J Wang, J Singh Chandan, C Sainsbury, D Zemedikun, GN Thomas,D Parekh, T Marshall, E Sapey, NJ Adderley, K Nirantharakumar. Preprint. Medrxiv. 18 Sep 2020.\nweb\n2020\nRemodelling diabetes services and emerging innovation. DJ Wake, FW Gibb, P Kar, B Kennon, DC Klonoff, G Rayman, MK Rutter, C Sainsbury, RK Semple. European Journal of Endocrinology 183 (2). web\n2020\nObstructive Sleep Apnea, a Risk Factor for Cardiovascular and Microvascular Disease in Patients With Type 2 Diabetes: Findings From a Population-Based Cohort StudyNJ Adderley, A Subramanian, K Toulis, K Gokhale, T Taverner, W Hanif, S Haroon, GN Thomas, C Sainsbury, AA Tahrani, K Nirantharakumar. Diabetes Care | https://doi.org/10.2337/dc19-2116 | web\n2019\nThyroid replacement therapy, thyroid stimulating hormone concentrations, and long term health outcomes in patients with hypothyroidism: longitudinal study. R Thayakaran, NJ Adderley, C Sainsbury, B Torlinska, K Boelaert, D Šumilo, M Price, GN Thomas, KA Toulis, K Nirantharakumar. BMJ 2019; 366 | https://doi.org/10.1136/bmj.l4892 | web\n2018\nAdmission Glucose Number (AGN): A point of admission score associated with inpatient glucose variability, hypoglycaemia and mortality. J McKechnie, R Maitland, CAR Sainsbury, GC Jones. Journal of Diabetes Science and Technology | https://doi.org/10.1177/1932296818800722 | web\n2018\nIdentifying modifiable risk factors to reduce inpatient hypoglycaemia. PD Murray, BA McKee, CAR Sainsbury, GC Jones. Clinical Pharmacist, August 2018, Vol 10, No 8, online | DOI: 10.1211/CP.2018.20205227 | web\n2018\nStructured education using Dose Adjustment for Normal Eating (DAFNE) reduces long term HbA1c and HbA1c variability. GS Walker, JY Chen, H Hopkinson, CAR Sainsbury, GC Jones. 2018. Diabetic Medicine | web\n2018\nVisit-to-visit HbA1c variability and systolic blood pressure (SBP) variability are significantly and additively associated with mortality in people with type 1 diabetes: an observational study. Stuart S. Wightman, Christopher A.R. Sainsbury, Gregory C. Jones. Diabetes Obesity & Metabolism | web\n2017\nHbA1c variability is associated with increased mortality and earlier hospital admission in people with type 1 diabetes. Graham S Walker, Scott G Cunningham, Christopher A.R. Sainsbury, Gregory C. Jones. Diabetic Medicine | web\n2017\nA practical review of C-Peptide Testing in Diabetes. E Leighton, C Sainsbury, G Jones. Diabetes Ther | web | .pdf\n2017\nHypoglycemia and Clinical Outcomes in Hospitalized Patients With Diabetes: Does Association With Adverse Outcomes Remain When Number of Glucose Tests Performed Is Accounted For?\nGC Jones, JG Timmons, SG Cunningham, SJ Cleland, CAR Sainsbury\nJournal of Diabetes Science and Technology | web | .pdf\n2016\nA Practical Approach to Glucose Abnormalities in Cystic Fibrosis\nGC Jones, CAR Sainsbury | web | .pdf\n2016\nIs all hypoglycaemia treated as equal? An observational study of how the type of diabetes and treatment prescribed prior to admission influences quality of treatment of inpatient hypoglycaemia\nGC Jones, J Khan, CAR Sainsbury | web | .pdf\n2016\nStroke and diabetes: a dangerous liaison\nSL Macpherson, C Sainsbury, J Dawson, GC Jones | web | .pdf\n2016\nLiving with asthma and chronic obstructive airways disease: using technology to support self-management – an overview. D Morrison,FS Mair, L Yardley, S Kirby, M Thomas | web\n2016\nPatterns and impact of hypoglycemia, hyperglycemia, and glucose variability on inpatients with insulin-treated cystic fibrosis-related diabetes\nGC Jones, ZM Chong, J Gilmour, C Matheson, G MacGregor, C Sainsbury | web | .pdf\n2016\nMetformin increases cortisol regeneration by 11βHSD1 in obese men with and without type 2 diabetes mellitus\nAnderson AJ, Andrew R, Homer NZ, Jones GC, Smith K, Livingstone DE, Walker BR, Stimson RH | web\n2016\nInpatient glycemic variability and long-term mortality in hospitalized patients with type 2 diabetes\nJG Timmons, SG Cunningham, CAR Sainsbury, GC Jones\nJournal of Diabetes and its Complications\n2016\nEvaluation of a combination of SGLT2 inhibitor and GLP-1 receptor agonist treatment in type 2 diabetes\nHayden J, Huang F, McConnell LMJ, Sainsbury CAR, Jones GC\nDiabetes & Primary Care 18 (3): 135-138\n2016\nManaging multimorbidity in primary care in patients with chronic respiratory conditions. npj Primary Care Respiratory Medicine, 26, 16043.\nD Morrison,K Agur, S Mercer, A Eiras, JI González-Montalvo, K Gruffydd-Jones\nPrimary Care Respiratory Medicine, 26, 16043\n2016\nExperience of and predictors of response to dapagliflozin in a real-life cohort of people with type 2 diabetes\nHuang F, Hayden J, McConnell LMJ, Sainsbury CAR, Jones GC\nJournal of Diabetes Nursing 20 (7): 238-243\n2015\nCapillary blood glucose monitoring, inpatient hypoglycaemia and quality of care\nGC Jones, CG Perry, A Monaghan, B Kennon, CAR Sainsbury\nBritish Journal of Diabetes 15 (1), 24-26 (pdf)\n2015\nComment on ‘A justification for less restrictive guidelines on the use of metformin in stable chronic renal failure’\nGC Jones, CAR Sainsbury\nDiabetic Medicine 32 (2), 287-287\n2015\nLongitudinal Blood Pressure Control, Long-Term Mortality, and Predictive Utility of Serum Liver Enzymes and Bilirubin in Hypertensive Patients. L McCallum, J Panniyammakal, CE Hastie, J Hewitt, R Patel, GC Jones, S Muir, M Walters, N Sattar, AF Dominiczak, S Padmanabhan\nHypertension 66 (1), 37-43 (pdf)\n2014\nTrends in recorded capillary blood glucose and hypoglycaemia in hospitalised patients with diabetes\nGC Jones, H Casey, CG Perry, B Kennon, CAR Sainsbury. Diabetes research and clinical practice 104 (1), 79-83\n2014\nDipeptidyl peptidase 4 inhibitors in routine clinical practice: experiences from a Scottish teaching hospital\nAL Brown, CR Sainsbury, C Fenelon, AB Mullen, GC Jones\nBritish Journal of Diabetes 14 (4), 134-137 (pdf)\n2014\nNumerical simulation of blood flow and pressure drop in the pulmonary arterial and venous circulation\nMU Qureshi, GDA Vaughan, C Sainsbury, M Johnson, CS Peskin, MS Olufsen, NA Hill\nBiomechanics and modeling in mechanobiology 13 (5), 1137-1154 \n2013\nLong-Term and Ultra Long–Term Blood Pressure Variability During Follow-Up and Mortality in 14 522 Patients With Hypertension. CE Hastie, P Jeemon, H Coleman, L McCallum, R Patel, J Dawson, W Sloan, P Meredith, GC Jones, S Muir, M Walters, AF Dominiczak, D Morrison, GT McInnes, S Padmanabhan\nHypertension 62 (4), 698-705 (pdf)\n2012\nRarefaction and blood pressure in systemic and pulmonary arteries\nMS Olufsen, NA Hill, GDA Vaughan, C Sainsbury, M Johnson\nJournal of fluid mechanics 705, 280-305\n2012\nHematocrit Predicts Long-Term Mortality in a Nonlinear and Sex-Specific Manner in Hypertensive AdultsNovelty and Significance\nL Paul, P Jeemon, J Hewitt, L McCallum, P Higgins, M Walters, J McClure, ...\nHypertension 60 (3), 631-638\n2012\nBoerhaave's syndrome and diabetic ketoacidosis\nK Mitchell, G Jones\nPractical Diabetes 29 (7), 268-268\n2011\nAMP-activated protein kinase is activated in adipose tissue of individuals with type 2 diabetes treated with metformin: a randomised glycaemia-controlled crossover study\nJG Boyle, PJ Logan, GC Jones, M Small, N Sattar, JMC Connell, ...\nDiabetologia 54 (7), 1799-1809\npresentations\n2019\nPredicting mortality in both diabetes and open source clinical datasets from free text entries using machine learning (natural language processing) | Diabetes Technology Society. November 2019. Washington DC | .pdf\n2019\npersonalising risk prediction in diabetes using machine learning bridging the gap between RCT and RCD | Royal College of Physicians and Surgeons (Glasgow) | May 2019. Glasgow | .pdf\n2019\ndata landscape presentation. march 2019 | .pdf\n2018\nMachine learning approaches to (i) predicting response to therapy in diabetes, (ii) data-driven diabetes subtype classification and (iii) synthetic data generation. Dundee. 210618 | .pdf | .ppt\n2018\nMachine-Learning (neural network) driven algorithmic classification of Type 1 or Type 2 diabetes at the time of presentation significantly outperforms experienced clinician classification. DUK. London | .pdf\n2018\nParallel time-series analysis of HbA1c and Systolic BP using a recurrent neural network (RNN) stratifies for 1-year mortality in Type 2 Diabetes independent of age and parameter variability. DUK. London | .pdf\n2018\nParallel time-series analysis of HbA1c, Systolic Blood Pressure and BMI using Recurrent Neural Networks stratifies for 1-year mortality in T2DM, independent of age and parameter variability. ATTD. Vienna | .pdf\n2018\nTime-series analysis of HbA1c using Recurrent Neural Networks stratifies for 1-year mortality in Type 1 and Type 2 Diabetes, independent of age and variability. ATTD. Vienna | .pdf\n2017\nMyDiabetesIQ. machine learning for decision support & outcome prediction in diabetes. Automated Clinical Epidemiology Studies workshop, University of Birmingham. 141217 | .pdf\n2017\nDiabetes and opiate replacement therapy (ORT). A retrospective cohort study of health care usage and clinical outcomes. H Druce, D Morrison, C Sainsbury, R Lowrie, C Ritchie, GC Jones. Oral Presentation. RCGP, London | .pdf\n2017\nGlucose dynamics and mortality in RRT patients: an initial report. Matthew A Rutherford, Gregory C Jones, Alan G Jardine, Patrick B Mark, Peter C Thomson, Christopher AR Sainsbury. Oral Presentation, SRA, Dunblane 2017 | .pdf\n2017\nDiabetes and opiate replacement therapy (ORT). A retrospective cohort study of healthcare usage and clinical outcomes. H Druce, R Lowrie, C Ritchie, D Morrison, CAR Sainsbury, GC Jones. Poster Presentation, EASD, Lisbon 2017 | .pdf\n2017\nSerum chloride predicts mortality risk in type 2 diabetes – analysis of 91,159 patients from the West of Scotland. Linsay McCallum, Christopher A Sainsbury, Gregory C Jones, Sandosh Padmanabhan. AHA, 2017 | .pdf\n2017\nSerum chloride is a mortality risk predictor in type 2 diabetes mellitus – analysis of 91,159 patients in the West of Scotland. Linsay McCallum, Christopher A Sainsbury Gregory C Jones, Sandosh Padmanabhan. Oral Presentation, ESH, Milan 2017 | .pdf\n2017\nNon-stimulated c-peptide is independently associated with requirement at 1 year for insulin therapy in paitnets with diabetes. A retrospective cohort study of 872 patients. EL Leighton, K Smith, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation, ECE, Lisbon 2017 | .pdf\n2017\nAdmission Glucose Number (AGN): a novel score associated with adverse outcomes in patients admitted with Type 2 Diabetes. CAR Sainsbury, SG Cunningham, R Srivastava, GC Jones. Poster Presentation. Diabetes UK, Manchester 2017 | .pdf\n2017\nGlucose variability and risk of hypoglycaemia amongst inpatients with type 2 diabetes and its relationship to drug class exposure. KM Fairhurst, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation. Diabetes UK, Manchester 2017 | .pdf\n2017\nDoes pre-admission HbA1c predict inpatient glucose characteristics and outcomes in patients with diabetes? M Talla, SG Cunningham, CAR Sainsbury, GC Jones. Poster Presentation. Diabetes UK. Manchester March 2017 | [.pdf](./glucose_ai_presentation_files/Diab UK HbA1c Inpatient Glucose Characteristics.pdf)\n2017\nAdmission Glucose Number (AGN): A novel point-of-admission score associated with prolonged admission duration, and with glycaemic characteristics in patients with Type 1 Diabetes. R Maitland, R Srivastava, S Cunningham, G Jones, C Sainsbury. 2017. ATTD, Paris. Oral Presentation | .pdf\n2016\nDoes type of diabetes, and treatment prescribed prior to admission influence quality of treatment of inpatient hypoglycaemia?\nCAR Sainsbury, J Khan, GC Jones. British Endocrine Society. Oral Presentation | .pdf\n""], 'url_profile': 'https://github.com/csainsbury'}","{'location': 'Bangalore, India', 'stats_list': [['4', '          followers'], ['0', '          following'], ['14']], 'contributions': '61 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ashishvz'}","{'location': 'Wales, UK', 'stats_list': [['826', '          followers'], ['2', '          following'], ['57']], 'contributions': '2,525 contributions\n        in the last year', 'description': ['dboard\nA dashboard for Type 1 Diabetes.\nVisualize your historical blood glucose levels in a calendar-like view, with weekly summaries\nof a few key metrics.\nGenerated from data stored in Nightscout.\n\nUsage\nInstall Python dependencies:\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\nExport data from Nightscout\nmongoexport -h <host> -d <database> -u <user> -p <password> \\\n  -c entries \\\n  --fields type,sgv,mbg,date,dateString \\\n  --type csv \\\n  -o /tmp/entries.csv\nPublish locally\n./dboard.py --bg_lower 3.9 --bg_upper 8 /tmp/entries.csv out\npython3 -m http.server 8000\nThen open http://localhost:8000/out in a browser.\nAlternatively, publish to Google Cloud to keep a permanent record\nexport GOOGLE_APPLICATION_CREDENTIALS=... # see https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\n./dboard.py --bg_lower 3.9 --bg_upper 8 /tmp/entries.csv gs://<bucket>\nThen open https://storage.googleapis.com/<bucket>/index.html in a browser.\nHow it works\nThere is a single web page, index.html, that has a small amount of JavaScript (no libraries)\nto load data from a metadata file, index.json and display the images for each day.\nHere\'s a snippet of index.json:\n[\n    {\n        ""week_start"": ""03/09/2018"",\n        ""plots"": [\n            ""2018/09/03/plot.png"",\n            ""2018/09/04/plot.png"",\n            ""2018/09/05/plot.png"",\n            ""2018/09/06/plot.png"",\n            ""2018/09/07/plot.png"",\n            ""2018/09/08/plot.png"",\n            ""2018/09/09/plot.png""\n        ],\n        ""range_low"": 3.9,\n        ""range_high"": 8.0,\n        ""tir"": ""81.0%"",\n        ""average_bg"": ""6.7"",\n        ""est_hba1c"": ""40.1""\n    },\n    {\n        ""week_start"": ""10/09/2018"",\n        ""plots"": [\n            ""2018/09/10/plot.png"",\n            ""2018/09/11/plot.png"",\n            ""2018/09/12/plot.png"",\n            ""2018/09/13/plot.png"",\n            ""2018/09/14/plot.png"",\n            ""2018/09/15/plot.png"",\n            ""2018/09/16/plot.png""\n        ],\n        ""range_low"": 3.9,\n        ""range_high"": 8.0,\n        ""tir"": ""80.3%"",\n        ""average_bg"": ""6.2"",\n        ""est_hba1c"": ""37.0""\n    }\n]\nThe plots element contains paths to the images for each day in the week.\nThe JSON and PNG files are generated by the dboard Python package.\nThe traces library is used to interpolate\nBG values to every minute; this ensures that accurate statistics can be produced from the data\n(Time In Range, Average, Estimated HbA1c). For plotting,  Matplotlib is used to render\neach daily plot.\nReports\nThere are a few other reports (daily carbs, insulin) that are produced separately.\nmkdir -p reports\n./dboard.py /tmp/treatments.csv reports\nThen look in the reports directory.\nTesting\npytest\nCoverage\npip install pytest-cov\npytest --cov-report html --cov=dboard\nopen htmlcov/index.html\n'], 'url_profile': 'https://github.com/tomwhite'}","{'location': 'Canada, Edmonton,AB', 'stats_list': [['1', '          follower'], ['6', '          following'], ['15']], 'contributions': '9 contributions\n        in the last year', 'description': ['Pima-Indians-Diabetes-Database\nThe Pima indian diabetes dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict if a patient has diabetesor not  based on diagnostic measurements of eight simple features:\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nyou can download the dataset from this link https://www.kaggle.com/uciml/pima-indians-diabetes-database\n'], 'url_profile': 'https://github.com/khatabi-abderrahim'}","{'location': 'London, UK', 'stats_list': [['63', '          followers'], ['43', '          following'], ['72']], 'contributions': '1,500 contributions\n        in the last year', 'description': ['drac\nfilthy script to automatically ingest some lovely blood data from my Accu-Chek Mobile and Aviva Expert\n\ninstall\nnpm install\nconfig\nmost of this is hard wired for my set-up atm\nrun\nnpm link\n\ndrac upload /path/to/file.csv - Upload from a CSV (Accu-Chek Mobile and Aviva Expert Support)\ndrac download - Downloads from Accu-Chek Mobile directly\ndrac info - Loverly bit of information\n\ncredits\ntidepool data schema: https://github.com/tidepool-org/data-model/blob/master/device-data/types/smbg.md\nascii vamp: http://www.chris.com/ascii/joan/www.geocities.com/SoHo/7373/haloween.html\n'], 'url_profile': 'https://github.com/zaccolley'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['11']], 'contributions': '292 contributions\n        in the last year', 'description': ['WebUtil\nSimple diabetes syntax\n\n'], 'url_profile': 'https://github.com/inextor'}","{'location': 'San Diego, CA', 'stats_list': [['3', '          followers'], ['2', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Mitchell-McLaughlin'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yuriivalentinovich'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/HaniAdyllia'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yuriivalentinovich'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/HaniAdyllia'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['Diabetes\nN-Hanes Diabetic Study Machine Learning\n'], 'url_profile': 'https://github.com/SciDAR-UNCG'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['3', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': [""Diabetes\n'Diabetes' text analysis of US news coverage by network affiliates\nDownload text from news transcripts from major US networks\nCalculate the number of times diabetes is mentioned\nQuestion: has there been a rise in diabetes coverage commensureate with the rise in prevalence\n""], 'url_profile': 'https://github.com/DanielleReed'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['diabetes\nFreestyle Libre Readings\n'], 'url_profile': 'https://github.com/skdiabetes'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['diabetes\nWhole-exome study of obesity and diabetes in Russian population\n'], 'url_profile': 'https://github.com/bioinf'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['9', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/StephenAllison'}","{'location': 'Paris, France', 'stats_list': [['29', '          followers'], ['6', '          following'], ['8']], 'contributions': '14 contributions\n        in the last year', 'description': ['Demo XebiCon\'18\nUse case Diabetes Progression\nUses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet.\nThe predicted ""progression"" column is a quantitative measure of disease progression one year after baseline\nExplicative variables (10):\n\nAge\nSex\nBody Mass Index (BMI)\nBlood pressure (BP)\nSerum measurements\n\nReferences\nscikit-learn datasets\nLeast Angle Regression - Efron, Hastie, Johnstone, Tibshirani, 2003\n'], 'url_profile': 'https://github.com/giulbia'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/thienlong95z'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/evelyn-nomayo'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/RoyaSarwar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MadhumithaSridaran'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/Eccentrickk'}","{'location': 'NONE', 'stats_list': [], 'contributions': '31 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sweller42'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Danielmwash'}","{'location': 'Berlin', 'stats_list': [['1', '          follower'], ['4', '          following'], ['36']], 'contributions': '369 contributions\n        in the last year', 'description': ['EDA and Modelling for diabetes dataset\n'], 'url_profile': 'https://github.com/tu-artem'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['\n\n600SeriesAndroidUploader\nThis is an Android app to upload data from a MiniMed 600 Series insulin pump to a Nightscout website via a Contour Next Link 2.4 blood glucose meter\nClick here for more info\nClick here for Releases\nClick here for the Main Project Page\n\n\n\n\n\nDevelopment - getting started\n\n\nInstall Android Studio\n\n\nInstall Fabric Plugin, enable Crashlytics, this should create app/fabric.properties with your fabric apiSecret and also add a fabric key to app/src/AndroidManifest.xml\n<meta-data\n    android:name=""io.fabric.ApiKey""\n    android:value=""YOUR-FABRIC-KEY"" />\n\n(Please take care not to commit this change.\nIf you\'re considering sharing your changes, or are using a non-private\nGithub repository, you should remove this change in\napp/src/AndroidManifest.xml and copy the value as apiKey property\nto file app/fabric.properties instead. See\nhttps://docs.fabric.io/android/fabric/settings/working-in-teams.html#android-projects\nfor more information.)\n\n\nCreate a BugFender account, create app/bugfender.properties and populate with\napiKey=YOUR-BUGFENDER-KEY\n\n\n\nSet up a virtual device in the AVD manager or connect an Android phone with USB debugging enabled.\n\n\nUse one of the run configurations, eg installDebug\n\n\nApp Credits\n\nBased on https://github.com/arbox0/MedtronicUploader (though the internals are completely changed for the 600 Series pumps)\nUses the android-service-example by Philipp C. Heckel\nProject initiated by @pazaan\n\n\nDisclaimer And Warning\n\n\nAll information, thought, and code described here is intended for informational and educational purposes only. Nightscout currently makes no attempt at HIPAA privacy compliance. Use Nightscout at your own risk, and do not use the information or code to make medical decisions.\n\n\nUse of code from github.com is without warranty or formal support of any kind. Please review this repository\'s LICENSE for details.\n\n\nAll product and company names, trademarks, servicemarks, registered trademarks, and registered servicemarks are the property of their respective holders. Their use is for information purposes and does not imply any affiliation with or endorsement by them.\n\n\nPlease note - this project has no association with and is not endorsed by:\n\n\nMedtronic\n\n\nAscensia Diabetes Care (formerly Bayer Diabetes Care)\n\n\n'], 'url_profile': 'https://github.com/Theadoro'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/TashMay30'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/amruthamukundan'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['11', '          following'], ['0']], 'contributions': '43 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/manish0521'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['2']], 'contributions': '10 contributions\n        in the last year', 'description': ['Heroku-Demo\n'], 'url_profile': 'https://github.com/dheerajnuka'}","{'location': 'NONE', 'stats_list': [], 'contributions': '17 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/manoj9717162716'}","{'location': 'NONE', 'stats_list': [], 'contributions': '50 contributions\n        in the last year', 'description': ['Análise de Dados sobre Diabetes no Brasil - VIGITEL\nData Analysis on Diabetes in Brazil - VIGITEL\nDescrição Resumida do Projeto\nNeste projeto, foi avaliada a prevalência de diabetes no Brasil utilizando a base de dados Vigitel (Sistema de Vigilância de Fatores de Risco e Proteção para Doenças Crônicas por Inquérito Telefônico) de 2007 a 2019. Também foram avaliados fatores que poderiam ser associados a esta doença e realizadas análises estatísticas utilizando a linguagem de programação Python 3 e as bibliotecas Matplotlib, Pandas, Seaborn e Ploty, a fim de compreender melhor a diabetes ao longo do tempo, no Brasil. Pode-se inferir que a prevalência de diabetes: aumentou 6% em 13 anos; apresentou tendência de redução entre os que recebem o auxílio bolsa família do Governo Federal, diferentemente da tendência global; e é maior entre mulheres em relação aos homens. Além disso, o fator consumo de refrigerantes teve diminuição na prevalência.\nAbstract in English\nIn this project, the prevalence of diabetes in Brazil was evaluated using Vigitel (Surveillance System for Risk and Protective Factors for Chronic Diseases by Phone Survey) as database from 2007 to 2019. Factors that could be associated with this disease were also evaluated and statistical analyses were performed using Python 3.0 as programming language and Matplotlib, Pandas, Seaborn and Ploty as libraries, in purpose of understand diabetes in Brazil over time. It can be inferred that the prevalence of diabetes: increased by 6% in 13 years; there was a downward trend among those who has been receiving “bolsa familia” (a financial social assistance) from the Federal Government, unlike the global trend; and it is higher among women compared to men. In addition, the prevalence of soft drink consumption decreased.\nEquipe\n\nHeitor Soares Mattosinho      - 262947\nTainá Peres Passos            - 194220\nStephania Slis Raggio Santos  - 137608\nJoão Guilherme Ito Cypriano   - 061701\n\nMídias\nVídeo do Projeto\n\nO vídeo pode ser acessado aqui\nApresentação do projeto\nAcesso à apresentação\nIntrodução e Motivação\nO diabetes é uma doença crônica que pode ser caracterizada por altos níveis de açúcar no sangue no caso do diabetes mellitus ou por falta ou não absorção de ADH (hormônio antidiurético) no caso do diabetes insipidus, que é uma doença mais rara. O diabetes afeta várias funções corporais, por isso é  uma doença metabólica (Figueiredo, 2009;Maraschin, 2010; WHO, 2020).\nO diabete mellitus (DM) se divide em tipo um, dois, gestacional e relacionada a outros fatores. O DM tipo 1 ocorre porque as células beta do pâncreas produzem pouca ou nenhuma insulina por razões imunológicas ou por fatores idiopáticos (desconhecidos), acometendo normalmente crianças, mas também pode acometer outras faixas etárias e o tratamento consiste na administração de insulina. Há também o tipo 2, que acomete 90% do total de casos de diabetes, dentre eles há mais adultos acima de 30 anos, ele é relacionado a fatores genéticos e não há necessidade de uso de insulina, sendo recomendada a alteração de hábitos alimentares e perda de peso antes da doença ser instalada,  após a sua instalação é receitado o uso de hipoglicemiantes orais. Também há o DM gestacional e outros tipos de diabetes relacionados a doenças no pâncreas, infecções, síndromes genéticas, defeitos genéticos ou uso de drogas (Maraschin, 2010).\nCerca de 422 milhões de pessoas ao redor do mundo são acometidas por diabetes, sendo a maioria em países em desenvolvimento, e as mortes atribuídas a esta doença chegam a 1,6 milhões por ano.2 No Brasil, em 2016 as DCNT(doenças crônicas não transmissíveis) foram responsáveis por 74% das mortes, sendo 5% provenientes de diabetes (Brasil, 2020).\nTodas essas informações motivam o estudo dos dados de amostras da população brasileira disponíveis no Vigitel (Sistema de Vigilância de Fatores de Risco e Proteção para Doenças Crônicas por Inquérito Telefônico) de 2007 a 2019 para verificar a prevalência desta doença e se há alguma relação com outros fatores também disponíveis nos dados do Vigitel (Brasil, 2020).\nPortanto este projeto está dividido nas seguintes seções:\n├── Introdução e Motivação        <- apresentação do projeto\n│   ├── O VIGITEL                   \n│   ├── Perguntas da Pesquisa     <- O que pretendemos responder.\n│   ├── Objetivos do projeto      <- Nossa proposta de abordagem.\n│   └── Referências               <- Referência bibliográfica;\n│\n├── Recursos e Métodos               \n│   ├── Base de Dados             <- Acesso às bases VIGITEL.\n│   └── Ferramentas               <- Ferramentas e bibliotecas de programação utilizadas.\n│\n├── Metodologia                      \n│   ├── Detalhamento do Projeto   <- Como o projeto foi estruturado.\n│   └── Evolução do Projeto       <- Possíveis problemas enfrentados e possíveis mudanças de trajetória.\n│\n├── Resultados e Discussão        <- Conclusões finais do trabalho e as lições aprendidas.\n│\n├── Conclusões                    <- Este trabalho respondeu nossa pergunta?\n│\n└── Trabalhos Futuros             <- O que pretendemos evoluir para este projeto.\n\nO VIGITEL\nO Vigitel foi implantado em 2006 em todas as capitais dos 26 estados brasileiros e no Distrito Federal, é um sistema de vigilância de fatores de risco e proteção para doenças crônicas por inquérito telefônico com pessoas maiores de 18 anos, nas 26 capitais brasileiras e no Distrito Federal, realizado pelo Ministério da Saúde.\nO monitoramento dos fatores de risco, da frequência e distribuição das principais doenças crônicas fornece informações importantes para o planejamento de políticas públicas de promoção e prevenção que reduzam a ocorrência e a gravidade destas doenças, melhorando assim a saúde da população, além de descrever a evolução anual desses indicadores.\nEntre as doenças incluem-se diabetes, obesidade, câncer, doenças respiratórias crônicas e cardiovasculares como hipertensão arterial, que têm grande impacto na qualidade de vida da população.\nSeu processo de amostragem é iniciado com o sorteio de números telefônicos fixos das capitais do país a partir dos cadastros de empresas telefônicas.\nPrimeiramente são sorteadas 5 mil linhas telefônicas por cidade, de forma sistemática e estratificada por CEP. A seguir, as linhas passam por um segundo sorteio e são divididas em réplicas de 200 linhas, sendo que cada réplica reproduz a mesma proporção de linhas por CEP do cadastro original.\nA próxima etapa é identificar, entre as linhas sorteadas, aquelas que são elegíveis, excluindo empresas, linhas que não existem ou se encontram fora de serviço e linhas que não atendem a seis tentativas de chamadas feitas em dias e horários variados.\nAs consideradas elegíveis passam por uma segunda etapa da amostragem do inquérito, com sorteio de um dos adultos moradores no domicílio para responder o questionário.\nPerguntas de Pesquisa\nCom base nos dados do Vigitel de 2007 a 2019 qual a prevalência de diabetes em amostras da população brasileira e quais fatores podem estar associados a esta doença?\nObjetivos do projeto\nAvaliar a prevalência de diabetes em brasileiros e verificar se há associação com outros fatores da pesquisa Vigitel de 2007 a 2019.\nRecursos e Métodos\nBases de Dados\nFoi utilizado, exclusivamente, os dados disponíveis no portal do Departamento de Informação e Análise Epidemiológica da base de dados do VIGITEL. Foram utilizados os dados anos de 2007 a 2019, para avaliar a evolução da prevalência de diabetes ao longo dos anos da pesquisa e suas associações. O uso das tabelas foi orientado pelo Dicionário disponibilizado no VIGITEL.\n\n\n\nBase de Dados\nEndereço na Web\nResumo descritivo e uso\n\n\n\n\nBase 01\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2007-peso-rake.xls\nPesquisa VIGITEL do ano de 2007\n\n\nBase 02\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2008-peso-rake.xls\nPesquisa VIGITEL do ano de 2008\n\n\nBase 03\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2009-peso-rake.xls\nPesquisa VIGITEL do ano de 2009\n\n\nBase 04\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2010-peso-rake.xls\nPesquisa VIGITEL do ano de 2010\n\n\nBase 05\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2011-peso-rake.xls\nPesquisa VIGITEL do ano de 2011\n\n\nBase 06\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2012-peso-rake.xls\nPesquisa VIGITEL do ano de 2012\n\n\nBase 07\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2013-peso-rake.xls\nPesquisa VIGITEL do ano de 2014\n\n\nBase 10\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2014-peso-rake.xls\nPesquisa VIGITEL do ano de 2014\n\n\nBase 11\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2015-peso-rake.xls\nPesquisa VIGITEL do ano de 2015\n\n\nBase 12\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2016-peso-rake.xls\nPesquisa VIGITEL do ano de 2016\n\n\nBase 13\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2017-peso-rake.xls\nPesquisa VIGITEL do ano de 2017\n\n\nBase 14\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2018-peso-rake.xls\nPesquisa VIGITEL do ano de 2018\n\n\nBase 15\nhttp://svs.aids.gov.br/download/Vigitel/Vigitel-2019-peso-rake.xls\nPesquisa VIGITEL do ano de 2019\n\n\n\nFerramentas\n\n\n\nFerramenta\nEndereço na Web\nResumo descritivo e uso\n\n\n\n\nPython 3\nhttps://www.python.org/\n<Descrição da Ferramenta 1 e para que ela foi usada no projeto.>\n\n\nPandas\nhttps://pandas.pydata.org/\n<Descrição da Ferramenta 2 e para que ela foi usada no projeto.>\n\n\nPlotly\nhttps://plotly.com/\n<Descrição da Ferramenta 2 e para que ela foi usada no projeto.>\n\n\nMatplotlib\nhttps://matplotlib.org/\n<Descrição da Ferramenta 2 e para que ela foi usada no projeto.>\n\n\nSeaborn\nhttps://seaborn.pydata.org/\n<Descrição da Ferramenta 2 e para que ela foi usada no projeto.>\n\n\n\nMetodologia\nEste projeto foi baseado na estruturação e visualização de dados. Separados em dois fluxos: transformação de dados e visualização de dados. O primeiro faz a leitura dos arquivos originais, na base do VIGITEL e cria novas tabelas, filtrando as colunas principais utilizadas neste trabalho. A segunda parte, de visualização de dados, é responsável por criar as associações e análises da diabetes, além da criação dos gráficos, mostrados na parte de resultados.\nTodo o desenvolvimento foi feito utilizando linguagem de programação Python e o uso de bibliotecas para manipulação (pandas) e visualização de dados (matplotlib, plotly ee seaborn).\nDetalhamento do Projeto\nPara este projeto, as planilhas para analise e visualização de dados foram geradas. Para leitura basta utilizar o código abaixo, conforme o ano desejado:\ndf = pd.read_csv(""https://raw.githubusercontent.com/ajjaum/Diabetes/master/data/processed/2019.csv"", sep=\';\', header = 0)\nPara a visualização dos gráfico em Plotly, no notebook, é necessário utilizar a seguinte função:\ndef configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML(\'\'\'\n        <script src=""/static/components/requirejs/require.js""></script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: \'/static/base\',\n              plotly: \'https://cdn.plot.ly/plotly-1.5.1.min.js?noext\',\n            },\n          });\n        </script>\n        \'\'\'))\nAs bibliotecas criadas foram baseadas na prevalência da diabetes e suas associações com outras características (pressão alta, alimentação, idade, etc).\nEvolução do Projeto\nNo começo do projeto o grupo tinha uma ideia muito geral sobre como abordaríamos o uso e a visualização dos dados e ao longo do processo conseguimos focar mais em visões mais específicas. Durante a escolha dos bancos de dados que seriam usados, o grupo decidiu tentar encontrar um banco único que abrangesse o máximo de variáveis relevantes para o projeto. Partimos por esse caminho para evitar o grande desafio que é fazer a integração de diferentes bases de dados que contêm diferentes variáveis e também diferentes cortes da população, e que em sua maioria resultando em dados heterogêneos e desbalanceados, gerando uma complexidade muito grande para um projeto de curto prazo. O banco que mais nos pareceu interesse foi o Vigitel, que é uma coleta anual do Ministério da Saúde de dados obtidos por ligações telefônicas nas capitais do Brasil, com um questionário volumoso e bem abrangente.\nInicialmente, o Vigitel aparentava ser uma base excelente para o que procurávamos, já que a bases possuíam dados bem sólidos -- anualmente uma tabela contava com, em torno de 51.000 adultos que respondiam um questionário com uma média de 180 perguntas, o que gerava 9.000.000\u202c de respostas. Essa base de dados começou em 2006, contudo descartamos a tabela do primeiro ano, visto que ela gerava dados que estavam fora do padrão dos outros anos, provavelmente por algum motivo de diferença de código das colunas ou ordem dos valores. Os dados originais, somando as tabelas de 2007 até 2019, contabilizaram 128.931.758 células de resposta, e após a limpeza e seleção das colunas conseguimos diminuir para 15.546.620 células.\nO Vigitel conta com um dicionário contendo a descrição de cada nome-código de coluna e o tipo do dado armazenado. Como exemplo, veja a figura abaixo sobre como a diabetes aparece nesse dicionário:\n\nUma dificuldade grande que tivemos com a leitura das tabelas é que existem muitas colunas que não estão descritas nesse dicionário. Portanto, podemos ter potencialmente perdido colunas que seriam importantes para uma visualização melhor dos dados e, consequentemente, de gráficos mais significativos. Algumas das tabelas só existiram por um período, como as tabelas que forneciam informações sobre a pessoas que comem doce, ou também a tabela sobre quem recebia bolsa família, que só começou a existir a partir de 2015.\nResultados e Discussão\nOs dados do VIGITEL amostram o estudo em 26 capitais brasileiras e o Distrito Federal.\n\nObserva-se um aumento da prevalência na população estudada ao longo dos último 13 anos.\n\nA média da idade de início da diabetes aumentou 3 anos desde 2015. Isso pode ser um sinal de que a população está melhorando seus hábitos, visto que elas estão tendo diabetes em um período mais tardio. Após a visualização dos dados essa pesquisa pôde concluir que a população das capitais estão diminuindo o consumo de refrigerantes de forma significativa. Não foi encontrado nenhuma pesquisa que fizesse essa relação durante os anos com a população adulta brasileira.\n\nPode-se observar a partir dos gráficos com dados de nível de escolaridade, que a prevalência de diabetes e o nível de escolaridade são inversamente proporcionais, ou seja, quanto maior o nível de instrução menor é a prevalência de diabetes, na literatura já foi estudado este componente socioeconômico em uma unidade básica de saúde em Ribeirão Preto (SP) (Rodrigues, 2012), em que portadores de diabetes mellitus tipo 2 apresentavam em média 4,54 anos de estudo.\n\nOutro fato interessante de ser observado é o aumento da prevalência de diabetes mellitus ao longo dos anos, de 2007 a 2019, em todos níveis de instrução, porém há um aumento mais acentuado nos níveis de instrução mais baixos,  isso pode ser visto no grupo de indivíduos que nunca estudou em que o aumento foi de 8% e no grupo com ensino fundamental incompleto que foi de 9%, ao passo que no grupo que possuía ensino superior completo ou pós graduação esse aumento foi de apenas 4% para cada um. Além disso, analisando intragrupo, isto é, somente dentro de um grupo de nível de escolaridade, a prevalência de diabetes é maior entre os que nunca estudaram e  também no fundamental incompleto, comparado aos demais.\n\nSobre o programa bolsa família (PBF), pode-se observar no gráfico que a prevalência de diabetes caiu neste grupo, isto pode estar associado às condicionalidades do programa em que o acesso a saúde e educação são condições para o recebimento do benefício (Brasil, 2004), mas é importante ressaltar que o decréscimo foi de 1% então há necessidade de mais estudos nesta área para afirmar se há relação entre bolsa família e diabetes.\n\nA partir da análise do gráfico de prevalência do diabetes por gênero, foi possível concluir que o perfil predominante foi o do sexo feminino e através da literatura (Busnelo, 2020) também foi constatado que a maioria dessa população pertence ao sexo feminino, o que pode ter sido contribuído pelo fato de que as mulheres procuram com mais frequência os serviços de saúde e também devido às alterações hormonais, visto que a idade de início é aproximado à idade da menopausa, foi relacionado a hipertensão como doença concomitante e ao nível de escolaridade no qual a maioria não concluiu o ensino médio; vale ressaltar que esse estudo citado foi realizado em uma amostra de 222 pessoas, em uma cidade do interior do estado do Rio Grande do Sul, o que também limita a generalização dos resultados.\n\nConsumo de refrigerante também houve uma mudança; em 2007 68% da população sem diabetes tomavam refrigerante por pelo menos três dias na semana, e em 2019 isso caiu para 47%, uma diminuição de 21% em 13 anos. Para a população com diabetes a porcentagem era de 27% e caiu para 11% em 2019. Isso pode significar que o consumo de refrigerante não está altamente ligado a prevalência de diabetes, mas é necessário pesquisas mais aprofundadas sobre os dados para uma conclusão.\n\n\nConclusões\nOs resultados da visualização das tabelas da Vigitel mostram um aumento da prevalência de diabetes nas capitais, com tendência a continuar subindo nos próximos anos. Ligando grau de escolaridade, houve uma alta considerativa de pessoas que nunca estudaram, que possuem fundamental incompleto e fundamental completo. Contudo, nos últimos dois anos essa prevalência vem diminuindo para os que nunca estudaram ou possuem fundamental incompleto e aumentando para pessoas com ensino médio completo e fundamental completo. Pessoas que fazem exercício físico por pelo menos três vezes na semana tiveram uma redução. Tiveram também uma redução na população que consome refrigerante.\nNo entanto, é necessário fazer uma visualização mais aprofundada desses dados, usando a ponderação pelo método rake para que possamos chegar em uma visualizações mais significativas e consistente dos dados.\nTrabalhos Futuros\nEste trabalho demonstrou o quão importante é entender a base de dados e saber quais gráficos e tabelas melhor representam o resultado de uma análise. No caso do VIGITEL, por ser em formato de pesquisa (Survey) encontramos a dificuldade de se utilizar o peso rake, conforme citado na página do VIGITEL. Portanto, como trabalhos futuros precisamos aprofundar a programação para que leve em consideração esta ponderação nos dados, além de procurar outras bases de dados brasileiras referentes à incidência e prevalência de diabetes, fazendo interligações mais profundas com outros dados, tais como os hábitos alimentares completos.\nReferência\n\nBRASIL. Lei n. 10.836. Cria o Programa Bolsa Família e dá outras providências. 9 jan. 2004 a.\n\n\nBRASIL. Ministério da Saúde. Vigitel Brasil 2019: vigilância de fatores de risco e proteção para doenças crônicas por inquérito telefônico. Brasília, DF: Ministério da Saúde, 2020. p. 14.\n\n\nBUSNELO, E. D. S. et al. Perfil epidemiológico de pessoas com diabetes mellitus atendidas nas estratégias saúde da família. Revista de Enfermagem e Atenção à Saúde, v. 8, n. 2, 2020.\n\n\nDiabetes overview. Disponível em https://www.who.int/health-topics/diabetes#tab=tab_1. Acesso em: 01 jul. 2020.\n\n\nFIGUEIREDO, Danielly Mesquita; RABELO, Flávia Lúcia Abreu. Diabetes insipidus: principais aspectos e análise comparativa com diabetes mellitus. Semina: Ciências Biológicas e da Saúde, v. 30, n. 2, p. 155-162, 2009.\n\n\nMARASCHIN, Jorge de Faria et al. Classificação do diabete melito. Arq. Bras. Cardiol.,  São Paulo ,  v. 95, n. 2, p. 40-46,  Aug.  2010 .\n\n\nRODRIGUES, Flávia Fernanda Luchetti et al . Relação entre conhecimento, atitude, escolaridade e tempo de doença em indivíduos com diabetes mellitus. Acta paul. enferm.,  São Paulo ,  v. 25, n. 2, p. 284-290,    2012 .\n\nEstrutura de Arquivos e Pastas\n├── README.md          <- apresentação do projeto e estrutura das pastas\n│\n├── data\n│   ├── external       <- dados de terceiros (não utilizado)\n│   ├── interim        <- dados intermediários (não utilizado)\n│   ├── processed      <- dados finais usados para a modelagem\n│   └── raw            <- dados originais sem modificações\n│\n├── docs               <- Padrão do Sphinx (python documentation generator)\n│\n├── notebooks          <- Jupyter notebooks criados\n│\n├── references         <- Documentos de referência para esse estudo\n│\n└── reports            <- ppt do projeto\n    ├── figures        <- imagens geradas\n    └── videos         <- vídeo de introdução\n\n'], 'url_profile': 'https://github.com/ajjaum'}","{'location': 'Casablanca', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bilalsamsam12'}","{'location': 'Paris', 'stats_list': [], 'contributions': '22 contributions\n        in the last year', 'description': ['Diabetes\nThe data was collected and made available by “National Institute of Diabetes and Digestive and Kidney Diseases” as part of the Pima Indians Diabetes Database. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here belong to the Pima Indian heritage (subgroup of Native Americans), and are females of ages 21 and above.\nFirst of all, download and read the data from the CSV file and manipulate it as desired.\n'], 'url_profile': 'https://github.com/jose3g'}","{'location': 'NONE', 'stats_list': [], 'contributions': '38 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/eeno'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '3 contributions\n        in the last year', 'description': ['\n\n\npage_type\nlanguages\nproducts\ndescription\n\n\n\n\nsample\n\n\n\npython\n\n\n\n\n\n\n\nazure\nazure-machine-learning-service\nazure-devops\n\n\n\n\nCode which demonstrates how to set up and operationalize an MLOps flow leveraging Azure Machine Learning and Azure DevOps.\n\n\n\nMLOps with Azure ML\n\nMLOps will help you to understand how to build a Continuous Integration and Continuous Delivery pipeline for an ML/AI project. We will be using the Azure DevOps Project for build and release/deployment pipelines along with Azure ML services for model retraining pipeline, model management and operationalization.\n\nThis template contains code and pipeline definitions for a machine learning project that demonstrates how to automate an end to end ML/AI workflow.\nArchitecture and Features\nArchitecture Reference: Machine learning operationalization (MLOps) for Python models using Azure Machine Learning\nThis reference architecture shows how to implement continuous integration (CI), continuous delivery (CD), and retraining pipeline for an AI application using Azure DevOps and Azure Machine Learning. The solution is built on the scikit-learn diabetes dataset but can be easily adapted for any AI scenario and other popular build systems such as Jenkins and Travis.\nThe build pipelines include DevOps tasks for data sanity tests, unit tests, model training on different compute targets, model version management, model evaluation/model selection, model deployment as realtime web service, staged deployment to QA/prod and integration testing.\nPrerequisite\n\nActive Azure subscription\nAt least contributor access to Azure subscription\n\nGetting Started\nTo deploy this solution in your subscription, follow the manual instructions in the getting started doc. Then optionally follow the guide for integrating your own code with this repository template.\nRepo Details\nYou can find the details of the code and scripts in the repository here\nReferences\n\nAzure Machine Learning (Azure ML) Service Workspace\nAzure ML CLI\nAzure ML Samples\nAzure ML Python SDK Quickstart\nAzure DevOps\n\nContributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\nThis project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n'], 'url_profile': 'https://github.com/setuchokshi'}","{'location': 'London, UK', 'stats_list': [['1', '          follower'], ['6', '          following'], ['5']], 'contributions': '157 contributions\n        in the last year', 'description': ['Diabetes\n'], 'url_profile': 'https://github.com/ArmanHussainDS'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '25 contributions\n        in the last year', 'description': ['This is an android apllication built over kivy a python framework that predict the chances of diabetes using kaggle dataset and machine laerning.\n\n\nTry not to used scikit-learn library\nAs it is written in C and kivy will not be able to compile\nSo try to write your own algorithm from scratch\n\nClick the below link to download:\nhttps://drive.google.com/file/d/1ndRHyTLCf3X0D2RQPOn8696cKffnZF1H/view?usp=sharing\n'], 'url_profile': 'https://github.com/prasadilla42'}","{'location': 'Sousse, Tunisia', 'stats_list': [['27', '          followers'], ['59', '          following'], ['28']], 'contributions': '202 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MoezBaccouche'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '44 contributions\n        in the last year', 'description': ['diabetes\n'], 'url_profile': 'https://github.com/subhasish333'}","{'location': 'NONE', 'stats_list': [], 'contributions': '147 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/yduoccotruyen2020'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['Diabetes\nDiabetes Prediction Project\n'], 'url_profile': 'https://github.com/vlpr-wc'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['6']], 'contributions': '17 contributions\n        in the last year', 'description': ['Diabetes\nThis repository examines the classification of patients with diabetes being readmitted. The data and project is based on the UCI Diabetes dataset.\n'], 'url_profile': 'https://github.com/tk27182'}","{'location': 'NONE', 'stats_list': [], 'contributions': '15 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/marcosgesetIPN'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['3']], 'contributions': '18 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/amitsharma4hld'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['7', '          following'], ['6']], 'contributions': '576 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/avikantwadhwa'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['22']], 'contributions': '6 contributions\n        in the last year', 'description': ['Diet & diabetes management apps source release\nThis is GPL source release of diet & diabetes management apps for Android & Windows Phone.\nImplementation details\nThe apps were written with MVVM architectural pattern, Clean Code, performance, Metro UI and everyday-use in mind.\nLicense\nSee the COPYING file for GNU GENERAL PUBLIC LICENSE.\nContact\nIf you have any questions please feel free to contact me at pawel-dot-stroinski-at-pabloware-dot-com.\n'], 'url_profile': 'https://github.com/PawelStroinski'}","{'location': 'Mangaluru,India', 'stats_list': [['32', '          followers'], ['25', '          following'], ['63']], 'contributions': '407 contributions\n        in the last year', 'description': [""Instructions to be followed\nInstall the below required packages:\ndjango - (pip install django)\ntensorflow - (pip install tensorflow)\npillow - (pip install pillow || pip install PIL)\nnumpy (pip install numpy)\n===================================================\nConfiguration to be made:\nInside diabetic_retinopathy -> settings.py at last you have to put your local path to output directory currently it is my local path\n===================================================\nNote:\nCurrently the models have been trained using tesnsorflow keras you can find the models inside diab_retina_app -> model folder\n===================================================\nTo execute the project run the below command:\npython manage.py runserver\n===================================================\nInput:\nchoose the test image from the test directory given inside the project ie; diab_retina_app->test\nTraining images are not included in the folder since it's a large collection\nThe same images you have sent have been used for training\n===================================================\nYou are free to edit the front-end/processing logic as per your need\n===================================================\n""], 'url_profile': 'https://github.com/thealoneprogrammer'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/wjq7712'}"
"{'location': 'NONE', 'stats_list': [['11', '          followers'], ['16', '          following'], ['107']], 'contributions': '4 contributions\n        in the last year', 'description': ['Diabetes App\nPurpose\nThis phone application is being created to assist medical practitioners by providing a streamlined workflow for\nin-patient diabetes mangement. This is a cross platform application, built for iOS and Android devices through\nthe support of the Steroids.js framework. Typical users of this application are intended to be physicians.\nProject Frameworks\n\nSteroids JS (PhoneGap extension)\nAngular JS\n\nUpload\nUpload Application Mockup to Phone:\n\nNavigate to project directory.\n""steroids connect -watch""\n    \n        a. Initializes a server and generates a QR code in the browser.\n    \nUse the AppGyver Scanner app to pull down and mock the application.\n\nBuild additional angular resources:\n- ""steroids generate ng-resource""\nDISCLAIMER\nYou are liable for any consequences that result from use of this application. For accurate medical advice, please\nconsult a certified medical authority.\n'], 'url_profile': 'https://github.com/joerobmunoz'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ealbert'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/nickrnathan4'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['4']], 'contributions': '5 contributions\n        in the last year', 'description': ['DiabetesRisk\n'], 'url_profile': 'https://github.com/moneyml'}","{'location': 'Perth', 'stats_list': [['4', '          followers'], ['2', '          following'], ['0']], 'contributions': '42 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kylesaltmarsh'}","{'location': 'Dublin, IRE', 'stats_list': [['11', '          followers'], ['24', '          following'], ['35']], 'contributions': '147 contributions\n        in the last year', 'description': ['DiabetesApp\n'], 'url_profile': 'https://github.com/mikeyPower'}","{'location': 'Nigeria', 'stats_list': [['9', '          followers'], ['8', '          following'], ['30']], 'contributions': '1,482 contributions\n        in the last year', 'description': ['diabetesML\n'], 'url_profile': 'https://github.com/teezzan'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SaeedHasanain'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['diabetesfeb19\n'], 'url_profile': 'https://github.com/subashgana'}","{'location': 'Mexico', 'stats_list': [['217', '          followers'], ['8', '          following'], ['9']], 'contributions': '546 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/LaloCo'}"
"{'location': 'Nepal', 'stats_list': [['3', '          followers'], ['21', '          following'], ['5']], 'contributions': '15 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetesPrediction\n'], 'url_profile': 'https://github.com/Dhakal29'}","{'location': 'NONE', 'stats_list': [['7', '          followers'], ['10', '          following'], ['0']], 'contributions': '294 contributions\n        in the last year', 'description': ['diabetesUP\nThis repository comprises the source XML files used to create the CommacareHQ app Used for the proejct DiabetesUP.\nTo run the app, the Dimage CommcareHQ basic tool is necessary https://play.google.com/store/apps/details?id=org.commcare.dalvik&hl=en\nThis app is referred to the study ""Boosting diabetes and pre-diabetes screening in rural Ghana""\nBernard Effah Nyarko, Rosemary Serwah Amoah,   Alessandro Crimi\nEnclosed in this repository we distribute, under Creative Commons Attribution Licence, the anonymized collected data (Diabetes_cohort.xls and Unaware_cohort.xls) and relative questionnaire (Questionnaires.odt).\n'], 'url_profile': 'https://github.com/alecrimi'}","{'location': 'Ankara', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ozcelikozlem'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesApp\n'], 'url_profile': 'https://github.com/jawan1'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/NinetySixthPixel'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['diabetes1\n'], 'url_profile': 'https://github.com/charan4551'}","{'location': 'NONE', 'stats_list': [], 'contributions': '12 contributions\n        in the last year', 'description': ['DiabetesProject\n'], 'url_profile': 'https://github.com/blakemidgley'}","{'location': 'Hyderabad', 'stats_list': [['2', '          followers'], ['5', '          following'], ['24']], 'contributions': '39 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/KittuPatel'}","{'location': 'Mbarara, Uganda', 'stats_list': [['2', '          followers'], ['3', '          following'], ['1']], 'contributions': '16 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/softcodesTech'}","{'location': 'NONE', 'stats_list': [], 'contributions': '55 contributions\n        in the last year', 'description': ['Diabetes Readmittance\n\nRead the full report here\nMotivation\nHospital readmissions are incredibly damaging on multiple fronts: healthcare cost, patient health, and time spent. By diagnosing which factors contribute to the hospital readmission rate, we will be able to tackle the problem head-on to bring about a huge boon to an already congested healthcare system in the United States. We especially focus on diabetes because there is relatively little research focused on hospitalized diabetes patients even though the burden of the cost of constant returns are rising significantly. By predicting whether or not a patient will be readmitted in the future, medical professionals can be alerted to prevent future readmissions by changing their treatment or expectations with a patient.\nData Acquisition\nThe data was acquired by using the UCI machine learning repository database. The dataset is described to be 10 years of clinical care at 130 US hospitals with 50 features representing patient and hospital outcomes. For further detail, check the reference below.\nResults\n\n\n\nModel\nCross Validation Score\nPrecision\nRecall\nAUC Train\nAUC Test\nFit Time\n\n\n\n\nLinear SVM (w/ SGD)\n55.21%\n0.70\n0.10\n0.51\n0.51\n15.5s\n\n\nDecision Tree\n60.21%\n0.58\n0.53\n0.59\n0.71\n0.818s\n\n\nKNN\n56.48%\n0.57\n0.38\n0.51\n0.65\n7.6s\n\n\nNaive Bayes\n59.99%\n0.56\n0.58\n0.52\n0.60\n6.33s\n\n\nLogistic Regression\n61.91%\n0.62\n0.45\n0.54\n0.61\n1.92s\n\n\nRandom Forest\n62.89%\n0.62\n0.48\n0.54\n0.63\n0.672s\n\n\nXGBoost\n63.62%\n0.62\n0.53\n0.55\n0.64\n37.6s\n\n\n\n\n\nConclusion\nWinner - XGBoost Model\nMy recommendation for a hospital is to have a system that monitors (at least) the top 5 most important features of patients. Changing the workflow to double check and give extra care to these patients so that they do not have to be readmitted could prevent future work and patient health being compromised.\nReferences\nFelix, Holly C., et al. “Why Do Patients Keep Coming Back? Results of a Readmitted Patient Survey.” Social Work in Health Care, vol. 54, no. 1, 2015, pp. 1–15., doi:10.1080/00981389.2014.966881.\n“In Focus: Preventing Unnecessary Hospital Readmissions.” Commonwealth Fund, www.commonwealthfund.org/publications/newsletter-article/focus-preventing-unnecessary-hospital-readmissions.\nStrack, Beata, et al. “Impact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records.” BioMed Research International, vol. 2014, 2014, pp. 1–11., doi:10.1155/2014/781670.\n'], 'url_profile': 'https://github.com/dannydhkim'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['Exploratory Data Science through Diabetes Prediction\nMachine learning is a cutting edge domain of computer science, which has algorithms that can learn patterns from training data and use them to produce predictions. However, depending on the algorithm and model used, we can get wildly different results.\nIn order to account for this variance, I will run three different algorithms multiple times to compare the runtime and the accuracy of each algorithm. These algorithms are a Decision Tree Classifier, Regularized Linear Regression, and a Support Vector machine with a Linear Kernel. I will be exploring a dataset of medical information from Pima Indians in order to classify whether or not they have diabetes or not.\nWe\'ll start by importing our data into a Pandas DataFrame and labelling the columns:\nimport pandas\nfrom sklearn import cross_validation, svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.tree import DecisionTreeClassifier\nfrom matplotlib import pyplot\nimport numpy\nimport time\n\ndata = pandas.read_csv(\'pima-indians-diabetes.data\', header=None)\nfeature_names = [""#Pregnancies"", ""Plasma Glucose"", ""Blood Pressure"", ""Tricep Size"", ""Serum Insulin"", ""BMI"",\n                 ""Diabetes Pedigree Fn"", ""Age""]\n                 \n#Define columns on our dataframe. Add a classification column\ndata.columns = feature_names + [""Has Diabetes?""]\nNow that I have labelled data in an easily accessible object, I\'ll now define a run function:\n# I will now run three different machine learning algorithms to gain insight:\n\n# 1. Decision Tree:\n# 2. Logistic Regression\n# 3. Support Vector Machine\n\n#define our run function:\n#Takes feature matrix, a column vector of target values, and a set of algorithms to run\n#in order to improve our predictions, we will run our algorithms with k-fold cross validation, where k = 5\ndef run(X, y, algorithms):\n    for index, alg in enumerate(algorithms):\n        start = time.time()\n        score = float(cross_validation.cross_val_score(alg, X, y, cv=5).mean())\n        end = time.time()\n        print(""Algorithm "" + str(index+1))\n        print(""-Prediction Accuracy: "" + str(score))\n        print(""-Elapsed Runtime: ""+str(end - start)+""\\n"")\nNow to create the algorithms, and perform an initial run:\n#define our algorithms:\ntree = DecisionTreeClassifier(random_state=1,)\nregression = LogisticRegression(random_state=1)\nsupport_vector_classifier = svm.SVC(kernel=""linear"")\nalgorithms = [tree, regression, support_vector_classifier]\n\n\nprint(""\\n"")\nprint(""First Run:"")\nprint(""\\n"")\nrun(data[feature_names], data[""Has Diabetes?""], algorithms)\nAfter the first run, we get the output:\nAlgorithm 1\n-Prediction Accuracy: 0.7240387063916476\n-Elapsed Runtime: 0.0941019058227539\n\nAlgorithm 2\n-Prediction Accuracy: 0.768270944741533\n-Elapsed Runtime: 0.1371755599975586\n\nAlgorithm 3\n-Prediction Accuracy: 0.7656820303879128\n-Elapsed Runtime: 24.279281854629517\n\nWe find that logistic regression performed best on this dataset. Support vector classification performed almost as well in terms of accuracy, however the runtime was significantly higher. Let\'s inspect the data to gain insights:\n#Let\'s examine the data:\nprint(""\\n"")\nprint(data.describe())\nprint(""\\n"")\ngives us the output:\n\n       #Pregnancies  Plasma Glucose  Blood Pressure  Tricep Size  \\\ncount    768.000000      768.000000      768.000000   768.000000   \nmean       3.845052      120.894531       69.105469    20.536458   \nstd        3.369578       31.972618       19.355807    15.952218   \nmin        0.000000        0.000000        0.000000     0.000000   \n25%        1.000000       99.000000       62.000000     0.000000   \n50%        3.000000      117.000000       72.000000    23.000000   \n75%        6.000000      140.250000       80.000000    32.000000   \nmax       17.000000      199.000000      122.000000    99.000000   \n\n       Serum Insulin         BMI  Diabetes Pedigree Fn         Age  \\\ncount     768.000000  768.000000            768.000000  768.000000   \nmean       79.799479   31.992578              0.471876   33.240885   \nstd       115.244002    7.884160              0.331329   11.760232   \nmin         0.000000    0.000000              0.078000   21.000000   \n25%         0.000000   27.300000              0.243750   24.000000   \n50%        30.500000   32.000000              0.372500   29.000000   \n75%       127.250000   36.600000              0.626250   41.000000   \nmax       846.000000   67.100000              2.420000   81.000000   \n\n       Has Diabetes?  \ncount     768.000000  \nmean        0.348958  \nstd         0.476951  \nmin         0.000000  \n25%         0.000000  \n50%         0.000000  \n75%         1.000000  \nmax         1.000000  \n\n\nThere must be missing values in this data, since we have zero values for data where that is impossible (ex: BMI). We could remove the rows with missing values, but that means we have less data to train on. Instead, let\'s replace the impossible zero values with the median for their respective column:\n# There are some errors in the data\n# It is impossible to have 0 plasma glucose (blood sugar), blood pressure, tricep size, or BMI.\nunsanitized_columns =[""Plasma Glucose"", ""Blood Pressure"", ""Tricep Size"", ""BMI""]\n\nfor col in unsanitized_columns:\n    data.loc[data[col] == 0, col] = data[col].median()\nAfter sanitizing the data, let\'s see how our algorithm performance has changed:\nprint(""\\n"")\nprint(""Second Run:"")\nprint(""\\n"")\nrun(data[feature_names], data[""Has Diabetes?""], algorithms)\noutputs:\nAlgorithm 1\n-Prediction Accuracy: 0.6993294287411935\n-Elapsed Runtime: 0.02201557159423828\n\nAlgorithm 2\n-Prediction Accuracy: 0.7578813343519226\n-Elapsed Runtime: 0.03304004669189453\n\nAlgorithm 3\n-Prediction Accuracy: 0.7656820303879128\n-Elapsed Runtime: 18.34785008430481\n\nThe accuracy of our decision tree and our logistic regression went down, while support vector classification remained approximately the same. Interesting.\nWe may be able to further improve our model by removing columns that don\'t correlate with the classification. The SelectKBest class can be used to find the features which correlate with our target:\nselector = SelectKBest(k=8)\nselector.fit(data.iloc[:, 0:8], data.iloc[:, 8])\nfit_score = -numpy.log(selector.pvalues_)\n\npyplot.bar(range(len(fit_score)), fit_score)\npyplot.xticks(range(len(feature_names)), feature_names, rotation=15)\npyplot.title(""Correlation"")\npyplot.xlabel(""Features"")\npyplot.ylabel(""Score"")\npyplot.show()\nThis yields the following bar chart:\n\nThis gives us new insights on the data. It seems like the largest predictor of diabetes is the amount of Plasma Glucose. Now I\'ll simplify our model to only rely on 5 columns, ranked by correlation:\n# The top five features are (in descending order): Plasma Glucose, BMI, Age,# of pregnancies, Diabetes Pedigree Function\n#We have learned plasma glucose overwhelmingly correlates with diabetes\nfeatures = [""Plasma Glucose"", ""BMI"", ""Age"", ""#Pregnancies"", ""Diabetes Pedigree Fn""]\n\nprint(""\\n"")\nprint(""Final Run:"")\nprint(""\\n"")\nrun(data[features], data[""Has Diabetes?""], algorithms)\nAnd our final output:\nAlgorithm 1\n-Prediction Accuracy: 0.7148714031066973\n-Elapsed Runtime: 0.07508301734924316\n\nAlgorithm 2\n-Prediction Accuracy: 0.768270944741533\n-Elapsed Runtime: 0.06279325485229492\n\nAlgorithm 3\n-Prediction Accuracy: 0.7682454800101859\n-Elapsed Runtime: 2.7128477096557617\n\nConclusion:\nWe can see that using a subset of data created by selecting the most correlative columns has caused our decision tree algorithm and our logistic regression algorithm to be slightly more accurate. Support Vector classification remained approximately the same.\nHowever, there are additional insights. It appears that using a subset of the data has caused the decision tree and the logistic regression algorithms to run slower. On the other hand, this idea sped up the Support Vector classification immensely. On our second run, this algorithm took over 18 seconds, while it took less than 3 on our final run, with almost the same accuracy.\nThis shows that minor tweaks can have significant effects on machine learning algorithms. Support vector machines are considered \'cutting edge\' in the field of machine learning, but it appears they may be a bit too complex for our example, as shown by the runtime. For this dataset, it appears that a standard implementation of regularized linear regression.\nWe\'ve also gained some insight into how the classification correlates with the data. By analyzing our best features, we find that Plasma Glucose (blood sugar) is correlated very strongly with our classification. This seems obvious to those with diabetes, but another interesting finding is that the Diabetes Pedigree Function, which measures genetic influence, is relatively small, implying that diabetes cannot be predicted well using genetic history.\n'], 'url_profile': 'https://github.com/i11umin8'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mrpreeters'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesCircle\n'], 'url_profile': 'https://github.com/csknepper'}","{'location': 'NONE', 'stats_list': [['6', '          followers'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vasant32'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/laura-jayne'}","{'location': 'Lima, Perú', 'stats_list': [['1', '          follower'], ['3', '          following'], ['0']], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/omarfon'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/DayeandClaud'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetesCenter\nProject Diabetes Center\nby Lincoln Fernandes Coelho\n'], 'url_profile': 'https://github.com/lincolnfcoelho'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mbmcmullen'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['Ensemble-Learnen von diskreten und kontinuierlichen Zeitreihen zur Vorhersage von Handlungsempfehlungen bei Diabetes Typ 1 Patienten\nRequirements\nAnaconda3 4.2.0\nhttps://repo.continuum.io/archive/index.html\nTensorflow(CPU only)\nInstallation nach: https://www.tensorflow.org/install/\nBeispiel für Windows x64:\n$ pip install https://storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.1.0-cp35-cp35m-win_amd64.whl\n\nKeras\nInstallation nach: https://keras.io/#installation\n$ pip install keras\n\nGraphviz\nInstallation nach: https://graphviz.gitlab.io/download/\nPython Abhängigkeiten\n$ pip install pandas matplotlib bokeh sklearn graphviz\n\nStarten\nDatensatz kopieren nach TSAd1/Datensets/ und Dateinamen in config.ini unter ""inputFilenamejson"" setzen.\nDer Datensatz muss dem ODV v10 Format entsprechen.\nSofern nötig in das virtenv wechseln:\n$ source activate tensorflow\n\nRoot Ordner (TSA) zur PYTHONPATH Umgebungsvariable hinzufügen:\nexport PYTHONPATH = PYTHONPATH:~/TSA/ \n\nSkript starten\n$ cd TSAd1\n$ python main.py\n\n'], 'url_profile': 'https://github.com/MbProg'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '46 contributions\n        in the last year', 'description': ['Dev branch\nThis is created to add more features to the project\n'], 'url_profile': 'https://github.com/BrahmanapallyNagaraju'}","{'location': 'columbia, Missouri', 'stats_list': [['1', '          follower'], ['3', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesApp\n'], 'url_profile': 'https://github.com/YohanesPatrick'}","{'location': 'Manchester, UK', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/cnm01'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['diabetes515-\n'], 'url_profile': 'https://github.com/diabetes515'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['3', '          following'], ['0']], 'contributions': '122 contributions\n        in the last year', 'description': ['DiabetesPrediction\nUses machine learning to predict diabetes for a patient.\nSet Up\nRequirements\n\nPython3\nPandas\nMatplotlib used for plotting\n\nInstall using:\npip install pandas \npip install matplotlib\n\n'], 'url_profile': 'https://github.com/seccret'}","{'location': 'Alexandria, Egypt', 'stats_list': [['6', '          followers'], ['9', '          following'], ['5']], 'contributions': '52 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/andaleebkhog'}","{'location': 'NONE', 'stats_list': [], 'contributions': '23 contributions\n        in the last year', 'description': ['Diabetes Onset Prediction\nThe data involved the details of people in a particular area and the incidence of diabetes.\nAfter data cleaning, I fit the data using Logistic Regression to obtain a model to predict the onset of diabetes.\n'], 'url_profile': 'https://github.com/divij8'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '107 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SriHarshaNagulakonda'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['22']], 'contributions': '6 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes prediction using Logistic Regression\nName: Ninad Nitin Khire\nRoll no.: 61\nBatch: T3\nT. Y. C. S. E.\n'], 'url_profile': 'https://github.com/ninadkhire'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '24 contributions\n        in the last year', 'description': ['DiabetesPrediction\nPredicting diabetes on the PIMA dataset\n'], 'url_profile': 'https://github.com/Sushil-ms'}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '107 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SriHarshaNagulakonda'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['22']], 'contributions': '6 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes prediction using Logistic Regression\nName: Ninad Nitin Khire\nRoll no.: 61\nBatch: T3\nT. Y. C. S. E.\n'], 'url_profile': 'https://github.com/ninadkhire'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '24 contributions\n        in the last year', 'description': ['DiabetesPrediction\nPredicting diabetes on the PIMA dataset\n'], 'url_profile': 'https://github.com/Sushil-ms'}","{'location': 'NONE', 'stats_list': [], 'contributions': '8 contributions\n        in the last year', 'description': ['DiabetesPrediction\n'], 'url_profile': 'https://github.com/GalZeevy'}","{'location': 'Finland', 'stats_list': [['4', '          followers'], ['0', '          following'], ['6']], 'contributions': '1,142 contributions\n        in the last year', 'description': ['DiabetesAssistant\n\naiheenKuvausJaRakenne.md\ntestausdokumentti.md\nkäyttöohjeet.md\ntuntikirjanpito.md\n\nLinkit\n\nPIT -testi\nCheckstyle -raportti\nKurssisivu\n\n'], 'url_profile': 'https://github.com/KristianLauttamus'}","{'location': 'Faculty of Engineering - University of Moratuwa', 'stats_list': [['1', '          follower'], ['3', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sssahan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['3']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vinsrc'}","{'location': 'Hamburg/ Germany ', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '13 contributions\n        in the last year', 'description': ['DiabetesRecords\nAndroid Project for Diabetes Patients\n'], 'url_profile': 'https://github.com/viswesvar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesPrediction\nMachine Learning algorithm to predict diabetes among a small sample of data.\n'], 'url_profile': 'https://github.com/akhil-sreehari'}","{'location': 'Sydney, Australia', 'stats_list': [['1', '          follower'], ['2', '          following'], ['7']], 'contributions': '0 contributions\n        in the last year', 'description': ['Diabetes classifier\nA set of diabetes classifiers written for an AI assignment\nThe data\nThe dataset for this assignment is the Pima Indian Diabetes dataset. It contains 768 instances described by 8 numeric attributes. There are two classes\xa0 ‐\xa0 yes and no. Each entry in the dataset corresponds to a patient’s record; the attributes are personal characteristics and test measurements; the class shows if the person shows signs of diabetes or not. The patients are from Pima Indian heritage, hence the name of the dataset.\nThe classifiers and tools\nNaïve Bayes, Decision Tree and 10‐fold stratified cross‐validation were implemented\n'], 'url_profile': 'https://github.com/Technoash'}"
"{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/bmsr56'}","{'location': 'Austin, TX', 'stats_list': [['11', '          followers'], ['9', '          following'], ['13']], 'contributions': '0 contributions\n        in the last year', 'description': ['Detection of Diabetes in Pima Indian Dataset\nGiven a Pima Indian dataset, predict the onset of diabetes by training a deep neural network.\nThe features in the data are:\n\nNumber of times pregnant\nPlasma glucose concentration a 2 hours in an oral glucose tolerance test\nDiastolic blood pressure (mm Hg)\nTriceps skin fold thickness (mm)\n2-Hour serum insulin (mu U/ml)\nBody mass index (weight in kg/(height in m)^2)\nDiabetes pedigree function\nAge (years)\n\nClass variable 0 (no diabetes) 1 (diabetes)\n'], 'url_profile': 'https://github.com/nirav99'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '46 contributions\n        in the last year', 'description': ['DiabetesDetection\n'], 'url_profile': 'https://github.com/avvarikrish'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/AnnaLeheta'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '179 contributions\n        in the last year', 'description': ['diabetesLog\n'], 'url_profile': 'https://github.com/girvain'}","{'location': 'Canada', 'stats_list': [['2', '          followers'], ['1', '          following'], ['2']], 'contributions': '6 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/cbarrette'}","{'location': 'Hong Kong', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Khadiime'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MichalDzwolak'}","{'location': 'Shanghai', 'stats_list': [['9', '          followers'], ['30', '          following'], ['30']], 'contributions': '255 contributions\n        in the last year', 'description': ['DiabetesDetection\n人工智能课程项目Android端代码\n目的是实现糖尿病风险评估的交互界面\n'], 'url_profile': 'https://github.com/syz913'}","{'location': 'Cotia - São Paulo', 'stats_list': [['3', '          followers'], ['7', '          following'], ['2']], 'contributions': '50 contributions\n        in the last year', 'description': ['DiabetesTimer\nEstudos com JS. Contador de tempo para medição de glicemia para diabéticos após refeições.\nAutoria\nScript (JS) baseado em versão de outro autor e aplicado de forma estudada com variações minhas, cabiveis ao meu projeto.\nVersão\n1.0\n'], 'url_profile': 'https://github.com/LuizBlading'}"
"{'location': 'Serbia,  Belgrade', 'stats_list': [['15', '          followers'], ['32', '          following'], ['51']], 'contributions': '70 contributions\n        in the last year', 'description': ['DiabetesPrediction\nCaclulating the precentage of people in America the precentage and possibility of having diabetes.\nWhat I Learned\n\nPreparing the data set with panda data frames(removing invalid values from the set and duplicates as well)\nMold Data\nTraining with inital Algorithm - Naive Bayes\nSetting aside 20% of data for testing\nPerforming Random Forest, Logistic Regression\n\n'], 'url_profile': 'https://github.com/jovanvuleta'}","{'location': 'Houston Area', 'stats_list': [['0', '          followers'], ['0', '          following'], ['16']], 'contributions': '391 contributions\n        in the last year', 'description': ['diabetesClassifier\n'], 'url_profile': 'https://github.com/madarahr'}","{'location': 'Lahore, Pakistan', 'stats_list': [['0', '          followers'], ['0', '          following'], ['6']], 'contributions': '36 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/osmaantahir'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['6', '          following'], ['21']], 'contributions': '0 contributions\n        in the last year', 'description': ['IPHIE-2018-decision-tree\nStudent project of IPHIE master class 2018 in Amsterdam. Analysing the dataset with decition trees & random forest in R\nDiabetes Dataset - Diabetes 130-US hospitals for years 1999-2008 Data Set - https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008\nCleaning of dataset according paper in Python - https://www.researchgate.net/publication/262114048_Impact_of_HbA1c_Measurement_on_Hospital_Readmission_Rates_Analysis_of_70000_Clinical_Database_Patient_Records\n'], 'url_profile': 'https://github.com/MadMax93'}","{'location': 'Roodeport', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetesCMS\n'], 'url_profile': 'https://github.com/SMhlengi'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['1']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesMonitor\nApplication to monitor diabetes\n'], 'url_profile': 'https://github.com/PriyankaSunilNair'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['11']], 'contributions': '21 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/fakhriaunur'}","{'location': 'NONE', 'stats_list': [], 'contributions': '20 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/QuestionairApp'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/what0919'}","{'location': 'israel', 'stats_list': [['5', '          followers'], ['19', '          following'], ['41']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Moshikol'}"
"{'location': 'NONE', 'stats_list': [['20', '          followers'], ['15', '          following'], ['4']], 'contributions': '71 contributions\n        in the last year', 'description': ['DiabetesAPI\nAPI for diabetes management system using Python-Django.\nDjango applications on Heroku\n\n\nSet up a virtual environment\npip install virtualenv\nvirtualenv venv\nvenv\\Scripts\\activate\nsource venv/bin/activate\n\nworkon diabetes #virtual environment\npython manage.py runserver\n\n\n\nDeclare app dependencies\npip freeze > requirements.txt\n\n\nBuild your app and run it locally\npip install -r requirements.txt\n\n\nRunning the application locally\nheroku local web\n\n\nDeploy your application to Heroku\n\n\n$ git add .\n\n\n$ git commit -m ""Added a Procfile.""\n\n\n$ heroku login\n\n\n$ heroku create\n\n\n$ git push heroku master\n\n\n$ heroku ps:scale web=1\n\n\n$ heroku open\n\n\n\n\n'], 'url_profile': 'https://github.com/Luciekimotho'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['DiabetesSubmission\nFigures and supplementary material for the Diabetes submission.\nhttps://www.biorxiv.org/content/early/2017/09/22/192922\nSupplementary Table Legends\nTable S1. Human islet donor demographic characteristics and islet metadata\nTable S2. ATAC-seq quality control metrics for the 19 islets\nTable S3. Meta data and associated statistics of the 10 islets used for differential analyses\nTable S4. RNA-seq quality control metrics for the 19 islets\nTable S5. Constructs for luciferase assay\nTable S6. 154,438 OCRs in 19 islets\nTable S7. Statistically significant islet caQTLs\nTable S8. Differentially accessible ATAC-seq peaks in T2D islets\nTable S9. Differentially expressed genes in T2D islets\n'], 'url_profile': 'https://github.com/UcarLab'}","{'location': 'NONE', 'stats_list': [], 'contributions': 'NONE', 'description': ['DiabetesEnsemble\nThis is a group project for CSC529: Advanced Data Mining at DePaul University. The objective of this project is to create a ensemble classifier to predict whether an individual is at high risk for having diabetes. We will use the publicly available NYC HANES data to build this model. Our inspiration comes from Longfei Han et. al.\'s paper, ""Rule Extraction From Support Vector Machines Using Ensemble Learning Approach: An Application for Diagnosis of Diabetes"".\nGetting Started\nPrerequisites\nNYCHANES data set: SAS file listed as \'public_v2_042618.sas7bdat\'\n\nimport pandas as pd\n\n\ndata = pd.read_sas(\'public_v2_042618.sas7bdat\')\n\nBulit With\n\npython\nR\n\n'], 'url_profile': 'https://github.com/CSC529GroupProjectDiabetes'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['Simple-Alarms\nThank you for this amazing resource (https://github.com/PPartisan)\n \nThis a straightforward alarm app for Android with the following features:\n\nStore multiple alarms\nSet indvidual days the alarm should repeat\nMute an alarm by removing all days\nShows notification with vibration and a noise when alarm sounds\n\nAnyone is welcome to use this source code in their own app (MIT Licence). Attribution would be appreciated though! Thanks.\n'], 'url_profile': 'https://github.com/salukhadka95'}","{'location': 'Charlotte, NC', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesDiagnosis\nPredicted whether a patient has diabetes and found out the common symptoms for providing accurate analysis.\nUsed ggplot2 and lattice libraries to create customized charts and mice library for data imputation in R.\nPerformed classification algorithms like Decision Tree, Neural Networks, KNN on model achieving 70% overall\naccuracy.\nUsed CRISP-DM methodology for structured approach and Tableau for creating Dashboards and statistical analysis.\n'], 'url_profile': 'https://github.com/rachitchoksi'}","{'location': 'Chennai, Tamilnadu, India', 'stats_list': [['10', '          followers'], ['75', '          following'], ['0']], 'contributions': '12 contributions\n        in the last year', 'description': ['DiabetesPrediction\nThis repository contains python notebook for Diabetes Readmission prediction dataset.\nThis is mere replication & learning from medium article\nhttps://medium.com/@uraza/how-to-use-machine-learning-to-predict-hospital-readmissions-part-1-bd137cbdba07\n'], 'url_profile': 'https://github.com/balajivenky06'}","{'location': 'NONE', 'stats_list': [['8', '          followers'], ['4', '          following'], ['7']], 'contributions': '48 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/shi-gy15'}","{'location': 'NONE', 'stats_list': [], 'contributions': '10 contributions\n        in the last year', 'description': ['DiabetesManagement\nThis is an app for diabetes management designed in a hackathon using the Ionic hybrid app framework.\n'], 'url_profile': 'https://github.com/afareenj'}","{'location': 'NONE', 'stats_list': [], 'contributions': '53 contributions\n        in the last year', 'description': ['diabetesenelperu1\n'], 'url_profile': 'https://github.com/Grimalu1'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '184 contributions\n        in the last year', 'description': ['DiabetesAI\n5 machine learning algorithms to analyze diabetes dataset, optimized hyperparameters with lightgbm\n'], 'url_profile': 'https://github.com/danielshaowers'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/niki-med'}","{'location': 'Hyderabad', 'stats_list': [['2', '          followers'], ['5', '          following'], ['24']], 'contributions': '39 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/KittuPatel'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '12 contributions\n        in the last year', 'description': ['DiabetesReadmission\nThe analyses is done for US Data 130 Hospitals for Diabetes and to figure out the factors contributing to diabetes and measures to prevent it from occurring and the medications that were used for readmissions\nMODELLING\nModelled in Logistic Regression(both in Lasso and Ridge ) methods and got a score of\n0.4946362044975088 – F1-Score\n0.6172491161272776 – Accuracy\n0.6029161142886882 – ROC_AUC Score\nINFERENCES\nLooking at the LIME explainer used on the Logistic Regression Model and checking for the feature importance on the  Ridge model , the factors that are contributing  to the readmissions are Acarbose, number_emergency, number_outpatients, number_diagnosis where as using metformin, insulin for specific cases reduces the chances of the readmission by patients . By dropping features such as diag_3,diag_1 ,diag_2 , A1Cresult   , numprocedures   which have less feature importance we can further tune the model to get a better prediction Rate.\n'], 'url_profile': 'https://github.com/deepsprakash'}","{'location': 'NONE', 'stats_list': [], 'contributions': '3 contributions\n        in the last year', 'description': ['DiabetesPrediction\nProblem Statement:\nUse the machine learning workflow to process and transform Pima Indian data to create a prediction model.\nThis model must predict which people are likely to develop diabetes with 70% or greater accuracy.\nTools used:\nPython 3\nJupyter Notebook\nAnaconda 3\nLibraries used:\nnumpy\npandas\nmatplotlib\nscikit-learn\n'], 'url_profile': 'https://github.com/NilamShete'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '19 contributions\n        in the last year', 'description': ['DiabetesClassifier\n'], 'url_profile': 'https://github.com/Firuz-Juraev'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['6']], 'contributions': '111 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/waqqasansari'}","{'location': 'NONE', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/carloscopy'}","{'location': 'NONE', 'stats_list': [], 'contributions': '7 contributions\n        in the last year', 'description': ['DiabetesPredictor\n'], 'url_profile': 'https://github.com/spareta'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Bank-BoBoz'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['1', '          following'], ['56']], 'contributions': '1 contribution\n        in the last year', 'description': ['diabetes_wip\ndiabetes dataset\n'], 'url_profile': 'https://github.com/TheTradingWarrior'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/pasharuvinskiy79'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['hello-world\nDiabetes project\n'], 'url_profile': 'https://github.com/jenessa216'}","{'location': 'NONE', 'stats_list': [], 'contributions': '2 contributions\n        in the last year', 'description': ['LINEAR-REGRESSION-PROJECT\nDiabetes Dataset\n'], 'url_profile': 'https://github.com/ankit-aggarwal667'}","{'location': 'Karachi Pakistan', 'stats_list': [['6', '          followers'], ['5', '          following'], ['1']], 'contributions': '449 contributions\n        in the last year', 'description': ['Diabetes_Identification\nDiabetes_Identification\n'], 'url_profile': 'https://github.com/MuhammadUsama100'}","{'location': 'NONE', 'stats_list': [], 'contributions': '51 contributions\n        in the last year', 'description': ['早期糖尿病風險預測\n網站鏈結：\nhttps://diabetes-risk-predict.herokuapp.com/\n架構流程：\n\n使用Keras這個TensorFlow高階API去編寫風險預測模型\n使用Flask創建Web API\n部屬至Heroku雲端伺服器\n\n預測模型介紹：\n\n使用MLP架構去編寫模型\n\n\n模型摘要\n\n\n\n\n\n訓練過程\n\n\naccuracy執行結果\n\n\nloss誤差執行結果\n\n\n\n\n模型準確率\n\n\n準確率有92%\n\n\n\n\n'], 'url_profile': 'https://github.com/Lily-Liao'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['21']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/CorySavit'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['1', '          following'], ['1']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/gaurgo'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/proheart'}","{'location': 'India', 'stats_list': [['0', '          followers'], ['0', '          following'], ['24']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesPrediction-\nThe Diabetes prediction using machine learning algorithms.\n'], 'url_profile': 'https://github.com/TheByteKnight'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['6']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Drewmssu'}"
"{'location': 'Israel', 'stats_list': [['8', '          followers'], ['0', '          following'], ['74']], 'contributions': '66 contributions\n        in the last year', 'description': ['Diabetes With Machine Learning\nPredict future glucose level\n'], 'url_profile': 'https://github.com/OrDuan'}","{'location': 'NONE', 'stats_list': [], 'contributions': '43 contributions\n        in the last year', 'description': ['This is a starter template for Ionic projects.\nHow to use this template\nThis template does not work on its own. The shared files for each starter are found in the ionic2-app-base repo.\nTo use this template, either create a new ionic project using the ionic node.js utility, or copy the files from this repository into the Starter App Base.\nWith the Ionic CLI:\nTake the name after ionic2-starter-, and that is the name of the template to be used when using the ionic start command below:\n$ sudo npm install -g ionic cordova\n$ ionic start myBlank blank\nThen, to run it, cd into myBlank and run:\n$ ionic cordova platform add ios\n$ ionic cordova run ios\nSubstitute ios for android if not on a Mac.\n'], 'url_profile': 'https://github.com/jeckryouhk'}","{'location': 'Curitiba Paraná', 'stats_list': [['19', '          followers'], ['44', '          following'], ['227']], 'contributions': '1,123 contributions\n        in the last year', 'description': ['DiabetesApp\nFor running this project you will need to put your Google Vision api key inside gradle.properties\nVisionApiKey = ""<your api key>""\n\n'], 'url_profile': 'https://github.com/FilipeLipan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '5 contributions\n        in the last year', 'description': ['What is CodeIgniter\nCodeIgniter is an Application Development Framework - a toolkit - for people\nwho build web sites using PHP. Its goal is to enable you to develop projects\nmuch faster than you could if you were writing code from scratch, by providing\na rich set of libraries for commonly needed tasks, as well as a simple\ninterface and logical structure to access these libraries. CodeIgniter lets\nyou creatively focus on your project by minimizing the amount of code needed\nfor a given task.\n\nRelease Information\nThis repo contains in-development code for future releases. To download the\nlatest stable release please visit the CodeIgniter Downloads page.\n\nChangelog and New Features\nYou can find a list of all changes for each release in the user\nguide change log.\n\nServer Requirements\nPHP version 5.6 or newer is recommended.\nIt should work on 5.3.7 as well, but we strongly advise you NOT to run\nsuch old versions of PHP, because of potential security and performance\nissues, as well as missing features.\n\nInstallation\nPlease see the installation section\nof the CodeIgniter User Guide.\n\nLicense\nPlease see the license\nagreement.\n\nResources\n\nUser Guide\nLanguage File Translations\nCommunity Forums\nCommunity Wiki\nCommunity Slack Channel\n\nReport security issues to our Security Panel\nor via our page on HackerOne, thank you.\n\nAcknowledgement\nThe CodeIgniter team would like to thank EllisLab, all the\ncontributors to the CodeIgniter project and you, the CodeIgniter user.\n'], 'url_profile': 'https://github.com/z66123210'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['0']], 'contributions': '78 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/datahack007'}","{'location': 'Lagos, Nigeria', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '40 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hamzabell'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['4', '          following'], ['0']], 'contributions': '59 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/tainaracamila'}","{'location': 'Purwokerto, Indonesia', 'stats_list': [['9', '          followers'], ['13', '          following'], ['43']], 'contributions': '243 contributions\n        in the last year', 'description': ['DiabetesManager\nApplication to manage calories so that its users do not exceed the calorie targets that have been determined by nutritionists so that users do not occur in obesity or diabetes.\nWeb Server here\nLink Video\nYoutube\n'], 'url_profile': 'https://github.com/anantyan'}","{'location': 'NONE', 'stats_list': [['14', '          followers'], ['9', '          following'], ['0']], 'contributions': '96 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes prediction is developed for my AI&Data mining project using machine learning to predict if the patient is diabetic or not\n'], 'url_profile': 'https://github.com/NorahAlShaikhMubarak'}","{'location': 'Nigeria', 'stats_list': [['0', '          followers'], ['1', '          following'], ['0']], 'contributions': '20 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes Prediction\n'], 'url_profile': 'https://github.com/Dandignity'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '2 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hanlinxiao01'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '38 contributions\n        in the last year', 'description': ['DiabetesPredictor\n'], 'url_profile': 'https://github.com/GurushanthaDoddamani'}","{'location': 'NONE', 'stats_list': [], 'contributions': '164 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/mefy-Aruna'}","{'location': 'Dhaka, Bangladesh', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '8 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/UtshaDas'}","{'location': 'NONE', 'stats_list': [], 'contributions': '13 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetics Prediction System based on Life Style\nThis project helps in indentifying whether a person has diabetes or not based on their life style.\n\nDiabetics Prediction System Based on Life Style - Video Demonstration Link\n\n'], 'url_profile': 'https://github.com/nivedithav13'}","{'location': 'NONE', 'stats_list': [], 'contributions': '41 contributions\n        in the last year', 'description': [""Diabetes Prediction:\nTable of Content\n\nDemo\nOverview\nMotivation\nInstallation\nDeployement on Heroku\nDirectory Tree\nBug / Feature Request\n\nDemo\nLink: https://diabetes--predictor-api.herokuapp.com/\n\nOverview\nThis is a simple Flask web app which predicts whether a patient is having diabetes or not.\nMotivation\nWhat to do when you are at home due to this pandemic situation? I started to learn Machine Learning model to get most out of it. I came to know mathematics behind all supervised models. Finally it is important to work on application (real world application) to actually make a difference.\nInstallation\nThe Code is written in Python 3.6.10. If you don't have Python installed you can find it here. If you are using a lower version of Python you can upgrade using the pip package, ensuring you have the latest version of pip. To install the required packages and libraries, run this command in the project directory after cloning the repository:\npip install -r requirements.txt\nDeployement on Heroku\nLogin or signup in order to create virtual app. You can either connect your github profile or download ctl to manually deploy this project.\n\nOur next step would be to follow the instruction given on Heroku Documentation to deploy a web app.\nDirectory Tree\n├── static \n│\xa0\xa0 ├── css\n├── template\n│\xa0\xa0 ├── home.html\n├── Procfile\n├── README.md\n├── app.py\n├── diabetes_model.pkl\n├── requirements.txt\n\nTechnologies Used\n\n  \nBug / Feature Request\nIf you find a bug (the website couldn't handle the query and / or gave undesired results), kindly open an issue here by including your search query and the expected result\n""], 'url_profile': 'https://github.com/ananya-menon'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['18']], 'contributions': '6 contributions\n        in the last year', 'description': ['Nightscout-TFT\nNightscout-based BG value display based on a 3$ Wemos D1 Mini + 4$ TFT Display\nRequires the following libraries:\nhttps://github.com/esp8266/Arduino (Follow the README about getting the Additonal Board Manager set up)\nhttps://github.com/bblanchon/ArduinoJson (Version 5.x is required, version 6.x will NOT work!)\nhttps://github.com/adafruit/Adafruit-GFX-Library\nhttps://github.com/PaulStoffregen/Time\nhttps://github.com/Bodmer/JPEGDecoder\nhttps://github.com/Bodmer/TFT_eSPI (after installation, copy my User_Setup.h to libraries/TFT_eSPI)\nhttps://github.com/esp8266/arduino-esp8266fs-plugin SPIFFS for Arduino IDE Plugin, follow the instructions on the readme\n\nWiring diagram for the screen is included. Wire it up, install the libraries above, copy the User_Setup.h, set up SPIFFS plugin, load the sketch, use SPIFFS plugin to upload Sketch data, edit your SSID/Password/Nightscout website (both heroku and azure should work), compile and flash.\nA stl file for a case is also included. Print, stick your circuitry into it, align with the gap for the screen, use hot glue to keep in place, or epoxy.\nNote that I am not a coder. I pieced this software together from a ton of code examples, experiments, and possibly sheer luck. It\'s ugly, it\'s likely overcomplicated, but it does the trick.\nLinks to the parts I used\nAliexpress link to screen\nAliexpress link to Wemos D1 Mini\nThe sketch is roughly based on this code: https://github.com/robjohnc/nightscout_wemos_epaper, although, due to the different nature of the TFT display, I had to abandon all but the json decoding part. The TFT display shuts down when the ESP8266 is in deep sleep mode, so it\'s unfortunately not used and will continuously drain power. Still, it runs ~12h on a 3000 mAh power bank, or just power it from an USB power supply/charger.\nFunctions\n\nThe data is loaded from nightscout every 45 seconds. The clock uses the clock data from NS too, so it\'s also only updated every 45 seconds.\nThe ""Last Data"" text will turn red if the data is more than 15 minutes old.\nThe BG value will change to yellow if high, orange if low, and red if critical low. The thresholds can be set in the sketch.\nThe User_Config.h is preconfigured for the above display.\n\nTo do:\n\nI\'m considering implementing support for a single WS2812b LED to show warnings in matching color.\nMay or may not look into implementing audible alarms, although frankly, I believe they\'d get annoying fast.\n\n'], 'url_profile': 'https://github.com/Arakon'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['21']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/CorySavit'}","{'location': 'NONE', 'stats_list': [['3', '          followers'], ['1', '          following'], ['1']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/gaurgo'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/proheart'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zehnp1'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Deploy scoring model\nThis package illustrates how to deploy a model for remote scoring/prediction.\n# Install in R\nlibrary(devtools)\ninstall_github(""opencpu/tvscore"")\n\n# Score in R\nlibrary(tvscore)\nmydata <- data.frame(\n  age=c(24, 54, 32, 75),\n  marital=c(""MARRIED"", ""DIVORCED"", ""WIDOWED"", ""NEVER MARRIED"")\n)\ntv(input = mydata)\n\n# Score remotely\ncurl https://public.opencpu.org/ocpu/github/opencpu/tvscore/R/tv/json \\\n  -H ""Content-Type: application/json"" \\\n  -d \'{""input"" : [ {""age"":26, ""marital"" : ""MARRIED""}, {""age"":41, ""marital"":""DIVORCED""} ]}\'\n\nThe model is included in the data directory of the package, and was created\nusing the createmodel.R script. It predicts hours per day of TV watching from age and marital status. The model looks like this:\n\n'], 'url_profile': 'https://github.com/ahanaroy22'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vsCodeGit'}","{'location': 'Long Island, NY, USA', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesEssentials\nThis is an app that helps you keep track of blood readings and will help you prepare a report for your endocronologist\n'], 'url_profile': 'https://github.com/gibbloggen'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Anushka3174'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/fahimtaibahmed'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/kinyanjui254'}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['2', '          following'], ['10']], 'contributions': '32 contributions\n        in the last year', 'description': ['DiabetesNHANES\nA repository for work exploring effect modification in Diabetics from the NHANES 2001-2006 data\n'], 'url_profile': 'https://github.com/joshuawlambert'}","{'location': 'Malaysia', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '49 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hafizamer'}","{'location': 'Ohio, United States', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '9 contributions\n        in the last year', 'description': ['A crossplatform program used to store, and calculate glucose numbers, carbohydrate intake, and the insulin dosages necessary to counteract both.\nCurrently offers basic functionality, but the plan is to be able to use this on Windows, Android, iOS, and web interfaces to help manage your diabetes.\n'], 'url_profile': 'https://github.com/ethan-lefeb'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['3', '          following'], ['5']], 'contributions': '46 contributions\n        in the last year', 'description': ['DiabetesReadmittion\nhttps://www.kaggle.com/c/diabetes-readmission/ rank 4\nremapek@gmail.com\n'], 'url_profile': 'https://github.com/ronaldexim'}","{'location': 'United States', 'stats_list': [['10', '          followers'], ['9', '          following'], ['9']], 'contributions': '114 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/chibueze-oguejiofor'}","{'location': 'Auckland, New Zealand', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '64 contributions\n        in the last year', 'description': ['Type-II Diabetes Prediction Model\nThis study will provide validated T2D prediction models, relevant in contemporary New Zealand’s primary care.\nCore Data\nSee Wiki for details regarding the core dataset including variable descriptions.\nThe core dataset is a PREDICT population from 2006 - 2018. Individuals are eligeable if they are diabetes-free at time of PREDICT risk assessment and where an index HbA1c value is avaiable.\nInclusion does not limit the number of prior PREDICT assessments or prior CVD. Where eligeability is met at multiple PREDICT assessments, the earliest PREDICT record is used as baseline.\nInformation from the National Health Collection are linked to provide demographic, hospitalised history, hospitalised outcomes, death-specific outcomes, and baseline treatment.\nTo ensure consistency, the exclusion criteria (see Wiki) have been applied in data management.\nExclude IF\n\nPrior admission for diabetes; OR\nTreated with antidiabetic drugs in last 6 months; OR\nNoted as diabetic in PREDICT; OR\nNon-existing HbA1c test in prior 2 years; OR\nAny HbA1c in prior 2 years >= 50mmol/mol\nExclusion critiera met within 30 days of study index date\nQC Conflicts\n\nRoll to next\nExamine each visit and apply exclusion criteria. Continue with each nth visit to find those who could meet the inclusion criteria in subsequent visits.\n\nStarting with 564180 participants\n371362 met criteria after first visit\n12191 meet criteria in subsequent visit\n\nFurther Removals\n\nRemove out of age Limits 25-74: -14806\nRemove non-avaliable HbA1c within +30 days of Predict: -75764\nRemove dispensing records 1 month beyond DOD :-107\nRemove people with renal dialysis & transplantation: -826\nRemove exclusions detected within 30 days of study index: -179\nTotal Remaining = 277075\n\n'], 'url_profile': 'https://github.com/VIEW2020'}","{'location': 'NONE', 'stats_list': [], 'contributions': '9 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes Prediction\n'], 'url_profile': 'https://github.com/sangita-nag'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['6']], 'contributions': '68 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/RemediosR'}","{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/tabraizyaseen'}","{'location': 'Toronto ', 'stats_list': [['4', '          followers'], ['5', '          following'], ['0']], 'contributions': '62 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/anujkolekar'}","{'location': 'Edison, New Jersey', 'stats_list': [['4', '          followers'], ['5', '          following'], ['0']], 'contributions': '178 contributions\n        in the last year', 'description': [""DiabetesDetection\nThis is an application used to detect whether a user has diabetes given certain parameters and locate the nearest doctor.\nFeatures\n\nPredicts Whether User May Have Diabetes: Uses a custom machine learning model which has been trained by using over 10000 data points of users with diabetes and their pre-exisitng conditions. This machine learning model has been trained to an accuracy of 99.6% on microsoft azure's machine learning service.\nRecomends Nearest Docter: Using Google Maps API and Better Doctors API, this application recommends the highest rated doctors within the span of 20 miles of your current locaitonl\n\nTech Stack\n\nApp Development: Xamerin C#\nLocation and Maps: Google Maps API\nDiabetic Detection ML model: Azure Machine Learning Service\n\n""], 'url_profile': 'https://github.com/jeevanantham2002'}","{'location': 'NONE', 'stats_list': [], 'contributions': '28 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/GabrielleZeti'}","{'location': 'Netherlands', 'stats_list': [], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/koendamme'}"
"{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '64 contributions\n        in the last year', 'description': ['diabetesPredictionknn\n'], 'url_profile': 'https://github.com/shubhamrana30'}","{'location': 'Northern Virginia', 'stats_list': [['5', '          followers'], ['8', '          following'], ['1']], 'contributions': '99 contributions\n        in the last year', 'description': ['FinalProject\nFinal Project for DS 4001\n'], 'url_profile': 'https://github.com/jasminedogu'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/markcronin1978'}","{'location': 'San Francisco Bay Area', 'stats_list': [['7', '          followers'], ['0', '          following'], ['2']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesPredictor\nRepository for CS 221 Type II Diabetes prediction algorithm\nIntroduction\nOver 25 million people, or nearly 8.3% of the entire United States population, have diabetes. Diabetes is also associated with a wide range of complications from heart disease and stroke to blindness and kidney disease. Predicting who has diabetes will lead to a better understanding of these complications and the common comorbidities that diabetics suffer. Based on the Kaggle Practice Fusion Diabetes Classification challenge, we aim to build a model to determine who has a diabetes diagnosis given a patient’s set of electronic health records. From the dataset provided by the challenge, we have full, standardized medical records of patients including allergy information, past diagnoses, immunization records, smoking status, etc. The expected output is a simple classification of whether a patient has diabetes.\nUnlike the original competition, which assumes that the algorithm will have access to the full medical record of patients and that patients all have a standard database (e.g., exact same tests taken, same recorded variables) , we are interested in creating a model that assumes we only know part of the medical record as the input. For instance, if a patient has not undergone the full battery of tests as all the patients in the original training dataset had, or if we are missing information from a patient’s medical record, we want to still be able to classify and output whether the patient has diabetes based on the limited amount of information. In our project, the evaluation metric is the false positive and false negative rates, which when combined gives us the total error rate.\n'], 'url_profile': 'https://github.com/haoyio'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/zehnp1'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['Deploy scoring model\nThis package illustrates how to deploy a model for remote scoring/prediction.\n# Install in R\nlibrary(devtools)\ninstall_github(""opencpu/tvscore"")\n\n# Score in R\nlibrary(tvscore)\nmydata <- data.frame(\n  age=c(24, 54, 32, 75),\n  marital=c(""MARRIED"", ""DIVORCED"", ""WIDOWED"", ""NEVER MARRIED"")\n)\ntv(input = mydata)\n\n# Score remotely\ncurl https://public.opencpu.org/ocpu/github/opencpu/tvscore/R/tv/json \\\n  -H ""Content-Type: application/json"" \\\n  -d \'{""input"" : [ {""age"":26, ""marital"" : ""MARRIED""}, {""age"":41, ""marital"":""DIVORCED""} ]}\'\n\nThe model is included in the data directory of the package, and was created\nusing the createmodel.R script. It predicts hours per day of TV watching from age and marital status. The model looks like this:\n\n'], 'url_profile': 'https://github.com/ahanaroy22'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vsCodeGit'}","{'location': 'Long Island, NY, USA', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesEssentials\nThis is an app that helps you keep track of blood readings and will help you prepare a report for your endocronologist\n'], 'url_profile': 'https://github.com/gibbloggen'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['1']], 'contributions': '3 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Anushka3174'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/fahimtaibahmed'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '9 contributions\n        in the last year', 'description': ['diabetesPresc\nPrescriptive actions in an low sample observational scenario.\nThe main R code is located in the file main.R, which sources several other files.\nBasically most of the files contain one to three functions on a specific topic.\nThe eval_impact_structure.R file contains the code where we test different sample sizes and compare policy performances on simulated data.\n'], 'url_profile': 'https://github.com/FredericLoge'}","{'location': 'San Francisco, CA', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '77 contributions\n        in the last year', 'description': ['DiabetesPrediction\nThis projects builds classification machine learning models in Python for diabetes prediction using LogisticRegression, SVM, RandomForest classification algorithms. Besides, GridSearchCV was applied to find the best hyperparameters for the three models. Model performances are measured via confusion matrix, precision, recall, ROC AUC.\n'], 'url_profile': 'https://github.com/raynaji'}","{'location': 'Wonju, Korea', 'stats_list': [['4', '          followers'], ['4', '          following'], ['0']], 'contributions': '316 contributions\n        in the last year', 'description': ['DiabetesManager\n'], 'url_profile': 'https://github.com/oune'}","{'location': 'South Korea', 'stats_list': [['5', '          followers'], ['10', '          following'], ['7']], 'contributions': '98 contributions\n        in the last year', 'description': ['Diabetes Prediction\nFiruz Juraev \nDiabetes Prediction (Logistic Regression)\nIt predicts whether there is diabetes or not with accuracy 78%. I used logistic regrission because there are only two output and Logistic Regrission prefecly matches for my purpose.\nLogistic Regrission (sigmoid):\n\n\nDiabetes Prediction (Linear Regression)\nThere, weights and bias were found using Gradient Descent optimization algorithm. At first they were selected randomly (including learning rate), then they are optimized using optimization algorithm for minimizing the cost function.\n\ncommonlounge.com\n'], 'url_profile': 'https://github.com/Firuz-JuraevML'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '25 contributions\n        in the last year', 'description': ['DiabetesPredictor\nProject Of Principal of Data Science Course\n'], 'url_profile': 'https://github.com/RobinAhmedRobi'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '29 contributions\n        in the last year', 'description': ['DiabetesAnalytics\nDisclaimer\nAll information, thought, and code described here is intended for informational and educational purposes only\n. DiabetesAnalytics currently makes no attempt at HIPAA privacy compliance. Use of code from github.com is without warranty or support of any kind.\nUse this file at your own risk, and do not use the information or code to make medical decisions.\nObjective\nThis file was developed to help people administrate the Diabetes type 1 using the xDrip data.\nDownload Power BI Desktop\n\nPrepare to download Power BI Desktop !\nDownload from site https://www.microsoft.com/pt-br/download/details.aspx?id=58494  OR Download from Windows Store https://www.microsoft.com/en-us/store/apps/windows\n\nExport Data From xDrip\nExport CSV file from xDrip to use in Power BI\n\n\nConfigure to your data source\n\nInstall Power BI Desktop\nDownload the file on this git DiabetesAnalytics.pbix\nIn the tab ""Home"" click on ""Transform Data""\n\nNow we need to configure the Glicose Target\n\nSelect in ""Queries"" on the left side the option with name ""Faixas""\nClick on the button to open the window\nDefine your target here\nAfter that select in ""Queries"" on the left side the option with name ""Controle Glicemico""\n\n\nThis step we will configure the data source to use your xDrip file\n\nClick the button to open the main window\nSelect the CSV file that you export from xDrip\nClick the button on the upper left corner ""Close And Apply""\n\n\n'], 'url_profile': 'https://github.com/rdurbano'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['4', '          following'], ['0']], 'contributions': '149 contributions\n        in the last year', 'description': ['DiabetesAnalysis\n'], 'url_profile': 'https://github.com/vsahasrabudhe96'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '64 contributions\n        in the last year', 'description': ['diabetesPredictionknn\n'], 'url_profile': 'https://github.com/shubhamrana30'}","{'location': 'Northern Virginia', 'stats_list': [['5', '          followers'], ['8', '          following'], ['1']], 'contributions': '99 contributions\n        in the last year', 'description': ['FinalProject\nFinal Project for DS 4001\n'], 'url_profile': 'https://github.com/jasminedogu'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '295 contributions\n        in the last year', 'description': ['DiabetesManagement\nDexcom.py allows you to convert the XML exported from Dexcom Studio into a CSV file\nA Pandas DataFrame is then created to allow the user to manipulate their blood glucose data\nThe glucose values and timestamps are added to an SQLite database file for storage and later use.\n'], 'url_profile': 'https://github.com/abowden1'}"
"{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesConnect\nFinal year project\n'], 'url_profile': 'https://github.com/diabetesconnect'}","{'location': 'NONE', 'stats_list': [['5', '          followers'], ['5', '          following'], ['1']], 'contributions': '38 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/IsmaHaro'}","{'location': 'NONE', 'stats_list': [], 'contributions': '6 contributions\n        in the last year', 'description': ['DiabetesProject\n'], 'url_profile': 'https://github.com/crowley100'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/ayanyev'}","{'location': 'Israel', 'stats_list': [['8', '          followers'], ['0', '          following'], ['74']], 'contributions': '66 contributions\n        in the last year', 'description': ['Diabetes With Machine Learning\nPredict future glucose level\n'], 'url_profile': 'https://github.com/OrDuan'}","{'location': 'NONE', 'stats_list': [], 'contributions': '43 contributions\n        in the last year', 'description': ['This is a starter template for Ionic projects.\nHow to use this template\nThis template does not work on its own. The shared files for each starter are found in the ionic2-app-base repo.\nTo use this template, either create a new ionic project using the ionic node.js utility, or copy the files from this repository into the Starter App Base.\nWith the Ionic CLI:\nTake the name after ionic2-starter-, and that is the name of the template to be used when using the ionic start command below:\n$ sudo npm install -g ionic cordova\n$ ionic start myBlank blank\nThen, to run it, cd into myBlank and run:\n$ ionic cordova platform add ios\n$ ionic cordova run ios\nSubstitute ios for android if not on a Mac.\n'], 'url_profile': 'https://github.com/jeckryouhk'}","{'location': 'Curitiba Paraná', 'stats_list': [['19', '          followers'], ['44', '          following'], ['227']], 'contributions': '1,123 contributions\n        in the last year', 'description': ['DiabetesApp\nFor running this project you will need to put your Google Vision api key inside gradle.properties\nVisionApiKey = ""<your api key>""\n\n'], 'url_profile': 'https://github.com/FilipeLipan'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['3']], 'contributions': '5 contributions\n        in the last year', 'description': ['What is CodeIgniter\nCodeIgniter is an Application Development Framework - a toolkit - for people\nwho build web sites using PHP. Its goal is to enable you to develop projects\nmuch faster than you could if you were writing code from scratch, by providing\na rich set of libraries for commonly needed tasks, as well as a simple\ninterface and logical structure to access these libraries. CodeIgniter lets\nyou creatively focus on your project by minimizing the amount of code needed\nfor a given task.\n\nRelease Information\nThis repo contains in-development code for future releases. To download the\nlatest stable release please visit the CodeIgniter Downloads page.\n\nChangelog and New Features\nYou can find a list of all changes for each release in the user\nguide change log.\n\nServer Requirements\nPHP version 5.6 or newer is recommended.\nIt should work on 5.3.7 as well, but we strongly advise you NOT to run\nsuch old versions of PHP, because of potential security and performance\nissues, as well as missing features.\n\nInstallation\nPlease see the installation section\nof the CodeIgniter User Guide.\n\nLicense\nPlease see the license\nagreement.\n\nResources\n\nUser Guide\nLanguage File Translations\nCommunity Forums\nCommunity Wiki\nCommunity Slack Channel\n\nReport security issues to our Security Panel\nor via our page on HackerOne, thank you.\n\nAcknowledgement\nThe CodeIgniter team would like to thank EllisLab, all the\ncontributors to the CodeIgniter project and you, the CodeIgniter user.\n'], 'url_profile': 'https://github.com/z66123210'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['3', '          following'], ['0']], 'contributions': '78 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/datahack007'}","{'location': 'Lagos, Nigeria', 'stats_list': [['2', '          followers'], ['1', '          following'], ['0']], 'contributions': '40 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/hamzabell'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '9 contributions\n        in the last year', 'description': ['diabetesPresc\nPrescriptive actions in an low sample observational scenario.\nThe main R code is located in the file main.R, which sources several other files.\nBasically most of the files contain one to three functions on a specific topic.\nThe eval_impact_structure.R file contains the code where we test different sample sizes and compare policy performances on simulated data.\n'], 'url_profile': 'https://github.com/FredericLoge'}","{'location': 'San Francisco, CA', 'stats_list': [['0', '          followers'], ['2', '          following'], ['0']], 'contributions': '77 contributions\n        in the last year', 'description': ['DiabetesPrediction\nThis projects builds classification machine learning models in Python for diabetes prediction using LogisticRegression, SVM, RandomForest classification algorithms. Besides, GridSearchCV was applied to find the best hyperparameters for the three models. Model performances are measured via confusion matrix, precision, recall, ROC AUC.\n'], 'url_profile': 'https://github.com/raynaji'}","{'location': 'Wonju, Korea', 'stats_list': [['4', '          followers'], ['4', '          following'], ['0']], 'contributions': '316 contributions\n        in the last year', 'description': ['DiabetesManager\n'], 'url_profile': 'https://github.com/oune'}","{'location': 'South Korea', 'stats_list': [['5', '          followers'], ['10', '          following'], ['7']], 'contributions': '98 contributions\n        in the last year', 'description': ['Diabetes Prediction\nFiruz Juraev \nDiabetes Prediction (Logistic Regression)\nIt predicts whether there is diabetes or not with accuracy 78%. I used logistic regrission because there are only two output and Logistic Regrission prefecly matches for my purpose.\nLogistic Regrission (sigmoid):\n\n\nDiabetes Prediction (Linear Regression)\nThere, weights and bias were found using Gradient Descent optimization algorithm. At first they were selected randomly (including learning rate), then they are optimized using optimization algorithm for minimizing the cost function.\n\ncommonlounge.com\n'], 'url_profile': 'https://github.com/Firuz-JuraevML'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '64 contributions\n        in the last year', 'description': ['diabetesPredictionknn\n'], 'url_profile': 'https://github.com/shubhamrana30'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['4', '          following'], ['0']], 'contributions': '149 contributions\n        in the last year', 'description': ['DiabetesAnalysis\n'], 'url_profile': 'https://github.com/vsahasrabudhe96'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['1', '          following'], ['1']], 'contributions': '25 contributions\n        in the last year', 'description': ['DiabetesPredictor\nProject Of Principal of Data Science Course\n'], 'url_profile': 'https://github.com/RobinAhmedRobi'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['1']], 'contributions': '29 contributions\n        in the last year', 'description': ['DiabetesAnalytics\nDisclaimer\nAll information, thought, and code described here is intended for informational and educational purposes only\n. DiabetesAnalytics currently makes no attempt at HIPAA privacy compliance. Use of code from github.com is without warranty or support of any kind.\nUse this file at your own risk, and do not use the information or code to make medical decisions.\nObjective\nThis file was developed to help people administrate the Diabetes type 1 using the xDrip data.\nDownload Power BI Desktop\n\nPrepare to download Power BI Desktop !\nDownload from site https://www.microsoft.com/pt-br/download/details.aspx?id=58494  OR Download from Windows Store https://www.microsoft.com/en-us/store/apps/windows\n\nExport Data From xDrip\nExport CSV file from xDrip to use in Power BI\n\n\nConfigure to your data source\n\nInstall Power BI Desktop\nDownload the file on this git DiabetesAnalytics.pbix\nIn the tab ""Home"" click on ""Transform Data""\n\nNow we need to configure the Glicose Target\n\nSelect in ""Queries"" on the left side the option with name ""Faixas""\nClick on the button to open the window\nDefine your target here\nAfter that select in ""Queries"" on the left side the option with name ""Controle Glicemico""\n\n\nThis step we will configure the data source to use your xDrip file\n\nClick the button to open the main window\nSelect the CSV file that you export from xDrip\nClick the button on the upper left corner ""Close And Apply""\n\n\n'], 'url_profile': 'https://github.com/rdurbano'}","{'location': 'Northern Virginia', 'stats_list': [['5', '          followers'], ['8', '          following'], ['1']], 'contributions': '99 contributions\n        in the last year', 'description': ['FinalProject\nFinal Project for DS 4001\n'], 'url_profile': 'https://github.com/jasminedogu'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['diabetesDiary\n'], 'url_profile': 'https://github.com/lalitisbhatia'}"
"{'location': 'London', 'stats_list': [['3', '          followers'], ['1', '          following'], ['8']], 'contributions': '1,401 contributions\n        in the last year', 'description': ['DiabetesJournal\nDiabetic people of type 1 have to register their Glycaemia value at least 4 times per day. Aim of this Android application is to substitute the outdated paper based journal.\nPatients can easily\n\nregister their levels of Glycaemia and the Insulin.\ncheck Glycaemia value daily and monthly average of Insulin thanks to two charts\nextracting data in a PDF file\nset up an emergency phone number\n\n\n'], 'url_profile': 'https://github.com/fnobilia'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['2', '          following'], ['0']], 'contributions': '0 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/umapornPoy'}","{'location': 'Barcelona', 'stats_list': [['7', '          followers'], ['9', '          following'], ['3']], 'contributions': '4 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/vittorio-togliatti'}","{'location': 'NONE', 'stats_list': [], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesViz\nTool to educate and calculate your risk for Diabetes\n'], 'url_profile': 'https://github.com/warner1'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '1 contribution\n        in the last year', 'description': ['DiabetesAnalysis\n'], 'url_profile': 'https://github.com/KaushikSingh'}","{'location': 'La Crosse, WI', 'stats_list': [['2', '          followers'], ['0', '          following'], ['4']], 'contributions': '0 contributions\n        in the last year', 'description': ['DiabetesDiagnostics\nMachine learning project with Dr. Chen at UWL -- computer vision for diagnosing diabetes via tongue images\nImplementing various CNN models, data augmentation, etc.\n'], 'url_profile': 'https://github.com/MitchMaegaard'}","{'location': 'Indore, MP, India', 'stats_list': [['7', '          followers'], ['7', '          following'], ['14']], 'contributions': '6 contributions\n        in the last year', 'description': ['DiabetesPrediction\nA simple Machine Learning application that predicts if a person has Diabetes by finding Important attributes and finding useless features.\nThe data set was downloaded from Kaggle.\n'], 'url_profile': 'https://github.com/gagan1510'}","{'location': 'NONE', 'stats_list': [['4', '          followers'], ['13', '          following'], ['47']], 'contributions': '46 contributions\n        in the last year', 'description': ['DiabetesPredictor \nDiabetesPredictor is a web app to predict whether a user has diabetes or not based on their inputs.\nOverview\nI have used Logistic Regression algorithm in this project to train the model - train.py. Here, I have used pickle to save the trained model which is then used in main.py to predict the result.\nDependencies\n\nNumpy\nPandas\nSklearn\nFlask\n\nUsage\nRun this command : python3 main.py\nTo view the data analysis open this jupyter notebook\n'], 'url_profile': 'https://github.com/snaily16'}","{'location': 'chennai,TN,India', 'stats_list': [['3', '          followers'], ['5', '          following'], ['3']], 'contributions': '10 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/sarabesh'}","{'location': 'Brasília, Brazil', 'stats_list': [['4', '          followers'], ['4', '          following'], ['3']], 'contributions': '129 contributions\n        in the last year', 'description': ['README\nProjeto diabetesLearning!\n'], 'url_profile': 'https://github.com/Bunoviske'}"
"{'location': 'NONE', 'stats_list': [['1', '          follower'], ['1', '          following'], ['0']], 'contributions': '1 contribution\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/Negoita-Ioana'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['0', '          following'], ['0']], 'contributions': '4 contributions\n        in the last year', 'description': ['Diabetes2\n'], 'url_profile': 'https://github.com/thienlong95z'}","{'location': 'NONE', 'stats_list': [['2', '          followers'], ['0', '          following'], ['0']], 'contributions': '67 contributions\n        in the last year', 'description': ['DiabetesPredict\nThis project is based on machine learning for predicting diabetes of the people. Using the data in csv format and several machine learning\nalgorithms, I chose the best algorithm and trained the model.\nAfter making model, I deployed it using flask.\nSo you can use this to predict whether you get diabetes or not.\n'], 'url_profile': 'https://github.com/fortitudeman'}","{'location': 'Delhi', 'stats_list': [['16', '          followers'], ['15', '          following'], ['10']], 'contributions': '219 contributions\n        in the last year', 'description': ['DiabetesDataset\nDiabetes Dataset using logistic regression\n'], 'url_profile': 'https://github.com/manavgakhar'}","{'location': 'NONE', 'stats_list': [], 'contributions': '19 contributions\n        in the last year', 'description': ['Diabetes2\n'], 'url_profile': 'https://github.com/Procesos-03'}","{'location': 'Nairobi, Kenya', 'stats_list': [['2', '          followers'], ['1', '          following'], ['1']], 'contributions': '71 contributions\n        in the last year', 'description': ['DiabetesPrediction\nDiabetes Prediction Challenge\n'], 'url_profile': 'https://github.com/fonyango'}","{'location': 'Toronto', 'stats_list': [['0', '          followers'], ['1', '          following'], ['2']], 'contributions': '60 contributions\n        in the last year', 'description': ['Diabetes Prediction\nPython Flask APIs, Anaconda Environment\nSummary: Data Analytic Application which can predict Diabetes based on various variables\nFramework and Libraries:\n\nFlask\nPanda, Matplotlib, Numpy, Pydot, Decision Tree, Logistic Regression\n\nAlgorithms Model: Decision Tree and Logistic Regression\nDataset for training model:\n\nVariables\n\nMain Screen\n\nData Vizualization\n\n'], 'url_profile': 'https://github.com/kelvintrinh174'}","{'location': 'NONE', 'stats_list': [['1', '          follower'], ['2', '          following'], ['11']], 'contributions': '589 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/MotorMike'}","{'location': 'NONE', 'stats_list': [], 'contributions': '5 contributions\n        in the last year', 'description': ['NONE'], 'url_profile': 'https://github.com/SulthonAlif'}","{'location': 'NONE', 'stats_list': [['0', '          followers'], ['0', '          following'], ['2']], 'contributions': '45 contributions\n        in the last year', 'description': [""DiabetesDiary\nMain (entry) application for Diabetes Diary project.\nThis was my senior project, it's a WPF application written in C# on Visual Studio.\n""], 'url_profile': 'https://github.com/davidhalek'}"
